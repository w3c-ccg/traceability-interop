{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2a0fa065-b56b-42c4-9d42-51cc484b8fcd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6fe89365-e05b-4565-a60d-4309bf3380e5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ca690196-3d91-4193-9d32-0046e2cff1c1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ba295f74-7240-470d-9e8c-a4a9fd7e903a"
                }
              }
            ]
          },
          {
            "id": "8b3bd81e-1af6-4f00-9b6a-10be20c00343",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1769f64a-360d-4231-a24e-942e658afd25",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cd2ed731-2aec-48b7-8990-753ca37b2048"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e8e7cbe7-816c-47a7-94e7-db93c7d53557",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "911d4c82-2343-48e4-9d2d-ac42624fb289",
            "name": "Positive Testing",
            "item": [
              {
                "id": "030f8502-7975-443a-b07f-ea1440aa8aa5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fef264e-f5c2-4791-94bf-7ab9d9d752a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf20857c-845a-4c0f-9d12-43ad53750eb6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d2c200b4-37c5-40eb-915e-f12c31eb4463",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "243f39db-7071-49d9-a21b-84f6b1febf58"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fa483881-0889-457f-93b1-1f85105fefa9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7714af6e-ffad-4e55-a874-861025ba12ea"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0916e7df-c74e-4cd2-8474-68d403f1a09d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c2e49fbc-0d04-48a0-8340-edcc4143f7fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a98c676f-0cc5-44a4-845d-03d76e8732e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04ba7b43-5cdb-494b-a127-1c508d96c2a4"
            }
          }
        ]
      },
      {
        "id": "6a8665c0-9bdc-449c-9adf-33bd15c95964",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "dc47de76-bab6-4b2e-9d86-5ae52b0508da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ad72739-250e-4490-905c-55394141e770",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f256348-a494-4ec3-952d-15744d358f91",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9c0ab3-5ac9-4ba2-b539-ea4293ed4479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0045cb5b-6aef-4502-8405-bf188842f645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff852749-e67e-42cc-9041-cfc3e77ff713",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d998beb-c187-4877-8a61-45c550e380c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d8bd5d6-b2d0-4b57-937a-a978f0934a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba9c73c-e54b-4884-8a02-504f2a614095",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c95a346-df66-4700-8ca0-7b29f6cc073c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37ccd8dc-24fe-442f-a418-14a5f43a9985"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0c221f44-b245-48a4-b7cf-afaf95eb86b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6db2517b-fff3-43a3-a452-8ea4430674f0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f6de86-ee64-4119-85f6-b5135868ebdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "852129e7-7c66-4781-a720-919bdb2306d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9851d0-132a-473c-8370-d4aa1d654516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4560de5-fb04-4ceb-b96b-259c302deef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182df1c5-8f97-45d8-9f70-25da5e6ee352",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c54d68-ec47-4ac2-b40a-b294968902ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07edf42e-1c56-4ca4-ac93-4d068fe82a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e855d0-9c28-44bc-be26-be5af79cf634",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "119d5b40-6f15-40f4-9431-648205a98686"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "22ba9491-f49e-48ac-b7df-808daed7041f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "027142a4-7c15-4202-b52b-7250e4aa6cdd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f2e7ca9-3119-48da-a0e6-d86050458b6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "91c5ab01-8830-4012-abb4-4a510dd42096"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "997c7db0-93a4-4aab-809b-3b56030e4de3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e558ba2e-d1c7-46b9-8d5b-b0cb18efa87d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddc0730c-1a3c-4536-843d-0c5b3dfea74e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3ce4f81-4125-4776-bbd5-31326cefb085"
            }
          }
        ]
      },
      {
        "id": "203ca2dd-1a15-4118-9fa2-02fb84a4f5db",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ea2902b6-6072-46bb-8295-b15fcca3815d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e8e2b18-bdac-4881-aab2-3f97e67395e9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "78c459da-1875-484d-9f15-d0251c849068",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfadaa9-a66a-480b-945d-8a5d2385e80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7c06e0-9774-4470-850a-d2a935cca2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0d97fe-a793-4c50-b8a1-3c5ab48b0e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7cae4a0-47a7-4736-b553-65d98fb7d037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8098c009-e3dd-4dfd-8616-d6880833d368",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77744a17-0442-45ff-b468-9145ea0eb422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2071678-5fb0-4681-ad5e-7883792dbe01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6db220-1bd5-4e4c-ab01-20b66259e7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fafd21b9-0fe4-41f0-bbd6-60d353b789cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833e1b7e-0dca-436b-8a1e-71963d4c0c9e",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c31db9-24a0-4c9b-b7d0-4e94370c85d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3a61eb-19da-47ce-8db5-fa97c20867aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9247e1-6964-4fc4-8469-3b591c62963b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eefbb8fa-1aa5-4370-9d04-66d882822dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4556ad7f-5927-47a0-b86e-0e9eb8b3fcf4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae7ca75-6e41-4da2-b30e-71c8cff90e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b862dd58-9106-43ed-ac55-781e3b9a450c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70096a78-1d03-4622-83b4-a0b182a6ed7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b766235-b216-4e1c-be04-19332e75674d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9848f45f-ec0c-4164-8b14-60aa657e2695",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64ffd1e-f2ea-41db-800c-d64839ea7130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485bc81c-dacd-4ce1-9e9d-d1ac3b97124e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d8427d-b930-4540-89c6-bd479b6f5c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a235cfd3-b119-451f-a7c3-9d75d2380eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc62088e-801c-4b35-8990-de37c29fb4d3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c3d15a-862c-4628-a5fb-e1009c21acfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b00e26-7e3b-4207-92dd-3c658b26cb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c723e5b-132c-4b50-8ac2-07844506813a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e74453d3-e32d-415d-bbc3-081e71a0fc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24a1297-a6db-4726-b96a-90f7dc4ac77b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bdeb30-735e-40f3-878b-6a2f3889f583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86bddd25-9ded-49fb-963b-320638b8732e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fe06d2-5d1a-4c8c-85d6-05b0ecc393d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62a467d5-e75a-4c82-95c4-e5ff478c1755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdc5665-0183-4050-8f72-51145508c605",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07c7595-768b-4718-bae8-e70fa819c2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b225ef43-a1c2-4093-a324-81b5353325d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d236d0a0-2bcc-4a67-869e-22ba9a006a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "585a5643-fe02-46aa-b084-e5d923ceab67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60b75f8-c791-46e9-9095-ca51ec88dcc8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8f01d4-2695-49ce-b203-4dd712a7bed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc60727-5322-4b87-b24b-8eebff98850c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8167d4f2-b544-4e71-a50d-1239f7db98a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b7f9e53-0263-41e9-8652-93d4ad56b234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24874431-6222-4467-8f59-423dd75071a7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8daac5e-11a3-4468-aac0-089bdddcd582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45837f4-4abe-4577-a6e8-e37cded3dac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787d4f67-aa29-411c-bb35-aba172a16fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1266d93-e738-4b36-bfc8-26f80e94d75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5f3992-6cb0-44eb-b9a0-7bfa93a791e3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387d3436-fb1d-446b-a237-5adc0bbc8e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0581dff-38ca-4d65-89bb-67a13898c6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47364d5-ae12-4c9e-b881-fbe2951877f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf92d3b2-3197-43a4-98c3-cdc5ad6a5fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc8b73b-c8f6-45ef-8b87-6da880d48419",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a614ead-afff-43a6-8b2f-10f966950ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50fa6920-96ca-4dd9-acb0-804a4d2af5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61923ae7-e3e1-4409-998c-b4fee02d72c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ca2b7ab-1d35-4562-88ed-fdc5eaee89e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9a39e4-ad87-4682-8e93-b5848df623bd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c232e1a-3a39-43ec-96ab-e100bd68e5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb9ebb1c-8ea6-48cf-ab7f-afa9dfd78365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b65d3e-26aa-425e-b5ae-a88bf4e04350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbf87081-82c1-4669-94e7-edb05a6cef42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f355c172-26a7-42fb-829c-c9098cbb6072",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a06e0b6-f752-4bf3-b2b6-2cd5e63aeecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff6289f2-9ff0-41d5-932f-880851820bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161d784c-3491-42a5-a262-537b6c9eede8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd76cc2-cb76-41d1-9781-8f5e565ccae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8b2331-e13c-4644-9f4c-83e49ceeb927",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159b3aa1-6936-4353-9e09-6ef2207e9815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63e08e5-3d2a-41f5-822e-0f72b63a0661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0d6dea-a812-4c41-a660-37e4ab47f6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bf64459-887a-4e93-a96e-3bcfa00655c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049e4dd9-531c-438a-afee-225f84179d64",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3412031-567f-4fca-8f09-a7f14422a9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5745a61-31e3-485a-b3a1-32b50bf8c64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5920d8-ef7b-4a88-a2c6-800d6754680c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bea5a10-1cdc-46cb-9ef2-947a6833d7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11e5a16-5fc7-491e-bdf9-ec2a9c868a4c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9f5565-9bc8-48b4-87cc-ba0cfbeb1c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5981a96d-a844-4b1e-801b-47dacbbd9a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6a2fac-8403-4b2f-94f9-e9d5fd5dde3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1e64673-fcea-45fa-ac73-97ac45e8b55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856bd66b-a073-489c-aae5-08f2b6c41f60",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5c31c5-e077-421e-9a0b-4081b2ca82e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68650d49-fb6d-45c2-ac16-db2154b9e430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508d6fe8-52d0-49b4-ba59-124e6c6c31a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "604f25fe-7d5f-4899-85f5-23819256e4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b71161-6e58-4019-b2b2-f7444d691455",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405ef5c7-a970-48e8-a236-2633e3dbb3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1707033-cda3-4023-af30-d6c62b6ed100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45128551-8cc6-451a-b20a-583496b2a9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5a990f4-8fce-408c-8776-877668f0a737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57e14a1-96ad-4ab8-8995-25247397432f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9062b339-54c2-41e4-9225-8c4551f0170b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b74fa9-246c-497f-8456-f438a4f4bbd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef7d208-509c-4e7a-b669-1c3c2a561f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b30b42d-8096-4f3f-84ab-b90b108ffb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd13a5f-e555-4e4e-b892-d791cdc17db5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a363f9bb-2f32-432c-8c0d-7aa93f816801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc40542-7e62-4570-8fbd-be07f3d7c0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476a7d69-94ea-453c-b8a8-a7686fe7cb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1aef3db-bcaa-4e2a-aea7-b72ae97989c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3abceb3-a738-4e04-983d-4bbd36cbd323",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9ad97b-56d1-4467-8cb9-d4d9b20f2f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161ba0ba-7aa2-404c-88a5-9977595f1e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7187848f-a2ab-4a17-b770-fef2885ea74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3bb1060-a56c-4cd8-bfad-251dc368203e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69fb5961-4ccc-424e-801a-638e62d786da",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d8a1c4-af17-478d-a42b-4c2d1b4a8575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b36283-925d-4f4e-a667-8d42033b713e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42eb2a0d-e9e9-4a93-915a-994a2719743e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "379235b7-5917-4f5c-bd7d-1a47b5b76055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86226025-e812-42e7-b8ec-4b4ee53b43d4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01915bb2-6da4-4bc9-be15-ad434041f98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5ad791-453c-46e7-a034-07d0c279c722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7502df90-bee5-4eff-88a6-ab004e073c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c66daf2e-0eb1-4ed4-8825-6b5a3d156a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa93627-58ae-43ea-a09f-c2b31c8efe71",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c30154a-e407-485e-a12b-85d9559bb700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43ebba7-c9df-4f1d-b191-fedecbbf0f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8019a2-56ce-477e-b9c6-e47fa749bd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9189b13-2ca7-4de4-8e08-a2b21e44cf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdc4036-8ee5-466b-bb91-51b675507da3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7644f348-e870-409e-8898-daf12a882202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a0826b-ec8e-445d-a579-e5349fc7ff03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceff178f-5cb4-4213-bc3d-c96d2954f24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e50b16d-9a0c-436d-afb9-0d6bbe974772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab06386a-6088-43b4-ad60-2c4727ae3e55",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884c6b49-0d23-499e-a0b4-f3cfaba7faac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c68884d-a48f-4413-8716-7b77cb75f2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36702e08-ede4-434b-bff1-41a97a2d05c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c82bf3d2-9976-417e-8a26-99de68709e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b93473-6ba1-4f6d-8c2a-420981e7b0a7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f924271-0772-4388-a029-2a35a940cae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76885426-0acd-492e-b693-62e577bd0f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83e0ea6-ddd8-420e-8aad-bc4ec6f2f2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "897baf38-9e07-4ed1-9d03-129bec157f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1709a7c4-5549-4213-a958-65ca83437b9c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3724ed54-91dd-4dd1-8802-2be4ecf1536a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d24df9-267f-4b84-8e36-2893ce0ced2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5802037a-8c44-4b73-8363-496c619583c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72a7b2cf-67fd-4f18-8a18-b33d9bfc1f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10221c3-a110-4199-9086-720764b11b52",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8885a3e-f663-420d-8a9c-72e68c04c4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e418eaa6-e1db-47a1-a7d2-63089ef487a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee318a76-16f1-442a-b404-be7fcb42a0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17593a17-3fcb-4d92-84f4-a42b373ec47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326d7ed8-655b-4694-9ce6-fd1d08702dd1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a3ddbd-2acc-4d2e-b56c-f108bdd0f38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c8b67c-b009-4889-9368-3ffb136e97ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9a9667-325e-444f-b5ee-17db63329759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e6de36-30cd-43b1-9fb8-51a5b8b32b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93aaec1a-94d9-413e-8658-5ebfa411297e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f90e9f-bd7d-4f80-aa12-676ef959056c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ebc9ed-8237-4fcd-9006-eeb53017ad35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8445cd61-4b4f-4528-9c66-0aeca6eac515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eef013c-f52e-44e0-bf63-a1284108f369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856582aa-8112-456f-be36-0b9a13062833",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ff22f3-5a5b-4d27-8526-142d3ea4d8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e750bed-819d-47d5-ad3c-9a5356fdd91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7891c0-5efa-4dac-a04c-a2beb33c50a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "315decbc-f948-4393-8e19-561c2cd5a8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a509a23a-29e3-4648-be7c-f8ebdd908a00",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02047239-9c62-4110-8bb4-b11a17b33851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d30cf3-0a08-45d6-b48c-3b87dad3afc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d729fedf-8125-415b-b0e0-d5e6ac8b0a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f29f21d-cdcb-4c82-9547-718ec119b61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f347c65-e0a6-450f-8820-77525bbb45aa",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f190dc41-7283-4eff-912c-bf61b8b188bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a70790d-bcee-4190-820f-ba0132f5c8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb33ae62-dba2-4b1a-bc40-2a601735b5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4d2d74-b7d9-43fd-ba98-c01a703b8bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1dded44-6de0-4d58-b933-308c6a3618f2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61dfefe-d7b5-4adc-b99b-bc27c2777692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1857269c-1e42-4c34-92fa-ad41af9a385f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfe10d7-bead-4279-84ff-212752b0074b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd532ec-91a6-4a2f-81ad-19fd9fabeb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdfbb98-458f-4e8b-b750-84a12f2845f2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77442a09-df62-4e09-a312-3834818d00cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28496fd-eea1-48e8-b16f-4613eb5b6541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7914bc15-3ea1-4552-9840-847fef431ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd41669-7287-4b43-990e-ffc8d4b28a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc225def-25fa-4ee0-9efa-ea03bf49416c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c90984-f32e-4668-8331-eb33296848fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b6beb76-7fb0-46b3-81e4-7f54d8636be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2695c3-0f22-44aa-a7b5-bde9461e8546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd250b71-d7fb-4e69-9d81-9cbf7594fbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f087da6-b877-4480-aeb1-931474a9e7cc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83adb4a4-5d58-4ce7-a0bb-b8d2ae4083c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee369db-bb67-4340-bddb-035dfdb310ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a8aa21-afe8-4a5e-8e8a-c9ccf8596328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b15c46d-4cad-4b31-bb45-2b102f1df24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afdcfb9-dcf5-41bd-8754-81101851713b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b164e14-8e85-4a40-bd1c-c2ae8997952e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c15750-ce89-4fed-b155-1479f5f4d311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d8ca6d-2425-421c-a919-fba01e83f9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a70336d0-dbed-42a3-9356-90cb88a6b241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f208a4f-a6f2-4fe5-bb84-ef8c745bd926",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea86d727-fc41-498f-9f68-3f0f93c893a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523a84ad-09bb-44e5-8073-9e6160013731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b15fbc-0785-46d6-9638-5c9d107284ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "91d39175-548f-41a9-8425-6d8186e70022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16ed49a-8130-44e2-80de-972737351194",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9ce633-e414-4358-93ae-4a0eda15fb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd07c4a-02fc-4456-a769-0eb71609d7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909eaa60-e0f6-4804-80ec-2d67a94e019d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ccedf6c-3eef-4ccc-8773-4c2b82bdfbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8563000-51bb-4ded-b08b-dd4d21a9a4cf",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2c9fbf-248f-4d26-b907-b5f6c13bc891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb70672-1737-4643-a92c-76dbbcc03b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d55249-819d-41db-8639-4878efb01ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2661c90a-0442-4afa-a5cf-9a0fc7a31032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0b05b0-653a-496a-85bc-cef9f9b0a881",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e6d23c-4d80-473c-a46f-7eed38d6db63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6f1241-e736-4d86-878f-40b12fa0dc95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0cd32e-a324-4c53-b21c-f62c56a939e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb25adb-f68f-4ea0-ab91-98cf18b0ad6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d155d155-3cca-4e3c-b6d6-12f0b197b3e7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b0dace-35b0-46ab-be67-4afd787b18cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60bbc7c8-ca9a-450a-b6da-4e4c94873562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f336acda-0941-453e-8075-fff72d8c3ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0139f88b-3c4e-4821-8498-6b69e36de426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4b39f8-8cb4-43c7-9add-e49de0106e0c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382a749a-770e-41db-80cf-5783241e299a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294802b6-3fd9-4276-9115-4298596aec8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbd2fe1-4da6-4a5d-aadb-fcb40efe65b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2db48249-0631-482f-800d-6ceb2fe91b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b433ca74-5c1c-4372-92b7-5d20013de56d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6895d1-6bef-4d98-af8e-2322f1e94c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64fed2e9-fcfa-4417-ae4a-930d69c0c273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e0d7a4-dd0e-49e1-8773-af1a4e79ab33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "428d7d3d-1065-4d99-b398-b22f078cfcff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9186ec5-9bb6-4cc4-b25c-0b2b1fc38e7a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4947e905-3f69-4716-9900-d331835d0adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ed77cc-c984-4623-9b53-bc3b0e249e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696f4c33-e7e4-4c46-817a-26288dbc848d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a305133-94fe-4ecd-ab10-f3cae2285969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5319671-a642-4f94-ae19-490992467cbd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fd6d25-8fa3-4422-87bd-0487d91c8c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b54ee4a-26ee-495a-8250-da31f8f5739c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5982ac-a377-46cf-8ebd-848713cdec77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa7e9ea5-a150-4be1-b8dc-c5803823bd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8d1a3c-8c07-49d5-9522-68142ab956ad",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8dc686-40a2-4abb-abbf-8b3dacd0940c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b5d8f1-2bd5-429e-a81b-a0c9669d4b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331bc5a5-2b13-4cba-a86a-8d2ca0284a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d728162e-df28-4dc7-a251-52cb9984db8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23d5be3-dbe6-4c3b-9dcb-48e3004d57ee",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a84e5e8-43b7-4221-8665-15ee360f281e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28c0142-b09f-4aad-a1a0-eb432c72cbad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13f3dd9-ace1-4950-baa3-6a095118818c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77234b0a-0921-4567-b839-4776eb5d2419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94f92e4-3742-4ac7-9c50-af8bec497644",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15f0494-5015-415e-b243-a124b9135c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b453a4d1-fa08-41d8-9e78-0ee6fa7b2b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855b163a-2098-4c7c-9905-e10c7c5cab2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9bced482-9d81-4eb8-bb5a-b919ecdfab20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2cf5bb-c4ee-4d42-aa78-2d9e35f01d0e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0254758-9272-4f0f-a2c0-bed2434f3553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6d3fb4-8328-4274-94be-65e18f94b636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c70735-a16d-468c-a50d-acb96ebd801a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5d4dea-fbf0-41d2-9e6a-a1c2f886f025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b483fc-0f2a-4f1e-ac31-93ea83275f0e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ecb3c7-70ba-41ca-bee4-5179585590c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c68659-596c-4166-846b-16f57283be2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740473fb-daa2-4428-a947-2207dc2f3364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "317964b2-365f-4a03-8b52-6df9653b82ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d58d0b-dfa8-41d2-b075-b9f3c2976c1f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44f13e5-75a6-4e90-8238-b1e3763a236f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd9e7aa-4716-4e93-9e95-d0496a918725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2154be48-0ea4-4328-8095-82e1dff5a1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7de5c302-867e-45c8-a981-4d78384fe3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416b2a25-3934-4777-9c15-564fccb67b07",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da9ee6c-b2be-47bb-9dca-f5dbb6342135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61444df-5167-4692-a00b-b4d7fa3a541e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8547004c-0f1b-4d9f-907c-3450314b39a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27e28830-f5e1-4594-9c08-c315ba4a2428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f44369b-2f20-461f-ae97-ef3b4c6f973d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ba7afc-855e-4307-8068-df3dd306353e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3617c82-6cf8-4fc6-9887-4b000d6dd65f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d3c643-5db0-40a5-a109-df46c91dd5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbb4c16-7c22-40c7-8c13-7a793c894c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669452de-f890-4ba9-ae76-fb4da89a7f78",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7f21ab-6f6c-40bb-8b7b-3aee54e503f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5899c4-c8d1-444f-848e-f797f9c2e643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7a8656-c268-43c8-b018-71162f41f714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "61d5d9b3-7255-4e04-9f5b-11a7e456e32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea260ad-8544-4de5-ad8c-60d279b1f113",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8537131-3434-46ae-a486-e077e587465c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a49166a-352e-4d7b-932d-079210e59529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf119146-7df8-4f07-ae28-50c68c772f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "abcf4604-c883-4e17-b66e-acb8c8e542d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6790f0d-62e4-4409-b1af-782821b94541",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4f3a7d-3b52-40b4-a3cd-4920589aa77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800ba383-0538-4618-90d6-e48d53e94eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34437f0e-478e-47fe-94d0-29979fa7142a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e43a599-d5fe-4583-b7d8-296d047ad113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6c9e18-43cf-40c5-a2ca-aace8e485907",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b2c64b-8886-49ef-9b23-4e1dc4f6339b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea8aa9c-ce5e-439c-a8c2-26745ce1129e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161bfaaf-d452-402d-b148-d99ca78a6b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6a2725-8bb6-4c9d-9c7c-ade70eeeb80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a250f093-f2bd-4421-92cc-9efc5ccb1c67",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1240a6df-2352-48da-bafe-039743ceef80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06c2659-1d7e-4bce-a0d4-266ccca5f78d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8a6d37-7d50-4341-be36-dc960a6ca92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd987ead-70e2-4518-9ca0-08ffc113aa3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffda5b4-4e30-4aeb-9f7f-950b7c852053",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ede162-e5ee-49f6-be7a-53bcc05c6152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7274b24-20ac-4f0a-8a50-62f487a298ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70f2c7d-6a33-483b-8dc1-ce93e71cce5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd848eec-dedf-47ac-bdf6-d2d6095501df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07a1f50-18e8-4420-8faf-df11331db81d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd00dc97-c414-4513-bf64-ce16188942e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1430610f-469d-4215-b27f-0a24b1414e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb54c2b7-b608-4e3a-88b9-16a77d5c5736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf79a601-7b46-45d3-88fc-15c51e94911e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3448260-de32-4bd5-a56a-00b71248a632",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6efc02-341b-4315-b5fa-6a5bd7e6185d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befb4b02-4ed6-4cb9-9aa5-165a7e449411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3825dd9-792b-4d33-9629-c90e8fb19a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bda9b26-ebad-43e4-ad78-7e3fa3fb138d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70823923-c222-47d9-a258-4f210217bbc8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc387eb7-ff08-40e8-99da-8d099f4e73db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc1e926-d08c-4059-a927-600b6db5baa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce1231d-fb35-4ee8-982f-2a3feff1ac1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd7326c-9934-45c2-adb1-1bec4042a908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6add0ba5-82cf-42f4-bf17-b6acb9172b15",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1b81bb-5f81-4674-a4b9-e92063c1fdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7186275-0272-491b-93b2-bceb2e40de9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48be4b1-e280-4635-a5c7-a1046ea4e00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af42660a-173e-4d3a-beae-ef2d9355d5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba5ea17-2f38-4c82-85c0-79be2323df1c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3672d6cf-2734-4744-90f2-9b2bd7e1ec55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f921d594-d81a-42f6-b3dc-98c2e94c9a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb269ccf-3d38-44be-b826-81716fc01734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4cb7f54-ef32-4318-bbb0-ea2a2e85d67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2937c2a4-a6a7-43c4-8c63-917a81e1162b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba54873e-0b55-4d70-a86e-3208eeb78106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2def3c6f-2c0c-4c94-9e1f-2738d884a86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbae9b4-f97c-44d6-8be5-c90796c2ed24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4b75c9-3202-4b57-8e12-180c0e7a9183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63763fad-fcab-4499-89be-e8b3f3dbbe2c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a51102-6b11-4ed4-9a53-4ad2c3b150ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2812cbc3-afec-4ba8-a500-7cfd8bb2c6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f3f5a5-856f-4612-8aee-ddda88f75b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "46b5c001-c461-42e5-baa0-cebe62da69ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef66ac4-e5fd-4b08-a89b-8e671478e9aa",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e889b243-8c67-4dd3-8239-f60a91cbf128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93af101c-5935-477f-a389-ce419e14ebc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83ade7c-775a-4f65-aac4-fd2970f9eb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd38bb2e-4067-43ed-a9b6-e6d0e85c8f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17b3884-837d-4967-808f-fff5bdbb891f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5277a7-b4d7-4437-99ba-88e2f65f7b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b315cba-c075-4882-971b-ca98f4960b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc69f0d-33b9-4542-a2c7-382634bc1c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2ef78a-d1d6-4a93-881f-34d39910a2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9239eccd-8ae3-4a24-acea-278b2fc4e0ca",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4988076f-b918-45e7-ad97-d6ab52fb1626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3596c1e6-7624-43a1-a274-1412c58eaa76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc02666-972d-4631-8ab2-23f4a1a9d79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0672bf3b-7fcd-4577-ada2-7540e01142a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c3f272-8fb6-4356-980c-7256ff07da71",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafb09dd-d7ae-456b-be70-129eb070177d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf9f95a-d01b-4a6e-b9e1-fac7e514387b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbb3879-2c01-4cd9-bf74-fdfb7cf9200d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21edd742-058c-4bed-a811-eedeb5844e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1eca243-5ff2-46bc-a08f-7d7fd6d34597",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aad38d4-a363-47da-a361-529fa74beace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22fcb38-e6b2-4f6a-9648-2b1d578d55c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d683877-3ff2-4f78-8d1d-98551ff4c587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6417e7a7-c59d-4f45-a475-83b24f3b3609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ff56bc-1722-41bc-900e-7680ccba3eee",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a411f2-afb3-45fc-b22d-fbc4606cacb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146b0a8a-6d88-4891-8739-cee4843dc51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e2bd0a-c362-4a76-8204-3984f2ec3bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b47f3ed6-f0c5-4a63-bff6-827fdf28b4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210d9c0c-87db-42f6-b8ff-92fa02a09758",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded1b7ca-630a-4cb9-a6b6-e875aa587476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469b14ee-6124-45a5-8394-c61b7a6eee37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8458b162-7aa3-4ee6-b6be-d257054884de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "91803dae-f9b1-4856-8192-3f37fb6d32ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d213e817-3986-4396-8a4b-8b6786b5be88",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f56448-0593-477c-9d29-34b917ed9e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ffacd6-eadd-4669-95f4-fd4d9a729120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b98ea9-c26c-4632-9b69-ce86881d35d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af9655c1-2554-44fc-87dc-6a2d7cb68a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51da7c30-ca31-44fc-8878-c1f3151a442b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faea294a-0e58-4227-8d9f-07e491c6d255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ac16ec-3bce-40d3-a5b5-3ed11a22203c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa31bc7-18d9-4d13-ae4c-2eea91dd1eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3fa0d64-15ea-4d58-bc14-977a3fc2e565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a81655-a376-499a-8090-b03b121a0e22",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bca9d4-7f7a-432c-b416-479ab63ddb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6e89d4-cf7d-447c-b686-0619d9a11561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143ad9e7-9daa-40f3-a1da-af60f39036b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64e5c1eb-2aae-4179-a01c-12ef2ba02023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128db90c-1a6f-46b1-a746-4ab6407001e9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8911bfe2-8002-4fe5-bbfc-92c445d79140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe52cc7a-d383-40aa-9ed3-d833189df50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004f3535-ccfa-4e9d-bdb9-e25fa5f40916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8125ae99-6cfc-470d-97e4-6c7622f3bb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2226e94-4405-4e24-b6e1-7b3db0ee81ce",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54021221-5f38-449e-88c3-81f9f95b8169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efeca1fa-340c-4077-bc79-de8be2db7ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ad206b-0005-4ef9-9693-ba4aab289252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4da0212e-d248-4e3f-8c76-0ffdcf1051d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813e1254-1010-4c0d-8f6c-76045ad46cfc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec7421a-3ff1-4be4-9792-a60daacd5431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e53935-6d8b-4d50-b0c4-a3a37ddf0dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2dc4d33-431f-4d24-b67d-c03fa0d446ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "531af392-4639-4cce-af60-c3afe9678fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842d55d9-04c4-401e-aaa7-9f017f2dd0ec",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ff15e0-3eb6-4ba6-a549-4e50ca9da6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b62e8c-8726-44b4-b441-0f6364f3f102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cd25c2-d5b8-4fd0-8ade-12c1c811c09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf05e7cf-9a2a-4059-ac82-8d00c3ef5501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7254e7a-9d80-4c31-9f1d-c85ecf75fba2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02510237-c511-4b9a-9bcd-98fa7e343670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d563327-fa4a-4827-b233-96a9b24a94cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad52a33a-ff33-454b-a6ef-5b7b1b6680cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d02e349b-1f3d-42ee-bede-397a1d98eb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7dacf6-6847-4004-bbb7-4cdeb2e6a481",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9e0287-7a5e-41a2-9e46-4b60f56c883a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c2cf5e-c842-4162-9a39-25c3ca53f59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6fd550-3b74-4205-b831-af648679d1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f4a980-d001-4458-bb1a-cce4fdd3f442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe1782b-d178-4ccf-81ce-928512a38c85",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a71cdc-3c79-46be-be6c-a91e35bf5bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbcfce9-fddc-44d3-b706-890fce6bc3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ee657b-dd2e-4689-91b0-25e8006550a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f57afd40-5616-48c7-8dad-46b27fb66dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fa11b3-8965-455a-a488-23e4f1b65007",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d0915c-4a48-4384-9a32-f6bae43ab219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37b47c1-891d-4bf5-aae7-01c92f62ed57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15eb987b-61d3-4ade-a5ea-9ddb0c59403c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d61801-4e78-4562-9fb0-a89b57087757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a26cffe-5592-45a4-aaf2-f1d29d8c94bb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6121a8d7-c4c5-4fd1-b404-5aed70336077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e05a123-4612-4055-b842-3860b8fba177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded2b3d8-9941-44e9-92b7-6742a7aa66ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2733022-e022-4655-937d-45d6fd535af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e60538-8ef8-4f99-9bff-363b878e98ce",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1360ec32-3c4b-4f53-8ce1-f6d84ce2ec7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a89fb5c-df51-469c-9adb-8a4a8f78addf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30065059-798e-4ac7-8721-373ff7855b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d63936e-1b46-4e8d-b4ea-262f4d19e17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401a1761-d679-4012-9f30-7f1d498f6e6a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e23b8d9-b65c-4d6f-9cc0-b8f58a19adff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d048a2e-a8b3-4f39-8910-eb11a0f653d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb5be4a-fbc0-469f-895f-27dcbe8d67c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f25b102b-a335-4b7f-8165-e94944a62df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba018b66-8905-4459-9add-295c2ff31e08",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccf0fda-5afa-4cae-8a42-250ab4609cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114d5026-f765-4424-b17c-bddc5ab2aff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18444947-c8da-4a33-883d-39143d089b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d26b15e-2951-421f-9bb2-cda69e3cdb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ade308f-fdbb-477a-af19-5686ea668c38",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf48faf-ff46-4deb-9735-60519822dc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22912f1-d223-4bc6-9716-b493b1e408e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d348398b-42ef-465d-8fde-7963c20824ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d47a595-6342-4668-b993-59321d70b231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c48227-d874-49fa-a84f-94883719ad82",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304bf443-34bc-4f0f-9a04-bc4c930d5a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "34eeb504-a603-41b0-8a27-dc50808d8e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f2dfdd-6075-40f0-9a23-061168d73b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8657f0f-a997-445c-bb18-c10f601e4e1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d3cf45cb-fb38-4d3a-aad4-86877b16693f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8bfbc296-55b8-4805-9a68-b0725b6d7512",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24415bd-66cf-4de6-b2a7-c7351bb196fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "056c7325-0336-497f-9de6-4168424e2a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ac8aa7-9f1a-4195-8c59-0e9f8f0ede06",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "20afee8c-aa25-48d5-b34a-e7499a174002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c914922-450b-45e5-82a1-cc4c87ea7748",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7ec081-b138-4d92-97cb-7f3f1e7ae004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b23f93c-8df0-482f-bb94-fc9cec8843a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ef4560-6dc9-4efa-99e7-488b9ff753e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "05a16db7-c250-4377-ab9c-309ad41b12a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5626613-fc9d-45e0-9db1-685f237561bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27710ed7-32a1-4688-9ed1-b2b98d0377a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f264477c-ba7a-4e3e-8d71-6a7c129856b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7088b660-7d59-45e6-8f52-068d4752d828"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e2f8ecb-7b18-4408-8ad0-8a2276958153",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92f76df6-58b3-4010-ad6b-26ebd4e725b8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d8737ab-ae94-4d52-bd93-d8ab03a5625f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d30f9f0-9743-4a9c-bdab-767d776e887e"
                }
              }
            ]
          },
          {
            "id": "672a28cc-7864-442b-b2af-405a17db2f17",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f11e1687-d6ce-41c4-8a42-8635ca48ca04",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8719753b-7394-4c40-a20f-d27f41fba1f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe0dfadc-98c7-4839-8987-fa4468c44a6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6975d8d3-878b-46d3-9ec2-d9d7e0ec403b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6669ccd4-536c-455a-974b-a5f0f78753f4"
                    }
                  }
                ]
              },
              {
                "id": "795ccfa0-9845-4102-8c54-f7f43c3f3464",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78231c7f-eb33-4c79-95c9-e9d57327d4c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "025b3043-7b4f-4da3-9f58-fc2958c82eaf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9728252-19ff-4d3f-a0bc-5acb30762e29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a8e1d2c-19eb-4b11-95ec-902ccdbeab50"
                    }
                  }
                ]
              },
              {
                "id": "3c6fe886-3c7b-4a32-85fa-598d0d6782a6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9166df43-dd74-4efc-a0e0-03f8e11db8dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "357c4ebd-6413-4caf-8ad8-fee3ffcfe2e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c95e06c9-710c-45ea-a772-d96b5be6ff38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8cdd7c3f-930c-41d8-96ec-097e85289d01"
                    }
                  }
                ]
              },
              {
                "id": "e5281a89-6e12-4860-ade4-de3dcf593b96",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de1c1403-3b56-4128-b421-6351b6358ff5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4bd2558c-3f14-4837-b44d-24e6855edd9f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd8d2626-3b17-4958-ae10-319cfde546e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "dadf2700-ebdc-442d-bfc7-98f608942d0a"
                    }
                  }
                ]
              },
              {
                "id": "33f1284a-b501-499b-935a-ee4f870d50f9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7df423e-c88f-4608-84ac-915ec57c0911",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ff49c30-6034-4c32-868b-e806df0b5c69"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1e0829b-4d90-4554-b462-93eb1ffc1e6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9794cf1f-0111-44dd-be48-355b0b62482e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5fecac68-1fb9-4012-b66d-b3899754d740",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76b4d04d-0122-462d-96dc-f5eb96560aa4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad38c5cf-5b36-4be9-b0ff-294504cfc0ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fa524907-0879-4de3-960e-a86bfff79f20"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4798d687-4058-4a47-bf38-b02ac58f6862",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1c32fff1-e07e-4c03-8f43-77f9dfc9dd23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e02510e-0490-4467-83a9-202fb566ad35",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a08a306-d544-40fc-b2fb-b327913eed0c"
            }
          }
        ]
      },
      {
        "id": "e225c2a9-9ea6-4b31-8b20-a6f3ea1be775",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c0c90bb0-a755-4b6f-97f2-b57e0d767407",
            "name": "Negative Testing",
            "item": [
              {
                "id": "510dff86-56b8-4289-a617-70af987279d1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e2891ea-20b6-4ae9-a391-2975bd6a3d2b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ad56bd-e069-4c42-8503-d38ac5f0a4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27552283-c92b-497b-872c-3b2ff4dfe88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adda2338-e0f3-4bed-874b-3311c8b6b7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc00d47-846f-408c-897c-7d5f81b88e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebdb649-0c35-45a5-9895-5234d8bac9df",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383dc615-3ca4-45c3-bb5d-980d0d10c2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca0e297-b3ac-427f-be2e-25cda01da363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7637dfab-fa08-4970-a916-052b78b41192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "166de7ef-d28a-44fc-95d9-c1cdc4d1bfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195a322f-43c5-4743-84ac-6d3cdaf678cf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a29cadd-424e-46a1-8c02-148b554b868c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9aadc3f-427c-46ad-a8ee-f7ae07940f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0eed35-54d2-42c0-9e6c-df2d0c9baaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "169ed79a-e391-4f1d-b0e2-088cfb60e3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ec3f7a-6fda-49ce-baa6-de77fea8d23e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97d56dc-5e74-4900-9ccb-fc2114d40c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f175a17-a5d6-4317-97cd-5ca1523411b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1fe133-35ec-472d-a6dc-0a084f2f929a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcfe58c2-8ff8-48a1-b100-b732505f3336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a077544-e6bd-44ed-aec8-66dec81ba186",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023fb134-9d8e-46f8-8a22-acb8100cbcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8eb8b5-5252-47a8-b6f2-6440f3f0ec0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900eaa83-59c3-40cf-8401-f0eb09bf0351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92a2aed0-c7f2-4980-b35b-0aa80c669932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867413b8-07ae-40b8-8087-1cbc2d3e31ed",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb50d365-9a3c-43ae-a8f8-2fbe2314447b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a064894a-7f87-4945-a204-43197132657a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965f2638-5e5f-4a39-a0d8-fe432c624088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da3d78ff-6fab-4c7b-bbd6-a4b480b56647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f17022b-5c03-477a-ba19-8a0114a77058",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5049cb-a122-4106-b729-e307c777fbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ea5bab-0fce-4c8b-bcdd-02f0671fb0a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d5bea4-d442-49f1-a5ff-1f1addc943e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ea0d60-d41b-4c3c-b6a4-b146c18c8a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b3f5e3-e778-4128-a9e7-9eb4222281f6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9141180-1fea-48a2-a696-2b71ae6f6402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ef36c8-a23a-4b4c-98f5-670b4ac0d737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c26c074-ae34-46bd-9ac0-bc86aad6711f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf47aa16-1e8f-4b35-92a1-68d7d954d24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd662cf-3c51-4c7d-98fb-fa46968b9e25",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c881b4-2736-4217-bfdf-b390a1d0b91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678d892c-7e47-4229-8a88-cc7c19349605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc26283c-27c1-40b8-9ee6-08660c9b343b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "115d1b9c-8bbd-40b6-a1a7-02fef7ac3fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0275d754-00bd-4078-8cf5-bcb382a90afb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdc0d9d-4161-413d-a765-9e9087c3e8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a1753a-2b95-438d-b427-b82d99ee5662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bb9841-aa6e-457a-b443-9fec831734c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b12c4815-0780-4c5f-9c12-e9ed071fe607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd8bacf-3383-4892-a630-18445b134636",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b63fdb-3795-4e31-b6bd-0f9f1c715dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb389e2-8186-489e-a396-a1d911819f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be02a43-f3e8-463f-91e2-130fe649aab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cb274ff9-332b-42c7-b45c-3cf080de8e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fedb61-e428-4f65-93ef-3696ee31d6c2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616d4b15-993a-4804-8eb7-f43c0451eb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30db5b2-7725-4b78-acb9-45f51983cd6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4171f849-638e-4d14-8dd0-3b1948c8732a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42a63e2a-b75e-43ad-a256-aed3bba6d6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41a4e0d-1820-41a1-9660-825d37fba40a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8d5025-f685-4993-b48f-f903435ef56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe22312-0735-4d56-b70d-88d4480bd6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b360eb2-74a5-48e5-944a-4ad851f35c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8db36ae-ca90-4fbf-a4a8-293df0217ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd16984-f581-447f-a92d-60183fb1bf0f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8705fe3-2d8a-42cd-a9bd-4875c9650fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab1607a-e8ee-41c6-86ed-e5a492ec380e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ee6ad5-1ebc-42bd-9039-38baf08f048b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "297095c5-5e36-43f3-a347-a218f4944999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6841b8-00c1-4dae-9a0c-68449ab19323",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e59e01-9f16-4296-ac2c-2f9640582bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb557570-d2f5-4ef8-9b84-8413b963c778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4718630c-d71e-4e88-b172-9fea34319bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8611f134-946e-4bbe-80e8-3c4c5f676c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34a8fc0-b37b-4f28-bbef-29ae8cf336ad",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d8c977-fd03-4df1-8e73-6ff4960eb3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8f7b1b-4001-428e-b053-af20025d1179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1b8c48-695f-427e-8001-9d6837b62968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6abcd269-ae90-44b1-8476-09b4c0f36832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5620292b-9822-4828-8674-1411f8a4d3de",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5640b112-1b51-418c-8621-07684dd094ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73f4107-0c99-42d7-85d6-31dad994b9a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d1c046-6e44-4f0b-9231-2ce51f7050e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0123660e-f87e-4f99-9521-da3c945970bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee950e9-b003-498a-b66d-2503bdc7065a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed6730f-6e82-4980-9580-8ccd6805fb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea6954e-c583-4b11-8839-ca294da94e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f33ef9-a268-47a4-a6f3-c0d9a40eebb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "25cb65a1-948f-47f4-a56e-05c3ade5e42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91c0a1a-eade-4401-8276-8223b8263d26",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6aa564-f11d-49cb-86b0-08c170c84418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35e1ecb-61e6-440e-bea3-41e9e9becdf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd04dc0e-4707-444e-b284-e3754ca0ad97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0f80a7-478d-48cd-81a9-96f284900fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6451b3-e103-457a-aed3-209e6cee00f7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec88287-34c7-4f31-81a7-4d4a13ab3ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0578737-439f-4ec4-848c-a7aa4aa0ef28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b310dacd-6b03-40a1-89e6-f0d59524e4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d689e06-ad5c-46df-bb53-cc0b1fcc4616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59610b3-88d2-49f3-912b-899fde59854d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fc526e-f8c2-4831-a64e-9158497094fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4cc7d1-50d1-4347-a9c1-b2972af8d4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f34522-378d-417a-8bbb-c302c8a4d453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67ec813b-ba6e-46f3-be9c-d010d5a40da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41fa7103-7643-4418-823f-2ef823486e9f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01c26ee-43ab-4826-ac5a-03340afcc09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4eb430-edb6-4465-ab9b-cdd6718c73cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be021eeb-69f2-4a03-8ef8-48c5c1642b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2554aaf-45f0-449e-bba0-6a11b41f804a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1b0a24-e987-4077-9b23-d29a710ae22f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0d2c15-5126-4c5b-9912-563e077aa2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214f979c-6093-4075-8bb4-796e60c8b26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f972d6-be65-4e13-8db8-1f0853065235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed7d2b7-2535-4532-8426-66c11114abb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5db7e6a-483a-4ea6-837d-51e79c4616af",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6143d859-f368-4157-8247-0dfcc2a39366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef288d5-094d-4bde-b5d7-8493b4cad635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa59f862-278e-4454-ac14-e042773b1a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b42fada-3616-496e-ba18-0ab966167f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d86d41-133f-476d-a1b4-58d9341455a5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf9ae9a-54d8-45e6-865e-9a76f393b33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17bd0200-aa08-4bae-ba95-540a3642691e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55dba4f-f2e3-4340-a6db-14b4e780e584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d99d52c0-194e-4c10-8734-0370946dae17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a102a8f2-f635-468d-ba6c-2b5c45f2be2d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79ae44e-611d-45b6-b758-becf3c2ee440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf270d9-7c72-4e47-b637-f4db7c11ce83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4fee87-dea0-4d46-bf7a-014a8a436606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9083d2-411e-4b71-aca6-70e8289365d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5542ed7-320c-449c-a9b5-4f1734126f46",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697dccf1-3f6e-441a-9ab3-ae84195c59aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7530b078-234f-4e0e-8996-ba95a303e8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcec752-935a-4015-98c6-0e3c8ece2c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1472b01e-bc50-4316-af36-7f054354af50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f079de-d00c-4176-942d-693501477037",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1febbb6-3e65-4814-8768-b89b6e037606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab936eb-059e-4c3a-aef5-4d375cb5a173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f030eccb-1903-4121-88db-5a5f5e34db8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1926f7c4-4e68-4456-a21e-d7bca74e9931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dbd2e8-2eae-4d45-95ed-f0038d3c3dc9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b1acb5-598d-4cde-9718-e07a5c5d1cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2785efff-cd6e-4a37-8bd7-c5a7e3002aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840627c5-4935-4395-881e-516f78791dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4750dfa8-f593-4bbd-932c-c756f5b649c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e500c53-759d-4e63-b2c4-7a52fcf30af6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd55c289-e509-4d63-a4ab-9a2263c0da7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c96cce-4be4-4237-bf1a-99813c9c8804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fcf354-2915-4bc4-b5bf-9c5889a94ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "119b5590-db50-49b9-acd5-28366aacc668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d95ca35e-6078-418e-863d-30ac80878ad9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4719073a-4d6a-4e04-b6ec-9cdfa5c55f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deeb62d2-c3a9-4c1a-ad98-a9a939fd5f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce69ed0-0b4b-44f0-abe8-539d4e45750a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "025af738-6670-4bbe-81e1-ccfedfed74db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752350d8-fdb2-4cdc-b78b-a8798bf695e9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332ad43c-8acf-413c-b957-8c7d04d4a1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f134358-3f0a-4395-951f-5b0c433bee5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e36915-f20d-4848-b488-c354ee4d5818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8890d14-c7d3-4308-a9ef-1df43d829a9f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4cd2abf8-d843-4461-941c-5c8cdbcf8a1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cacef1b1-2242-4765-839e-cd75cc363263",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b90af96-5f83-4f82-a980-712ba4f56d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "660d5b2e-27e1-4cc2-a1e6-079296098585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcadf81b-7714-4c8e-b08c-bbe744762d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f786d2e-d7bd-472a-adef-8606f90e2144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc28925-aed8-403e-a5fe-ca4437757f6d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648125a5-e9f7-4036-90b2-e096dfa1b184",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bd3018bb-54d2-475e-a2db-b413e8964fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f31e76-c7ab-4cb2-8140-87cfe753d678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a1abcbd-9eea-4af7-b0b5-59a9452f324b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ed22913-0c30-407b-bf55-94a442c2bf5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09acda62-06c5-4ef6-a1c4-6dbf621f631b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fbb01ce-3ca9-4b7a-8cd5-cf63566f2646",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88bcb10a-b493-4c8e-9d44-08346b4bc98c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68a18d9b-9136-4c82-ab08-31d643187975",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c396ddbc-fffd-4a35-8dfc-ac55fa12f082"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cd70788-f568-46c3-bc8d-c326a5c5b649",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2346dce4-40a3-44bc-a610-ae4bb9f0ac10"
            }
          }
        ]
      },
      {
        "id": "94421e82-b352-417e-9eaf-b4f055fdd5c4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "56d9e3d8-9ee5-4da1-8384-912065f064c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13419937-3573-46be-8269-58a33d514368",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "67f16464-6bf3-4b9a-a9d3-8a6c0e362d44",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7603a6-bbdf-4f3a-8707-391ed413c803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea84d37-e595-448d-b782-1eef8f59a7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd465a7-61c4-4d57-9c80-4ad0f7d42d51",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8c5e65-9b63-4912-85fe-ac4f609f12b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e5f756-9dd0-4140-bff5-7d9087d5eba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840db3b5-d059-42d3-823e-f927d61afaa6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40ca0eb-8d3b-4813-9670-42e398c73028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b004bf4c-638b-4867-b693-22e39b77b1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcd758e-73f1-4fbe-aca3-d791a4c6fc05",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db303572-3873-49f3-9e95-5212944bf65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0886ee40-4635-422f-bd27-192f74dd7563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775ee991-d005-46b4-9ea8-211167471b1f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672d3c4c-0bbd-4c83-b5c9-8db9b34410b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd35370-f820-426f-a6aa-f16549e3fa0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6403e6c6-2ff5-4e9b-8474-dcaf20ea25e2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a9154f-7e25-4f45-bde7-76e96171acf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d29d81-dfa8-44b7-8d45-dee2932f412b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bb5b46-4e59-4bb0-aabf-ab765ecccdb7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551b02dd-3354-42b4-a03c-4383cb1f2933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900b4f78-ea26-4d12-8be7-8e3f38135ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60522aba-01cc-4f0c-9ce4-7129a257cbe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f816b7-b1cb-4c86-9132-ff8a57846a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a4ee84-8913-48ab-9931-ec9ebf3d3576",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f641cfb-4b33-4d94-b205-fa963a8e0c87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c303997a-5a1a-4858-b63d-b22415e8cdfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af108ff-3b52-4993-b577-7f88c731cea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61096b0e-9560-44ec-9352-250976f98a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d12a275-6760-47a1-baa1-bf8b1a09d3b8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74cbf048-9b7e-49af-ae66-80773a699fe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2887659-cb5c-4df0-9ef7-b4ae7a4bc1a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3093dd-227a-4f3b-9ee9-86a63824aa97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d323fb-c332-4219-a6b6-e4f7d170fa3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8dbb7f6-81de-4235-a990-7bca09bafd3b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c55029c-271a-48a0-8320-ccebb0192a2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "426e9b43-1b44-4a3a-b938-01f376ca9419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83c92f4-8b70-4641-a8b8-d39b7cc3bcf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbcb30ab-99bd-40a8-8dd2-7b12a2c5a8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd8fda3-9859-449a-8ddb-06d26e472052",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0a91b1-ee8d-40f9-8aa5-738915855691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07592feb-ddb5-4e55-b86c-f5babea57d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b4280e-d315-4a2a-a5ff-3816a16a1e2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0354891a-262f-42f6-905a-0126c639069a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dff5b3-b3fb-4998-9e9c-0f2c187f4996",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fc249e-f62a-4cfa-83d7-12d0d1e1283d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5710c0-05ef-4476-b5fa-13c55636c53c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffaa074-aaa0-475c-9918-4292d507dbca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5f5e27-bf38-4ee5-aca5-f11cf59d48ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4a3a9a-507c-4c68-8d94-ba06a98deef4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb476a51-cd54-4663-8ad4-7bf159f99927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0abb815-83bf-4bfb-bef5-5ee40fca06aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3a6967-6e37-42fc-8d7f-ab266ec74c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f6e3ac6-6a26-41b4-9dee-91fa783de828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7549a170-f05c-49ed-83d9-ede3602d5b1c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61b528c-9527-4bac-95b3-389d28dec756",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd443e88-4ada-439f-a96d-f57dd4de488a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505816d8-1c73-4ef2-81ab-c83054119894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af470a0-f9cf-4c9d-bdb0-721f6f51498d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5475e284-b61d-496f-8e10-85932ac52d9a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be25cd29-2a18-4da6-b4b6-333284d85467",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df3ba529-8fb9-4dbc-820e-5ee1cb81951c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd3a962-638c-4dfd-af00-94201fdf0dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1596b701-50e0-49cf-8920-6a72b9d6a2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0c467f-6949-4fd5-b0c9-eb79814eeba2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db45adf-892e-4e06-a4d9-b91e70858d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d68a7642-71d4-48c2-b557-caa3f98f64e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef294862-fc7e-4bba-9681-a48834f92d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e043a781-38e2-4df3-a10b-f40ec554cf24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9a421a-f6ce-486b-be35-8302e3704257",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f749931-4d8a-48c0-825c-16c46e72e0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5846dad-403a-46de-8b69-c8ecae07218f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22542caf-ddd5-41d8-ab9f-20f78b43b4e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23f3fd3e-2aa8-4db5-a12d-9985d4a67fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03684a73-1e68-458c-92aa-d385c561ae52",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b602b9ce-cce5-4693-b133-fa75d9e821e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ed60cf-123d-4e59-87aa-e91ca7fec034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf60324-8441-42fd-b1ec-fc3d24e65629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee9552b-dd08-4d0d-b92c-f0ea2e85f75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3ec938-d467-4992-9a26-973d5e4a1987",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8101adff-7643-42aa-9531-3e3833089a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ee4edd-9b4e-4854-a687-c9233baf323d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0cac17-733f-4a10-97ca-788cbdb1af52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040ffefe-6ff5-4c12-be43-acf43a7c46e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953240b2-3d32-455c-8ecd-fde0dd4cbf0e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda58076-5c81-40b3-9419-d6f84caf098e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376b82cf-5be9-457f-ac27-1efb280e4492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "552b2330-1895-41bd-81fa-32bd3ef11187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5152e168-0a7d-4cce-a4cd-2025510856c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16903bb-7f3b-4d7c-a697-72d55c8022e2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bf81de-569e-4387-bfea-c72ee53a40dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2f2874-e2dc-4066-8059-69c7345d3c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01702290-2b76-4eb4-8651-3e44f13db2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f209311-3b8b-4da1-9f0f-3f845054a7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21b42e6-50f2-400d-914e-cbe75a15679d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c642a1-d433-437a-b55c-76743e9dd8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69000ceb-ae6f-4926-a5c5-f1bfdeba2d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb19f2c-2eb0-4ef1-9605-213df420f2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec3dd9b-2d8d-41c2-aef9-bc232f9d2818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b338c1-710c-47ce-8b46-c681badf985b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec75438-8738-470a-a9a4-d3ff7740db2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e6bf47-0afb-4924-b6e1-c0c86162f98a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04d6ad3-d10b-4a6d-88e9-f41df29382a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26aafa66-dc6b-42fe-a5bf-f5874240df34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d2eea6-0bd4-4912-ba2b-e30d62a92ae1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf38842-83ff-46e8-9c07-e99365c60e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f65dbd8-da27-4339-9449-b1bc9b7cc44d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a19fbe0-a15c-4021-9d74-29ea48b80b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36dc01b-86a6-48fa-bdba-d9de6ef5db24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff82fb9-3d6a-44e4-a925-9c84f4e303b2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fff91b5-d5db-4868-9585-8809d827ee37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2d78be7-7290-4847-a326-5f6cf9edcaea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "106496d5-5e0d-47c9-8df9-b8b9560e7f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074614ed-6bbf-4609-9e91-dcc63762b275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f896d24-b283-45ea-be78-a58d12842dc2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c57feb-d102-425a-ac08-b16f680f95ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74fd05f2-fb98-4cc2-9412-43dbf1ba13b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41aee91e-9587-40eb-ba9f-abcb37c11bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b10735-1e16-4867-8258-c48e3f09ef28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf18b02a-086f-47c2-a429-9926d604dd74",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490be4e7-c5d5-4745-9f0b-52a87de54471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ed8b8a5-0b6f-4ceb-b7a0-049f0f62560f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025875ae-63d0-4415-8754-360b81131a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464c7c34-8d4e-4746-b265-66c22ffd3c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799c4370-786e-48c8-9a88-2a9dc72af076",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a49506c-a4e1-4ed9-a618-d400526bbe4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "344b7e3c-5d91-4eff-9efe-6791a8b5c6c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "133b243a-3db4-47a4-89d7-9c0c8e9d5dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da97f5d0-9004-4752-9656-de3d1cbdb79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4d69e5-0c39-4489-b2a1-22b060520804",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9c0e21-a91e-452a-8f2a-057c0d597b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1629208-8c14-4f4a-840d-e4d9cff49617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d43033-243b-49e2-9731-4cf18b3c89d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc6212d-88af-46d7-81eb-7a1aa2a67ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a237a25-46c6-447f-80cc-3b1254e969c4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e9958b-da67-459d-99ee-d15bcc93a48e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52a432cd-9732-4f35-b694-2381c8fd9d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aad64db-5455-4f28-a311-e5ccdae6159a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334d7f69-d9f1-4d5d-86a0-620caa77e419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a881cd7-8add-4f0e-89b9-b6566d151c6f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617d76dd-f8a7-4d7d-8b24-3906bb3af962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49a0ffe9-139d-4868-b59f-208a2f69675b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40683a0-32a8-43a2-88f7-4c72e8929bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5274e19-60bd-4112-ab5b-74bfd7c6ef24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92585ba2-1aee-48cb-8731-63fbfd39e39e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d739ad-dcfc-4f63-a6b0-f9ee444bc5ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3cab326-a528-447f-bc84-7f2bee04b21c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02f84e0-ec75-42f1-b4b8-69d9c63a3bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c729ba-cb04-41bf-8dc0-9fe01f8da165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06317752-4683-4445-87dc-50ab202b0ec3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7865bad-2407-46f8-a868-aa550f141985",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce5ec279-36f2-43b0-bf93-22623c425ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6562f8-9c9d-4a95-8107-27245b789701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6be7b2-1179-42f2-b822-3691bc5c2046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343a52da-0d73-485b-a3e5-7b28c0cd9f76",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b68267-4fbb-4e94-b877-2c177c049a9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7de9295e-2aeb-40f5-8c48-21a8366adde8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a610fd4-6923-446f-b6ca-87804c461aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8468332-fccc-44c5-89b0-4c4f77654fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ca85c8-af45-4c00-bb28-964fb6ed4df3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ea158b-d673-4f72-ba04-a30812cf3ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67715d32-14ea-4a6f-92e8-fd6b6781e970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ada97f9-c1f5-42c0-9756-75cfc7c63329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b3b09e-021e-4ae1-b9a3-eb0a3013d403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea0decf-c56a-482e-8e04-a4d13d762c9e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85f7b2b-95ad-4fa7-aec5-b037de48ebcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb38ee1-918b-443a-9e78-b26c8e82ea38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9dae0c-4e5d-4480-96c6-cb73d5e3b556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7668f4-0db6-40c7-a0f2-2f85c89b2ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfc567b-f3f5-4437-9979-021089d8c669",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf30a77-2555-4ca0-8bdd-d5e93408b3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c51f5f9-110d-498d-ac5a-729a934cd760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c95e98-18ef-4413-847d-f3c02972dc50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc528a78-3420-4f80-a68d-10a20e76ec27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb325a8d-dfd4-47ce-84ce-77ef418b5dcf",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a42da3c-d248-44d6-ae16-3deec09bfc33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceb29468-677e-404e-806e-007a47e6790a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c2dd97-13bd-47d7-bb8e-35071f824c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148dbc89-711b-4623-b81a-15e14c1dc7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ee6af7-7fb6-4f9d-81f9-0b1016123d0d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24246ca9-1d00-49e7-8bea-1dbc0cb44b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786e2f8d-077d-48f5-85bd-9c426e220261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1074050-c6b5-439e-b0de-dc550ea82b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a9fa22-72bb-4284-849c-952439a4f066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c2a9d3-3aab-452a-a8b0-e5f61636b5b1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3e2389-d32c-4d6b-a9ee-8687f3577532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c93e626-0703-4b84-9fa3-83343262478e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "953cacb2-c301-4f59-a493-4a0ce3f90bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b87c4ae-f8bc-4d39-8ce8-da22e0ff9437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbd7f69-f4cf-4ad7-adae-db62f15fc06e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8a204a-df80-41ee-a5a5-3e411351ac7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3818d29b-35c7-4f65-8f25-cc907b66fd1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db3a258-e8d8-462c-bd92-a028adbac3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a74a99-1cf7-4b49-9ca3-ddebaa1b8ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789a801b-8ad7-423b-9802-07ecd2e940d9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba1951f-b5e3-4744-a65f-d34eaaccff46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb21e52-0b89-4160-bdef-7093153f806a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed70df37-6701-4082-b0dd-a18e4866d492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a65f2e-4148-49a5-bad0-9f530a9986e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3189b1-351f-45ed-a67f-4ffcbd1adbeb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9af3e81-00b7-4b7b-83d0-72f90105f0c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016c8431-2808-41a2-9144-33cb63190b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe779315-357c-4744-abf0-4735ce4f3b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98358c75-40de-404a-8d81-3b0bfffe0341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573ae045-2023-4574-bab4-e06b8e501335",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d72422-5e7e-436c-930f-76221be46281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b779f8-8765-4b27-875c-7a8e53372a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd5cf5c-673d-4032-a1ba-df542fab61ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa78ca6f-0e60-4e49-b653-1808f1e66bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ace37a-8afe-4880-a433-721192658f48",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b2586a-0be3-4126-88ad-8f1361a4aa13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3062f7b3-67cd-40ee-bb60-cd4daaabff0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad749292-3562-488f-b251-f2700e44c75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88308fa6-57f6-478c-abcb-efc8e63a1761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1552fbf7-3446-4bc4-a59c-4a93bc86f592",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bc3f46-6de5-47b9-8673-ad8232af6e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2527173b-7dff-48eb-b96a-ee88c4be331b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab940dd-890b-4fd5-be20-e2edd1b3f23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89fafd1-674d-451d-adf3-b01293548b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cdb73b-81d7-4577-9db4-fb72dd68409c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b41e45a-5b96-4772-aa88-08dfd0f340d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de80bd2-b759-42b6-b014-7f6a0b29cb08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f71943-dd47-434f-8f46-204d568727b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c497fd-377a-45be-8a4a-b7d6eb20e656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0444eb52-7501-408d-8f01-4a25082efec1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b13a83e-45e5-4d1c-ab85-3157aa436f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf66589-62f3-49a7-b7f1-527b23c98209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b3a3bc-d8ad-4ba0-81c4-ac1c45f0d6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b268a6ea-0db6-4601-a67c-2dc7f1b13f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e58ca32-3ca7-4f40-9214-fab0f73f9fa3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bb2e0f-2fc5-4801-8757-982a82b50160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1452f1c-12c8-4185-a79a-2dcd15ca7b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f47f09-31cf-4b54-aca3-774f4b3e4473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e83e8bf-4c79-4c5a-87a3-786460bec57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778c48b5-0945-47f1-8eb8-6a8dd018ec90",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32322021-cecd-4851-ae6b-b2b5da98d5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd96497b-8881-44a0-8649-e08263b79040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdd15a8-7764-4e5e-a41c-be661be8e023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c4525a-500c-4139-abbc-903feca56ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc0fd26-66a4-45d4-ad33-91c67ff96cb4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10de2652-4ac4-4163-8720-06f7784cc22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ffc7da-b767-4ae1-96cc-e0e965301b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c8e276-f5b3-497e-9ece-99b9d9f86e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c458d47-3ec0-4213-a27a-a3b148729104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cae85a-d461-451b-8540-2a0efff9aad4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd469652-8c05-4684-94d1-a17b1b10b3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4882f5b8-b97c-4def-80c5-479b7729c55d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e231541c-4cb2-47a8-a9f0-93ea77645963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4b10bb-0fe8-4e51-a6ae-1f452485af9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889ec2f0-0285-47fe-9c78-7b6a1d80c187",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07219101-d4a7-46c2-b90b-158252ae7685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb787b3-005b-4adf-b1da-28290d3ac2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb52e723-f644-46b3-a8bf-e0792b18ce19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e9a980-5188-46e6-ba2d-a93d821eafb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39837bb5-982a-4322-aaa4-5971b122e9fb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11927d2c-2056-4fed-adc6-236a223c9a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6863b1b4-252a-45c5-8e1b-2eed8e69adb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef374e3-539f-4c6d-9233-39dcdbf5ffab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52d7d20-c119-4dc2-873e-63a3d686d1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b691dc5d-f9ba-4ce3-96d7-8cfb6d4ffae8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75aeafb-f2db-49db-80f8-700ae36cdf08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1f2e54-5199-42f5-a06b-d3fa7a6618b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "222fd65e-f618-4615-b477-2532bfb07670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33fb52b4-2d92-4d98-ad8d-3b141d629f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7e42c2-dee2-4681-9b2c-e7d153c80111",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347ee6a4-3174-4c9d-9547-a9dda4c649cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb4f882-1698-4b7b-94e1-513d6f2a6050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec44110f-9544-4c67-a42a-05917be0fb73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9af89c1-5281-49df-a63b-94946751f77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8eaccfd-d935-4e68-8e0a-a1652510b496",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1431e8-b169-49e4-a928-496e5713b96d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21db01cd-4aa8-47ee-ad7f-9a2ae3d53c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e938d9e2-19e5-4e34-9a6b-b1ffc4a1fa15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5b0a81-215f-4649-9ada-91cbdc3248ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53d0677-b989-4013-b107-72745e123607",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1d08a4-cb00-427d-8da7-1071918f23c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfc8dcb-5323-4acf-a58b-fed5563b32b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f0692b-2bb3-49ca-9558-712dd1094242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d538690e-b5c0-4496-9b6b-9fcbd64334c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53d9d2e-90c9-4f62-91fe-29d756714830",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48791ffa-243e-4056-b361-11a7f0ecc109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4ed2ee-515d-4b45-8834-e70c47d21ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d80be3-3e51-4efb-9036-7c10056e9df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c1ddbe-2a97-4231-96ef-bc5b24b3d507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0ed823-6d3b-4060-8ce0-4725b07b7eb7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608527d0-396f-4855-986d-3dd966ac03ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6eff715-6f95-458b-948c-0ad701e91f51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d092585-a986-4988-82bf-c39149a1e308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8905dd6d-4cf9-4739-95cc-ae3c75279cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b530badb-8017-438a-988a-fd701c3614f2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de620d9c-1d2e-4d4f-8a21-db133148cfa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8ca22b-4c7b-4965-a8c4-c759d2e2c621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "926cf4e7-34c0-47b5-9eab-fc23f7c6b5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66dee08-f71c-484f-86f4-e91d9c0b7838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691d9ea7-27ba-4854-a333-f4a9d468eaa5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77db9e0-79a7-451a-83d3-346d0de0e4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59b2abb-4d85-49d8-80ea-5805de2465ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a9975c-863e-46a0-9d19-da7d48c8f2ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ecba75-a2e8-4b16-9aaa-5d3f2e0c56a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eea4c47-e23b-4b98-a520-ad49fa88f9ad",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3deb2eb5-9448-4c37-8271-f0a621ec6906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f510494-c70b-420c-973c-6c9f5794034f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570db954-8034-4aa2-9dca-2dc41a12d372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf67c5a-1010-4629-8ecc-50dd08997e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be5bf19-a7ae-4ef3-8587-a148fc1d70bd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df792f9a-612b-44b4-a043-4cc462558f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bbc1461-b4a3-4085-9b6a-8cb6fbdf47ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2ffaf4-808f-485e-b888-a2a62fdbdd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa9bb09-c868-4d4e-8e24-5e9894e050d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdae67a-818d-4d07-8d55-53e01722d407",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7de10e-bbbf-47ee-9051-b9bb855672b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ddbdeac-d182-457b-9db1-65a4c358f768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e2bcd1-92b3-40b2-b035-00f36d8d3e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b002e18-b414-40c7-8d68-486d3092659e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c41bc29-731b-4856-ac77-cc78fb211859",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccef028d-7351-41b2-b0f5-e907e07398cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "657f4f20-38a0-41f8-93e4-9d71f80d25d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72555cd6-6b98-4453-be0d-d7aef9421b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095cabef-7f2a-4366-82ad-0d44214558df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80091d2f-529e-486a-a9a5-b179fcfe87e4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78240e4f-8450-42e3-b329-64bd55899120",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5f19b88-463d-49aa-9db7-a03b9431aa5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b41068-ba9d-4ead-96fe-714c77186c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69cc594-9cdb-4e5a-afb0-e0566432e6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded9a2d6-73e7-4830-a013-a665254dfb52",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f6c4e3-ea21-4947-a5d5-7f685c7d8bf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17d2c874-a289-4498-82f5-f466bab8c317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55de7ec0-3d1f-4800-8af9-4732d3c67120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cca7e5e-d70b-483e-a48d-3b7f5037a49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25f37ce-2da9-4685-8b79-674165e91e32",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb2e61a-e450-447d-92b9-9936d71dc827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f51ef338-28cc-490c-bd61-3b74822c8bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e6e8cc-c26d-4a01-ade7-a2d6ec969a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3cd5df-79d2-4014-9367-2fab0c4c42d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d5883b-2e07-4452-8935-956911565c9c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0944c01-b0b3-47dd-9a49-50026689aba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f3da45d-c1ef-4365-b1f6-bd02f9af6d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc4188f-f095-40b0-955d-be8f7c5fc70d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4240c861-57c9-40f3-8e20-91c7e4f8e3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f783aaa2-cb9d-4d72-b663-929d30516238",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7d2f80-dee9-4eee-8282-2b2161626e29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44ff83ee-0926-45ab-902b-3fcf377a5a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b3cd19-06e6-477b-9c06-f002b4988a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbfb098-556e-4fc8-bf3e-5898b9c441f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d512527c-82d0-4154-ae6e-cd1e4f791e3a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a373132d-01bc-44f2-8042-2cd2dd09ac2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c8e9dd-2e44-4408-af95-8de30bd8b6b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bcb391-cf47-4940-a11b-4f47836f4dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b8909c9-b1ae-43d5-8eaf-83490943193a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f8ae7e-4ec8-4250-909c-b7103b28648e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e934ca-981b-486d-89da-10d9a2fb3b22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "199bca6c-314b-4be9-ba16-47ada61ac565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88488afc-0bec-4d12-9cd3-000769a05610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d545147-cc50-4578-a16b-955a7446e991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b732503b-27a6-496c-a8e4-af8e3392f2da",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be9d2ee-d4e5-4ae6-b70d-1ff0e85f7c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fceabc50-d7f1-4cef-8075-7698a4d5c39a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb64e744-006c-4c57-b05e-60d07ddbf780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c066d4dd-964f-41ed-b2bd-f8935a1d1daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12e019b-6d38-469d-b134-e04428c7b421",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f375b52b-5277-4799-8621-b72ed5f438b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d329a7-f748-414d-9a85-7a3749b4bff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe99735-c14f-4af2-b44a-76beae659f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2242a3b-1508-45e3-a659-6411a80c6916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbdd475-41c4-46c3-913f-3b9f8c99f3a6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dfd90c-43bc-465c-aed8-1dc9f1e14066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88693901-e674-4034-be2b-e6d7f6c6b393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9261d1e-1c9a-4da4-b1c1-709b40132529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b28fd70-9463-4341-94c4-60d25a097611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39331c4e-1e3b-4980-921a-e3accaedc59d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af405f5c-ac5a-4326-b8f1-f10e7a304f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d827d68-f674-4999-9961-6be80b6eb140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72015c08-c18c-436c-b20f-b5fff1a78377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a10b4c-afda-41e6-b066-c1dedfb16747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a5cd3d-d9d9-41fd-9dbb-ed4b7a8237f0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cf9468-f681-474e-a707-d7661f1a8387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a14be3d8-2eae-4723-ac47-d93f23c49f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0524f702-58ef-4b16-b6c4-f8418426be7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9051ce2c-3736-48f7-9b34-8dbd2cd7602f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a57c9a3-d107-42e4-9fbd-97b7956de8c2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f019eb-20e5-4f30-9282-f40bbfca3536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4515a519-1ad5-4f8b-9ccc-aa7de9dc8844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3146f8b6-00f3-4f2a-b9be-634255ed4b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cce9f43-e495-4e98-aeb0-c4d01d89926d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85280fe-a99f-44c7-b075-5eba58baee22",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ce2c1b-4484-4afe-8bba-f6f5a0048423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d450975a-e6ae-4d4a-9878-0df5a77007ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56916b59-a2c1-4255-a87b-9848190c884f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8b814f-a2f6-4daf-942e-d73212cb5c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7444ee80-907a-4fe3-9e1e-328dfb42172b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b039c0-f790-4c2a-b4cf-38820272e9fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c42237ca-7376-4908-83e7-1c1ec7763a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8607c2a-4e67-4501-be37-00df005fb913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc053089-c3ef-4e9f-bb7c-f34517ca01dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1700fa0f-09fb-4bc7-b1e6-62d86336141d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc7fd2c-385c-4ec5-9087-4b6581a11565",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deea58e3-1c01-4bef-b6c6-6d1e92f95836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37bbd62-19a5-4739-90b4-9177afa0bbc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3022a8-e4ab-4dff-a59e-cfc501609649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e551f859-f720-48f9-bcf1-1552b2e74198",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6621d61c-86a9-426d-9935-b1b60b610663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10d86268-7221-450e-bade-36a76bab55cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b088bb-d2d4-4ead-b47e-64eec7bce5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1c895b-93fa-4b90-bd68-2eb1f18edaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21467e84-5f1f-4a0a-a0f1-486fa5165231",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be8bd22-ec47-43a7-a560-3c2a37e10ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0a90869-2d81-4642-ab68-09cf5502e791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efec50c-41a1-4244-af0c-ffa092f9072f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50be861-f874-4df3-9203-dea1209c5ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4e1f0f-5bb9-4c59-ba16-bfe837fe36d6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a83b386-f7ce-4f3a-bf99-2877e3070983",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da59c073-6a34-4de5-918f-a4254adfde03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d42c675-8016-4cc9-b6e8-d267ed827820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c018094-a7ce-46f4-adfe-7736406c71a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550f33d8-9746-4057-912e-0f9c0e09a3c7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69a4e85-e0e8-4eec-adf4-d4190a6b7b39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4170df50-5d94-4e05-a867-9e6b2b236065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc78b3cd-b815-46b3-b37d-c8fda036ca15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d246cde4-7f3e-4105-967b-a351acb86f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d88b2a3-ff66-457a-aa5b-c0ea3682d70c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f97b08-9c05-4973-8b02-c63fa842f5b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2cff720-c44c-485a-8f9d-c0d148f62f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d919bfc2-a7c9-473f-9714-f785d411e689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a190bdb-3390-4442-9206-3588257baaa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aca5f4c-fe6e-4d07-849d-9613635aba3b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e239a4d-539d-4b32-9b34-56035dc88bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e47e00b2-e895-4167-a255-e70f6d4fa312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "011b9a2b-1a92-48fb-8d45-b344bbe1dbb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2acf00-ef70-45e4-9c07-8528a37d9db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63418049-8066-4511-b755-1e5dd8357907",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e862273f-3425-47a9-80a4-ee7d724a23cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35ba965c-7638-4697-b8ae-8f4668db341e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247fd303-e183-4ad2-9a29-e71cf9e9d0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c851ca-a400-45c0-955a-796787715007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342e02de-fdcc-4832-84ae-b3154fe6a5ba",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4f6e31-e766-4546-b592-69e69e901add",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b853bf02-22ad-43ec-b3e3-107b2d209af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70211ec9-756d-42e5-82cb-9acf8c483c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db907bba-fbe4-4ba5-914f-f9f9e7d8e864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a7b15e-721d-4e9e-8c8c-7c3712f0ca01",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68bcc567-7047-42c3-a08c-5dc7c5e6034f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e2645c8-2229-499c-b20c-4e4706db64fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be15a97-3687-4594-be76-c2e4a31847f5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f45af958-9a04-48bd-b4ce-61b8174a7d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a786d312-26ac-4007-a3c4-a65fc7cbf6f6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85232299-bc71-4feb-8360-952f2a643a28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b91197a-2910-4fba-806d-ff8bc8404ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d78a459-56fc-4f38-b77a-321ad7a258fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07edd25-e387-4f9a-a7bd-899a509e7f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97243579-b169-4ce4-a908-5364b2a059ad",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de418d0b-02c5-468b-9e2e-75a814261c3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d27acb3e-fd8a-4ab1-b6f6-572691781ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "728644eb-72d4-4e89-9ab4-c6543ff0aa7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4854d209-4381-4d17-80db-5b1b9927f133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25eba931-1554-4144-aaa2-0368c4a4ba2a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068c4b5a-e580-4366-adda-64a7e4190b2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "956700e4-b914-4165-8639-1dd383f275a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a629486b-ad77-43f4-9596-a8b7e1f22135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7294e41f-c89d-49b3-a82e-0ad2c06409da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd552bb-9f09-4b60-ae1e-dada071e7efc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df4dd9a-6746-4fe4-bc5f-4e45642d1316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c1f8497-9b6b-40a7-ac51-607c3c0e49d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd13165-53a2-4e40-b81f-7a04cf938833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce61737-42ff-417c-b500-6176ae7bef30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99aca5af-693c-4a71-b0b4-ccc220552e76",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7e2086-db97-4ee5-bfb1-973171e7b164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fb7394b-2f03-46dd-8ae3-714822db50b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae302b2b-a28d-4b8d-bd82-dc11ac423aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebefb3de-a506-4ad9-9d92-3c4904ea808a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6caebb7b-0934-4904-84dc-6262beed1e37",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d105bcbd-215a-44ce-ab55-96d1f1efa6e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a65fc9cd-c309-464e-ab40-bb30a24bbcf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6163772-e522-406d-ba6f-c81f8cc9f137",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ce8771-0a8d-4632-8c3e-a2016040c9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ad2a44-21c5-476d-a90c-63c53eb32a5e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7b667f-1fba-4c17-8b2d-5310f08bf2a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85fb20b6-4655-45df-9cc4-ca5038a440a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c8bb53-8304-498c-94a8-cd9463064118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b08664d-211b-4f1a-b942-2d647482794c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a9dd4a0-98d6-4599-b017-bd4dd535f9f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b59dff26-a162-4681-85fc-b451e61c291f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bec42d78-5e48-47dd-8503-cf3280051436",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbe4b464-f4d8-444a-a28e-99cc5165bab5"
                    }
                  }
                ]
              },
              {
                "id": "643ff865-c625-4806-b46e-98cc529c166d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f892adb6-740f-4915-8679-8cbe6c3b89b6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace9c36d-5e11-42bf-8585-8a0ae19cc355",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fb4fee24-3c5e-43f8-a3ce-f1fefad1e11d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3821371-bbe9-4295-955e-a3ff11840f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36d9c75a-2d12-405d-947c-638a0deb6fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d90b805-cedf-4cf8-9a56-f4da07bef65c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483453f9-2c0b-44f7-9390-de09ad2bd92b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "afe4f95e-0cbb-49bd-887d-d7dc546c500e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b605f5-3814-43a3-bf79-f05c118a183f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5270168c-8308-45de-ba74-9658a74c9917"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cb97076-b6ef-4b3a-a88f-970868e22df1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff949946-9f92-4f39-8fe1-7c5700fdb47b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86d12cb8-dde9-4059-9f2d-18ff8a9c9649",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5e75cb1-9c4b-413f-b840-8e0491b0c24e"
                    }
                  }
                ]
              },
              {
                "id": "b18b7934-a89c-45d2-8de5-da1bdf6354b4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "510a8a79-4aaa-4632-b77c-ab4c79ff0d89",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156e0307-d549-455e-be38-bb4f06f4ed3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ba04b3a8-1df8-4647-93c8-de9e694b6e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfe214a-0e61-48e9-bfd4-000f2a508f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe3ce71-f7da-4090-9979-977a913041c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8a3a8469-cbc2-4795-aec7-e45cb376992a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1a17586a-c216-4a17-9e1f-6f323f98e259",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e9e82d4-460d-40b6-a7df-ae46efe3c070",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "98f155f8-45e6-492f-ae98-85308fd08338"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5f92c03-a08e-40bb-b0f8-1702990f7dd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16753a09-8050-4766-a2b3-cb1531df2028"
                    }
                  }
                ]
              },
              {
                "id": "70622ccf-521a-412b-8f2a-4e850f6e95e9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f77b9197-e3e1-4b68-bd3a-923922ab1818",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f2abbdc2-4bfd-4763-addd-819c5bf35953"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4081ac7-22ae-43e6-84b0-bbdc7b510931",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "805898c9-6f16-433e-a563-ae9d5c8d402e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b79da14c-d82f-43b0-b3bb-28834fc53b1f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "54640339-f657-458f-9080-27cf114a0c26"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92eb6af9-bd71-45b9-8df7-76b441840909",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3766e97-61e6-4ed7-bb07-0fe7af5cedb1"
            }
          }
        ]
      },
      {
        "id": "de2a27bb-9fe3-4e69-81e5-7ecd360f2e69",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "90c579c9-d290-4748-8344-0c16d745bb5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17a5fc0b-2a55-414b-b3c2-9440190d42d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b54933b1-17d0-4edc-8187-4f64ee8f8c6a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455f8159-0583-4eda-8103-b3d6a8ecb425",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f013a8e0-25ec-4f74-9b5d-1a01394ae855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b63412-2e6d-4608-b880-2947a1eb759b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48c1ecb9-a86d-4a31-a201-d83a2dc048b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92697c2f-7ada-4e98-b7cd-1dafccbb61a1",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1516ce5-b456-451f-80de-a3e6bb82a4c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b6daf60d-2d42-467f-84c2-a7614cae532d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d22ee0e-6644-4468-bd7b-f64450f6aec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30daece1-b5fd-4d5e-8835-6209f3613bea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02ef76d2-4059-4141-98e1-724c2052b76e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37ac14ad-d6b1-495b-b2cd-139730752f28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46f8c16f-bf08-46c5-9b59-f67a4f3fe094",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fd77d0c-76ff-43c5-b1f1-217181e7af5d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c13b1af6-fa2f-4aa6-9900-5367db59df6d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "315d6706-ba70-421d-9535-7c7c0e5bb913"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6cc0855-0198-411d-92fd-c9f73320ec75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3766c05f-09dc-4803-b5c4-f93685bb6de5"
            }
          }
        ]
      },
      {
        "id": "1c1fa785-f70c-4400-99f6-b4a1c69b2e8e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ac4e33dd-d171-4198-8d62-ca5ad1242e0a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcdee1c5-1c01-4e8f-b17c-9a586b3a1fb3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a2c04346-8e11-4cbd-a1a7-1e7369df9bb3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8917713-6b6c-4954-aabf-6379fbdd71a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7a4b5234-0291-4d8c-9b11-eb751212a5a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88f42bc-31c5-41e9-b637-8ff5752c5f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85c590a0-019e-4651-9043-fceb29f3dd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af80a22b-5593-4a83-89d7-68ea73c2e0fe",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa16817-2e33-481d-b14a-5c394626fb74",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ea0e81b0-306c-4c91-80a4-21212c0a4e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9113b2-1718-4632-bf2a-993d5b1adb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b6d3dd6-0284-4d50-a5e3-1a73274dbfce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73ed482a-49c3-4cf8-9e13-2ab1594560b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7e05348-b929-48a4-b784-60a976123b8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7e47bf7-5660-4b1b-822a-dfbd477031ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45c061c1-787a-4a74-9f72-8befbfdf0c67"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd8ddfd9-5956-450c-9df5-106aeca88316",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d50a6e1a-87b0-4df9-9186-3e635d11e752"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4ef140b-104d-4645-a137-49f326c9cda8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90d59af2-04b6-43ee-8ca8-94c489bc9ee4"
            }
          }
        ]
      },
      {
        "id": "5d44a233-2cf4-438b-8bcc-17ffa09ba427",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "35d656e0-8da0-4409-84be-08164acddef0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "504158f8-d637-45e3-8a0e-a34f56ce30bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "638fc929-4d35-460c-afc1-8aa9f47c9dfb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cf6f8d-e9b0-4bc7-a04b-520b5beee23d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "60106027-687b-40eb-a50d-6fff560ff98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c910dcf-dc52-425a-b41f-54b6b7f25ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c868fc89-bb72-42d5-b9c4-a3bd00e067af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb30836-5bd5-46da-b718-c7a444812805",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00288279-7b62-43f5-a8ee-4dbdb4e9e835",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c1b27a85-a50d-41fd-a924-3dd8a3b3e500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02c3dcc-e558-4dd3-b1b9-248f5c2e4569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41699477-c543-4c3c-b891-43778cfd4be7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a46ffb4b-f1e3-4157-b23d-bc34432bf00a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "068bd469-c74d-4a4f-b48b-39e3aa4711aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a0ec265-5566-406e-a86a-1f0450e010da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fc110f5-95fc-42e2-b773-d1fd3d2a085b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f080fc9-6c46-4826-b6b3-f6602a7aee4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "caa895ee-655c-4ca2-a211-ffeca610f7df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12eed699-9eb9-4c46-975c-ff47a9a0e869",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30893ecc-27bd-41d2-9cf8-8e532b31d1c4"
            }
          }
        ]
      },
      {
        "id": "f39582a4-884f-4034-9498-e4177ae59337",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3ce2559-649e-4f2f-8b04-67d1f4099466",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e8cf147-921b-44fa-9a1f-a32bbd207ee3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "15d005b5-fbc9-4ee4-8d33-bf913efbe337",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ceed417-cf5e-4223-b6fa-ad87c0c07826",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb935b4a-ea1f-420a-bd36-83aad98b4cf3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 473
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 160.05487183054885,
      "responseMin": 14,
      "responseMax": 5644,
      "responseSd": 687.5723358485377,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673397554411,
      "completed": 1673397628406
    },
    "executions": [
      {
        "id": "6fe89365-e05b-4565-a60d-4309bf3380e5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4d334f49-7b3e-437c-9b82-c3d63e1d86b0",
          "httpRequestId": "47e78a9e-fd4b-4c92-9bc1-2e9b2c3ad9ea"
        },
        "item": {
          "id": "6fe89365-e05b-4565-a60d-4309bf3380e5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ecd71d24-c2f5-46fc-8bf5-2381f7d028b1",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 0
        }
      },
      {
        "id": "8b3bd81e-1af6-4f00-9b6a-10be20c00343",
        "cursor": {
          "ref": "df9dda50-0a01-4ea0-9d2e-708f9ee32e5f",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4c1ef580-e87c-4c11-8870-47928597895e"
        },
        "item": {
          "id": "8b3bd81e-1af6-4f00-9b6a-10be20c00343",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2ea15435-c49d-44fb-8115-0f5d056b9e2e",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "030f8502-7975-443a-b07f-ea1440aa8aa5",
        "cursor": {
          "ref": "0839f247-6152-4b2e-9200-6b1f4fc44e03",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2d56f99f-21d3-457c-a4f2-d28a3f89334f"
        },
        "item": {
          "id": "030f8502-7975-443a-b07f-ea1440aa8aa5",
          "name": "did_json"
        },
        "response": {
          "id": "01b360e3-2ede-442e-ac10-e1863b6a56a7",
          "status": "OK",
          "code": 200,
          "responseTime": 350,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f256348-a494-4ec3-952d-15744d358f91",
        "cursor": {
          "ref": "8005a7e7-da3c-41e3-ba2d-28ff249158b7",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f9e3399a-6ce9-4af6-bdc2-27ab776b00d4"
        },
        "item": {
          "id": "0f256348-a494-4ec3-952d-15744d358f91",
          "name": "did:invalid"
        },
        "response": {
          "id": "9c672452-6daa-424a-863f-0d6c28221521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f256348-a494-4ec3-952d-15744d358f91",
        "cursor": {
          "ref": "8005a7e7-da3c-41e3-ba2d-28ff249158b7",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f9e3399a-6ce9-4af6-bdc2-27ab776b00d4"
        },
        "item": {
          "id": "0f256348-a494-4ec3-952d-15744d358f91",
          "name": "did:invalid"
        },
        "response": {
          "id": "9c672452-6daa-424a-863f-0d6c28221521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff852749-e67e-42cc-9041-cfc3e77ff713",
        "cursor": {
          "ref": "b08a1c3f-5c3d-4eac-bd67-783d948546b2",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "349fcc1f-058e-4dd7-833b-70c9cef29f10"
        },
        "item": {
          "id": "ff852749-e67e-42cc-9041-cfc3e77ff713",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7403962c-a18c-4809-ae4d-98ab87fed450",
          "status": "Not Found",
          "code": 404,
          "responseTime": 392,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba9c73c-e54b-4884-8a02-504f2a614095",
        "cursor": {
          "ref": "d805bb97-835c-4b96-9b3a-ca090b33c18e",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2973f90e-f2d3-4b80-b72c-200dd47a6bc6"
        },
        "item": {
          "id": "8ba9c73c-e54b-4884-8a02-504f2a614095",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9b3948db-80d5-4889-baf0-940c0ebb9d69",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db2517b-fff3-43a3-a452-8ea4430674f0",
        "cursor": {
          "ref": "d0b872cf-045d-4ffe-927a-cb1e71b37617",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "43f55f5c-9bd8-49ba-8474-0e7378a9e1bc"
        },
        "item": {
          "id": "6db2517b-fff3-43a3-a452-8ea4430674f0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6d3b1a71-4003-4349-bf91-2301d1af946a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182df1c5-8f97-45d8-9f70-25da5e6ee352",
        "cursor": {
          "ref": "5705779b-6cb1-4da9-886b-448d6958ebef",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4da2b92b-955f-4836-a4de-8deec511428c"
        },
        "item": {
          "id": "182df1c5-8f97-45d8-9f70-25da5e6ee352",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "082e7f86-5b6f-4575-a334-4c9ae8b119d9",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "182df1c5-8f97-45d8-9f70-25da5e6ee352",
        "cursor": {
          "ref": "5705779b-6cb1-4da9-886b-448d6958ebef",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4da2b92b-955f-4836-a4de-8deec511428c"
        },
        "item": {
          "id": "182df1c5-8f97-45d8-9f70-25da5e6ee352",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "082e7f86-5b6f-4575-a334-4c9ae8b119d9",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "027142a4-7c15-4202-b52b-7250e4aa6cdd",
        "cursor": {
          "ref": "bdb4d6bd-2781-4779-8c02-b8a5d7dab095",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6f21cd8e-dc26-4e51-b134-746576bb7f11"
        },
        "item": {
          "id": "027142a4-7c15-4202-b52b-7250e4aa6cdd",
          "name": "identifiers"
        },
        "response": {
          "id": "8920a03d-554d-42e7-8bb8-d7605412889a",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c459da-1875-484d-9f15-d0251c849068",
        "cursor": {
          "ref": "e7316ebb-551d-45d9-881c-e3f25f26c90b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "82868df3-95dd-495a-966b-fea7cfaaaa9c"
        },
        "item": {
          "id": "78c459da-1875-484d-9f15-d0251c849068",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d643fea-5587-433f-ad0b-acc1315e4f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "78c459da-1875-484d-9f15-d0251c849068",
        "cursor": {
          "ref": "e7316ebb-551d-45d9-881c-e3f25f26c90b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "82868df3-95dd-495a-966b-fea7cfaaaa9c"
        },
        "item": {
          "id": "78c459da-1875-484d-9f15-d0251c849068",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d643fea-5587-433f-ad0b-acc1315e4f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "8098c009-e3dd-4dfd-8616-d6880833d368",
        "cursor": {
          "ref": "27d4734b-9e27-4764-b210-cadf8045b998",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5d870682-b892-4f45-9f62-f4403e497430"
        },
        "item": {
          "id": "8098c009-e3dd-4dfd-8616-d6880833d368",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "23f8e444-65cb-4bec-82f5-95f82ebf4c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "833e1b7e-0dca-436b-8a1e-71963d4c0c9e",
        "cursor": {
          "ref": "11841df8-f19c-4869-957d-1cbd1065f208",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "085646c5-47ef-45aa-986a-dc562c948d2b"
        },
        "item": {
          "id": "833e1b7e-0dca-436b-8a1e-71963d4c0c9e",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "f5565fe0-2202-4a4a-b604-9a65703c2e57",
          "status": "Created",
          "code": 201,
          "responseTime": 122,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "4556ad7f-5927-47a0-b86e-0e9eb8b3fcf4",
        "cursor": {
          "ref": "1cb46670-7fef-4891-9fad-3b22fe671fb1",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f58f3b33-912e-457a-97f0-9e365c99e600"
        },
        "item": {
          "id": "4556ad7f-5927-47a0-b86e-0e9eb8b3fcf4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6777ad08-874a-4fd2-a0ad-c1b024c735d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "9848f45f-ec0c-4164-8b14-60aa657e2695",
        "cursor": {
          "ref": "8e895fa9-ded5-4e7a-8939-9c25aa98258a",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "02c963de-e2e9-4a1d-a191-226bfe81e175"
        },
        "item": {
          "id": "9848f45f-ec0c-4164-8b14-60aa657e2695",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bad75d4f-2f0e-418f-a3d8-b7247664e9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "bc62088e-801c-4b35-8990-de37c29fb4d3",
        "cursor": {
          "ref": "5f1c414a-47f3-4fa2-9cae-fe80daf96b73",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "452762aa-ed2d-4beb-8852-2398b3837c44"
        },
        "item": {
          "id": "bc62088e-801c-4b35-8990-de37c29fb4d3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3d463de9-4043-43a7-bbe3-e8af48193d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "b24a1297-a6db-4726-b96a-90f7dc4ac77b",
        "cursor": {
          "ref": "1c7b19b4-4d42-4a0b-8cf2-325c464dad11",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2b87fcd7-7f5b-4a34-a87b-d838a31cf833"
        },
        "item": {
          "id": "b24a1297-a6db-4726-b96a-90f7dc4ac77b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "baf6202c-e6f3-41f7-a801-33cc9d3c9801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "fcdc5665-0183-4050-8f72-51145508c605",
        "cursor": {
          "ref": "2d525a98-ed90-4815-bd41-5e4c3abe950a",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "756c9523-3ed3-4ef3-81c1-25285ee16df2"
        },
        "item": {
          "id": "fcdc5665-0183-4050-8f72-51145508c605",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0cec209c-542f-4af9-ae67-0d401cbfd850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e60b75f8-c791-46e9-9095-ca51ec88dcc8",
        "cursor": {
          "ref": "c9aff0b5-5adf-49f5-af89-e4a25b32ddc4",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "da7bd171-8052-4691-830f-31bba45d9a69"
        },
        "item": {
          "id": "e60b75f8-c791-46e9-9095-ca51ec88dcc8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7ac63d6a-6f0c-4d5b-bba9-06585c015be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "24874431-6222-4467-8f59-423dd75071a7",
        "cursor": {
          "ref": "25d4ae86-a8ce-4bdb-9b24-53e67bb937b8",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5fa425d0-6af9-4156-a5e6-27f0e6b8b8e0"
        },
        "item": {
          "id": "24874431-6222-4467-8f59-423dd75071a7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d63f0b90-6561-4c54-ad18-d96e6208b349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "fb5f3992-6cb0-44eb-b9a0-7bfa93a791e3",
        "cursor": {
          "ref": "be59e2f1-2d29-4bda-83f5-3fac3e9e15fb",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4e6cab88-9129-44c5-8309-da5c40cc96ce"
        },
        "item": {
          "id": "fb5f3992-6cb0-44eb-b9a0-7bfa93a791e3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8954d86b-eea1-4f25-b339-dba09ba7b64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5fc8b73b-c8f6-45ef-8b87-6da880d48419",
        "cursor": {
          "ref": "d9be7e70-556e-4d26-99e0-2f6cb953a169",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4e23f33d-31e6-4013-89a4-23e5a16f55c9"
        },
        "item": {
          "id": "5fc8b73b-c8f6-45ef-8b87-6da880d48419",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3ae5763b-01c0-43a2-8f4c-c0cd5ac4369b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7a9a39e4-ad87-4682-8e93-b5848df623bd",
        "cursor": {
          "ref": "043d3389-67d5-4cfd-8e2f-229b23f7175c",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "604aec20-c438-4c8e-bec7-5d7c13089232"
        },
        "item": {
          "id": "7a9a39e4-ad87-4682-8e93-b5848df623bd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "895bf2d7-933a-4ae5-94e6-f9eaa9f9f77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f355c172-26a7-42fb-829c-c9098cbb6072",
        "cursor": {
          "ref": "ccb841c7-4042-42ea-957a-e90a90f6c29c",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fac83915-0cf8-4df4-9319-6e1568ade3d7"
        },
        "item": {
          "id": "f355c172-26a7-42fb-829c-c9098cbb6072",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "ad0a892f-5266-4d55-b8d3-acc9e62fce8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "9b8b2331-e13c-4644-9f4c-83e49ceeb927",
        "cursor": {
          "ref": "9b601f4e-cdef-47a9-a04b-48539ecf5131",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8d97b394-5cb8-4d8f-8242-1ac9918374af"
        },
        "item": {
          "id": "9b8b2331-e13c-4644-9f4c-83e49ceeb927",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a23a0037-da5b-45cf-83f2-4e6547b83508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "049e4dd9-531c-438a-afee-225f84179d64",
        "cursor": {
          "ref": "5def5ba6-17fc-4960-a067-16850ee0e10a",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ce6b0137-312c-440a-bb71-2b84a4655f10"
        },
        "item": {
          "id": "049e4dd9-531c-438a-afee-225f84179d64",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8054a41e-2fbc-48ac-b198-c3e172c6ac8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b11e5a16-5fc7-491e-bdf9-ec2a9c868a4c",
        "cursor": {
          "ref": "30ed5109-9983-4c1e-ae00-9de33b3ed0f2",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cd08bfd3-89cc-4134-b54d-76848307eb38"
        },
        "item": {
          "id": "b11e5a16-5fc7-491e-bdf9-ec2a9c868a4c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e52bc2c4-cda4-420c-8269-eec9ecf10a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "856bd66b-a073-489c-aae5-08f2b6c41f60",
        "cursor": {
          "ref": "0d7e6d62-d95b-4d9a-9c98-481e2a099fc0",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f07436a4-bfe7-4efd-87c0-2fcce67b39c5"
        },
        "item": {
          "id": "856bd66b-a073-489c-aae5-08f2b6c41f60",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "aca05a04-4b5d-45cb-b60e-49b836bb8af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "95b71161-6e58-4019-b2b2-f7444d691455",
        "cursor": {
          "ref": "7ef551bb-8b2a-4d30-bb95-237e6e8ad723",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0c558cc8-71ea-4ca7-ab28-e4b121f446da"
        },
        "item": {
          "id": "95b71161-6e58-4019-b2b2-f7444d691455",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6dca1b7f-f35d-4b11-ac78-5e514befa8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "f57e14a1-96ad-4ab8-8995-25247397432f",
        "cursor": {
          "ref": "4cd6bc43-c06e-4542-ba91-63db54ad750f",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "97c0a513-ff57-4934-8abb-b1d1a30302a9"
        },
        "item": {
          "id": "f57e14a1-96ad-4ab8-8995-25247397432f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ceea6b38-f70c-4a47-aabd-596c1ac5c69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "4dd13a5f-e555-4e4e-b892-d791cdc17db5",
        "cursor": {
          "ref": "b11e03b5-1f2a-4738-a72e-9d5178101a71",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ee5649ea-1317-4e27-95d9-50008d8cc3f9"
        },
        "item": {
          "id": "4dd13a5f-e555-4e4e-b892-d791cdc17db5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "528c83f1-2818-4d58-b40c-6e898e5b5657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "b3abceb3-a738-4e04-983d-4bbd36cbd323",
        "cursor": {
          "ref": "dc9b2c76-b1ec-49e1-98d1-e7586857dd97",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "725810b1-7449-4f42-994e-34da348c68f8"
        },
        "item": {
          "id": "b3abceb3-a738-4e04-983d-4bbd36cbd323",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "aa73b684-1d85-42ce-b396-e81e7b574212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "69fb5961-4ccc-424e-801a-638e62d786da",
        "cursor": {
          "ref": "b13df240-345e-4d67-939e-ae01530bd534",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "15786988-9412-4a65-b74f-c2fcda8027ca"
        },
        "item": {
          "id": "69fb5961-4ccc-424e-801a-638e62d786da",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1a99babe-db3d-4478-8237-345172d022fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "86226025-e812-42e7-b8ec-4b4ee53b43d4",
        "cursor": {
          "ref": "f6f8ccf8-e277-4068-a1cd-dea5f5815633",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1d6578bd-eb08-41c1-abf7-1c4ad641f354"
        },
        "item": {
          "id": "86226025-e812-42e7-b8ec-4b4ee53b43d4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ad0b7392-be9f-483f-9967-9254c52127e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "ffa93627-58ae-43ea-a09f-c2b31c8efe71",
        "cursor": {
          "ref": "2797a16a-be79-4e82-9ef1-5a6fc5d8081e",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "329f3652-dda2-4367-b95d-bfd95daa0f80"
        },
        "item": {
          "id": "ffa93627-58ae-43ea-a09f-c2b31c8efe71",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4610ea30-1d6d-47cd-84b6-16b0049d871c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "0bdc4036-8ee5-466b-bb91-51b675507da3",
        "cursor": {
          "ref": "e8895d12-567f-4b6e-aaa2-819ab85bbe42",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fbd61fda-0b18-4d2f-9a94-f1b516653c67"
        },
        "item": {
          "id": "0bdc4036-8ee5-466b-bb91-51b675507da3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3e8b5736-9877-4925-b3d4-b065cb800584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "ab06386a-6088-43b4-ad60-2c4727ae3e55",
        "cursor": {
          "ref": "c006579c-db6b-4109-a2b0-d11239aa5cd5",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8c71eea1-94de-4961-b014-ded9c478740a"
        },
        "item": {
          "id": "ab06386a-6088-43b4-ad60-2c4727ae3e55",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5f768dbe-fa0f-414e-afde-692f24296f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4517,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "45b93473-6ba1-4f6d-8c2a-420981e7b0a7",
        "cursor": {
          "ref": "0ae5dfe7-b7f5-4136-bbce-3f40aa0e16e0",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d3b3ab12-e752-4402-b6b9-ce5ee9e7386e"
        },
        "item": {
          "id": "45b93473-6ba1-4f6d-8c2a-420981e7b0a7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "12f9f1ab-e7a8-4805-b51d-c16421963143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4561,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "1709a7c4-5549-4213-a958-65ca83437b9c",
        "cursor": {
          "ref": "ec1c78e9-1dd2-49e7-8dce-23fca7a3becb",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8ecbba26-46b3-4815-80a9-2f4a965a5706"
        },
        "item": {
          "id": "1709a7c4-5549-4213-a958-65ca83437b9c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1a0192ae-7a81-4570-aac8-12aad6977852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5644,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c10221c3-a110-4199-9086-720764b11b52",
        "cursor": {
          "ref": "166e8fee-3b21-48ad-9740-86f6fdc72448",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ffceb233-60c1-468a-a53d-59dc1ba3c44d"
        },
        "item": {
          "id": "c10221c3-a110-4199-9086-720764b11b52",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f380bb49-497e-4a5e-a50a-0422a4ee955c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4362,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "326d7ed8-655b-4694-9ce6-fd1d08702dd1",
        "cursor": {
          "ref": "870127a8-7e2e-4577-bfd0-b76509c6d5b3",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e554db64-547f-45a2-9933-2a0e954a1167"
        },
        "item": {
          "id": "326d7ed8-655b-4694-9ce6-fd1d08702dd1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "418df54f-14ea-452d-a2ca-1c2ff37e1ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3967,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "93aaec1a-94d9-413e-8658-5ebfa411297e",
        "cursor": {
          "ref": "6c36d0bb-c8a9-440e-b5d0-aa3a5faabc0f",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5fcd1ef1-c6ac-454a-862d-ea79d21650c4"
        },
        "item": {
          "id": "93aaec1a-94d9-413e-8658-5ebfa411297e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2fe06ddb-0790-4e58-8842-bfef0773186e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "856582aa-8112-456f-be36-0b9a13062833",
        "cursor": {
          "ref": "c6e73922-744a-4e1a-9b31-bfe82122cf95",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "36c333ff-f956-4732-b570-c54c9978b6b1"
        },
        "item": {
          "id": "856582aa-8112-456f-be36-0b9a13062833",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "57158466-32b7-4d86-85cb-38bde3c5dd8c",
          "status": "Created",
          "code": 201,
          "responseTime": 3926,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "a509a23a-29e3-4648-be7c-f8ebdd908a00",
        "cursor": {
          "ref": "cf9ea8fb-3e31-4bac-802d-29ec173d9340",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dd91c2e7-173c-48f7-9a77-75499a2dfcf1"
        },
        "item": {
          "id": "a509a23a-29e3-4648-be7c-f8ebdd908a00",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "292c0774-1a10-4028-a95f-2b66d9e4e138",
          "status": "Created",
          "code": 201,
          "responseTime": 3986,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9f347c65-e0a6-450f-8820-77525bbb45aa",
        "cursor": {
          "ref": "318216c2-a862-4a36-8046-f1bfe748e5ff",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c8ea6d52-17f2-40f9-814e-a95c0212cdc8"
        },
        "item": {
          "id": "9f347c65-e0a6-450f-8820-77525bbb45aa",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c2804dba-c861-48d2-9713-a383dec69607",
          "status": "Created",
          "code": 201,
          "responseTime": 3739,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e1dded44-6de0-4d58-b933-308c6a3618f2",
        "cursor": {
          "ref": "3dfe7fba-4f7e-4f5f-8ccd-afe52c0c0135",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f82683c6-5b72-4d0c-aba3-2d67eea333ee"
        },
        "item": {
          "id": "e1dded44-6de0-4d58-b933-308c6a3618f2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "19243d45-a953-49fa-ac2b-1ed8faef15ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1fdfbb98-458f-4e8b-b750-84a12f2845f2",
        "cursor": {
          "ref": "5be85ca6-e5d4-48a0-8726-3303a3b61bd4",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6cfb4703-dcf3-4c06-8d28-304b7816f83e"
        },
        "item": {
          "id": "1fdfbb98-458f-4e8b-b750-84a12f2845f2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5c02216e-3bf3-40a6-899a-2629e8f474b9",
          "status": "Created",
          "code": 201,
          "responseTime": 4085,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fc225def-25fa-4ee0-9efa-ea03bf49416c",
        "cursor": {
          "ref": "30e0570b-bf2e-4a55-9070-d4e0f9daec4c",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c849004d-dd65-44ec-a01b-d4f60f1947d2"
        },
        "item": {
          "id": "fc225def-25fa-4ee0-9efa-ea03bf49416c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "092e968d-769e-4ab8-b3dc-b525bbabb46c",
          "status": "Created",
          "code": 201,
          "responseTime": 5043,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1f087da6-b877-4480-aeb1-931474a9e7cc",
        "cursor": {
          "ref": "b2ee64dc-0ae2-4547-89cd-24baf7fe3424",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e7fb4864-e94c-454d-8c71-391056486a92"
        },
        "item": {
          "id": "1f087da6-b877-4480-aeb1-931474a9e7cc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3f466e27-0af3-4752-b034-f204c84df4fc",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 1533,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7afdcfb9-dcf5-41bd-8754-81101851713b",
        "cursor": {
          "ref": "0ec3a16a-79dd-47b2-859d-336ba30c243a",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ed272727-9d1f-461b-9b6f-d4d6b0864ba9"
        },
        "item": {
          "id": "7afdcfb9-dcf5-41bd-8754-81101851713b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "34a7a21a-31b2-44e4-a822-180772389f2e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3f208a4f-a6f2-4fe5-bb84-ef8c745bd926",
        "cursor": {
          "ref": "2b7f99bc-9d9f-4719-8343-95f9d1ba688a",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0e4cb178-0dc2-411f-ab5e-ca2126f9d574"
        },
        "item": {
          "id": "3f208a4f-a6f2-4fe5-bb84-ef8c745bd926",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1d5f5aea-344b-48b4-85d1-41a7287a96c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e16ed49a-8130-44e2-80de-972737351194",
        "cursor": {
          "ref": "26134477-1842-40ee-94a2-7f7f90544874",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e8403096-18a0-4aff-b169-518db4ffbaaf"
        },
        "item": {
          "id": "e16ed49a-8130-44e2-80de-972737351194",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cdc27c2b-998c-455c-8fb5-a4d30f6f55fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f8563000-51bb-4ded-b08b-dd4d21a9a4cf",
        "cursor": {
          "ref": "c02f31f0-db45-46b3-8cd3-b67d03c4dc65",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1b802095-2fbe-4dc7-8c15-9a3216fc3910"
        },
        "item": {
          "id": "f8563000-51bb-4ded-b08b-dd4d21a9a4cf",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "308251de-6f6b-44e6-b2a8-26b92219d14f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7d0b05b0-653a-496a-85bc-cef9f9b0a881",
        "cursor": {
          "ref": "96e32588-1d43-4474-b31d-c342b7fea3c2",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9b4b9322-5a1a-4dca-a3b5-8985e8f6ed70"
        },
        "item": {
          "id": "7d0b05b0-653a-496a-85bc-cef9f9b0a881",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ee08c5fe-3a76-4fa6-a398-025858881084",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "d155d155-3cca-4e3c-b6d6-12f0b197b3e7",
        "cursor": {
          "ref": "ef5c5723-9663-4f25-97c7-68ff06ed99d3",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1de20ac5-688e-4dd7-a5d3-c19df1f1c0f4"
        },
        "item": {
          "id": "d155d155-3cca-4e3c-b6d6-12f0b197b3e7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "88e68c5e-c29e-4306-a283-972171ced002",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "5e4b39f8-8cb4-43c7-9add-e49de0106e0c",
        "cursor": {
          "ref": "c6ac1d8c-57f2-43e6-ae33-8918eead853e",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1d48bce0-f708-4e28-b9b1-f8219ccab7d3"
        },
        "item": {
          "id": "5e4b39f8-8cb4-43c7-9add-e49de0106e0c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e2e656bc-6d5c-4d4c-843c-d8e60b23c41e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "b433ca74-5c1c-4372-92b7-5d20013de56d",
        "cursor": {
          "ref": "a682078d-6ecb-408b-ac43-d0dad84c501e",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ba081958-42b1-4fc8-a2b0-8870a5dc0ba9"
        },
        "item": {
          "id": "b433ca74-5c1c-4372-92b7-5d20013de56d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "cea3558d-1e95-4815-8938-769927de024c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "b9186ec5-9bb6-4cc4-b25c-0b2b1fc38e7a",
        "cursor": {
          "ref": "1120d4fd-c4ac-4cf4-b86f-4673f47bd1ee",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ef59591f-e68d-44f3-bddf-331c2ba08055"
        },
        "item": {
          "id": "b9186ec5-9bb6-4cc4-b25c-0b2b1fc38e7a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "444701b9-d6e0-4488-858a-b73bf29a7de2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a5319671-a642-4f94-ae19-490992467cbd",
        "cursor": {
          "ref": "e3c799c6-af77-4f42-a926-a0a5c313e2c7",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b4f50bc4-d02d-46f5-a5c3-029fe358965e"
        },
        "item": {
          "id": "a5319671-a642-4f94-ae19-490992467cbd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7004e1f6-160b-4645-a31c-ec694d580182",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "9e8d1a3c-8c07-49d5-9522-68142ab956ad",
        "cursor": {
          "ref": "56273fda-34cc-4528-8af7-95861379a877",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "acf76bcb-518f-4a33-83e6-c9514315d7c1"
        },
        "item": {
          "id": "9e8d1a3c-8c07-49d5-9522-68142ab956ad",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d8f2e7b1-9e41-4e5c-af23-d2813bdc47a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "f23d5be3-dbe6-4c3b-9dcb-48e3004d57ee",
        "cursor": {
          "ref": "bea4dae8-9c19-4d6c-9af0-45bf12c446c3",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4ed3b86f-4953-496c-820b-7c2a5b189bfc"
        },
        "item": {
          "id": "f23d5be3-dbe6-4c3b-9dcb-48e3004d57ee",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "23f5d479-0fdb-4f88-8777-914a14babf11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c94f92e4-3742-4ac7-9c50-af8bec497644",
        "cursor": {
          "ref": "0d71750e-0df3-4830-83e9-e3a1aa103ca4",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "cb4536ee-289f-4bb3-a022-63d9ae336ee4"
        },
        "item": {
          "id": "c94f92e4-3742-4ac7-9c50-af8bec497644",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dcae770a-a076-4341-a19a-5661afcd6640",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "1a2cf5bb-c4ee-4d42-aa78-2d9e35f01d0e",
        "cursor": {
          "ref": "3a69553f-a3ef-4a70-8d8d-0126c3f11fce",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "99b28d8d-f10b-4203-8adb-f503d19a1795"
        },
        "item": {
          "id": "1a2cf5bb-c4ee-4d42-aa78-2d9e35f01d0e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "89cc9282-34e1-4e11-9408-f45d45fba92d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "20b483fc-0f2a-4f1e-ac31-93ea83275f0e",
        "cursor": {
          "ref": "83e2902c-f7df-473e-9cea-f958ecfe5aac",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f8db60cc-7c25-4b9b-b4bf-73f82025555a"
        },
        "item": {
          "id": "20b483fc-0f2a-4f1e-ac31-93ea83275f0e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "609b0937-a93c-4446-ab09-3b1bd255f228",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "13d58d0b-dfa8-41d2-b075-b9f3c2976c1f",
        "cursor": {
          "ref": "dcb586ab-3285-46ce-9b29-5d1410915b4e",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "77711ba4-a768-4677-b68d-88c0fb94d800"
        },
        "item": {
          "id": "13d58d0b-dfa8-41d2-b075-b9f3c2976c1f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b437a358-6fe3-423e-8728-ee0b5d3ed1cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "416b2a25-3934-4777-9c15-564fccb67b07",
        "cursor": {
          "ref": "7d3944df-cd47-49d1-96ed-33c664ef93fa",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5b615213-2b79-49e5-badb-2f2c522d917b"
        },
        "item": {
          "id": "416b2a25-3934-4777-9c15-564fccb67b07",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "781d7530-c5c0-4e67-aad3-65710b25a34b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1f44369b-2f20-461f-ae97-ef3b4c6f973d",
        "cursor": {
          "ref": "a21206ba-7f1e-477a-8bf8-0c42798ff2aa",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "17c5e754-5110-4089-b655-6eaa5a10aee0"
        },
        "item": {
          "id": "1f44369b-2f20-461f-ae97-ef3b4c6f973d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "521d213e-57a7-4f35-805b-6990787b9356",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "669452de-f890-4ba9-ae76-fb4da89a7f78",
        "cursor": {
          "ref": "e4a78d2a-a3d2-4f40-bcbb-228b61cc1bca",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "83f1458d-cef9-4c7e-a021-76e8461a4d42"
        },
        "item": {
          "id": "669452de-f890-4ba9-ae76-fb4da89a7f78",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fc3e741b-2e22-4a32-a76d-706ae554b24a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1ea260ad-8544-4de5-ad8c-60d279b1f113",
        "cursor": {
          "ref": "700e00ac-3d09-49c3-807c-c98ab098b6d5",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "917cdb81-cc05-4cee-b431-c7594ff994fc"
        },
        "item": {
          "id": "1ea260ad-8544-4de5-ad8c-60d279b1f113",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5db0b415-6b0a-4e1a-b251-86c3dbf14eac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a6790f0d-62e4-4409-b1af-782821b94541",
        "cursor": {
          "ref": "9c6d2bdd-f074-413b-a095-5f3f478af8ec",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3d4053f8-292c-4fa1-a17d-46c3ac0fd187"
        },
        "item": {
          "id": "a6790f0d-62e4-4409-b1af-782821b94541",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "69d8512f-12fc-4590-ad17-56db7a28864e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5f6c9e18-43cf-40c5-a2ca-aace8e485907",
        "cursor": {
          "ref": "b857db66-ef79-4bbf-b5de-cb3e3609872d",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9ecf47d6-cb43-46d9-8564-d4db9f583853"
        },
        "item": {
          "id": "5f6c9e18-43cf-40c5-a2ca-aace8e485907",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4bdaf479-5a8a-4dc4-83af-bc8aad96c16c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "a250f093-f2bd-4421-92cc-9efc5ccb1c67",
        "cursor": {
          "ref": "acb35472-bfb8-49dc-be50-c9bd9146d277",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "88e453ad-6554-4776-94a8-3a9415bf4439"
        },
        "item": {
          "id": "a250f093-f2bd-4421-92cc-9efc5ccb1c67",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "377bf1b0-ed01-402f-b2a1-006866f16019",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7ffda5b4-4e30-4aeb-9f7f-950b7c852053",
        "cursor": {
          "ref": "0ac3ac3f-f35d-4dbc-8fbb-94a48cf0fd21",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "42698233-2f72-4b40-a3a2-76c0254c3f71"
        },
        "item": {
          "id": "7ffda5b4-4e30-4aeb-9f7f-950b7c852053",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "eedcea8e-3a3c-4fc6-a5ae-87d67403991f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "f07a1f50-18e8-4420-8faf-df11331db81d",
        "cursor": {
          "ref": "28b654e3-9b64-483f-bfd6-229274c5a16e",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2539d899-9652-441b-a254-29ca43767ff3"
        },
        "item": {
          "id": "f07a1f50-18e8-4420-8faf-df11331db81d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "318c48d8-3206-4b4b-88e5-6868f11a07a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "a3448260-de32-4bd5-a56a-00b71248a632",
        "cursor": {
          "ref": "9d56d895-7114-4443-bcfa-dfdb35bf4146",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "43a4a543-3dc8-476e-a351-29790b060901"
        },
        "item": {
          "id": "a3448260-de32-4bd5-a56a-00b71248a632",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "292cb3d3-89f0-4a0c-b097-34cdd6042efc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "70823923-c222-47d9-a258-4f210217bbc8",
        "cursor": {
          "ref": "2d822b67-1b2d-483d-a7ad-443d05defefc",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "13eb8ab2-f5ad-4a3c-a78e-fe7c956dbe77"
        },
        "item": {
          "id": "70823923-c222-47d9-a258-4f210217bbc8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4ab68721-1519-4443-aada-1f79c123b483",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "6add0ba5-82cf-42f4-bf17-b6acb9172b15",
        "cursor": {
          "ref": "b3e5b8b7-6596-483f-ac4a-5c8db63fb80c",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "07b56cce-c30c-452d-ac79-77e12f5b8331"
        },
        "item": {
          "id": "6add0ba5-82cf-42f4-bf17-b6acb9172b15",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "beefee69-0dea-417a-8d55-e257c55a3d2b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "0ba5ea17-2f38-4c82-85c0-79be2323df1c",
        "cursor": {
          "ref": "d400553a-f933-47dd-9209-fa7aa927553a",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "39d10eec-f65d-4e03-a4ae-44591f6207ff"
        },
        "item": {
          "id": "0ba5ea17-2f38-4c82-85c0-79be2323df1c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8d3a8875-66d9-43c4-8b33-09f5efce8b1a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "2937c2a4-a6a7-43c4-8c63-917a81e1162b",
        "cursor": {
          "ref": "344c4a44-67d0-4b2c-aa66-0edd654edb88",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cc8b9060-5abd-4cb2-ad8f-0b0f46a7bcd9"
        },
        "item": {
          "id": "2937c2a4-a6a7-43c4-8c63-917a81e1162b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4f324a56-3715-470a-b567-964a93d7fa14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "63763fad-fcab-4499-89be-e8b3f3dbbe2c",
        "cursor": {
          "ref": "427dd177-763d-4601-b97b-1b0c7810db6a",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7f761e61-821b-4dcf-97b8-4039e401081f"
        },
        "item": {
          "id": "63763fad-fcab-4499-89be-e8b3f3dbbe2c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7acb8c72-d6ce-4d0c-ad92-46b588b845a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "9ef66ac4-e5fd-4b08-a89b-8e671478e9aa",
        "cursor": {
          "ref": "00ca6baa-acf7-4f38-9c26-60fbaa56b1b6",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a01e9de0-a325-4c31-bdfa-fd22f6f6d5c0"
        },
        "item": {
          "id": "9ef66ac4-e5fd-4b08-a89b-8e671478e9aa",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4247d193-64d8-4dd0-8d3f-086f09a530bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "d17b3884-837d-4967-808f-fff5bdbb891f",
        "cursor": {
          "ref": "2bdc057b-2bd4-4341-859f-82f909df2e16",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "56a2769f-93a6-489d-96d3-b5dbaf39f78a"
        },
        "item": {
          "id": "d17b3884-837d-4967-808f-fff5bdbb891f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4c1fd692-300d-4c2d-96fa-cc600cd98c72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "9239eccd-8ae3-4a24-acea-278b2fc4e0ca",
        "cursor": {
          "ref": "961f5830-76fe-423b-b442-7a4afec30340",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "93845cc1-4ebd-4b6f-b9f0-75ae419cff8b"
        },
        "item": {
          "id": "9239eccd-8ae3-4a24-acea-278b2fc4e0ca",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e6a7910f-8745-4bd2-a2f1-b460f5540349",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "d7c3f272-8fb6-4356-980c-7256ff07da71",
        "cursor": {
          "ref": "7ed8a2ca-8fb1-466f-bc70-ada5882cce0a",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "921422ea-36aa-4d66-8833-41ed419776af"
        },
        "item": {
          "id": "d7c3f272-8fb6-4356-980c-7256ff07da71",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f49ccd71-474b-4f11-af2a-886daa90525a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "d1eca243-5ff2-46bc-a08f-7d7fd6d34597",
        "cursor": {
          "ref": "bce9c6b8-23ef-4a5c-ab9c-8eeb4d1c1184",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e13f4b67-649d-4146-94bd-7a229dd3fd0b"
        },
        "item": {
          "id": "d1eca243-5ff2-46bc-a08f-7d7fd6d34597",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5f0be5b6-2a28-4f04-9baf-e076f0c02a5f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "a0ff56bc-1722-41bc-900e-7680ccba3eee",
        "cursor": {
          "ref": "b7f94334-67f0-43eb-ab96-9811768b1fbb",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "87b3f2f6-c986-48c5-9efe-497d48ecd2b1"
        },
        "item": {
          "id": "a0ff56bc-1722-41bc-900e-7680ccba3eee",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d7f6a4ff-4591-4b46-a105-9130ad5f937b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "210d9c0c-87db-42f6-b8ff-92fa02a09758",
        "cursor": {
          "ref": "3190cd7a-5bf2-4331-936d-3a741206511c",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "da0690b8-53ce-4266-9aa0-5b7f16f8556d"
        },
        "item": {
          "id": "210d9c0c-87db-42f6-b8ff-92fa02a09758",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e766ff5e-aeaa-4d0c-bff6-26554c5d207e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "d213e817-3986-4396-8a4b-8b6786b5be88",
        "cursor": {
          "ref": "87d48e19-9271-49f9-b78f-0803c9cc1156",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ee5ca447-4509-45ab-a0c2-29272b32e51c"
        },
        "item": {
          "id": "d213e817-3986-4396-8a4b-8b6786b5be88",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0ec29142-950a-4610-b037-0e20cb377a88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "51da7c30-ca31-44fc-8878-c1f3151a442b",
        "cursor": {
          "ref": "39bbc3c2-cf54-4cdc-9d6e-2ef597e3fb90",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9d7acc1d-aee0-41b2-909f-45aefdf9675b"
        },
        "item": {
          "id": "51da7c30-ca31-44fc-8878-c1f3151a442b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "57c45dc5-3b89-4d1e-946a-7cd5189be719",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "b6a81655-a376-499a-8090-b03b121a0e22",
        "cursor": {
          "ref": "45099183-0681-437c-b01f-320c6366a9f2",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fca54721-0cfd-4974-86cc-282d04b84f8e"
        },
        "item": {
          "id": "b6a81655-a376-499a-8090-b03b121a0e22",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2c36e4cd-8397-4a7d-8ee0-4a91c185929c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "128db90c-1a6f-46b1-a746-4ab6407001e9",
        "cursor": {
          "ref": "d76dcc9c-1104-4898-9134-1961ffa0c31b",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5a88cbbb-6312-42a4-9f81-e366cef18c5c"
        },
        "item": {
          "id": "128db90c-1a6f-46b1-a746-4ab6407001e9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f33d95b2-d302-4ea8-ba51-5bf8f03e9669",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "d2226e94-4405-4e24-b6e1-7b3db0ee81ce",
        "cursor": {
          "ref": "81318d9f-cce6-4011-ba60-e0ece8262e0b",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9185242b-6224-450e-8914-c985ca52a774"
        },
        "item": {
          "id": "d2226e94-4405-4e24-b6e1-7b3db0ee81ce",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9085d03b-68ef-47cb-aec1-360244117447",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "813e1254-1010-4c0d-8f6c-76045ad46cfc",
        "cursor": {
          "ref": "211845e2-1db0-4885-b556-08cda11ca46f",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "da4dfd7a-5f38-42eb-9481-5ec789f1e790"
        },
        "item": {
          "id": "813e1254-1010-4c0d-8f6c-76045ad46cfc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bec5467c-b9bc-452d-8af4-cf05aa55f81c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "842d55d9-04c4-401e-aaa7-9f017f2dd0ec",
        "cursor": {
          "ref": "4c62c323-2e64-440c-8275-910570043fac",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "40f240dc-301f-49a6-abe8-f6b05b18cc4b"
        },
        "item": {
          "id": "842d55d9-04c4-401e-aaa7-9f017f2dd0ec",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "36d47c19-3281-4a45-b95f-34e0f320142f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "f7254e7a-9d80-4c31-9f1d-c85ecf75fba2",
        "cursor": {
          "ref": "b1b62184-f4a1-476c-95e4-66fd397e12aa",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "374c9101-604c-4a6d-9933-9618ed011996"
        },
        "item": {
          "id": "f7254e7a-9d80-4c31-9f1d-c85ecf75fba2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a692efa9-52bc-4cae-8fe5-b56d094be539",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "fd7dacf6-6847-4004-bbb7-4cdeb2e6a481",
        "cursor": {
          "ref": "6e4a07a7-a85b-489d-aac2-8712067b018d",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "81798ebe-f55e-41fe-9182-9bca890158ea"
        },
        "item": {
          "id": "fd7dacf6-6847-4004-bbb7-4cdeb2e6a481",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "719d44f4-45d6-4fc3-9fb9-05eb59c76405",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "afe1782b-d178-4ccf-81ce-928512a38c85",
        "cursor": {
          "ref": "d39dfed1-f493-4a79-9c5c-c90c3a0129f2",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "13aa83c3-e0a6-476f-9814-e2069b41a743"
        },
        "item": {
          "id": "afe1782b-d178-4ccf-81ce-928512a38c85",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6a911484-9768-4b21-8405-4662ee066110",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "07fa11b3-8965-455a-a488-23e4f1b65007",
        "cursor": {
          "ref": "87c2ba31-67d9-4888-8e45-d33c19da5702",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d97f545d-8d6c-4459-9686-103f6b706aa2"
        },
        "item": {
          "id": "07fa11b3-8965-455a-a488-23e4f1b65007",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e3c40f2f-0283-4337-9601-f5d95d3d1020",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "8a26cffe-5592-45a4-aaf2-f1d29d8c94bb",
        "cursor": {
          "ref": "11c2d348-1495-4eb4-8d4d-a638131f0b45",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3578e09f-dedb-4f0a-b0a8-316a3612e2b1"
        },
        "item": {
          "id": "8a26cffe-5592-45a4-aaf2-f1d29d8c94bb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "075aefbe-d12f-4667-a99c-498a9edba138",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "d2e60538-8ef8-4f99-9bff-363b878e98ce",
        "cursor": {
          "ref": "1bcb56ee-e2b2-4223-99a2-0128a2b789b1",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bc7c4213-b9f9-45fa-b2c5-013dca15603a"
        },
        "item": {
          "id": "d2e60538-8ef8-4f99-9bff-363b878e98ce",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c9579280-0a20-431a-9e35-6d9544cfb852",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "401a1761-d679-4012-9f30-7f1d498f6e6a",
        "cursor": {
          "ref": "73b9a04d-0a51-41af-8dd0-d1abb8cdf818",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "50fbee07-6100-4573-a3e0-116d6418262c"
        },
        "item": {
          "id": "401a1761-d679-4012-9f30-7f1d498f6e6a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d20dc394-4fa3-4441-8964-86fd711af959",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "ba018b66-8905-4459-9add-295c2ff31e08",
        "cursor": {
          "ref": "4f9437de-52ff-4ccd-96c7-93f6d9278256",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "14555aa8-5b4c-44a2-b15b-8f525e899028"
        },
        "item": {
          "id": "ba018b66-8905-4459-9add-295c2ff31e08",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0bfb23a4-174b-4263-b2ad-f58a1e8c7248",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "3ade308f-fdbb-477a-af19-5686ea668c38",
        "cursor": {
          "ref": "dfc1656c-fdc2-4164-a06f-5b61ef7d442a",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "098a6a49-e726-4537-9d10-eeaa683cbace"
        },
        "item": {
          "id": "3ade308f-fdbb-477a-af19-5686ea668c38",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dd4c1b7e-f043-46b1-bda2-a498839576cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "59c48227-d874-49fa-a84f-94883719ad82",
        "cursor": {
          "ref": "d777c002-021e-462b-9c84-0c6dbe266dd6",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e8a1f489-dfb4-471a-b7a5-d42f683e7aea"
        },
        "item": {
          "id": "59c48227-d874-49fa-a84f-94883719ad82",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "23362bd3-6a01-43c9-bf54-ad39b1977e03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8bfbc296-55b8-4805-9a68-b0725b6d7512",
        "cursor": {
          "ref": "f3341c9e-8274-4f97-90a7-a875a42b02ab",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "120a7d0a-9aca-4982-9c14-9cc4a585648f"
        },
        "item": {
          "id": "8bfbc296-55b8-4805-9a68-b0725b6d7512",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ea59036c-032f-4b14-8e67-0b5d2360781b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "9c914922-450b-45e5-82a1-cc4c87ea7748",
        "cursor": {
          "ref": "b326d7e4-418d-4d94-835b-f19cee7cdb86",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3f32474b-7583-444e-8b45-59c8d920400b"
        },
        "item": {
          "id": "9c914922-450b-45e5-82a1-cc4c87ea7748",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0d2a30a4-630b-4c56-98b3-dfcac99710d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "f11e1687-d6ce-41c4-8a42-8635ca48ca04",
        "cursor": {
          "ref": "cd671efc-3f30-4564-a69f-59b25338b4e3",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6f51a102-37ab-4ba1-a5ca-2faaaa0f2c94"
        },
        "item": {
          "id": "f11e1687-d6ce-41c4-8a42-8635ca48ca04",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5cd1c867-de50-421b-a114-ab1e71528549",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "795ccfa0-9845-4102-8c54-f7f43c3f3464",
        "cursor": {
          "ref": "bd7da86f-896d-4967-b45c-291c77322631",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f1290d5f-7675-4263-9f3d-d9801ee3978e"
        },
        "item": {
          "id": "795ccfa0-9845-4102-8c54-f7f43c3f3464",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0024497e-0870-44be-a202-9246e1540c88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "3c6fe886-3c7b-4a32-85fa-598d0d6782a6",
        "cursor": {
          "ref": "e8ebdd20-7ca4-48f9-96d7-e0d30b4b3ee3",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "997a704b-9aa3-448f-bc87-f7846686f542"
        },
        "item": {
          "id": "3c6fe886-3c7b-4a32-85fa-598d0d6782a6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ae2e3e51-568b-4083-a0e7-b5af143bf6c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "e5281a89-6e12-4860-ade4-de3dcf593b96",
        "cursor": {
          "ref": "75c3c4b0-f7f3-463d-b686-bdd18b19fc51",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "aefc56e3-b9a2-4b68-a8e4-b2afcc398c44"
        },
        "item": {
          "id": "e5281a89-6e12-4860-ade4-de3dcf593b96",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5b57135d-0e39-407a-9c15-c95703b83e6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "33f1284a-b501-499b-935a-ee4f870d50f9",
        "cursor": {
          "ref": "fae64bf0-0f29-4907-9d3c-3f5c624fe3bf",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3d711edd-45a9-4972-98e4-96e20f097fe1"
        },
        "item": {
          "id": "33f1284a-b501-499b-935a-ee4f870d50f9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "55542f26-0e68-4b02-80e8-d41abb993caf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "3e2891ea-20b6-4ae9-a391-2975bd6a3d2b",
        "cursor": {
          "ref": "a56b764f-f528-4aec-87eb-eef64064f397",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ab4b575d-74a3-47b5-973a-6e4a82edb39d"
        },
        "item": {
          "id": "3e2891ea-20b6-4ae9-a391-2975bd6a3d2b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "31554649-18dd-414f-bc2f-af6b4042ee03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "3e2891ea-20b6-4ae9-a391-2975bd6a3d2b",
        "cursor": {
          "ref": "a56b764f-f528-4aec-87eb-eef64064f397",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ab4b575d-74a3-47b5-973a-6e4a82edb39d"
        },
        "item": {
          "id": "3e2891ea-20b6-4ae9-a391-2975bd6a3d2b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "31554649-18dd-414f-bc2f-af6b4042ee03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2ebdb649-0c35-45a5-9895-5234d8bac9df",
        "cursor": {
          "ref": "a1b28820-5f21-4ca2-8cc1-98751d033ee2",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "39d7f826-a842-4981-bc6f-f41b0d6c5294"
        },
        "item": {
          "id": "2ebdb649-0c35-45a5-9895-5234d8bac9df",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "019ef0be-c2c5-4071-8aaa-8042e3cee746",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "2ebdb649-0c35-45a5-9895-5234d8bac9df",
        "cursor": {
          "ref": "a1b28820-5f21-4ca2-8cc1-98751d033ee2",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "39d7f826-a842-4981-bc6f-f41b0d6c5294"
        },
        "item": {
          "id": "2ebdb649-0c35-45a5-9895-5234d8bac9df",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "019ef0be-c2c5-4071-8aaa-8042e3cee746",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "195a322f-43c5-4743-84ac-6d3cdaf678cf",
        "cursor": {
          "ref": "87ec19cf-2429-403b-b93d-71f722e4b17f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d0da6756-a7e7-41da-91dc-e1b31a73603d"
        },
        "item": {
          "id": "195a322f-43c5-4743-84ac-6d3cdaf678cf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "be305689-baa4-4ea8-8ef3-c045ef7d0a8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "195a322f-43c5-4743-84ac-6d3cdaf678cf",
        "cursor": {
          "ref": "87ec19cf-2429-403b-b93d-71f722e4b17f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d0da6756-a7e7-41da-91dc-e1b31a73603d"
        },
        "item": {
          "id": "195a322f-43c5-4743-84ac-6d3cdaf678cf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "be305689-baa4-4ea8-8ef3-c045ef7d0a8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c7ec3f7a-6fda-49ce-baa6-de77fea8d23e",
        "cursor": {
          "ref": "4f5197d6-9da5-48fb-929c-5af7eeeef34f",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e47edf01-cb9f-412c-a74e-c37a15d123be"
        },
        "item": {
          "id": "c7ec3f7a-6fda-49ce-baa6-de77fea8d23e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "399dfda3-8e09-44cd-828a-a7bf5103c6b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "c7ec3f7a-6fda-49ce-baa6-de77fea8d23e",
        "cursor": {
          "ref": "4f5197d6-9da5-48fb-929c-5af7eeeef34f",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e47edf01-cb9f-412c-a74e-c37a15d123be"
        },
        "item": {
          "id": "c7ec3f7a-6fda-49ce-baa6-de77fea8d23e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "399dfda3-8e09-44cd-828a-a7bf5103c6b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "0a077544-e6bd-44ed-aec8-66dec81ba186",
        "cursor": {
          "ref": "027c3882-52aa-42f1-bca5-27182c30cda2",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a03b5449-0437-410a-9533-07d2d079ef62"
        },
        "item": {
          "id": "0a077544-e6bd-44ed-aec8-66dec81ba186",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "614fd7a7-719b-4bc5-996e-80b074380807",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0a077544-e6bd-44ed-aec8-66dec81ba186",
        "cursor": {
          "ref": "027c3882-52aa-42f1-bca5-27182c30cda2",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a03b5449-0437-410a-9533-07d2d079ef62"
        },
        "item": {
          "id": "0a077544-e6bd-44ed-aec8-66dec81ba186",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "614fd7a7-719b-4bc5-996e-80b074380807",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "867413b8-07ae-40b8-8087-1cbc2d3e31ed",
        "cursor": {
          "ref": "c4e8467f-118b-4237-ab1d-d577d7fcded9",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "18affe04-fa23-4a1b-9a94-904aafebd557"
        },
        "item": {
          "id": "867413b8-07ae-40b8-8087-1cbc2d3e31ed",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7413bad6-044d-495a-8440-4cc6694e7e30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "867413b8-07ae-40b8-8087-1cbc2d3e31ed",
        "cursor": {
          "ref": "c4e8467f-118b-4237-ab1d-d577d7fcded9",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "18affe04-fa23-4a1b-9a94-904aafebd557"
        },
        "item": {
          "id": "867413b8-07ae-40b8-8087-1cbc2d3e31ed",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7413bad6-044d-495a-8440-4cc6694e7e30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "7f17022b-5c03-477a-ba19-8a0114a77058",
        "cursor": {
          "ref": "7122bb2e-5876-4133-9a2a-4a24396a8587",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4d18001a-c0a8-4c7b-848a-3e773cedaeba"
        },
        "item": {
          "id": "7f17022b-5c03-477a-ba19-8a0114a77058",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d5e39fcf-9b30-4c89-9c5b-474b11031b8e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "7f17022b-5c03-477a-ba19-8a0114a77058",
        "cursor": {
          "ref": "7122bb2e-5876-4133-9a2a-4a24396a8587",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4d18001a-c0a8-4c7b-848a-3e773cedaeba"
        },
        "item": {
          "id": "7f17022b-5c03-477a-ba19-8a0114a77058",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d5e39fcf-9b30-4c89-9c5b-474b11031b8e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "a9b3f5e3-e778-4128-a9e7-9eb4222281f6",
        "cursor": {
          "ref": "9d29e6d1-969e-412f-bd52-d2230246d68c",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "02019f07-acd3-42cf-ac5d-cce9017dbac8"
        },
        "item": {
          "id": "a9b3f5e3-e778-4128-a9e7-9eb4222281f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9841501c-659c-4a9c-b8e4-f241363a167a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "a9b3f5e3-e778-4128-a9e7-9eb4222281f6",
        "cursor": {
          "ref": "9d29e6d1-969e-412f-bd52-d2230246d68c",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "02019f07-acd3-42cf-ac5d-cce9017dbac8"
        },
        "item": {
          "id": "a9b3f5e3-e778-4128-a9e7-9eb4222281f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9841501c-659c-4a9c-b8e4-f241363a167a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "3bd662cf-3c51-4c7d-98fb-fa46968b9e25",
        "cursor": {
          "ref": "3b1328df-fd35-46ce-b489-92ccbef003fe",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5887d94a-c3c4-4c38-abbd-32a958cff286"
        },
        "item": {
          "id": "3bd662cf-3c51-4c7d-98fb-fa46968b9e25",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b3d10cd1-5d30-447e-b3dc-7d4ed138c4bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "3bd662cf-3c51-4c7d-98fb-fa46968b9e25",
        "cursor": {
          "ref": "3b1328df-fd35-46ce-b489-92ccbef003fe",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5887d94a-c3c4-4c38-abbd-32a958cff286"
        },
        "item": {
          "id": "3bd662cf-3c51-4c7d-98fb-fa46968b9e25",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b3d10cd1-5d30-447e-b3dc-7d4ed138c4bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "0275d754-00bd-4078-8cf5-bcb382a90afb",
        "cursor": {
          "ref": "86b64c49-d492-4952-b7c1-37982b7a20d3",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0beb0413-5479-4be9-a46a-5a3d341bc63e"
        },
        "item": {
          "id": "0275d754-00bd-4078-8cf5-bcb382a90afb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3c67b033-f5ac-4e6f-a538-0c9ce5082a5e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0275d754-00bd-4078-8cf5-bcb382a90afb",
        "cursor": {
          "ref": "86b64c49-d492-4952-b7c1-37982b7a20d3",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0beb0413-5479-4be9-a46a-5a3d341bc63e"
        },
        "item": {
          "id": "0275d754-00bd-4078-8cf5-bcb382a90afb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3c67b033-f5ac-4e6f-a538-0c9ce5082a5e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "cfd8bacf-3383-4892-a630-18445b134636",
        "cursor": {
          "ref": "875ae9c2-e95c-4298-b1a0-8be86bc679e5",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4b0ce92a-7ce8-4edf-a27a-b41d4a4b0aa4"
        },
        "item": {
          "id": "cfd8bacf-3383-4892-a630-18445b134636",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f0ad0dfb-d887-49c1-a724-a87d6b6500c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "cfd8bacf-3383-4892-a630-18445b134636",
        "cursor": {
          "ref": "875ae9c2-e95c-4298-b1a0-8be86bc679e5",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4b0ce92a-7ce8-4edf-a27a-b41d4a4b0aa4"
        },
        "item": {
          "id": "cfd8bacf-3383-4892-a630-18445b134636",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f0ad0dfb-d887-49c1-a724-a87d6b6500c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d3fedb61-e428-4f65-93ef-3696ee31d6c2",
        "cursor": {
          "ref": "23baa29d-9d17-4119-a2f9-a26ed0009919",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "23889840-b848-4616-b8ed-d84eb0ec8930"
        },
        "item": {
          "id": "d3fedb61-e428-4f65-93ef-3696ee31d6c2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4e6cbdc7-df09-43c4-a085-4a07a8224b85",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d3fedb61-e428-4f65-93ef-3696ee31d6c2",
        "cursor": {
          "ref": "23baa29d-9d17-4119-a2f9-a26ed0009919",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "23889840-b848-4616-b8ed-d84eb0ec8930"
        },
        "item": {
          "id": "d3fedb61-e428-4f65-93ef-3696ee31d6c2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4e6cbdc7-df09-43c4-a085-4a07a8224b85",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f41a4e0d-1820-41a1-9660-825d37fba40a",
        "cursor": {
          "ref": "6d6b8907-0187-4516-9e53-12fdcfd8596c",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9aa41817-58cf-47ad-9ded-e6c0fd6803e9"
        },
        "item": {
          "id": "f41a4e0d-1820-41a1-9660-825d37fba40a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "778c842b-0e4a-467e-b103-7bddeb41d677",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f41a4e0d-1820-41a1-9660-825d37fba40a",
        "cursor": {
          "ref": "6d6b8907-0187-4516-9e53-12fdcfd8596c",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9aa41817-58cf-47ad-9ded-e6c0fd6803e9"
        },
        "item": {
          "id": "f41a4e0d-1820-41a1-9660-825d37fba40a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "778c842b-0e4a-467e-b103-7bddeb41d677",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "9cd16984-f581-447f-a92d-60183fb1bf0f",
        "cursor": {
          "ref": "996761f5-f7c3-464b-ac6c-6f5c2f4d872f",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2e3cc444-826d-4c68-8b17-bd0cea864fe9"
        },
        "item": {
          "id": "9cd16984-f581-447f-a92d-60183fb1bf0f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f8388cc5-c6d2-49ca-afbb-59389decf973",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "9cd16984-f581-447f-a92d-60183fb1bf0f",
        "cursor": {
          "ref": "996761f5-f7c3-464b-ac6c-6f5c2f4d872f",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2e3cc444-826d-4c68-8b17-bd0cea864fe9"
        },
        "item": {
          "id": "9cd16984-f581-447f-a92d-60183fb1bf0f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f8388cc5-c6d2-49ca-afbb-59389decf973",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "6e6841b8-00c1-4dae-9a0c-68449ab19323",
        "cursor": {
          "ref": "8cc53e03-fdb8-4e87-b76f-342cf45405e3",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "97e508a0-f991-4fb8-a5bd-47b3f6bd14c7"
        },
        "item": {
          "id": "6e6841b8-00c1-4dae-9a0c-68449ab19323",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c5f658be-d5d2-4e13-8f99-3973401a23a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "6e6841b8-00c1-4dae-9a0c-68449ab19323",
        "cursor": {
          "ref": "8cc53e03-fdb8-4e87-b76f-342cf45405e3",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "97e508a0-f991-4fb8-a5bd-47b3f6bd14c7"
        },
        "item": {
          "id": "6e6841b8-00c1-4dae-9a0c-68449ab19323",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c5f658be-d5d2-4e13-8f99-3973401a23a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "f34a8fc0-b37b-4f28-bbef-29ae8cf336ad",
        "cursor": {
          "ref": "fb29c126-44a6-48b0-b062-9ce9500e8f00",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f4021a77-c12b-4fcd-a68d-2dd8a869b0d9"
        },
        "item": {
          "id": "f34a8fc0-b37b-4f28-bbef-29ae8cf336ad",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f79e5a77-524f-467c-8666-468e1c99b978",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f34a8fc0-b37b-4f28-bbef-29ae8cf336ad",
        "cursor": {
          "ref": "fb29c126-44a6-48b0-b062-9ce9500e8f00",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f4021a77-c12b-4fcd-a68d-2dd8a869b0d9"
        },
        "item": {
          "id": "f34a8fc0-b37b-4f28-bbef-29ae8cf336ad",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f79e5a77-524f-467c-8666-468e1c99b978",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5620292b-9822-4828-8674-1411f8a4d3de",
        "cursor": {
          "ref": "50056e4b-e637-45e9-99e7-c757ed72c63f",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "26aa0f1d-63af-4ff9-9e87-610cd75f9f6e"
        },
        "item": {
          "id": "5620292b-9822-4828-8674-1411f8a4d3de",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bc659b81-1c00-423a-8a75-2096cca39f20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5620292b-9822-4828-8674-1411f8a4d3de",
        "cursor": {
          "ref": "50056e4b-e637-45e9-99e7-c757ed72c63f",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "26aa0f1d-63af-4ff9-9e87-610cd75f9f6e"
        },
        "item": {
          "id": "5620292b-9822-4828-8674-1411f8a4d3de",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bc659b81-1c00-423a-8a75-2096cca39f20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "0ee950e9-b003-498a-b66d-2503bdc7065a",
        "cursor": {
          "ref": "3220ebf2-54af-420d-861f-d6f7acafc9a2",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "332608ca-8dfc-4387-aecb-f28a138d5a21"
        },
        "item": {
          "id": "0ee950e9-b003-498a-b66d-2503bdc7065a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cb133408-74da-411d-bc6d-dd450e033cc2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "0ee950e9-b003-498a-b66d-2503bdc7065a",
        "cursor": {
          "ref": "3220ebf2-54af-420d-861f-d6f7acafc9a2",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "332608ca-8dfc-4387-aecb-f28a138d5a21"
        },
        "item": {
          "id": "0ee950e9-b003-498a-b66d-2503bdc7065a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cb133408-74da-411d-bc6d-dd450e033cc2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f91c0a1a-eade-4401-8276-8223b8263d26",
        "cursor": {
          "ref": "7ca6f03a-1af5-4a8e-8376-e6add84ffe63",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f54dc4e1-0ba9-43a2-898c-e45674c1942a"
        },
        "item": {
          "id": "f91c0a1a-eade-4401-8276-8223b8263d26",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "add86db1-2dc1-4385-909e-3a2e0c57f480",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f91c0a1a-eade-4401-8276-8223b8263d26",
        "cursor": {
          "ref": "7ca6f03a-1af5-4a8e-8376-e6add84ffe63",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f54dc4e1-0ba9-43a2-898c-e45674c1942a"
        },
        "item": {
          "id": "f91c0a1a-eade-4401-8276-8223b8263d26",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "add86db1-2dc1-4385-909e-3a2e0c57f480",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "3c6451b3-e103-457a-aed3-209e6cee00f7",
        "cursor": {
          "ref": "206944f1-e0b2-4d04-b0f6-1395b050c808",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2b338353-87a8-4ac8-9619-b55d9676add3"
        },
        "item": {
          "id": "3c6451b3-e103-457a-aed3-209e6cee00f7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1193a2bb-23ef-474e-8dfa-c69b6fbcfa6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "3c6451b3-e103-457a-aed3-209e6cee00f7",
        "cursor": {
          "ref": "206944f1-e0b2-4d04-b0f6-1395b050c808",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2b338353-87a8-4ac8-9619-b55d9676add3"
        },
        "item": {
          "id": "3c6451b3-e103-457a-aed3-209e6cee00f7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1193a2bb-23ef-474e-8dfa-c69b6fbcfa6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e59610b3-88d2-49f3-912b-899fde59854d",
        "cursor": {
          "ref": "dda0b7df-bb61-4cfa-95d0-87fadfc9a728",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "68a8df08-8117-47f5-9304-54dddd375544"
        },
        "item": {
          "id": "e59610b3-88d2-49f3-912b-899fde59854d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "94036cbd-8558-4567-a320-0e4fe477f458",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "e59610b3-88d2-49f3-912b-899fde59854d",
        "cursor": {
          "ref": "dda0b7df-bb61-4cfa-95d0-87fadfc9a728",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "68a8df08-8117-47f5-9304-54dddd375544"
        },
        "item": {
          "id": "e59610b3-88d2-49f3-912b-899fde59854d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "94036cbd-8558-4567-a320-0e4fe477f458",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "41fa7103-7643-4418-823f-2ef823486e9f",
        "cursor": {
          "ref": "bece515b-95e2-4a23-b156-54dea4760464",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7b77051b-4458-491e-8af4-812337081b3a"
        },
        "item": {
          "id": "41fa7103-7643-4418-823f-2ef823486e9f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3bdb93df-52c2-47a9-bfaf-91825c5670e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "41fa7103-7643-4418-823f-2ef823486e9f",
        "cursor": {
          "ref": "bece515b-95e2-4a23-b156-54dea4760464",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7b77051b-4458-491e-8af4-812337081b3a"
        },
        "item": {
          "id": "41fa7103-7643-4418-823f-2ef823486e9f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3bdb93df-52c2-47a9-bfaf-91825c5670e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "9b1b0a24-e987-4077-9b23-d29a710ae22f",
        "cursor": {
          "ref": "27045934-f71a-4c9c-a0b5-a59d927b9cd9",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "aa92723f-47e9-471a-9d96-b9afa4640d99"
        },
        "item": {
          "id": "9b1b0a24-e987-4077-9b23-d29a710ae22f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3afb092c-dea1-4dd9-b6e2-6f09833fd18c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "9b1b0a24-e987-4077-9b23-d29a710ae22f",
        "cursor": {
          "ref": "27045934-f71a-4c9c-a0b5-a59d927b9cd9",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "aa92723f-47e9-471a-9d96-b9afa4640d99"
        },
        "item": {
          "id": "9b1b0a24-e987-4077-9b23-d29a710ae22f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3afb092c-dea1-4dd9-b6e2-6f09833fd18c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b5db7e6a-483a-4ea6-837d-51e79c4616af",
        "cursor": {
          "ref": "6116d68e-d2ef-4679-8bf1-a54ba586fea7",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c360f6ce-75a8-4b79-9185-2afc8758079b"
        },
        "item": {
          "id": "b5db7e6a-483a-4ea6-837d-51e79c4616af",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4f156de1-7c62-42f1-b571-55d80163f491",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "b5db7e6a-483a-4ea6-837d-51e79c4616af",
        "cursor": {
          "ref": "6116d68e-d2ef-4679-8bf1-a54ba586fea7",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c360f6ce-75a8-4b79-9185-2afc8758079b"
        },
        "item": {
          "id": "b5db7e6a-483a-4ea6-837d-51e79c4616af",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4f156de1-7c62-42f1-b571-55d80163f491",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e6d86d41-133f-476d-a1b4-58d9341455a5",
        "cursor": {
          "ref": "7f34090d-d95c-4a99-8f81-602e96488ca8",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0985ad97-0bfd-4d00-b6a2-ce369459d0b5"
        },
        "item": {
          "id": "e6d86d41-133f-476d-a1b4-58d9341455a5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "998c5f13-169c-4576-b833-17af6567a55e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "e6d86d41-133f-476d-a1b4-58d9341455a5",
        "cursor": {
          "ref": "7f34090d-d95c-4a99-8f81-602e96488ca8",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0985ad97-0bfd-4d00-b6a2-ce369459d0b5"
        },
        "item": {
          "id": "e6d86d41-133f-476d-a1b4-58d9341455a5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "998c5f13-169c-4576-b833-17af6567a55e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a102a8f2-f635-468d-ba6c-2b5c45f2be2d",
        "cursor": {
          "ref": "2195f192-3384-49c4-9073-257dba1c65e6",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "118eeac9-2964-43f2-bbff-227889cac6ed"
        },
        "item": {
          "id": "a102a8f2-f635-468d-ba6c-2b5c45f2be2d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d64c56c9-fc6b-444b-9c9d-d817d796d69a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "a102a8f2-f635-468d-ba6c-2b5c45f2be2d",
        "cursor": {
          "ref": "2195f192-3384-49c4-9073-257dba1c65e6",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "118eeac9-2964-43f2-bbff-227889cac6ed"
        },
        "item": {
          "id": "a102a8f2-f635-468d-ba6c-2b5c45f2be2d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d64c56c9-fc6b-444b-9c9d-d817d796d69a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d5542ed7-320c-449c-a9b5-4f1734126f46",
        "cursor": {
          "ref": "d67653b9-879a-44c0-80d1-2b58438338ae",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "82048287-3d76-41e7-bebb-07192988ae8d"
        },
        "item": {
          "id": "d5542ed7-320c-449c-a9b5-4f1734126f46",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "beb3a5a0-bdad-451f-9a12-b11eb0abc240",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d5542ed7-320c-449c-a9b5-4f1734126f46",
        "cursor": {
          "ref": "d67653b9-879a-44c0-80d1-2b58438338ae",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "82048287-3d76-41e7-bebb-07192988ae8d"
        },
        "item": {
          "id": "d5542ed7-320c-449c-a9b5-4f1734126f46",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "beb3a5a0-bdad-451f-9a12-b11eb0abc240",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "46f079de-d00c-4176-942d-693501477037",
        "cursor": {
          "ref": "d94eea72-797e-425f-863e-3ca736827e06",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "cbf9d803-273c-4deb-8a02-1891ad98c610"
        },
        "item": {
          "id": "46f079de-d00c-4176-942d-693501477037",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "00977495-729e-45c3-acb2-9c84458038dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "46f079de-d00c-4176-942d-693501477037",
        "cursor": {
          "ref": "d94eea72-797e-425f-863e-3ca736827e06",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "cbf9d803-273c-4deb-8a02-1891ad98c610"
        },
        "item": {
          "id": "46f079de-d00c-4176-942d-693501477037",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "00977495-729e-45c3-acb2-9c84458038dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "94dbd2e8-2eae-4d45-95ed-f0038d3c3dc9",
        "cursor": {
          "ref": "1c2d782e-3e5f-40a2-a189-fcc4059148b1",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c14e67bc-584f-4d77-b17d-3af20c97ec6d"
        },
        "item": {
          "id": "94dbd2e8-2eae-4d45-95ed-f0038d3c3dc9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ef87518b-e988-4133-886b-9cfc15c1bc50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "94dbd2e8-2eae-4d45-95ed-f0038d3c3dc9",
        "cursor": {
          "ref": "1c2d782e-3e5f-40a2-a189-fcc4059148b1",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c14e67bc-584f-4d77-b17d-3af20c97ec6d"
        },
        "item": {
          "id": "94dbd2e8-2eae-4d45-95ed-f0038d3c3dc9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ef87518b-e988-4133-886b-9cfc15c1bc50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "7e500c53-759d-4e63-b2c4-7a52fcf30af6",
        "cursor": {
          "ref": "15de3791-fbf0-45f0-bdf9-f5d537f7a6ff",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "35986337-fe67-4c90-bfd7-197899e25f8a"
        },
        "item": {
          "id": "7e500c53-759d-4e63-b2c4-7a52fcf30af6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "847121c7-2abe-46c2-984e-c1adc48bb0e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7e500c53-759d-4e63-b2c4-7a52fcf30af6",
        "cursor": {
          "ref": "15de3791-fbf0-45f0-bdf9-f5d537f7a6ff",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "35986337-fe67-4c90-bfd7-197899e25f8a"
        },
        "item": {
          "id": "7e500c53-759d-4e63-b2c4-7a52fcf30af6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "847121c7-2abe-46c2-984e-c1adc48bb0e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d95ca35e-6078-418e-863d-30ac80878ad9",
        "cursor": {
          "ref": "7bc0452b-1980-4d6f-a29e-384a1bc598eb",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bd392530-1eb0-4998-b319-36ba537dc092"
        },
        "item": {
          "id": "d95ca35e-6078-418e-863d-30ac80878ad9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2526a265-d2bd-401e-a10d-4b21e2eeae6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d95ca35e-6078-418e-863d-30ac80878ad9",
        "cursor": {
          "ref": "7bc0452b-1980-4d6f-a29e-384a1bc598eb",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bd392530-1eb0-4998-b319-36ba537dc092"
        },
        "item": {
          "id": "d95ca35e-6078-418e-863d-30ac80878ad9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2526a265-d2bd-401e-a10d-4b21e2eeae6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "752350d8-fdb2-4cdc-b78b-a8798bf695e9",
        "cursor": {
          "ref": "773c3cb6-5e14-43b1-b249-dc97fa671cd2",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6d0befb2-a010-4c31-af07-ec2551b6ceab"
        },
        "item": {
          "id": "752350d8-fdb2-4cdc-b78b-a8798bf695e9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9d87ab71-3db1-4ab1-abfc-e9dede3a8489",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "752350d8-fdb2-4cdc-b78b-a8798bf695e9",
        "cursor": {
          "ref": "773c3cb6-5e14-43b1-b249-dc97fa671cd2",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6d0befb2-a010-4c31-af07-ec2551b6ceab"
        },
        "item": {
          "id": "752350d8-fdb2-4cdc-b78b-a8798bf695e9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9d87ab71-3db1-4ab1-abfc-e9dede3a8489",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "cacef1b1-2242-4765-839e-cd75cc363263",
        "cursor": {
          "ref": "da8058d3-4c3d-4c3f-bdc7-3d9b90ef58ab",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "58a6c314-05b8-4a13-a6a9-ee37d6075f46"
        },
        "item": {
          "id": "cacef1b1-2242-4765-839e-cd75cc363263",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "86ae1466-0d7d-4edf-b551-c3974dda5ea8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "cacef1b1-2242-4765-839e-cd75cc363263",
        "cursor": {
          "ref": "da8058d3-4c3d-4c3f-bdc7-3d9b90ef58ab",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "58a6c314-05b8-4a13-a6a9-ee37d6075f46"
        },
        "item": {
          "id": "cacef1b1-2242-4765-839e-cd75cc363263",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "86ae1466-0d7d-4edf-b551-c3974dda5ea8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "5cc28925-aed8-403e-a5fe-ca4437757f6d",
        "cursor": {
          "ref": "e607f4cc-3e60-4e13-a8c0-745f47c71f20",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0905b6df-5a45-4f19-85cd-b449bc6c8c4f"
        },
        "item": {
          "id": "5cc28925-aed8-403e-a5fe-ca4437757f6d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d6b82c4e-c736-42a9-ab8e-996104c0ae98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "5cc28925-aed8-403e-a5fe-ca4437757f6d",
        "cursor": {
          "ref": "e607f4cc-3e60-4e13-a8c0-745f47c71f20",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0905b6df-5a45-4f19-85cd-b449bc6c8c4f"
        },
        "item": {
          "id": "5cc28925-aed8-403e-a5fe-ca4437757f6d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d6b82c4e-c736-42a9-ab8e-996104c0ae98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "67f16464-6bf3-4b9a-a9d3-8a6c0e362d44",
        "cursor": {
          "ref": "16ae7340-8089-4c94-9931-cab75f5268d2",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ed4471a8-dbd9-4581-b879-d67882ef6c54"
        },
        "item": {
          "id": "67f16464-6bf3-4b9a-a9d3-8a6c0e362d44",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1993c76c-ce8e-4664-a8c9-8ce6be5e5924",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "67f16464-6bf3-4b9a-a9d3-8a6c0e362d44",
        "cursor": {
          "ref": "16ae7340-8089-4c94-9931-cab75f5268d2",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ed4471a8-dbd9-4581-b879-d67882ef6c54"
        },
        "item": {
          "id": "67f16464-6bf3-4b9a-a9d3-8a6c0e362d44",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1993c76c-ce8e-4664-a8c9-8ce6be5e5924",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "6fd465a7-61c4-4d57-9c80-4ad0f7d42d51",
        "cursor": {
          "ref": "257c25f5-32a8-497d-bc68-a75496887353",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e6b30b6f-6c28-4ec6-9edf-790a701dc716"
        },
        "item": {
          "id": "6fd465a7-61c4-4d57-9c80-4ad0f7d42d51",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0af0ea91-f10d-4404-93d5-5a0912b31ca3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "6fd465a7-61c4-4d57-9c80-4ad0f7d42d51",
        "cursor": {
          "ref": "257c25f5-32a8-497d-bc68-a75496887353",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e6b30b6f-6c28-4ec6-9edf-790a701dc716"
        },
        "item": {
          "id": "6fd465a7-61c4-4d57-9c80-4ad0f7d42d51",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0af0ea91-f10d-4404-93d5-5a0912b31ca3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "840db3b5-d059-42d3-823e-f927d61afaa6",
        "cursor": {
          "ref": "927ab608-35b0-47c4-ad4d-0cd41cfe4d88",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2f07897a-5cd9-4dc0-b620-ce432620ed89"
        },
        "item": {
          "id": "840db3b5-d059-42d3-823e-f927d61afaa6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "26fbb120-54c6-4f15-87a6-d0240e81b40f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "840db3b5-d059-42d3-823e-f927d61afaa6",
        "cursor": {
          "ref": "927ab608-35b0-47c4-ad4d-0cd41cfe4d88",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2f07897a-5cd9-4dc0-b620-ce432620ed89"
        },
        "item": {
          "id": "840db3b5-d059-42d3-823e-f927d61afaa6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "26fbb120-54c6-4f15-87a6-d0240e81b40f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "dbcd758e-73f1-4fbe-aca3-d791a4c6fc05",
        "cursor": {
          "ref": "52c7a6e0-6e8c-4536-9095-48b511927a0a",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9a566341-1002-4c19-b6f3-e329b7312a77"
        },
        "item": {
          "id": "dbcd758e-73f1-4fbe-aca3-d791a4c6fc05",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "58c5f6f5-3c16-4236-9c47-eb026015f332",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "dbcd758e-73f1-4fbe-aca3-d791a4c6fc05",
        "cursor": {
          "ref": "52c7a6e0-6e8c-4536-9095-48b511927a0a",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9a566341-1002-4c19-b6f3-e329b7312a77"
        },
        "item": {
          "id": "dbcd758e-73f1-4fbe-aca3-d791a4c6fc05",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "58c5f6f5-3c16-4236-9c47-eb026015f332",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "775ee991-d005-46b4-9ea8-211167471b1f",
        "cursor": {
          "ref": "91481725-1123-49fc-b973-9a4837d39a51",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "82e29806-06b4-4e09-a3ee-5d5c8556d112"
        },
        "item": {
          "id": "775ee991-d005-46b4-9ea8-211167471b1f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2b092985-1bf5-4da9-98af-fa4369315a4b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "775ee991-d005-46b4-9ea8-211167471b1f",
        "cursor": {
          "ref": "91481725-1123-49fc-b973-9a4837d39a51",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "82e29806-06b4-4e09-a3ee-5d5c8556d112"
        },
        "item": {
          "id": "775ee991-d005-46b4-9ea8-211167471b1f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2b092985-1bf5-4da9-98af-fa4369315a4b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "6403e6c6-2ff5-4e9b-8474-dcaf20ea25e2",
        "cursor": {
          "ref": "7b020c56-aa50-42c7-b3d3-da6fcd9a9f86",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4b888e8f-b78a-404a-ac35-7d419d791ff3"
        },
        "item": {
          "id": "6403e6c6-2ff5-4e9b-8474-dcaf20ea25e2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4efb402f-93c1-4ff8-b232-391cbefdbe83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "6403e6c6-2ff5-4e9b-8474-dcaf20ea25e2",
        "cursor": {
          "ref": "7b020c56-aa50-42c7-b3d3-da6fcd9a9f86",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4b888e8f-b78a-404a-ac35-7d419d791ff3"
        },
        "item": {
          "id": "6403e6c6-2ff5-4e9b-8474-dcaf20ea25e2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4efb402f-93c1-4ff8-b232-391cbefdbe83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "47bb5b46-4e59-4bb0-aabf-ab765ecccdb7",
        "cursor": {
          "ref": "07da181b-28c1-4abc-9b45-4db96e2337be",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "efdf0b41-8295-49d0-a9e3-8da58c274d49"
        },
        "item": {
          "id": "47bb5b46-4e59-4bb0-aabf-ab765ecccdb7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a2647215-7cc5-4422-8840-c90335736621",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "47bb5b46-4e59-4bb0-aabf-ab765ecccdb7",
        "cursor": {
          "ref": "07da181b-28c1-4abc-9b45-4db96e2337be",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "efdf0b41-8295-49d0-a9e3-8da58c274d49"
        },
        "item": {
          "id": "47bb5b46-4e59-4bb0-aabf-ab765ecccdb7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a2647215-7cc5-4422-8840-c90335736621",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "92a4ee84-8913-48ab-9931-ec9ebf3d3576",
        "cursor": {
          "ref": "f68478a6-e76a-4b41-931f-d24f90341af1",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c8e82f79-1686-436c-8004-5fb4426639dc"
        },
        "item": {
          "id": "92a4ee84-8913-48ab-9931-ec9ebf3d3576",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "52d4abce-a601-48b6-affa-2d22eed410a4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "92a4ee84-8913-48ab-9931-ec9ebf3d3576",
        "cursor": {
          "ref": "f68478a6-e76a-4b41-931f-d24f90341af1",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c8e82f79-1686-436c-8004-5fb4426639dc"
        },
        "item": {
          "id": "92a4ee84-8913-48ab-9931-ec9ebf3d3576",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "52d4abce-a601-48b6-affa-2d22eed410a4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "6d12a275-6760-47a1-baa1-bf8b1a09d3b8",
        "cursor": {
          "ref": "5b747b31-0b60-41b2-ba4a-7de6ee2f5cdb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3ececa96-a5b5-4013-8961-f07a09af110d"
        },
        "item": {
          "id": "6d12a275-6760-47a1-baa1-bf8b1a09d3b8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "88dc48b5-21ad-4b78-b9b4-e803e8e723fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "6d12a275-6760-47a1-baa1-bf8b1a09d3b8",
        "cursor": {
          "ref": "5b747b31-0b60-41b2-ba4a-7de6ee2f5cdb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3ececa96-a5b5-4013-8961-f07a09af110d"
        },
        "item": {
          "id": "6d12a275-6760-47a1-baa1-bf8b1a09d3b8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "88dc48b5-21ad-4b78-b9b4-e803e8e723fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "f8dbb7f6-81de-4235-a990-7bca09bafd3b",
        "cursor": {
          "ref": "b26f5d56-7e51-48ef-9de9-1fe3de39c72e",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "594f313f-616c-42a8-a5ef-f3cc5a6c0a5c"
        },
        "item": {
          "id": "f8dbb7f6-81de-4235-a990-7bca09bafd3b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d23c5342-9392-4055-bf54-ce4c2e842c24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "f8dbb7f6-81de-4235-a990-7bca09bafd3b",
        "cursor": {
          "ref": "b26f5d56-7e51-48ef-9de9-1fe3de39c72e",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "594f313f-616c-42a8-a5ef-f3cc5a6c0a5c"
        },
        "item": {
          "id": "f8dbb7f6-81de-4235-a990-7bca09bafd3b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d23c5342-9392-4055-bf54-ce4c2e842c24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "6cd8fda3-9859-449a-8ddb-06d26e472052",
        "cursor": {
          "ref": "a8cb6de3-6bfe-41e4-b533-8bab9163712b",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8218f321-0c1d-4289-b4ed-9914199f61f6"
        },
        "item": {
          "id": "6cd8fda3-9859-449a-8ddb-06d26e472052",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9c7b4365-cd1f-43b0-98ac-5ba1f04048b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "6cd8fda3-9859-449a-8ddb-06d26e472052",
        "cursor": {
          "ref": "a8cb6de3-6bfe-41e4-b533-8bab9163712b",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8218f321-0c1d-4289-b4ed-9914199f61f6"
        },
        "item": {
          "id": "6cd8fda3-9859-449a-8ddb-06d26e472052",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9c7b4365-cd1f-43b0-98ac-5ba1f04048b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "d8dff5b3-b3fb-4998-9e9c-0f2c187f4996",
        "cursor": {
          "ref": "7317f3a7-4e6b-4640-be0e-cfbf3a354577",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "85b30319-9e69-49c8-89b3-c0a2d55bf26e"
        },
        "item": {
          "id": "d8dff5b3-b3fb-4998-9e9c-0f2c187f4996",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0dca5d4a-cf15-4a31-845b-169738844741",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "d8dff5b3-b3fb-4998-9e9c-0f2c187f4996",
        "cursor": {
          "ref": "7317f3a7-4e6b-4640-be0e-cfbf3a354577",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "85b30319-9e69-49c8-89b3-c0a2d55bf26e"
        },
        "item": {
          "id": "d8dff5b3-b3fb-4998-9e9c-0f2c187f4996",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0dca5d4a-cf15-4a31-845b-169738844741",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1c4a3a9a-507c-4c68-8d94-ba06a98deef4",
        "cursor": {
          "ref": "21d07f2d-9004-44cc-b0c0-f5afa5f5f234",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "482949b1-a0e9-4d19-b8ab-fa9b632a03c6"
        },
        "item": {
          "id": "1c4a3a9a-507c-4c68-8d94-ba06a98deef4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2968bc7d-7d02-4d51-ba85-33a7c818e5ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "1c4a3a9a-507c-4c68-8d94-ba06a98deef4",
        "cursor": {
          "ref": "21d07f2d-9004-44cc-b0c0-f5afa5f5f234",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "482949b1-a0e9-4d19-b8ab-fa9b632a03c6"
        },
        "item": {
          "id": "1c4a3a9a-507c-4c68-8d94-ba06a98deef4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2968bc7d-7d02-4d51-ba85-33a7c818e5ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "7549a170-f05c-49ed-83d9-ede3602d5b1c",
        "cursor": {
          "ref": "40637553-e834-4805-8b88-a849c5a5dc1b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "deec8c1f-8ef3-4cf5-94d5-fe47cd0f5c74"
        },
        "item": {
          "id": "7549a170-f05c-49ed-83d9-ede3602d5b1c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a2d8bc27-51ed-4b43-88b5-a02db71a7142",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "7549a170-f05c-49ed-83d9-ede3602d5b1c",
        "cursor": {
          "ref": "40637553-e834-4805-8b88-a849c5a5dc1b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "deec8c1f-8ef3-4cf5-94d5-fe47cd0f5c74"
        },
        "item": {
          "id": "7549a170-f05c-49ed-83d9-ede3602d5b1c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a2d8bc27-51ed-4b43-88b5-a02db71a7142",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "5475e284-b61d-496f-8e10-85932ac52d9a",
        "cursor": {
          "ref": "4200ea5b-0b7d-4078-a29c-4a9fccc1b5f6",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8832e615-c6c8-403a-8080-f858664e06ae"
        },
        "item": {
          "id": "5475e284-b61d-496f-8e10-85932ac52d9a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "62dd1e45-3582-4735-b17d-530bc756435b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "5475e284-b61d-496f-8e10-85932ac52d9a",
        "cursor": {
          "ref": "4200ea5b-0b7d-4078-a29c-4a9fccc1b5f6",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8832e615-c6c8-403a-8080-f858664e06ae"
        },
        "item": {
          "id": "5475e284-b61d-496f-8e10-85932ac52d9a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "62dd1e45-3582-4735-b17d-530bc756435b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "0d0c467f-6949-4fd5-b0c9-eb79814eeba2",
        "cursor": {
          "ref": "dee43c20-c4bb-4ea9-8c76-95dbc342c347",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5cc37a31-e7b2-4a8b-b59f-9bb3b624b501"
        },
        "item": {
          "id": "0d0c467f-6949-4fd5-b0c9-eb79814eeba2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cc9702fc-7b9e-4e3a-9d19-00e79e3e44d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "0d0c467f-6949-4fd5-b0c9-eb79814eeba2",
        "cursor": {
          "ref": "dee43c20-c4bb-4ea9-8c76-95dbc342c347",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5cc37a31-e7b2-4a8b-b59f-9bb3b624b501"
        },
        "item": {
          "id": "0d0c467f-6949-4fd5-b0c9-eb79814eeba2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cc9702fc-7b9e-4e3a-9d19-00e79e3e44d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "db9a421a-f6ce-486b-be35-8302e3704257",
        "cursor": {
          "ref": "b316519a-b3f9-4a47-8141-3c805ea8b102",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c3873d15-4595-4886-b71c-e2ada7dde0b4"
        },
        "item": {
          "id": "db9a421a-f6ce-486b-be35-8302e3704257",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e7b7930f-4442-45a6-8910-355a51a1e7c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "db9a421a-f6ce-486b-be35-8302e3704257",
        "cursor": {
          "ref": "b316519a-b3f9-4a47-8141-3c805ea8b102",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c3873d15-4595-4886-b71c-e2ada7dde0b4"
        },
        "item": {
          "id": "db9a421a-f6ce-486b-be35-8302e3704257",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e7b7930f-4442-45a6-8910-355a51a1e7c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "03684a73-1e68-458c-92aa-d385c561ae52",
        "cursor": {
          "ref": "2b528637-7ba8-4352-bc74-0d8db372d992",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "667943b9-791b-4443-a326-b9441907e432"
        },
        "item": {
          "id": "03684a73-1e68-458c-92aa-d385c561ae52",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "b6f870e9-e39f-4fc4-b5e4-b5e3506cf237",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "03684a73-1e68-458c-92aa-d385c561ae52",
        "cursor": {
          "ref": "2b528637-7ba8-4352-bc74-0d8db372d992",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "667943b9-791b-4443-a326-b9441907e432"
        },
        "item": {
          "id": "03684a73-1e68-458c-92aa-d385c561ae52",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "b6f870e9-e39f-4fc4-b5e4-b5e3506cf237",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "7c3ec938-d467-4992-9a26-973d5e4a1987",
        "cursor": {
          "ref": "d82b47bc-7a08-413f-ab01-922c29b97834",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f77f36a2-ff88-44f4-970b-b5966f62107b"
        },
        "item": {
          "id": "7c3ec938-d467-4992-9a26-973d5e4a1987",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ceffaae6-0b95-4b00-9e97-ae13062fe441",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "7c3ec938-d467-4992-9a26-973d5e4a1987",
        "cursor": {
          "ref": "d82b47bc-7a08-413f-ab01-922c29b97834",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f77f36a2-ff88-44f4-970b-b5966f62107b"
        },
        "item": {
          "id": "7c3ec938-d467-4992-9a26-973d5e4a1987",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ceffaae6-0b95-4b00-9e97-ae13062fe441",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "953240b2-3d32-455c-8ecd-fde0dd4cbf0e",
        "cursor": {
          "ref": "68f8c7cd-798c-47af-b7b8-fe40b06aa42c",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d98b78bd-e749-48bc-b097-273477e645fa"
        },
        "item": {
          "id": "953240b2-3d32-455c-8ecd-fde0dd4cbf0e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f6bea72f-327c-4f31-8bde-1ede9f16306a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "953240b2-3d32-455c-8ecd-fde0dd4cbf0e",
        "cursor": {
          "ref": "68f8c7cd-798c-47af-b7b8-fe40b06aa42c",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d98b78bd-e749-48bc-b097-273477e645fa"
        },
        "item": {
          "id": "953240b2-3d32-455c-8ecd-fde0dd4cbf0e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f6bea72f-327c-4f31-8bde-1ede9f16306a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "f16903bb-7f3b-4d7c-a697-72d55c8022e2",
        "cursor": {
          "ref": "4f3e2400-6d43-4e93-873e-01427b10f4c2",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ad4334bc-052e-44aa-9ed7-3fb47958b936"
        },
        "item": {
          "id": "f16903bb-7f3b-4d7c-a697-72d55c8022e2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "19e0b180-e36c-4832-a715-fddfb9027f48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "f16903bb-7f3b-4d7c-a697-72d55c8022e2",
        "cursor": {
          "ref": "4f3e2400-6d43-4e93-873e-01427b10f4c2",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ad4334bc-052e-44aa-9ed7-3fb47958b936"
        },
        "item": {
          "id": "f16903bb-7f3b-4d7c-a697-72d55c8022e2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "19e0b180-e36c-4832-a715-fddfb9027f48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "c21b42e6-50f2-400d-914e-cbe75a15679d",
        "cursor": {
          "ref": "7c1d8532-e681-4d0c-bede-de48d2e99971",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "809c375c-6bb3-4327-8b37-5b6c7537eab2"
        },
        "item": {
          "id": "c21b42e6-50f2-400d-914e-cbe75a15679d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "874b33fe-ae33-45e6-818b-d73fce0e637d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "c21b42e6-50f2-400d-914e-cbe75a15679d",
        "cursor": {
          "ref": "7c1d8532-e681-4d0c-bede-de48d2e99971",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "809c375c-6bb3-4327-8b37-5b6c7537eab2"
        },
        "item": {
          "id": "c21b42e6-50f2-400d-914e-cbe75a15679d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "874b33fe-ae33-45e6-818b-d73fce0e637d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "10b338c1-710c-47ce-8b46-c681badf985b",
        "cursor": {
          "ref": "e77d2c27-f58b-4580-ba7a-01eff347ce60",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e43f888d-f1e0-469f-9ebf-c872e7afd944"
        },
        "item": {
          "id": "10b338c1-710c-47ce-8b46-c681badf985b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f15f0fda-5c27-498e-8505-7df80ac4ab34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "10b338c1-710c-47ce-8b46-c681badf985b",
        "cursor": {
          "ref": "e77d2c27-f58b-4580-ba7a-01eff347ce60",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e43f888d-f1e0-469f-9ebf-c872e7afd944"
        },
        "item": {
          "id": "10b338c1-710c-47ce-8b46-c681badf985b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f15f0fda-5c27-498e-8505-7df80ac4ab34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "d5d2eea6-0bd4-4912-ba2b-e30d62a92ae1",
        "cursor": {
          "ref": "1a570fe8-e28d-48d1-9516-95647df86d19",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c653ab8f-780c-4ec0-b014-8de48a5711ea"
        },
        "item": {
          "id": "d5d2eea6-0bd4-4912-ba2b-e30d62a92ae1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ec355b41-ef07-44ab-92df-946bec85e676",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "d5d2eea6-0bd4-4912-ba2b-e30d62a92ae1",
        "cursor": {
          "ref": "1a570fe8-e28d-48d1-9516-95647df86d19",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c653ab8f-780c-4ec0-b014-8de48a5711ea"
        },
        "item": {
          "id": "d5d2eea6-0bd4-4912-ba2b-e30d62a92ae1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ec355b41-ef07-44ab-92df-946bec85e676",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "7ff82fb9-3d6a-44e4-a925-9c84f4e303b2",
        "cursor": {
          "ref": "1e9198f5-735c-4e82-9b23-7e58c1d74d86",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8db56a21-3ba1-46e8-ba5a-44d3535f9b30"
        },
        "item": {
          "id": "7ff82fb9-3d6a-44e4-a925-9c84f4e303b2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b4c4d971-d5d5-48f9-995b-3f3186dfa01d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "7ff82fb9-3d6a-44e4-a925-9c84f4e303b2",
        "cursor": {
          "ref": "1e9198f5-735c-4e82-9b23-7e58c1d74d86",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8db56a21-3ba1-46e8-ba5a-44d3535f9b30"
        },
        "item": {
          "id": "7ff82fb9-3d6a-44e4-a925-9c84f4e303b2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b4c4d971-d5d5-48f9-995b-3f3186dfa01d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "9f896d24-b283-45ea-be78-a58d12842dc2",
        "cursor": {
          "ref": "e273f1ab-c166-433b-b3ba-3e8c92502b96",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fbc7bc62-0a3a-4470-9df3-b6305a536f98"
        },
        "item": {
          "id": "9f896d24-b283-45ea-be78-a58d12842dc2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "91339871-2bd3-4667-96bd-ed54be8ae13e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "9f896d24-b283-45ea-be78-a58d12842dc2",
        "cursor": {
          "ref": "e273f1ab-c166-433b-b3ba-3e8c92502b96",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fbc7bc62-0a3a-4470-9df3-b6305a536f98"
        },
        "item": {
          "id": "9f896d24-b283-45ea-be78-a58d12842dc2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "91339871-2bd3-4667-96bd-ed54be8ae13e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "cf18b02a-086f-47c2-a429-9926d604dd74",
        "cursor": {
          "ref": "a2dd1188-6563-46b9-a40c-bb9f23e02002",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c84b817d-4370-4c38-8aff-e06c58db7316"
        },
        "item": {
          "id": "cf18b02a-086f-47c2-a429-9926d604dd74",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2ce3a4d8-c548-4d3c-a039-e5a6bfa5f23b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "cf18b02a-086f-47c2-a429-9926d604dd74",
        "cursor": {
          "ref": "a2dd1188-6563-46b9-a40c-bb9f23e02002",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c84b817d-4370-4c38-8aff-e06c58db7316"
        },
        "item": {
          "id": "cf18b02a-086f-47c2-a429-9926d604dd74",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2ce3a4d8-c548-4d3c-a039-e5a6bfa5f23b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "799c4370-786e-48c8-9a88-2a9dc72af076",
        "cursor": {
          "ref": "090a4ea8-4024-42ac-a1c6-9ab3c4a0a4b0",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6ea9ddaa-7e4d-4fd2-9a1c-71d03c43216f"
        },
        "item": {
          "id": "799c4370-786e-48c8-9a88-2a9dc72af076",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f525cbd9-b807-471a-a1c9-dd5a1de60822",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "799c4370-786e-48c8-9a88-2a9dc72af076",
        "cursor": {
          "ref": "090a4ea8-4024-42ac-a1c6-9ab3c4a0a4b0",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6ea9ddaa-7e4d-4fd2-9a1c-71d03c43216f"
        },
        "item": {
          "id": "799c4370-786e-48c8-9a88-2a9dc72af076",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f525cbd9-b807-471a-a1c9-dd5a1de60822",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "8e4d69e5-0c39-4489-b2a1-22b060520804",
        "cursor": {
          "ref": "a2b958c1-685b-4c0f-bdbb-f205d2936673",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bfdf9180-dc3c-4e5e-bdb8-805ad82018fc"
        },
        "item": {
          "id": "8e4d69e5-0c39-4489-b2a1-22b060520804",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0cf3019e-b499-4f63-9d7e-acfc371550d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "8e4d69e5-0c39-4489-b2a1-22b060520804",
        "cursor": {
          "ref": "a2b958c1-685b-4c0f-bdbb-f205d2936673",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bfdf9180-dc3c-4e5e-bdb8-805ad82018fc"
        },
        "item": {
          "id": "8e4d69e5-0c39-4489-b2a1-22b060520804",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0cf3019e-b499-4f63-9d7e-acfc371550d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "9a237a25-46c6-447f-80cc-3b1254e969c4",
        "cursor": {
          "ref": "120311aa-49aa-45d6-98b4-d178b926a7ba",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "350d3a58-c6c5-4a61-a78a-eac4e7c8a85f"
        },
        "item": {
          "id": "9a237a25-46c6-447f-80cc-3b1254e969c4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5586195c-a381-44ca-bd35-976fd61abd1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "9a237a25-46c6-447f-80cc-3b1254e969c4",
        "cursor": {
          "ref": "120311aa-49aa-45d6-98b4-d178b926a7ba",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "350d3a58-c6c5-4a61-a78a-eac4e7c8a85f"
        },
        "item": {
          "id": "9a237a25-46c6-447f-80cc-3b1254e969c4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5586195c-a381-44ca-bd35-976fd61abd1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "3a881cd7-8add-4f0e-89b9-b6566d151c6f",
        "cursor": {
          "ref": "8bc7ac3a-d80f-40c4-9680-1ab2ae121754",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2dd7fe45-0716-49a2-bb88-438fd979c2cb"
        },
        "item": {
          "id": "3a881cd7-8add-4f0e-89b9-b6566d151c6f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "65fd0814-b421-4ed0-8804-15a663c9b62c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "3a881cd7-8add-4f0e-89b9-b6566d151c6f",
        "cursor": {
          "ref": "8bc7ac3a-d80f-40c4-9680-1ab2ae121754",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2dd7fe45-0716-49a2-bb88-438fd979c2cb"
        },
        "item": {
          "id": "3a881cd7-8add-4f0e-89b9-b6566d151c6f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "65fd0814-b421-4ed0-8804-15a663c9b62c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "92585ba2-1aee-48cb-8731-63fbfd39e39e",
        "cursor": {
          "ref": "71acedac-d324-426e-862f-10c1a029fae7",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9fede96d-3776-47ce-ac56-f2339ad69b54"
        },
        "item": {
          "id": "92585ba2-1aee-48cb-8731-63fbfd39e39e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8ebf9a9f-afa0-4b56-8a4d-c3e0985dd125",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "92585ba2-1aee-48cb-8731-63fbfd39e39e",
        "cursor": {
          "ref": "71acedac-d324-426e-862f-10c1a029fae7",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9fede96d-3776-47ce-ac56-f2339ad69b54"
        },
        "item": {
          "id": "92585ba2-1aee-48cb-8731-63fbfd39e39e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8ebf9a9f-afa0-4b56-8a4d-c3e0985dd125",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "06317752-4683-4445-87dc-50ab202b0ec3",
        "cursor": {
          "ref": "22c5bf99-2ec6-43de-8b2e-2d5faa93b8d0",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "63dc942a-45d2-4a28-8026-62ee6c81dc2c"
        },
        "item": {
          "id": "06317752-4683-4445-87dc-50ab202b0ec3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ff9cf638-34e0-4c0c-a8f1-8b3d1195cb30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "06317752-4683-4445-87dc-50ab202b0ec3",
        "cursor": {
          "ref": "22c5bf99-2ec6-43de-8b2e-2d5faa93b8d0",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "63dc942a-45d2-4a28-8026-62ee6c81dc2c"
        },
        "item": {
          "id": "06317752-4683-4445-87dc-50ab202b0ec3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ff9cf638-34e0-4c0c-a8f1-8b3d1195cb30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "343a52da-0d73-485b-a3e5-7b28c0cd9f76",
        "cursor": {
          "ref": "749553fa-0879-4041-a44d-896b61d6d3db",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3a38e96f-da98-4c95-a614-2042c0ab137f"
        },
        "item": {
          "id": "343a52da-0d73-485b-a3e5-7b28c0cd9f76",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f4bda4b0-c93f-472a-bb95-ed8fdb46e504",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "343a52da-0d73-485b-a3e5-7b28c0cd9f76",
        "cursor": {
          "ref": "749553fa-0879-4041-a44d-896b61d6d3db",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3a38e96f-da98-4c95-a614-2042c0ab137f"
        },
        "item": {
          "id": "343a52da-0d73-485b-a3e5-7b28c0cd9f76",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f4bda4b0-c93f-472a-bb95-ed8fdb46e504",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "c5ca85c8-af45-4c00-bb28-964fb6ed4df3",
        "cursor": {
          "ref": "fcc16512-3ff1-4cf0-bffd-be203574510f",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9c670ff2-6a36-42fc-a350-b22f51945ed3"
        },
        "item": {
          "id": "c5ca85c8-af45-4c00-bb28-964fb6ed4df3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a58513ab-ba79-4e20-8f50-0e17d6853355",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "c5ca85c8-af45-4c00-bb28-964fb6ed4df3",
        "cursor": {
          "ref": "fcc16512-3ff1-4cf0-bffd-be203574510f",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9c670ff2-6a36-42fc-a350-b22f51945ed3"
        },
        "item": {
          "id": "c5ca85c8-af45-4c00-bb28-964fb6ed4df3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a58513ab-ba79-4e20-8f50-0e17d6853355",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "cea0decf-c56a-482e-8e04-a4d13d762c9e",
        "cursor": {
          "ref": "26241d9a-2156-4012-8a51-c9d90e99de87",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f3c72fe1-e305-4686-bb26-5b3ea8e07490"
        },
        "item": {
          "id": "cea0decf-c56a-482e-8e04-a4d13d762c9e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8d39545b-d5e6-4ca8-b77e-acf40d9b31e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "cea0decf-c56a-482e-8e04-a4d13d762c9e",
        "cursor": {
          "ref": "26241d9a-2156-4012-8a51-c9d90e99de87",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f3c72fe1-e305-4686-bb26-5b3ea8e07490"
        },
        "item": {
          "id": "cea0decf-c56a-482e-8e04-a4d13d762c9e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8d39545b-d5e6-4ca8-b77e-acf40d9b31e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "9dfc567b-f3f5-4437-9979-021089d8c669",
        "cursor": {
          "ref": "0d65e3aa-57aa-45e3-a2b9-5aad127f4243",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1c8eb620-fdd7-4a50-9229-04b0c03bef83"
        },
        "item": {
          "id": "9dfc567b-f3f5-4437-9979-021089d8c669",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "24f6a00f-f578-4007-9ebe-25792a68dd90",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "9dfc567b-f3f5-4437-9979-021089d8c669",
        "cursor": {
          "ref": "0d65e3aa-57aa-45e3-a2b9-5aad127f4243",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1c8eb620-fdd7-4a50-9229-04b0c03bef83"
        },
        "item": {
          "id": "9dfc567b-f3f5-4437-9979-021089d8c669",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "24f6a00f-f578-4007-9ebe-25792a68dd90",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "fb325a8d-dfd4-47ce-84ce-77ef418b5dcf",
        "cursor": {
          "ref": "d4f2c460-c929-447c-b90d-b3bac18bc6cf",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8492ce0f-5536-4f9f-8284-460a71ac1c46"
        },
        "item": {
          "id": "fb325a8d-dfd4-47ce-84ce-77ef418b5dcf",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "89aad079-0462-416b-81a4-5dd514eb5639",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fb325a8d-dfd4-47ce-84ce-77ef418b5dcf",
        "cursor": {
          "ref": "d4f2c460-c929-447c-b90d-b3bac18bc6cf",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8492ce0f-5536-4f9f-8284-460a71ac1c46"
        },
        "item": {
          "id": "fb325a8d-dfd4-47ce-84ce-77ef418b5dcf",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "89aad079-0462-416b-81a4-5dd514eb5639",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f0ee6af7-7fb6-4f9d-81f9-0b1016123d0d",
        "cursor": {
          "ref": "e9b8d849-ece2-411e-87c0-0984bda98493",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d7ec6b65-02cd-4559-a586-d4b9a146d5c3"
        },
        "item": {
          "id": "f0ee6af7-7fb6-4f9d-81f9-0b1016123d0d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "64c78145-5ee9-4ae7-a1c1-9e4c223d9c6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "f0ee6af7-7fb6-4f9d-81f9-0b1016123d0d",
        "cursor": {
          "ref": "e9b8d849-ece2-411e-87c0-0984bda98493",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d7ec6b65-02cd-4559-a586-d4b9a146d5c3"
        },
        "item": {
          "id": "f0ee6af7-7fb6-4f9d-81f9-0b1016123d0d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "64c78145-5ee9-4ae7-a1c1-9e4c223d9c6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "74c2a9d3-3aab-452a-a8b0-e5f61636b5b1",
        "cursor": {
          "ref": "ebca1eb1-c3e2-49a6-a0e5-6e3ad36f8598",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bd3e405e-1d4d-4676-a694-fd7cc18f5124"
        },
        "item": {
          "id": "74c2a9d3-3aab-452a-a8b0-e5f61636b5b1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6fdfb43a-324e-4a00-971f-cb2b6fe64c73",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "74c2a9d3-3aab-452a-a8b0-e5f61636b5b1",
        "cursor": {
          "ref": "ebca1eb1-c3e2-49a6-a0e5-6e3ad36f8598",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bd3e405e-1d4d-4676-a694-fd7cc18f5124"
        },
        "item": {
          "id": "74c2a9d3-3aab-452a-a8b0-e5f61636b5b1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6fdfb43a-324e-4a00-971f-cb2b6fe64c73",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0bbd7f69-f4cf-4ad7-adae-db62f15fc06e",
        "cursor": {
          "ref": "cff303da-7a50-46b9-93b8-664615a49333",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d6308139-0105-4546-9051-17536835a4ee"
        },
        "item": {
          "id": "0bbd7f69-f4cf-4ad7-adae-db62f15fc06e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f96953b2-5b87-49e2-a7d8-1e0106b20f8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0bbd7f69-f4cf-4ad7-adae-db62f15fc06e",
        "cursor": {
          "ref": "cff303da-7a50-46b9-93b8-664615a49333",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d6308139-0105-4546-9051-17536835a4ee"
        },
        "item": {
          "id": "0bbd7f69-f4cf-4ad7-adae-db62f15fc06e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f96953b2-5b87-49e2-a7d8-1e0106b20f8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "789a801b-8ad7-423b-9802-07ecd2e940d9",
        "cursor": {
          "ref": "a1665036-fd65-4ea7-a98c-71d5187062c8",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7fa35539-ef7f-4203-b1c4-2724188a4523"
        },
        "item": {
          "id": "789a801b-8ad7-423b-9802-07ecd2e940d9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "05ad3da8-e13a-4c4d-96bc-04403d2998fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "789a801b-8ad7-423b-9802-07ecd2e940d9",
        "cursor": {
          "ref": "a1665036-fd65-4ea7-a98c-71d5187062c8",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7fa35539-ef7f-4203-b1c4-2724188a4523"
        },
        "item": {
          "id": "789a801b-8ad7-423b-9802-07ecd2e940d9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "05ad3da8-e13a-4c4d-96bc-04403d2998fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7e3189b1-351f-45ed-a67f-4ffcbd1adbeb",
        "cursor": {
          "ref": "9fd98bfa-8cf2-4005-a59f-74c8b45e49ce",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "406b9c34-c96c-42bb-b36c-7d78182f2ae6"
        },
        "item": {
          "id": "7e3189b1-351f-45ed-a67f-4ffcbd1adbeb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6610eb47-8751-4879-a3bf-9789bd9b853e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "7e3189b1-351f-45ed-a67f-4ffcbd1adbeb",
        "cursor": {
          "ref": "9fd98bfa-8cf2-4005-a59f-74c8b45e49ce",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "406b9c34-c96c-42bb-b36c-7d78182f2ae6"
        },
        "item": {
          "id": "7e3189b1-351f-45ed-a67f-4ffcbd1adbeb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6610eb47-8751-4879-a3bf-9789bd9b853e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "573ae045-2023-4574-bab4-e06b8e501335",
        "cursor": {
          "ref": "5df301cd-3c68-4945-8a10-ac91a7e9de2b",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c9e58e2b-be89-46bc-922e-03a8a11df230"
        },
        "item": {
          "id": "573ae045-2023-4574-bab4-e06b8e501335",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d677ab3e-7760-4170-b797-c4ab32579ab6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "573ae045-2023-4574-bab4-e06b8e501335",
        "cursor": {
          "ref": "5df301cd-3c68-4945-8a10-ac91a7e9de2b",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c9e58e2b-be89-46bc-922e-03a8a11df230"
        },
        "item": {
          "id": "573ae045-2023-4574-bab4-e06b8e501335",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d677ab3e-7760-4170-b797-c4ab32579ab6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "11ace37a-8afe-4880-a433-721192658f48",
        "cursor": {
          "ref": "b2b53a09-867f-475a-9e59-ac0f160fd28b",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9604fa0b-8516-4741-b06d-d827bd8188d8"
        },
        "item": {
          "id": "11ace37a-8afe-4880-a433-721192658f48",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c9887657-cab8-4941-84fd-ac2888ad700e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "11ace37a-8afe-4880-a433-721192658f48",
        "cursor": {
          "ref": "b2b53a09-867f-475a-9e59-ac0f160fd28b",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9604fa0b-8516-4741-b06d-d827bd8188d8"
        },
        "item": {
          "id": "11ace37a-8afe-4880-a433-721192658f48",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c9887657-cab8-4941-84fd-ac2888ad700e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "1552fbf7-3446-4bc4-a59c-4a93bc86f592",
        "cursor": {
          "ref": "960aafcc-17bf-402e-b93d-8302a424a3e1",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bbe457a6-3b8b-459f-9a58-21c6f6fc9322"
        },
        "item": {
          "id": "1552fbf7-3446-4bc4-a59c-4a93bc86f592",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "39eba80f-ea91-4744-b486-28b963fe7786",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "1552fbf7-3446-4bc4-a59c-4a93bc86f592",
        "cursor": {
          "ref": "960aafcc-17bf-402e-b93d-8302a424a3e1",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bbe457a6-3b8b-459f-9a58-21c6f6fc9322"
        },
        "item": {
          "id": "1552fbf7-3446-4bc4-a59c-4a93bc86f592",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "39eba80f-ea91-4744-b486-28b963fe7786",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "98cdb73b-81d7-4577-9db4-fb72dd68409c",
        "cursor": {
          "ref": "8dc96c21-a5b6-4902-9978-795e8aa23f40",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ea23fae7-11b7-4c24-9722-aa636a80e8c7"
        },
        "item": {
          "id": "98cdb73b-81d7-4577-9db4-fb72dd68409c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "665b61e4-1336-46ff-b2fd-4bed5c47bdb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "98cdb73b-81d7-4577-9db4-fb72dd68409c",
        "cursor": {
          "ref": "8dc96c21-a5b6-4902-9978-795e8aa23f40",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ea23fae7-11b7-4c24-9722-aa636a80e8c7"
        },
        "item": {
          "id": "98cdb73b-81d7-4577-9db4-fb72dd68409c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "665b61e4-1336-46ff-b2fd-4bed5c47bdb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "0444eb52-7501-408d-8f01-4a25082efec1",
        "cursor": {
          "ref": "4e1e5a7c-7b1a-4e3a-bba6-ed957a7c5c47",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6249251f-2d61-4053-9e6b-e9d498c8487b"
        },
        "item": {
          "id": "0444eb52-7501-408d-8f01-4a25082efec1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ff22e5a4-fa0c-4620-86ec-893e0e696d5e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "0444eb52-7501-408d-8f01-4a25082efec1",
        "cursor": {
          "ref": "4e1e5a7c-7b1a-4e3a-bba6-ed957a7c5c47",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6249251f-2d61-4053-9e6b-e9d498c8487b"
        },
        "item": {
          "id": "0444eb52-7501-408d-8f01-4a25082efec1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ff22e5a4-fa0c-4620-86ec-893e0e696d5e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "5e58ca32-3ca7-4f40-9214-fab0f73f9fa3",
        "cursor": {
          "ref": "5bbae63b-d01a-41f8-ae5e-0ab3c94f0460",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d67e1bec-356b-49de-9236-8407ef919423"
        },
        "item": {
          "id": "5e58ca32-3ca7-4f40-9214-fab0f73f9fa3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3e6c156e-a038-4c5d-92d9-7e5424ce73ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "5e58ca32-3ca7-4f40-9214-fab0f73f9fa3",
        "cursor": {
          "ref": "5bbae63b-d01a-41f8-ae5e-0ab3c94f0460",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d67e1bec-356b-49de-9236-8407ef919423"
        },
        "item": {
          "id": "5e58ca32-3ca7-4f40-9214-fab0f73f9fa3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3e6c156e-a038-4c5d-92d9-7e5424ce73ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "778c48b5-0945-47f1-8eb8-6a8dd018ec90",
        "cursor": {
          "ref": "c3c81492-c42c-4ad2-b9de-9c30fb2199dd",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9f8b2133-3f18-432e-b5f0-c59bf11c4e9a"
        },
        "item": {
          "id": "778c48b5-0945-47f1-8eb8-6a8dd018ec90",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1a0f0c52-c342-4d0d-9b15-5c747af9b2d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "778c48b5-0945-47f1-8eb8-6a8dd018ec90",
        "cursor": {
          "ref": "c3c81492-c42c-4ad2-b9de-9c30fb2199dd",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9f8b2133-3f18-432e-b5f0-c59bf11c4e9a"
        },
        "item": {
          "id": "778c48b5-0945-47f1-8eb8-6a8dd018ec90",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1a0f0c52-c342-4d0d-9b15-5c747af9b2d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "3bc0fd26-66a4-45d4-ad33-91c67ff96cb4",
        "cursor": {
          "ref": "98f1ddbf-e7b7-443b-97e1-b48d3c409a7c",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7752d285-4953-4d2a-9428-3a20727e4244"
        },
        "item": {
          "id": "3bc0fd26-66a4-45d4-ad33-91c67ff96cb4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "879e7372-0163-41f5-848a-2d513157cd7f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "3bc0fd26-66a4-45d4-ad33-91c67ff96cb4",
        "cursor": {
          "ref": "98f1ddbf-e7b7-443b-97e1-b48d3c409a7c",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7752d285-4953-4d2a-9428-3a20727e4244"
        },
        "item": {
          "id": "3bc0fd26-66a4-45d4-ad33-91c67ff96cb4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "879e7372-0163-41f5-848a-2d513157cd7f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "b3cae85a-d461-451b-8540-2a0efff9aad4",
        "cursor": {
          "ref": "5d10c898-5d2f-49c6-a18c-a1a04f2645ff",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "60d71285-bf6c-48a3-9c31-f31c27ef9798"
        },
        "item": {
          "id": "b3cae85a-d461-451b-8540-2a0efff9aad4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6622b9c6-9bf3-44f0-818a-be2f92d0a5f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "b3cae85a-d461-451b-8540-2a0efff9aad4",
        "cursor": {
          "ref": "5d10c898-5d2f-49c6-a18c-a1a04f2645ff",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "60d71285-bf6c-48a3-9c31-f31c27ef9798"
        },
        "item": {
          "id": "b3cae85a-d461-451b-8540-2a0efff9aad4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6622b9c6-9bf3-44f0-818a-be2f92d0a5f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "889ec2f0-0285-47fe-9c78-7b6a1d80c187",
        "cursor": {
          "ref": "5db220f5-e673-4220-9acf-08e37fce9b58",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "02f74133-712a-44c4-9eff-a165d35a585c"
        },
        "item": {
          "id": "889ec2f0-0285-47fe-9c78-7b6a1d80c187",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2ec1d75c-65d7-4312-94ed-1be7e38d0227",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "889ec2f0-0285-47fe-9c78-7b6a1d80c187",
        "cursor": {
          "ref": "5db220f5-e673-4220-9acf-08e37fce9b58",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "02f74133-712a-44c4-9eff-a165d35a585c"
        },
        "item": {
          "id": "889ec2f0-0285-47fe-9c78-7b6a1d80c187",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2ec1d75c-65d7-4312-94ed-1be7e38d0227",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "39837bb5-982a-4322-aaa4-5971b122e9fb",
        "cursor": {
          "ref": "a0739d60-bd06-47ae-bd7b-b800675d2fce",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4c91cede-ab14-4c79-b1e7-24110a188c72"
        },
        "item": {
          "id": "39837bb5-982a-4322-aaa4-5971b122e9fb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9243e2b6-714f-4c80-a88a-172b1582e936",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "39837bb5-982a-4322-aaa4-5971b122e9fb",
        "cursor": {
          "ref": "a0739d60-bd06-47ae-bd7b-b800675d2fce",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4c91cede-ab14-4c79-b1e7-24110a188c72"
        },
        "item": {
          "id": "39837bb5-982a-4322-aaa4-5971b122e9fb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9243e2b6-714f-4c80-a88a-172b1582e936",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "b691dc5d-f9ba-4ce3-96d7-8cfb6d4ffae8",
        "cursor": {
          "ref": "db2ce18f-e367-4604-98ab-387506a5f477",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cdac28e5-bc37-4256-9ca0-a95ba4c3a05e"
        },
        "item": {
          "id": "b691dc5d-f9ba-4ce3-96d7-8cfb6d4ffae8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1818ef17-fed9-4539-9161-c6d14a01c97a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "b691dc5d-f9ba-4ce3-96d7-8cfb6d4ffae8",
        "cursor": {
          "ref": "db2ce18f-e367-4604-98ab-387506a5f477",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cdac28e5-bc37-4256-9ca0-a95ba4c3a05e"
        },
        "item": {
          "id": "b691dc5d-f9ba-4ce3-96d7-8cfb6d4ffae8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1818ef17-fed9-4539-9161-c6d14a01c97a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "2d7e42c2-dee2-4681-9b2c-e7d153c80111",
        "cursor": {
          "ref": "17dd928f-ee78-4f26-babb-ee09b73f2742",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d3c7a338-b0a8-48e5-b777-e7467c493e59"
        },
        "item": {
          "id": "2d7e42c2-dee2-4681-9b2c-e7d153c80111",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "94d5ae97-8048-40f1-be98-afb458cbe9ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "2d7e42c2-dee2-4681-9b2c-e7d153c80111",
        "cursor": {
          "ref": "17dd928f-ee78-4f26-babb-ee09b73f2742",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d3c7a338-b0a8-48e5-b777-e7467c493e59"
        },
        "item": {
          "id": "2d7e42c2-dee2-4681-9b2c-e7d153c80111",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "94d5ae97-8048-40f1-be98-afb458cbe9ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "a8eaccfd-d935-4e68-8e0a-a1652510b496",
        "cursor": {
          "ref": "303d17c8-4128-42a9-8150-a7877d2cdd86",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f21db3c3-a1f2-4b2e-8881-4e6b9ea08f92"
        },
        "item": {
          "id": "a8eaccfd-d935-4e68-8e0a-a1652510b496",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "91f8cfc6-b430-4707-b5a7-bbf06d794fec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "a8eaccfd-d935-4e68-8e0a-a1652510b496",
        "cursor": {
          "ref": "303d17c8-4128-42a9-8150-a7877d2cdd86",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f21db3c3-a1f2-4b2e-8881-4e6b9ea08f92"
        },
        "item": {
          "id": "a8eaccfd-d935-4e68-8e0a-a1652510b496",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "91f8cfc6-b430-4707-b5a7-bbf06d794fec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "a53d0677-b989-4013-b107-72745e123607",
        "cursor": {
          "ref": "00ad894a-dfb7-47a3-94c3-a5af7556599d",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4dedb669-2857-4275-a144-9751c805160b"
        },
        "item": {
          "id": "a53d0677-b989-4013-b107-72745e123607",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "455f2ecf-9f6f-47a1-b23c-59ac1c95e49b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "a53d0677-b989-4013-b107-72745e123607",
        "cursor": {
          "ref": "00ad894a-dfb7-47a3-94c3-a5af7556599d",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4dedb669-2857-4275-a144-9751c805160b"
        },
        "item": {
          "id": "a53d0677-b989-4013-b107-72745e123607",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "455f2ecf-9f6f-47a1-b23c-59ac1c95e49b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "f53d9d2e-90c9-4f62-91fe-29d756714830",
        "cursor": {
          "ref": "b3c0542b-927a-4a82-9e19-ad43ddd9894c",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3cf0c1f4-0fa8-4de9-878e-6cb9ff2f0694"
        },
        "item": {
          "id": "f53d9d2e-90c9-4f62-91fe-29d756714830",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dfd2347f-6d5d-4cf2-a246-5c8080d24b59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "f53d9d2e-90c9-4f62-91fe-29d756714830",
        "cursor": {
          "ref": "b3c0542b-927a-4a82-9e19-ad43ddd9894c",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3cf0c1f4-0fa8-4de9-878e-6cb9ff2f0694"
        },
        "item": {
          "id": "f53d9d2e-90c9-4f62-91fe-29d756714830",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dfd2347f-6d5d-4cf2-a246-5c8080d24b59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "cb0ed823-6d3b-4060-8ce0-4725b07b7eb7",
        "cursor": {
          "ref": "0b5bb569-92e2-4587-8cca-71e76c1dea36",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d638f257-da7e-44c9-ae0a-b1d0ac1eb2f3"
        },
        "item": {
          "id": "cb0ed823-6d3b-4060-8ce0-4725b07b7eb7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9f5d2ca5-44db-4c1b-bfd0-46a7cd971a60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "cb0ed823-6d3b-4060-8ce0-4725b07b7eb7",
        "cursor": {
          "ref": "0b5bb569-92e2-4587-8cca-71e76c1dea36",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d638f257-da7e-44c9-ae0a-b1d0ac1eb2f3"
        },
        "item": {
          "id": "cb0ed823-6d3b-4060-8ce0-4725b07b7eb7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9f5d2ca5-44db-4c1b-bfd0-46a7cd971a60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "b530badb-8017-438a-988a-fd701c3614f2",
        "cursor": {
          "ref": "b5234c09-e9d3-463f-a0d9-70aadba90a75",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0ef7e552-7cb8-4ba0-93de-9291fe9ffa2e"
        },
        "item": {
          "id": "b530badb-8017-438a-988a-fd701c3614f2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6cdf8727-ef28-4cef-9a73-6af4bc02c547",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "b530badb-8017-438a-988a-fd701c3614f2",
        "cursor": {
          "ref": "b5234c09-e9d3-463f-a0d9-70aadba90a75",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0ef7e552-7cb8-4ba0-93de-9291fe9ffa2e"
        },
        "item": {
          "id": "b530badb-8017-438a-988a-fd701c3614f2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6cdf8727-ef28-4cef-9a73-6af4bc02c547",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "691d9ea7-27ba-4854-a333-f4a9d468eaa5",
        "cursor": {
          "ref": "610ddb68-1b6b-4029-9630-146e853c61da",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "765d423f-42ed-440a-99db-b17e22f2c2eb"
        },
        "item": {
          "id": "691d9ea7-27ba-4854-a333-f4a9d468eaa5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "760dc498-fc54-41c2-9753-68989ee64756",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "691d9ea7-27ba-4854-a333-f4a9d468eaa5",
        "cursor": {
          "ref": "610ddb68-1b6b-4029-9630-146e853c61da",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "765d423f-42ed-440a-99db-b17e22f2c2eb"
        },
        "item": {
          "id": "691d9ea7-27ba-4854-a333-f4a9d468eaa5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "760dc498-fc54-41c2-9753-68989ee64756",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "3eea4c47-e23b-4b98-a520-ad49fa88f9ad",
        "cursor": {
          "ref": "d60ca347-0e8a-4ebe-b826-a6dcf55b6675",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a8f5fd7b-40b9-4f0a-a2dd-0091f8437832"
        },
        "item": {
          "id": "3eea4c47-e23b-4b98-a520-ad49fa88f9ad",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3b6f497e-cadc-4292-ac3c-feb61821a88b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "3eea4c47-e23b-4b98-a520-ad49fa88f9ad",
        "cursor": {
          "ref": "d60ca347-0e8a-4ebe-b826-a6dcf55b6675",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a8f5fd7b-40b9-4f0a-a2dd-0091f8437832"
        },
        "item": {
          "id": "3eea4c47-e23b-4b98-a520-ad49fa88f9ad",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3b6f497e-cadc-4292-ac3c-feb61821a88b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "5be5bf19-a7ae-4ef3-8587-a148fc1d70bd",
        "cursor": {
          "ref": "6247f1e9-a2a5-4b1b-90e2-876120f35d52",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fd0c6207-69e5-4834-bbfa-ef9ad9aacadc"
        },
        "item": {
          "id": "5be5bf19-a7ae-4ef3-8587-a148fc1d70bd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b69bf013-2b49-480a-8a96-cd1e7dbfb4bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "5be5bf19-a7ae-4ef3-8587-a148fc1d70bd",
        "cursor": {
          "ref": "6247f1e9-a2a5-4b1b-90e2-876120f35d52",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fd0c6207-69e5-4834-bbfa-ef9ad9aacadc"
        },
        "item": {
          "id": "5be5bf19-a7ae-4ef3-8587-a148fc1d70bd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b69bf013-2b49-480a-8a96-cd1e7dbfb4bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fbdae67a-818d-4d07-8d55-53e01722d407",
        "cursor": {
          "ref": "5c577cb7-10cb-4600-b38e-cacaae14e58c",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "87d3bc6d-0d27-41de-99f6-aeef5f4d64ad"
        },
        "item": {
          "id": "fbdae67a-818d-4d07-8d55-53e01722d407",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "184ab2a4-677c-4cf7-b92b-88d8708e0198",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "fbdae67a-818d-4d07-8d55-53e01722d407",
        "cursor": {
          "ref": "5c577cb7-10cb-4600-b38e-cacaae14e58c",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "87d3bc6d-0d27-41de-99f6-aeef5f4d64ad"
        },
        "item": {
          "id": "fbdae67a-818d-4d07-8d55-53e01722d407",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "184ab2a4-677c-4cf7-b92b-88d8708e0198",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "1c41bc29-731b-4856-ac77-cc78fb211859",
        "cursor": {
          "ref": "e848b0c3-cfb7-49cc-9ae7-98b863de9450",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8522c8cd-ffde-402b-9d1c-58a74cf206b0"
        },
        "item": {
          "id": "1c41bc29-731b-4856-ac77-cc78fb211859",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "205fbab1-60ba-426d-9cfe-dbc347a04138",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "1c41bc29-731b-4856-ac77-cc78fb211859",
        "cursor": {
          "ref": "e848b0c3-cfb7-49cc-9ae7-98b863de9450",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8522c8cd-ffde-402b-9d1c-58a74cf206b0"
        },
        "item": {
          "id": "1c41bc29-731b-4856-ac77-cc78fb211859",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "205fbab1-60ba-426d-9cfe-dbc347a04138",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "80091d2f-529e-486a-a9a5-b179fcfe87e4",
        "cursor": {
          "ref": "afe6b4a5-be1d-4b20-a4e2-8e8397cda99e",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "33a98b2a-0f40-44d0-ba16-52b6d856dfed"
        },
        "item": {
          "id": "80091d2f-529e-486a-a9a5-b179fcfe87e4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "09665842-eb8e-4f46-98fc-069a3dc0fee6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "80091d2f-529e-486a-a9a5-b179fcfe87e4",
        "cursor": {
          "ref": "afe6b4a5-be1d-4b20-a4e2-8e8397cda99e",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "33a98b2a-0f40-44d0-ba16-52b6d856dfed"
        },
        "item": {
          "id": "80091d2f-529e-486a-a9a5-b179fcfe87e4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "09665842-eb8e-4f46-98fc-069a3dc0fee6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ded9a2d6-73e7-4830-a013-a665254dfb52",
        "cursor": {
          "ref": "d2ab23d9-20e4-4a98-acfe-a2056f0a5903",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "45098a3d-9312-41e1-b6b7-8ef51856caf3"
        },
        "item": {
          "id": "ded9a2d6-73e7-4830-a013-a665254dfb52",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "38d8b1db-4d9f-4ad0-a33d-bdbb041047bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "ded9a2d6-73e7-4830-a013-a665254dfb52",
        "cursor": {
          "ref": "d2ab23d9-20e4-4a98-acfe-a2056f0a5903",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "45098a3d-9312-41e1-b6b7-8ef51856caf3"
        },
        "item": {
          "id": "ded9a2d6-73e7-4830-a013-a665254dfb52",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "38d8b1db-4d9f-4ad0-a33d-bdbb041047bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "d25f37ce-2da9-4685-8b79-674165e91e32",
        "cursor": {
          "ref": "6c821cf3-3f59-43b2-b8ba-2f32a39e7054",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e8accfb7-08fd-446e-8eaf-15244f818422"
        },
        "item": {
          "id": "d25f37ce-2da9-4685-8b79-674165e91e32",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b0611965-2446-4fef-b839-c5dbc75d569d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "d25f37ce-2da9-4685-8b79-674165e91e32",
        "cursor": {
          "ref": "6c821cf3-3f59-43b2-b8ba-2f32a39e7054",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e8accfb7-08fd-446e-8eaf-15244f818422"
        },
        "item": {
          "id": "d25f37ce-2da9-4685-8b79-674165e91e32",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b0611965-2446-4fef-b839-c5dbc75d569d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "f2d5883b-2e07-4452-8935-956911565c9c",
        "cursor": {
          "ref": "877c53aa-9d7b-4b8f-8770-ab44f8c725d8",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a70eef7c-3c7a-4727-81a2-611f3c54f042"
        },
        "item": {
          "id": "f2d5883b-2e07-4452-8935-956911565c9c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d1f37461-1bd4-435f-8950-ff855f4073e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "f2d5883b-2e07-4452-8935-956911565c9c",
        "cursor": {
          "ref": "877c53aa-9d7b-4b8f-8770-ab44f8c725d8",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a70eef7c-3c7a-4727-81a2-611f3c54f042"
        },
        "item": {
          "id": "f2d5883b-2e07-4452-8935-956911565c9c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d1f37461-1bd4-435f-8950-ff855f4073e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "f783aaa2-cb9d-4d72-b663-929d30516238",
        "cursor": {
          "ref": "4fc3f919-529a-4266-bb1b-6f388edac004",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "415e3315-cba2-4163-aaeb-f11cddf68fd5"
        },
        "item": {
          "id": "f783aaa2-cb9d-4d72-b663-929d30516238",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "33e5e413-b0f3-4cb8-b4cc-c2306c3bd45c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f783aaa2-cb9d-4d72-b663-929d30516238",
        "cursor": {
          "ref": "4fc3f919-529a-4266-bb1b-6f388edac004",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "415e3315-cba2-4163-aaeb-f11cddf68fd5"
        },
        "item": {
          "id": "f783aaa2-cb9d-4d72-b663-929d30516238",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "33e5e413-b0f3-4cb8-b4cc-c2306c3bd45c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d512527c-82d0-4154-ae6e-cd1e4f791e3a",
        "cursor": {
          "ref": "b1bb2633-3056-47fc-b31e-d68fb3c5041e",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "dfbb9835-3e75-403a-95ec-fa1141742ac4"
        },
        "item": {
          "id": "d512527c-82d0-4154-ae6e-cd1e4f791e3a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ebcfc1c9-dd23-4051-9dad-3b1703e1ca35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d512527c-82d0-4154-ae6e-cd1e4f791e3a",
        "cursor": {
          "ref": "b1bb2633-3056-47fc-b31e-d68fb3c5041e",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "dfbb9835-3e75-403a-95ec-fa1141742ac4"
        },
        "item": {
          "id": "d512527c-82d0-4154-ae6e-cd1e4f791e3a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ebcfc1c9-dd23-4051-9dad-3b1703e1ca35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "93f8ae7e-4ec8-4250-909c-b7103b28648e",
        "cursor": {
          "ref": "55fe03bf-387a-4d82-9e98-b871092b0a50",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5b687b5a-602e-43fa-9c1f-79272cd8d24b"
        },
        "item": {
          "id": "93f8ae7e-4ec8-4250-909c-b7103b28648e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d98889dc-a735-45a7-9844-e6378fd37ddc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "93f8ae7e-4ec8-4250-909c-b7103b28648e",
        "cursor": {
          "ref": "55fe03bf-387a-4d82-9e98-b871092b0a50",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5b687b5a-602e-43fa-9c1f-79272cd8d24b"
        },
        "item": {
          "id": "93f8ae7e-4ec8-4250-909c-b7103b28648e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d98889dc-a735-45a7-9844-e6378fd37ddc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b732503b-27a6-496c-a8e4-af8e3392f2da",
        "cursor": {
          "ref": "7fc34216-79b9-44e0-a0ee-03d5d70fca0a",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "595decaa-2621-428d-ac5f-614ae7cc5876"
        },
        "item": {
          "id": "b732503b-27a6-496c-a8e4-af8e3392f2da",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3d0cdeb4-9768-4928-8aed-7f3d278afe56",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "b732503b-27a6-496c-a8e4-af8e3392f2da",
        "cursor": {
          "ref": "7fc34216-79b9-44e0-a0ee-03d5d70fca0a",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "595decaa-2621-428d-ac5f-614ae7cc5876"
        },
        "item": {
          "id": "b732503b-27a6-496c-a8e4-af8e3392f2da",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3d0cdeb4-9768-4928-8aed-7f3d278afe56",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "f12e019b-6d38-469d-b134-e04428c7b421",
        "cursor": {
          "ref": "d467c6f7-a65b-40ba-a072-f615c6bf658f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "029a255d-bce8-4602-aff9-9cdd0e958acf"
        },
        "item": {
          "id": "f12e019b-6d38-469d-b134-e04428c7b421",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bf3e852d-85c0-47d6-b29c-c631a99096f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f12e019b-6d38-469d-b134-e04428c7b421",
        "cursor": {
          "ref": "d467c6f7-a65b-40ba-a072-f615c6bf658f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "029a255d-bce8-4602-aff9-9cdd0e958acf"
        },
        "item": {
          "id": "f12e019b-6d38-469d-b134-e04428c7b421",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bf3e852d-85c0-47d6-b29c-c631a99096f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "9cbdd475-41c4-46c3-913f-3b9f8c99f3a6",
        "cursor": {
          "ref": "0e4f3834-b901-471f-94ad-d5725c921a5d",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "92e522b3-9d38-4c7f-a315-4ad0b23af961"
        },
        "item": {
          "id": "9cbdd475-41c4-46c3-913f-3b9f8c99f3a6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57fd945a-ac64-4d07-84eb-ed7dba44d1e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9cbdd475-41c4-46c3-913f-3b9f8c99f3a6",
        "cursor": {
          "ref": "0e4f3834-b901-471f-94ad-d5725c921a5d",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "92e522b3-9d38-4c7f-a315-4ad0b23af961"
        },
        "item": {
          "id": "9cbdd475-41c4-46c3-913f-3b9f8c99f3a6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57fd945a-ac64-4d07-84eb-ed7dba44d1e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "39331c4e-1e3b-4980-921a-e3accaedc59d",
        "cursor": {
          "ref": "82dfaaf0-bfa1-40ea-8c6f-a535919430f4",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fa17d119-7897-45fc-a208-afd899a6c917"
        },
        "item": {
          "id": "39331c4e-1e3b-4980-921a-e3accaedc59d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "608e691d-6830-470a-b197-38f4a5513633",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "39331c4e-1e3b-4980-921a-e3accaedc59d",
        "cursor": {
          "ref": "82dfaaf0-bfa1-40ea-8c6f-a535919430f4",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fa17d119-7897-45fc-a208-afd899a6c917"
        },
        "item": {
          "id": "39331c4e-1e3b-4980-921a-e3accaedc59d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "608e691d-6830-470a-b197-38f4a5513633",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "78a5cd3d-d9d9-41fd-9dbb-ed4b7a8237f0",
        "cursor": {
          "ref": "1d7f89b8-c7f7-476f-a40f-cf06a9830650",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6c945fc8-6711-4b09-bc49-e030b68bd397"
        },
        "item": {
          "id": "78a5cd3d-d9d9-41fd-9dbb-ed4b7a8237f0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4e933dd7-22b4-413b-8064-7c19ddd1a4ca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 49,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "78a5cd3d-d9d9-41fd-9dbb-ed4b7a8237f0",
        "cursor": {
          "ref": "1d7f89b8-c7f7-476f-a40f-cf06a9830650",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6c945fc8-6711-4b09-bc49-e030b68bd397"
        },
        "item": {
          "id": "78a5cd3d-d9d9-41fd-9dbb-ed4b7a8237f0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4e933dd7-22b4-413b-8064-7c19ddd1a4ca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 49,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "5a57c9a3-d107-42e4-9fbd-97b7956de8c2",
        "cursor": {
          "ref": "036398f8-330b-43e8-b9ee-804fa2423741",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "07f2d643-5442-40a5-9821-3edf27e35084"
        },
        "item": {
          "id": "5a57c9a3-d107-42e4-9fbd-97b7956de8c2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ceff6c63-d08a-403a-8522-3625b38bd7c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "5a57c9a3-d107-42e4-9fbd-97b7956de8c2",
        "cursor": {
          "ref": "036398f8-330b-43e8-b9ee-804fa2423741",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "07f2d643-5442-40a5-9821-3edf27e35084"
        },
        "item": {
          "id": "5a57c9a3-d107-42e4-9fbd-97b7956de8c2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ceff6c63-d08a-403a-8522-3625b38bd7c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e85280fe-a99f-44c7-b075-5eba58baee22",
        "cursor": {
          "ref": "1ac08ca4-59ea-4c5f-8495-56399b1b3ce8",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f3775980-39a6-44b9-993b-bc47626a7a9a"
        },
        "item": {
          "id": "e85280fe-a99f-44c7-b075-5eba58baee22",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "26365523-cb0b-4c1e-bc4e-5c2cad8a8d3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e85280fe-a99f-44c7-b075-5eba58baee22",
        "cursor": {
          "ref": "1ac08ca4-59ea-4c5f-8495-56399b1b3ce8",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f3775980-39a6-44b9-993b-bc47626a7a9a"
        },
        "item": {
          "id": "e85280fe-a99f-44c7-b075-5eba58baee22",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "26365523-cb0b-4c1e-bc4e-5c2cad8a8d3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "7444ee80-907a-4fe3-9e1e-328dfb42172b",
        "cursor": {
          "ref": "2fbced91-9362-40f1-9371-ead3a1cfc6eb",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1a5a1798-e27d-4085-89c0-98782c2c65a4"
        },
        "item": {
          "id": "7444ee80-907a-4fe3-9e1e-328dfb42172b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a4df91e1-5d7d-4403-a458-7fddfb5cafc8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "7444ee80-907a-4fe3-9e1e-328dfb42172b",
        "cursor": {
          "ref": "2fbced91-9362-40f1-9371-ead3a1cfc6eb",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1a5a1798-e27d-4085-89c0-98782c2c65a4"
        },
        "item": {
          "id": "7444ee80-907a-4fe3-9e1e-328dfb42172b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a4df91e1-5d7d-4403-a458-7fddfb5cafc8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "1700fa0f-09fb-4bc7-b1e6-62d86336141d",
        "cursor": {
          "ref": "0b2c5aae-bb26-4d52-af48-685aa2cedfd6",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "948fd7ca-9136-4015-bf2b-38dd6449d57e"
        },
        "item": {
          "id": "1700fa0f-09fb-4bc7-b1e6-62d86336141d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b1addcac-f4d6-40da-bedd-386287fd48e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "1700fa0f-09fb-4bc7-b1e6-62d86336141d",
        "cursor": {
          "ref": "0b2c5aae-bb26-4d52-af48-685aa2cedfd6",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "948fd7ca-9136-4015-bf2b-38dd6449d57e"
        },
        "item": {
          "id": "1700fa0f-09fb-4bc7-b1e6-62d86336141d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b1addcac-f4d6-40da-bedd-386287fd48e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "e551f859-f720-48f9-bcf1-1552b2e74198",
        "cursor": {
          "ref": "a62c1914-a001-440b-ad3b-6f49e6882d39",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f4c8dbc8-8386-48fe-8889-ec8186b74672"
        },
        "item": {
          "id": "e551f859-f720-48f9-bcf1-1552b2e74198",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5d4beb54-7b10-42d4-ae6d-4944006eb342",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "e551f859-f720-48f9-bcf1-1552b2e74198",
        "cursor": {
          "ref": "a62c1914-a001-440b-ad3b-6f49e6882d39",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f4c8dbc8-8386-48fe-8889-ec8186b74672"
        },
        "item": {
          "id": "e551f859-f720-48f9-bcf1-1552b2e74198",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5d4beb54-7b10-42d4-ae6d-4944006eb342",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "21467e84-5f1f-4a0a-a0f1-486fa5165231",
        "cursor": {
          "ref": "14e80cbf-a96c-43cd-93a9-83fcbb18b753",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "963f34df-09a5-48d3-adff-86b0f80e9201"
        },
        "item": {
          "id": "21467e84-5f1f-4a0a-a0f1-486fa5165231",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "63da6dc2-ff27-4837-a419-05c397d5e1b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "21467e84-5f1f-4a0a-a0f1-486fa5165231",
        "cursor": {
          "ref": "14e80cbf-a96c-43cd-93a9-83fcbb18b753",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "963f34df-09a5-48d3-adff-86b0f80e9201"
        },
        "item": {
          "id": "21467e84-5f1f-4a0a-a0f1-486fa5165231",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "63da6dc2-ff27-4837-a419-05c397d5e1b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "8f4e1f0f-5bb9-4c59-ba16-bfe837fe36d6",
        "cursor": {
          "ref": "6d714885-53a7-4af8-b484-699b6b25e992",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "83b77a5c-1fe8-4bf7-b5c9-74d6d70f89cb"
        },
        "item": {
          "id": "8f4e1f0f-5bb9-4c59-ba16-bfe837fe36d6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "69850d6e-bfc2-4c23-9d1c-0d7cdbb72c50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "8f4e1f0f-5bb9-4c59-ba16-bfe837fe36d6",
        "cursor": {
          "ref": "6d714885-53a7-4af8-b484-699b6b25e992",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "83b77a5c-1fe8-4bf7-b5c9-74d6d70f89cb"
        },
        "item": {
          "id": "8f4e1f0f-5bb9-4c59-ba16-bfe837fe36d6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "69850d6e-bfc2-4c23-9d1c-0d7cdbb72c50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "550f33d8-9746-4057-912e-0f9c0e09a3c7",
        "cursor": {
          "ref": "ab142bff-7ef5-412c-ab6e-46157fb0d4fb",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4ff98538-6a32-4ec1-837d-b7abde97a134"
        },
        "item": {
          "id": "550f33d8-9746-4057-912e-0f9c0e09a3c7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8b8ef72d-dfa1-4d65-9369-c3b38d4b91c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "550f33d8-9746-4057-912e-0f9c0e09a3c7",
        "cursor": {
          "ref": "ab142bff-7ef5-412c-ab6e-46157fb0d4fb",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4ff98538-6a32-4ec1-837d-b7abde97a134"
        },
        "item": {
          "id": "550f33d8-9746-4057-912e-0f9c0e09a3c7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8b8ef72d-dfa1-4d65-9369-c3b38d4b91c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "6d88b2a3-ff66-457a-aa5b-c0ea3682d70c",
        "cursor": {
          "ref": "9f84880c-3e09-47f9-92c3-c156bd056ceb",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2cb20643-597c-4d07-be89-5933fc5ce537"
        },
        "item": {
          "id": "6d88b2a3-ff66-457a-aa5b-c0ea3682d70c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b624fafe-9889-4573-8e03-7fa35d466e20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "6d88b2a3-ff66-457a-aa5b-c0ea3682d70c",
        "cursor": {
          "ref": "9f84880c-3e09-47f9-92c3-c156bd056ceb",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2cb20643-597c-4d07-be89-5933fc5ce537"
        },
        "item": {
          "id": "6d88b2a3-ff66-457a-aa5b-c0ea3682d70c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b624fafe-9889-4573-8e03-7fa35d466e20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "6aca5f4c-fe6e-4d07-849d-9613635aba3b",
        "cursor": {
          "ref": "44871226-32f0-44ac-8143-f5c3c12a02c7",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e46f93e5-3be1-4b27-b1f9-d173eba46762"
        },
        "item": {
          "id": "6aca5f4c-fe6e-4d07-849d-9613635aba3b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e8b0cf21-4c04-478f-a19b-bdeeab74b8cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "6aca5f4c-fe6e-4d07-849d-9613635aba3b",
        "cursor": {
          "ref": "44871226-32f0-44ac-8143-f5c3c12a02c7",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e46f93e5-3be1-4b27-b1f9-d173eba46762"
        },
        "item": {
          "id": "6aca5f4c-fe6e-4d07-849d-9613635aba3b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e8b0cf21-4c04-478f-a19b-bdeeab74b8cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "63418049-8066-4511-b755-1e5dd8357907",
        "cursor": {
          "ref": "75e3d639-2261-4897-9e2e-918ce1fc6c12",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "605ebbc1-39db-40eb-9052-e70afc4319db"
        },
        "item": {
          "id": "63418049-8066-4511-b755-1e5dd8357907",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1cac93f7-1958-45f1-b5a5-7b308da6f840",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "63418049-8066-4511-b755-1e5dd8357907",
        "cursor": {
          "ref": "75e3d639-2261-4897-9e2e-918ce1fc6c12",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "605ebbc1-39db-40eb-9052-e70afc4319db"
        },
        "item": {
          "id": "63418049-8066-4511-b755-1e5dd8357907",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1cac93f7-1958-45f1-b5a5-7b308da6f840",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "342e02de-fdcc-4832-84ae-b3154fe6a5ba",
        "cursor": {
          "ref": "2503581b-2c43-4398-8c66-57896986ee73",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "02d0a0e8-d88d-4277-86c5-5a9ff3ce541b"
        },
        "item": {
          "id": "342e02de-fdcc-4832-84ae-b3154fe6a5ba",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5ee910e4-210b-4030-8f01-832836a3f1e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "342e02de-fdcc-4832-84ae-b3154fe6a5ba",
        "cursor": {
          "ref": "2503581b-2c43-4398-8c66-57896986ee73",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "02d0a0e8-d88d-4277-86c5-5a9ff3ce541b"
        },
        "item": {
          "id": "342e02de-fdcc-4832-84ae-b3154fe6a5ba",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5ee910e4-210b-4030-8f01-832836a3f1e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "68a7b15e-721d-4e9e-8c8c-7c3712f0ca01",
        "cursor": {
          "ref": "02be679f-bae8-4cad-a9c4-d225eeb571ac",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4d9b3959-e47d-474e-a27e-c6e1e757e638"
        },
        "item": {
          "id": "68a7b15e-721d-4e9e-8c8c-7c3712f0ca01",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7f126555-fcf3-4456-bffd-5014e16ba179",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "68a7b15e-721d-4e9e-8c8c-7c3712f0ca01",
        "cursor": {
          "ref": "02be679f-bae8-4cad-a9c4-d225eeb571ac",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4d9b3959-e47d-474e-a27e-c6e1e757e638"
        },
        "item": {
          "id": "68a7b15e-721d-4e9e-8c8c-7c3712f0ca01",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7f126555-fcf3-4456-bffd-5014e16ba179",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "a786d312-26ac-4007-a3c4-a65fc7cbf6f6",
        "cursor": {
          "ref": "60a17ab6-a8c8-45b7-b13b-4e3c87c68f46",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a1766997-24ac-44a3-bb8b-f3d3fda12925"
        },
        "item": {
          "id": "a786d312-26ac-4007-a3c4-a65fc7cbf6f6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "071188df-0f2d-4124-a37a-9c3f4516598a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "a786d312-26ac-4007-a3c4-a65fc7cbf6f6",
        "cursor": {
          "ref": "60a17ab6-a8c8-45b7-b13b-4e3c87c68f46",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a1766997-24ac-44a3-bb8b-f3d3fda12925"
        },
        "item": {
          "id": "a786d312-26ac-4007-a3c4-a65fc7cbf6f6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "071188df-0f2d-4124-a37a-9c3f4516598a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "97243579-b169-4ce4-a908-5364b2a059ad",
        "cursor": {
          "ref": "c8078ac9-c263-4249-8adc-8e9012e608cf",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7902f4d2-eb46-4971-97a5-96e1aaa8609d"
        },
        "item": {
          "id": "97243579-b169-4ce4-a908-5364b2a059ad",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8f4d00b6-8fba-4135-82d3-e01af67d7124",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "97243579-b169-4ce4-a908-5364b2a059ad",
        "cursor": {
          "ref": "c8078ac9-c263-4249-8adc-8e9012e608cf",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7902f4d2-eb46-4971-97a5-96e1aaa8609d"
        },
        "item": {
          "id": "97243579-b169-4ce4-a908-5364b2a059ad",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8f4d00b6-8fba-4135-82d3-e01af67d7124",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "25eba931-1554-4144-aaa2-0368c4a4ba2a",
        "cursor": {
          "ref": "ef4e2107-8988-4fc9-a252-0ee1745871aa",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9e1c97bb-45e0-4895-946f-740772ac2b19"
        },
        "item": {
          "id": "25eba931-1554-4144-aaa2-0368c4a4ba2a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c6b7aaba-9537-408d-875e-6ff83557a558",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "25eba931-1554-4144-aaa2-0368c4a4ba2a",
        "cursor": {
          "ref": "ef4e2107-8988-4fc9-a252-0ee1745871aa",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9e1c97bb-45e0-4895-946f-740772ac2b19"
        },
        "item": {
          "id": "25eba931-1554-4144-aaa2-0368c4a4ba2a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c6b7aaba-9537-408d-875e-6ff83557a558",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "bbd552bb-9f09-4b60-ae1e-dada071e7efc",
        "cursor": {
          "ref": "6c0e3f46-567a-4d30-8fc3-b85fc44083c6",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e817a505-5bfb-4606-8461-f435cfde0224"
        },
        "item": {
          "id": "bbd552bb-9f09-4b60-ae1e-dada071e7efc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bea0ac6a-f265-4676-9a8a-48a264689902",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "bbd552bb-9f09-4b60-ae1e-dada071e7efc",
        "cursor": {
          "ref": "6c0e3f46-567a-4d30-8fc3-b85fc44083c6",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e817a505-5bfb-4606-8461-f435cfde0224"
        },
        "item": {
          "id": "bbd552bb-9f09-4b60-ae1e-dada071e7efc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bea0ac6a-f265-4676-9a8a-48a264689902",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "99aca5af-693c-4a71-b0b4-ccc220552e76",
        "cursor": {
          "ref": "654e4a72-0360-49e7-82c7-a54828a3ab2a",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b2e92863-b750-42bd-a44c-c35b028b74cd"
        },
        "item": {
          "id": "99aca5af-693c-4a71-b0b4-ccc220552e76",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f8846d8a-6563-4ac0-92d0-ef040172af05",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "99aca5af-693c-4a71-b0b4-ccc220552e76",
        "cursor": {
          "ref": "654e4a72-0360-49e7-82c7-a54828a3ab2a",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b2e92863-b750-42bd-a44c-c35b028b74cd"
        },
        "item": {
          "id": "99aca5af-693c-4a71-b0b4-ccc220552e76",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f8846d8a-6563-4ac0-92d0-ef040172af05",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6caebb7b-0934-4904-84dc-6262beed1e37",
        "cursor": {
          "ref": "c7975c7b-6bfd-4cde-a4ba-995c85e651bb",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e48b54d7-9f66-4644-b5b8-1e4d9d231ff7"
        },
        "item": {
          "id": "6caebb7b-0934-4904-84dc-6262beed1e37",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "171aaed9-84f3-4de1-80a7-fa635b70214d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6caebb7b-0934-4904-84dc-6262beed1e37",
        "cursor": {
          "ref": "c7975c7b-6bfd-4cde-a4ba-995c85e651bb",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e48b54d7-9f66-4644-b5b8-1e4d9d231ff7"
        },
        "item": {
          "id": "6caebb7b-0934-4904-84dc-6262beed1e37",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "171aaed9-84f3-4de1-80a7-fa635b70214d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "32ad2a44-21c5-476d-a90c-63c53eb32a5e",
        "cursor": {
          "ref": "5c27f096-adb6-43ca-b62a-1bccbf114f2a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "74fa16ae-a670-4349-91d7-96cd198caf26"
        },
        "item": {
          "id": "32ad2a44-21c5-476d-a90c-63c53eb32a5e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e26b3a88-7255-46c5-ab24-9d581586cefb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "32ad2a44-21c5-476d-a90c-63c53eb32a5e",
        "cursor": {
          "ref": "5c27f096-adb6-43ca-b62a-1bccbf114f2a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "74fa16ae-a670-4349-91d7-96cd198caf26"
        },
        "item": {
          "id": "32ad2a44-21c5-476d-a90c-63c53eb32a5e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e26b3a88-7255-46c5-ab24-9d581586cefb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f892adb6-740f-4915-8679-8cbe6c3b89b6",
        "cursor": {
          "ref": "881f7695-1dd7-4966-9ccc-c8afff9915ba",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a89c1e6c-5a10-4e86-948c-2c1704c33aab"
        },
        "item": {
          "id": "f892adb6-740f-4915-8679-8cbe6c3b89b6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a70623ac-e78b-4da4-bc99-3151923fe00a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "f892adb6-740f-4915-8679-8cbe6c3b89b6",
        "cursor": {
          "ref": "881f7695-1dd7-4966-9ccc-c8afff9915ba",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a89c1e6c-5a10-4e86-948c-2c1704c33aab"
        },
        "item": {
          "id": "f892adb6-740f-4915-8679-8cbe6c3b89b6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a70623ac-e78b-4da4-bc99-3151923fe00a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "9d90b805-cedf-4cf8-9a56-f4da07bef65c",
        "cursor": {
          "ref": "c0ddec6f-1570-4a7d-baea-d24e4753867e",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8d7fd5d1-47f2-455a-b2ea-fb93078318bf"
        },
        "item": {
          "id": "9d90b805-cedf-4cf8-9a56-f4da07bef65c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "61bd40e1-fbb0-40a4-aa25-27c91cab490e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "9d90b805-cedf-4cf8-9a56-f4da07bef65c",
        "cursor": {
          "ref": "c0ddec6f-1570-4a7d-baea-d24e4753867e",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8d7fd5d1-47f2-455a-b2ea-fb93078318bf"
        },
        "item": {
          "id": "9d90b805-cedf-4cf8-9a56-f4da07bef65c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "61bd40e1-fbb0-40a4-aa25-27c91cab490e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "510a8a79-4aaa-4632-b77c-ab4c79ff0d89",
        "cursor": {
          "ref": "2f21825c-7028-41e7-b2b1-be64a95d21ec",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "775badc7-ae6d-4b54-9860-0c12a265f51c"
        },
        "item": {
          "id": "510a8a79-4aaa-4632-b77c-ab4c79ff0d89",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1b33a2ac-9539-4237-9220-dbc328ee37e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "510a8a79-4aaa-4632-b77c-ab4c79ff0d89",
        "cursor": {
          "ref": "2f21825c-7028-41e7-b2b1-be64a95d21ec",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "775badc7-ae6d-4b54-9860-0c12a265f51c"
        },
        "item": {
          "id": "510a8a79-4aaa-4632-b77c-ab4c79ff0d89",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1b33a2ac-9539-4237-9220-dbc328ee37e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "1a17586a-c216-4a17-9e1f-6f323f98e259",
        "cursor": {
          "ref": "f4658277-3388-4801-9942-342d4467cbb9",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e47cb087-eb65-4326-80e3-9031b0a86dd8"
        },
        "item": {
          "id": "1a17586a-c216-4a17-9e1f-6f323f98e259",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a0c36130-1a6e-4183-83db-e6b319cd741e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "1a17586a-c216-4a17-9e1f-6f323f98e259",
        "cursor": {
          "ref": "f4658277-3388-4801-9942-342d4467cbb9",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e47cb087-eb65-4326-80e3-9031b0a86dd8"
        },
        "item": {
          "id": "1a17586a-c216-4a17-9e1f-6f323f98e259",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a0c36130-1a6e-4183-83db-e6b319cd741e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "70622ccf-521a-412b-8f2a-4e850f6e95e9",
        "cursor": {
          "ref": "93480b13-79b6-4919-9c8e-7ab709453f64",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "05718957-d55c-444b-b8ce-89257cf13e31"
        },
        "item": {
          "id": "70622ccf-521a-412b-8f2a-4e850f6e95e9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2149c7c5-3810-403e-903c-208029357b9e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "70622ccf-521a-412b-8f2a-4e850f6e95e9",
        "cursor": {
          "ref": "93480b13-79b6-4919-9c8e-7ab709453f64",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "05718957-d55c-444b-b8ce-89257cf13e31"
        },
        "item": {
          "id": "70622ccf-521a-412b-8f2a-4e850f6e95e9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2149c7c5-3810-403e-903c-208029357b9e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "b54933b1-17d0-4edc-8187-4f64ee8f8c6a",
        "cursor": {
          "ref": "4f9be578-7cda-4d15-855e-2675d3d53b13",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6ec92989-ffdd-4619-b5f6-93ba60e7e77f"
        },
        "item": {
          "id": "b54933b1-17d0-4edc-8187-4f64ee8f8c6a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b54933b1-17d0-4edc-8187-4f64ee8f8c6a",
        "cursor": {
          "ref": "4f9be578-7cda-4d15-855e-2675d3d53b13",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6ec92989-ffdd-4619-b5f6-93ba60e7e77f"
        },
        "item": {
          "id": "b54933b1-17d0-4edc-8187-4f64ee8f8c6a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b54933b1-17d0-4edc-8187-4f64ee8f8c6a",
        "cursor": {
          "ref": "4f9be578-7cda-4d15-855e-2675d3d53b13",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6ec92989-ffdd-4619-b5f6-93ba60e7e77f"
        },
        "item": {
          "id": "b54933b1-17d0-4edc-8187-4f64ee8f8c6a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "92697c2f-7ada-4e98-b7cd-1dafccbb61a1",
        "cursor": {
          "ref": "c23df2ce-0323-434b-802a-3680a0739a2b",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f8dd142e-cb1e-4d39-b23a-34176cd9a979"
        },
        "item": {
          "id": "92697c2f-7ada-4e98-b7cd-1dafccbb61a1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "92697c2f-7ada-4e98-b7cd-1dafccbb61a1",
        "cursor": {
          "ref": "c23df2ce-0323-434b-802a-3680a0739a2b",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f8dd142e-cb1e-4d39-b23a-34176cd9a979"
        },
        "item": {
          "id": "92697c2f-7ada-4e98-b7cd-1dafccbb61a1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "92697c2f-7ada-4e98-b7cd-1dafccbb61a1",
        "cursor": {
          "ref": "c23df2ce-0323-434b-802a-3680a0739a2b",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f8dd142e-cb1e-4d39-b23a-34176cd9a979"
        },
        "item": {
          "id": "92697c2f-7ada-4e98-b7cd-1dafccbb61a1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a2c04346-8e11-4cbd-a1a7-1e7369df9bb3",
        "cursor": {
          "ref": "19a28fd6-fa6d-445b-b950-613577f63f24",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a5897316-d0c4-47f7-88bb-60e4e68cb1d1"
        },
        "item": {
          "id": "a2c04346-8e11-4cbd-a1a7-1e7369df9bb3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a2c04346-8e11-4cbd-a1a7-1e7369df9bb3",
        "cursor": {
          "ref": "19a28fd6-fa6d-445b-b950-613577f63f24",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a5897316-d0c4-47f7-88bb-60e4e68cb1d1"
        },
        "item": {
          "id": "a2c04346-8e11-4cbd-a1a7-1e7369df9bb3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a2c04346-8e11-4cbd-a1a7-1e7369df9bb3",
        "cursor": {
          "ref": "19a28fd6-fa6d-445b-b950-613577f63f24",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a5897316-d0c4-47f7-88bb-60e4e68cb1d1"
        },
        "item": {
          "id": "a2c04346-8e11-4cbd-a1a7-1e7369df9bb3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "af80a22b-5593-4a83-89d7-68ea73c2e0fe",
        "cursor": {
          "ref": "aaef4df9-8970-49b0-bd76-c2b2199cdbe6",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "82ed3303-d85e-4784-9cea-5cd19e04fc47"
        },
        "item": {
          "id": "af80a22b-5593-4a83-89d7-68ea73c2e0fe",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "af80a22b-5593-4a83-89d7-68ea73c2e0fe",
        "cursor": {
          "ref": "aaef4df9-8970-49b0-bd76-c2b2199cdbe6",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "82ed3303-d85e-4784-9cea-5cd19e04fc47"
        },
        "item": {
          "id": "af80a22b-5593-4a83-89d7-68ea73c2e0fe",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "af80a22b-5593-4a83-89d7-68ea73c2e0fe",
        "cursor": {
          "ref": "aaef4df9-8970-49b0-bd76-c2b2199cdbe6",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "82ed3303-d85e-4784-9cea-5cd19e04fc47"
        },
        "item": {
          "id": "af80a22b-5593-4a83-89d7-68ea73c2e0fe",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "638fc929-4d35-460c-afc1-8aa9f47c9dfb",
        "cursor": {
          "ref": "9e93e47a-7bcf-472a-a5da-6b2b71c5af6a",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "553770f8-f271-4ed2-9f75-f24cb1abb6f3"
        },
        "item": {
          "id": "638fc929-4d35-460c-afc1-8aa9f47c9dfb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "638fc929-4d35-460c-afc1-8aa9f47c9dfb",
        "cursor": {
          "ref": "9e93e47a-7bcf-472a-a5da-6b2b71c5af6a",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "553770f8-f271-4ed2-9f75-f24cb1abb6f3"
        },
        "item": {
          "id": "638fc929-4d35-460c-afc1-8aa9f47c9dfb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "638fc929-4d35-460c-afc1-8aa9f47c9dfb",
        "cursor": {
          "ref": "9e93e47a-7bcf-472a-a5da-6b2b71c5af6a",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "553770f8-f271-4ed2-9f75-f24cb1abb6f3"
        },
        "item": {
          "id": "638fc929-4d35-460c-afc1-8aa9f47c9dfb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ecb30836-5bd5-46da-b718-c7a444812805",
        "cursor": {
          "ref": "9061a1c8-83de-4c92-bba4-5f1c54f1284b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1b15fa0d-9f09-46b8-88a0-f34507ff3086"
        },
        "item": {
          "id": "ecb30836-5bd5-46da-b718-c7a444812805",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "ecb30836-5bd5-46da-b718-c7a444812805",
        "cursor": {
          "ref": "9061a1c8-83de-4c92-bba4-5f1c54f1284b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1b15fa0d-9f09-46b8-88a0-f34507ff3086"
        },
        "item": {
          "id": "ecb30836-5bd5-46da-b718-c7a444812805",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "ecb30836-5bd5-46da-b718-c7a444812805",
        "cursor": {
          "ref": "9061a1c8-83de-4c92-bba4-5f1c54f1284b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1b15fa0d-9f09-46b8-88a0-f34507ff3086"
        },
        "item": {
          "id": "ecb30836-5bd5-46da-b718-c7a444812805",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}