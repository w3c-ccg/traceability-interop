{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "81c8de2a-b86b-4132-be31-e95e8f7a43cb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5927f91a-2402-4898-8385-ff5100eef6c0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "264f9a69-c7bc-4bf6-bf3a-3d2a1516bd99",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "43f6add5-608e-48db-919c-02c40ff47993"
                }
              }
            ]
          },
          {
            "id": "740a2a0e-bd3e-4fb3-9b0f-3875c7423608",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "314e835b-6d70-4cf6-9479-c991d92c0ced",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c122ca94-178e-459f-8f37-d2c0fdc775e0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3703d7ef-9a23-4fb4-886e-18369bc73a6c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2be38e4c-76f5-4049-afc4-3531358f0c47",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f7b01097-2242-44bb-851e-900213bd98f3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d1a2b74-5fd1-496e-bbbe-83a29e502ca4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d2b5738-d0be-43f9-b52b-5df32de54148"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e083306-08a0-4a05-b912-2c82c5820c0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3cacb6c0-28b1-484d-a03e-6288c8a1fa7b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f07b4c75-5a20-4d8b-9834-8882aafa83b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c473f4d-bcf0-46ec-b891-fb08d9c1c063"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2856a900-373c-4d1d-965c-7918c9dc701f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7e3f1f40-498b-48a8-bbe2-5814e14ea6fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a38e819e-6164-4bca-adc4-7fdea43683ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5beaef9c-5f2f-4ec2-a701-7c37a8602300"
            }
          }
        ]
      },
      {
        "id": "fe8f6609-4a63-4f7b-8b7a-557b3ca2e756",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e65e9d67-665a-4503-bce4-6591afc10bdc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a28406a3-f882-4ad7-95d3-662e240a06be",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "26b9ab72-caa5-4198-b1f2-55413b51140b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77810357-df3a-4878-a8d2-72cf91107827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aaf48f5c-93a6-4d75-8419-0a5ad29d0dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905488e3-e003-4a71-9704-0cbd7eb5ad72",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d920ec-f85d-4f84-b2a8-d7bbdb8c4a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b38063c-ec92-4e84-8875-d46041496d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa5f115-170f-4506-a145-22ca09751248",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92843aac-f7ca-4cce-b95d-464caffcabc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fe15359-d691-424f-b810-227856fe4a48"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dc690cc3-6f0c-4630-85c0-8807a34e6b54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc407aad-d711-4944-ab59-7072ac603c62",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3463b3b3-0d37-4709-8bf4-d46fe1d7973c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7a930c0-e230-494c-9e3e-fdc4118205ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf626af-b8c1-4d31-aca2-8ee58c1353f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b983606-673c-4d87-bab5-da157a412fd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "917c9d6f-e621-4e9c-9356-27db928a2e96",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09ff103d-12e7-43b1-8823-e5f9fe7cc71a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b791d42-be9b-4638-9146-150afde1f21c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "79908ecd-a0f2-48ff-a355-9081d8ed99c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca1d6571-e53c-4e91-b3de-f9f829cc3cc0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "cde257ae-01a5-4f4d-b01a-aa12df130c6f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e12763ac-4b80-4ddb-aafa-98d76547bb84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ed59401-a691-479f-a85c-6a494b7b2594"
            }
          }
        ]
      },
      {
        "id": "5c9974a2-657d-4f70-b56c-7788f91c6fb2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "09a7f9c7-ced2-4520-a898-f46ad85ec29c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c3d04f3-40ec-4e32-8d81-bd0158c360f4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3c9e99c4-218c-43e4-ac0f-96ddc434eb60",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8af795-0770-44ba-9a81-9af3d78a3295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c5609d-3dc5-428e-b20f-25b51b6bfabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699f1677-a422-46be-9ba3-b551a075edc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5203f981-c2f5-441c-9b6f-f41423cd6f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dad500-af42-47f6-a9b5-dce4aa81c5bb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ef6673-89fa-450a-93b6-9078d7c89832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a30c0ae-b21a-4341-80c0-24f4cba00ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6f1a24-b53d-4135-b6af-6f63e331483c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "836e8b33-30d3-4280-86d4-f0907a3547d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8f1c17-e1df-491d-a108-764613b501e5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764fcccb-08d2-4122-9fa6-2ad78704b1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eafc4f64-28a1-49fb-80e5-dd410a78ad3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f79885-638d-44e1-99a9-900ea6822b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06da3fe6-79fa-4fba-b934-e394963ae9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671b0ead-fc9b-4e73-a487-bb819e39c9c3",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d02261-2d7d-44ea-9711-ae7e07e20e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdaf0e24-676e-41a7-b39b-8f410d81c01b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0ea216-a717-4c61-b530-e7de21284da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21d9eb6f-59f5-4323-981b-5537ac71bb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59be44f-41fa-4472-8c9b-cf61b657a0ef",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06f3d84-38ba-4f85-9bfe-a8560e5ec684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5288815b-a552-4b85-b49f-25ada5cd0589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0705a830-66f1-40df-9ba8-6bd8399cd800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28b2a7f2-cb03-4699-96a5-bae1f17264f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4ae5c5-8762-47d2-ba7e-d0a9679cc62f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab66cf4-7fe0-4d11-8b26-5174af5501eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d518093d-9e6d-44f1-bb76-a27fd5a56edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0312e6-a34d-4fb0-a97a-127ced0831bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8edd2c22-efe4-4949-b284-fee0e32d7bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a76e360-0f1e-4058-afa7-f5ba7e854a2a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04b9a36-850b-4b68-a3e0-b5bf59726a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7806558c-f942-4203-95d8-ab4c48db27c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f90fb9-d24a-4b49-8805-8df76137079c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e523aefc-5969-4f4c-916f-91cfc4534654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037e18e2-308a-48b8-ad3e-1aaf5693733a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1c46a3-aa60-4f58-af7f-e3a47f77f13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31666976-d2cb-49a9-9c2a-63ba37e6097b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e763db-94e4-4d3e-aa98-6716187b4cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c26286d-a3b2-4f60-ba86-b799e65d814d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68be524-3a6c-4c15-a263-55c8b82e7809",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ab93f3-16c3-4084-8af2-7dc01094352d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652591c9-2439-45e9-8675-8c4d2cb5c446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c3ec01-c39a-4b45-b8ef-ace7658ec209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd520f0d-d2ac-488f-9d42-762046a485cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57feb0c5-279c-4318-b82d-4fe9146fd305",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2176aeb1-5ac7-4477-9ce7-2c7ab0ddf8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc12dc1-662b-4c0f-821b-48880e33bdcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27d3b04-777f-47be-a05f-533147f8255e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8583d6f9-c1ff-4500-9ac3-fc3c391e8ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8f13ad-03b1-4ea2-8f19-c96eba4f00fb",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf98de5-e08a-4163-aba8-8df3966976cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff95f4e-780d-453b-98a0-91d139b1c551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3844e2cd-0c76-4878-bf79-e0f818ec8928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe03133c-a630-4a07-9d16-b26681bf55c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2970618f-ac48-43ea-b2cf-fa236874f37d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196fc324-3c58-4cd2-b0dd-6cfda6502f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9923e7-268f-439d-9f12-432d3277338f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1b374b-52cb-46b8-b423-a37b3b7344f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "203766a5-0512-4505-93c9-a3625c9e6c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57641f1-af36-4409-8d32-fd815b59e27c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1024763f-9efd-4127-a292-ccdfbedd487d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e0d199-f95a-4565-91a9-dbcc991d0878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed890441-6c75-48a9-a3d0-db5252a1ab82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88d54560-be1f-4606-bc38-23e7891752f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f6be94-4a6a-4a8a-bf50-a902755fcfd1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deca0ee8-eb95-42e7-a927-2ec104ef95ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa7b367-7fb0-433e-8998-2968d5dd6e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a383553d-ad08-44e6-8a12-201295adb5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09ab6e51-869c-4315-ad65-0a961049493a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0712f871-4cbf-4cd4-84a1-b502ab70eaab",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bb7687-9bd1-412a-ac42-49dccec9c0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eff5b1a-bd8d-4bfb-8ebe-b21bddec68bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac9f55c-6dec-4284-a3d4-b33daa0f9cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3a839d2-150b-4f7c-b2bf-a20f5e80a1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c255c3-7bc7-4442-9ab0-706cf3aa0182",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd55b4b-a182-4ca1-aac1-d781479338f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c35fa6e-fd49-4eff-9481-2abde76926cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc0379a-1e25-4763-8579-a7f18f47747e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cc5660b-bfde-4d28-8580-cd12bcbf1023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abe0aee-8cbd-4082-8b90-e1f6a066bf3f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8d32cc-10cb-48da-a021-c43dcceb248f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3abe82a-3ee7-4506-b2fa-92a19f4c504c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0386f29a-93bf-4d9f-877e-6d91cb05be64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "756b2800-5cb3-4dbf-9312-c8de85a0d409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c16225-1d31-440c-9f69-4e49579d6943",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1deb0ddc-1560-4d46-8316-7dd232b01e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921e9e62-d8fc-46e6-bb0e-3216d9737957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4740154-598b-4047-a0ea-d7c324344976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e84471-7318-4524-baf4-ceef901baaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8150bfeb-284e-4060-abc7-c1bf28bb763f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f4fbc7-c525-4e32-b74d-f74c669ad31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82948b06-2fdd-4e0e-af2d-8e1a82048e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c04c20-153c-4c3d-9649-7289e12066a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc496f4e-1a6e-4f49-8a03-90eddb5b050d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c5b358-d44f-4230-9629-ef0e2c5cbfa1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2344495d-26bd-4aa0-b1fc-269a7a9ba3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3dd991-1780-4744-8e04-9ad3ce32056f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33e1aff-1d62-4927-b3ff-a4e14c8f4518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4540aa20-cca4-43d0-8998-e97a3a3446a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0bf855-136d-4f5f-8afd-42eecddf8842",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef2c7de-0aa4-4b9a-a888-3af861987b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca214c3-fb48-4ff7-b436-4a16e2864c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de76940b-36a8-47ee-8b7a-f5fc184dbe5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86f507a1-4d49-479f-8399-570c92de29f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76f4fee-903b-478a-86ec-8e46af4ceb5b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aa6a92-b478-4f8d-80c8-1c996204756a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78defa48-83e1-4514-a906-62319e1275c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793723cb-dc6f-4e48-af06-a1dd59f4b6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1242f969-ad5b-45f3-9564-b09d73818721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac97afd-af20-4d70-9077-05eaacdca7fd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9e821a-586d-43b8-8cf2-b73a0577f0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6643c5-fb6f-4d53-84e6-d1e691bee0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0343fb-008c-48f1-a0a4-5f570ede526e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1589afaf-e7e6-450a-a50d-c12674965da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae358b74-c679-4ed7-a0da-11ddbc5b673c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04cc8af6-4957-4a4e-82ea-ca15e417ede0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae9ed36-3774-4170-ab86-590c03e946b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6494e6c5-9aa7-430a-93a3-ac5a241a7ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "04560e5a-78a9-4183-b092-d8c1f5e17f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ca8d1d-61f6-43bb-8175-42bfbb83fe6b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd449c95-8cc8-4628-8a94-38e3beea5853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8202096d-d08d-4d46-a003-bd9c82bf6abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066d82bf-a43f-44eb-bde9-aa9abd982cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03e43ed9-0235-47a4-8dc6-ac4d47c31730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482356df-222c-4059-9d8e-f0011077bccf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d70f46-56ce-4a1b-ad22-b3668e7650f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57754e7f-8284-4b0b-8eff-92ec008bacdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9838fc56-ea92-4ee1-b1ca-7e3884007d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "868d021a-e8d1-411e-98d6-2b382c2e82d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d997eba2-fe80-46d9-85a6-c66dd803010f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f0abd7-231d-42b7-bbe3-65961334c834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57bf1dc2-e07c-41d4-8856-7c63cca6fbf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa3ba79-5733-45bb-a3b2-a0bdbd6816f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3106d5a8-7706-4083-b616-9e56a78adee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d78019a-546c-4240-9759-60adbf0b23cb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8530cf45-d714-4f15-87bc-82798c0a8d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcddb3fd-3a29-4093-904f-1d09cf9cb120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068d3fff-81a9-411e-bdae-06ad25a38d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e7bb96-b9c2-4060-8d3b-4ab11d65f49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e286c8a3-fc87-4f7c-8fc1-318f69e33cd4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3aaaef-b0fc-4224-89d6-7ac38f515e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb5c7d5-58ba-4105-85d1-6ded3930ef21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb99aab6-53c2-429c-a483-9b0b45f19b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "82f0242c-c023-431a-8182-2eafdae85cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c94de6-7b17-4f55-aba7-5ab114670d65",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1566de-9810-4b55-9540-e6fd10d008c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68772a9f-242a-4ed1-a64e-231d818bf44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9eecd4a-003d-4528-8156-65921fe67276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5bd09f-ba68-4aa0-91a5-a2d852aef147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e16afa2-475e-41ba-a165-2f256eeebb04",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259ed8a0-38fb-4005-9e15-b9174e8a4b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66f97a9-3e48-42c4-8055-65e3e032ba89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30bc8a8-4534-40bc-b6ed-0e59503b5574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6dfadf1-8faf-4bdd-aa59-3d02a7acea63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01c6f4a-580c-403f-9d35-ed7b1ce3e018",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935f2129-9591-484b-b442-05bc7defc6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb41b9a3-deac-4ff3-b5d9-222419e8ca6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60621280-5bf4-48b4-b554-ee1a67d99760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "543798d9-3259-4c59-ab33-3f69146dd0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8241fac6-0e61-4f45-8f13-6a917faf31e4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a623a43-d4db-403c-b31c-8feda1972133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf993bf-ab80-4955-b60e-c2b05c5309f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c46e55-90aa-425c-ab88-a76e2fdb1eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9397e5b-3c81-4710-97d3-efc7fb3896b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5f4b79-5ede-4ede-a318-a752552e74d4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e35dd2-7b28-4350-88f1-266015d66923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a2d093-fc8f-467e-9fe5-6f64c4be30bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7623dee-42c5-4f18-9368-a426bb79ef34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3122fbe7-91e9-445d-9f31-088bb2dd6e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb134dc-e066-43cd-afb4-2329bca45219",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc4768f-f416-422e-bd82-dd04dea04609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ccbc11c-b979-4876-a6ae-74ff018fb9b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4116b3b-8f45-4527-a0b8-ec31349414fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f73a821d-1e6d-47d4-8b52-74ba13da5ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0da63f-5f6f-404b-b424-78b2351410db",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fedb61b-006f-49a2-9c7c-b2f33a39b0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f85e5768-2433-4bfd-a008-507cd3bbe012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abeff6dc-57f1-4014-8219-e14d206a6fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3d5ee1-983a-49f4-b06f-691e8d236e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31429493-3c0e-4520-86c2-d1935384ab02",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf877279-1e24-4398-adfa-24f118b9a41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e696ce9a-db63-4a96-973c-d96160e1e904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d40761d-16ab-46d5-a4b1-a81eb479b406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "222c47be-d2e3-45a9-8ce2-8fc5a679216e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a710a0-09c8-4647-a682-ca0540a4fc7d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ea79f6-3d4c-46ee-9950-2dc1a33fe418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4fd7a8-07c2-4a29-8591-93deba144f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca47a0ad-dac9-4b89-b5dc-9fadaaa80551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "94b44acf-fa4a-416c-91e2-c919e1d2ecbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fea614f-c9ad-4ed0-a687-159ffc660f86",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd0ac33-5dfe-468c-9dc5-10020ee6d62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb61bbe-6742-4c75-b580-21c566fa80bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c6f63d-e871-4ac4-8d64-084e898dcad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1842a4a9-2f95-4d11-bdea-d36b39cace2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a62016-68c9-4e99-b7fb-02db90799bcf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365fa107-8e9a-463c-a421-3e4fac96cde6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289de826-7e70-453c-a46a-837002aea65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20b585c-a8cf-4501-9450-f43fe3de5c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b768f918-2e44-4235-8b2d-23b8265c564a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0878a771-534e-427c-b9ed-f9531c26985b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fc4876-dcad-43ad-bfc9-b3eeb4c460a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578722d5-4def-41b8-b560-9e44e08ed397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6779bb4-7c01-4875-8577-2f66cdd633b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d705a7a9-ffda-4202-ae9f-9dd07bf3b81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4b781e-b3d9-4fae-8e17-5b0450267c1d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1513722-05bb-4fc7-b3f2-37dd8732b4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f28bd8a-44c5-45c7-b8d7-e5fc9b598341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42578c3-e1d4-4b77-8dbf-db9c9a6d2c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e421b714-8404-43f5-b1b4-20c746f1d9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6846fb-1f4d-4072-b146-0cd4d42f6ebb",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4d692b-92d1-42c7-b2dd-26c6a26bb34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2fea99-9dfe-48de-95d5-1fdf99df32ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a5ef57-9678-428b-938b-b8e2df0a1aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "087f2090-227a-4b9c-a6ad-198d620d620e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41929f3f-22ef-46fb-976d-7ace9bf37cce",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05b88db-b906-4368-b19d-4928a13ff8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c368278c-cbc6-4b6e-9079-faaf84fc484e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb9d33f-68d3-4df5-a36f-892de7148bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0bdbe03-58b4-424f-a596-d57f97d4f036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d09268-f497-46e3-ad77-b206f32cee4d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa862fd0-38cb-4c12-b76e-1f3ffe9f2e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc7ac73-47d9-4a65-bfc5-0e5743607c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c425c4-49d1-4dc3-9438-19867b08d805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0fea2e-3951-4a8a-b3f5-60658fa17aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67159fc3-a2f1-4067-ba76-cfd644c856c1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebef5315-5a9f-4e18-b7fc-0fec13290943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae054cb-e611-47d6-b1a9-b0c21d7a2dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e7046f-b4cf-4d29-aec3-a68358d8f227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de193cb8-1259-49b6-964a-dd89232f19da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5105e4-5978-4820-89dd-39e378f2a61e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad77654-b7b1-4c39-8712-e4bb8bf34c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c0618b-a0ab-429f-bd61-cc2ef05c48cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce42e29e-656c-427b-a1c7-7953013e309c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c21fc3e-79ad-49a4-ad8f-dfba9e32e4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79bccac-3d14-4205-9328-4d24a28b3fde",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70218c5-1749-4efe-b8b0-9a19afe77457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2359a7f0-1358-4221-aa5e-af28bee6ce7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1f1ecc-451a-4668-ba9b-2d47f5d5b2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e861dc24-0de3-4d35-b3e4-17b78e7091b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc38b19-801c-42f8-84da-9353f45a4ce7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df3f1e7-4276-4338-bc2f-7fe793c7fb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8053fda9-05f9-4ad2-86a3-307ae3f171bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffec52f9-d4e9-458d-a90f-d8bf6b38efd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5a28bf-cf46-4275-b5c7-861f50beb56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38d238f-530e-4dd4-9ebf-2f7569fd810e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8504ec74-f9d6-41a8-87fe-1e1106e18c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018ed317-87b3-4d35-bd85-ea7a902a803d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf5f2ec-fc32-4cfd-9ddb-4ce173f4316b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7df3d06-5ff4-4c0b-9f02-cc4152937112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fae66d2-9c44-4781-927f-a72eed070b6c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6050ae6c-652f-42d8-9602-423a0c54f84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013d4090-e1f3-4973-865f-6ceaf36149b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9961f31b-b6cb-4bd9-a24b-89ac43626ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c19726b-0f89-44ad-8401-71f48dbf21de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e05cb65-25cc-41e6-9013-c7b21441e845",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1779bb-b9ef-465f-9e03-95d60c382def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb86e00-76d2-441d-b7e9-e58e0569b47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9cdb57-adaf-4927-9f9a-a6d7a35408d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "113fdbd5-1e99-4f06-92b3-5940d2421c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87a99f2-e8fa-4ab4-a968-732aca9ae5e5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e867c49e-ae6c-4b84-8131-e3a0ca059580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "722fd8dd-67a6-44ad-a78d-e297d0cadb16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbfc061-4d83-4eb9-bf94-e3b036e17fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b20498c-a621-4e99-af76-deb4fc349f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ee659e-19be-4f3a-8472-cbd20bf0fe28",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810e5d45-faa3-4d4f-82ae-2533ee626d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89b6460-7671-4496-ae67-83c1a4412d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270cf26a-c285-40ff-bd35-3092dcde8fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6269fe2d-8907-408b-a4cf-8a9ac100b846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcdf60c-ece1-468f-b5b2-b4d85d7452e9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23aef7e9-c13f-4605-b456-2fd52e465c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5e7adb-a8f0-43e3-8926-683c6e6f5dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68bfd55-be2a-4e50-963e-9b3738830978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d92893-f011-4cd9-a469-d70452246cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0c5082-4395-4972-b1a4-4ed9e3fd225c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019c935a-09f2-46b1-a283-8a56f05b9fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c937cf-3670-4fef-b3e4-bbb849bffd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d8755d-3a0e-4967-81b3-6661e0fbb94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fea1c3d6-f523-47d0-ad89-b26eb077ef4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d015764-db47-4e9b-8582-165a06a6b014",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05dc478-af4f-4dad-9938-aba172bc3c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27cd66c-b4a9-4aeb-9cb3-1394d86a11ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ed02af-8afb-42ba-90bb-bdc96f26a706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa0b099-05b3-4223-b93f-f444cba5fba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9e23df-cc7a-468d-9b8c-fc58677f94a6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d3573f-1a88-4783-b93b-b80bbd296deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e9e31d-c1e2-4a81-ad6f-756f0ac8d192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1a22ed-14db-4627-be01-24021ede1ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "609cd032-d679-44ec-b0a1-107175e3cac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b03c13-786b-4054-a55d-db529cefe532",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efd0cf4-6fce-478b-82cf-2f4c27b079b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac34cd1-eae2-4fe5-ac71-67a38091054b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059cbd02-1f33-45b3-9bcb-4cded49a4349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0aa035e-4b90-45f5-839b-ca4670a29b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c55c64-c9ce-4870-ab4a-7e617178ef52",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d03732-04a9-4168-8eeb-2b746fc48edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ce2933-f517-4adb-bd95-62f48d0ba7c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628ca226-0f10-4aee-bdc5-18f057a383fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a15aa7d-ead9-495c-bf47-0c0ffae67128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0a311d-c9d3-4c9a-8ef5-809d09bc9a13",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3332bb-f660-4ec4-8b3f-0c26e166f4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8954ff-edb2-44dd-b891-6024866d0e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6747858-b3c0-42a5-aabb-f567b94a0d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e32480de-ca0a-4259-8902-7269dfe9d5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e391a98-9cd7-4e12-b2f8-354f796cda33",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f78babd-fcc8-4091-9ce3-9fd6b9cc85fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931abe84-ec45-4d07-8cd3-b5718f176c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8227c3-617e-45c0-804a-22af9f43fd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5667eb5f-3980-4fd5-a116-5ba3a4526151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04042e5-f4dd-429a-bb67-aafff5d81940",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64213f01-d950-4920-853b-b2511b0c7403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fe4303-4e04-481a-8d11-cd68290b0e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88feb3d-fc95-44c6-adbf-8c8b16282b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd934a2-3187-4f62-a0b0-65e64e49bf83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5b5747-a966-43d7-bd2c-bbf7fb34e481",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2679173f-3217-4596-8a17-90b5b4fa39cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fcc2830-f3a5-4478-9edb-5f4dfe47b903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3032ad9f-b878-4059-8b27-8ed075bd633d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dcf5473-f737-49e4-9f2c-41a0d7fa7e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1dad35-42c3-49df-86c7-4cb334087cae",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1843200f-e664-4734-8d0a-a27c92bcda08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12cbdb9c-1a32-46fc-9f4d-860c42cd04de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b71c39-da3f-459c-8f63-2c5fad35fbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e68743e6-6931-410e-a4e7-165b4ddb28e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e2e421-a0c2-4da8-bc5f-dc200ed6fba9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d35e7f-be12-47ae-892d-87d1356fa08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737f062f-68ed-4576-bad2-acb8ed7a15e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e55c4d1-2f24-4b3d-8130-78f091479f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7c3ea6-4569-4dce-9cd7-ddc90e5e4046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6226c99a-0e12-4ddc-aa14-3140870ab8ab",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ac84fb-a23d-49b0-b861-167a716b7220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01908c6-4154-4286-9d46-5b5d607fb748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e135d8-295c-4d53-8924-ae209c017a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "941acb96-0bfc-4917-bb5c-f0df0d89e449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054a4756-341d-4dd1-b53f-ce91c6abf474",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2e45e4-9869-4172-b8ad-14801912070e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a375711-781a-4b82-88d7-44ad707ac978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d11eb9e-8e04-44b9-8b2a-be2a1eec92c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a50515e-a28b-4bb6-8237-910a7902e879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18be54cf-9255-41ce-8d95-b3908efc98af",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1612b43-2175-464f-87bf-4eac5cdfcd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60830dd-3e2c-454c-90a5-fe97c142551c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66382fdb-4896-4808-b897-2d573cb926e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6027ccb8-b65b-4018-8117-0a8495691bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a8ed74-6ccb-404a-9a1f-b6bf3d1bd382",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bd237e-a137-4904-8872-65188cb0f399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197b8b4d-ea5a-4916-9bb1-dc1f941fe0e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4a1094-f771-4165-b051-d76be823f676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1591465c-1b24-4cb0-875d-baff9058d636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880b7c56-d894-4175-a385-8a23a337ee46",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4868ba39-1aa3-4974-8a6e-2c902a5c3f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad9b340-ab64-4c2c-9095-5121e36c4d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f474564a-f329-4a65-b033-7b53199ad80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6f81a0-fb32-4f52-8f28-ad8eaba536d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0806eefa-02fd-4a90-a5e2-bea9f17cb3a0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c6f4b6-aced-4c21-b3b8-268338b59190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44764fc2-2fa0-4700-a0f6-054d7a56144d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d400a6-c76b-42cf-b8a8-a515c4666ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10d00caa-6395-4700-aaa0-7f12fb6885f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b03ea98-a09d-43cf-9231-c4a6a42f2ce4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b511ff91-fb0f-455a-b23a-6572ed9e1737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84000c1f-f25c-4a15-aabd-cd09fc7ba42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79ec907-68d6-4c1c-80aa-744ee0a74ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1663fd0-9bba-4671-bf03-2959be4b1b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16eb1cfe-fb77-48ce-800b-2571d913512a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc4726c-db5c-490f-854a-2dc0d4e64e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1afa249a-9d53-44d7-b7f1-84054c1dffb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e1707b-26af-4e5a-b624-1316aaa42be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e21e1e72-a553-40a2-8c48-495659631f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051b379f-c714-45d6-8746-d04664ada5c9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d8364d-b997-4ee9-8c6e-c11f057510ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464166f8-bb38-4075-aa91-b82e7b0fc957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab54f144-958e-4b75-aad3-d16d16fb1bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4c57f6-8723-450c-9f52-203d8388a154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fb7ade-013a-46fd-acf9-256fcf2f4096",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f32b1a-61f1-447e-98cf-8b260fea19a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a0295fb-db58-4050-b2b8-e30defb179a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96822008-13c3-45ff-84bd-5e5a217de3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da401f6-c69a-432f-aa7e-4450d3d493bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0adcac3-6b47-4983-ae53-b730120cce3f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2624cde-c5b2-41f7-9886-d11185642f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632fdcb7-8a32-464a-832b-b1e903ceab3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d7b712-ae7a-4aa8-962a-879da68a599e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8633ead-413c-4638-86e3-837462c6fe34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec496fe-6f77-433b-971a-3e4ff6464908",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d6b4fc-cf32-4ec8-96d9-3e65254a54a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e104e073-f12b-4714-87d6-8f2508543697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea13d3e7-ded0-4fef-baa5-b054fb5cdf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd886d86-be5d-4402-bed1-2738f7f7c4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e45d73-d5df-4be9-b027-e37fafac5f59",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b78967-e76b-4a9d-99b3-f238437c5c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5136a7ce-3a32-4d46-9fe7-662dba350c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b10ccd-ee87-4f4d-a785-beb0842595e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d032437d-1e66-4300-8747-ff5ea0b826ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c259f93-0537-4aca-87ff-d64574aa4d43",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11a770c-0bdb-4ab3-a386-14de6d013e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed9d9f2-01bc-4861-871b-0a12cc445ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f75324-ed40-4f20-ab7e-6177b8232281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0755079f-4133-4d67-a0d7-5d5b4a6c6ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c87378d-a20e-4774-ba56-ae6ac7c1d5cd",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85248c8-0753-47b2-a0e1-31cc6b2af5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee6c1af-18de-4622-911f-a10280cd2e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0385945a-482c-4a73-bee0-2a687367a9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7deb106b-4548-4015-9698-4fc27a8a9884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e691c8-5b34-4322-9b9c-b883b710002a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097ddd11-6d7a-4673-9d72-cda17d1d9c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58b0b81-c61e-4863-a6da-1fd583d81628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c794dce-622c-40d3-8ba0-531e14816e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc19311c-5ed0-46d3-a787-81b92df2949a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2dbff65-b2f4-4ac8-add3-396f3f31c547",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f308e2-3bd9-4995-b904-a8defe7b88ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3787ba-21c4-4fa1-815f-edb793bb9a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1a1d16-a18a-44c2-a5e8-4c94f5df335c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e00a7397-c0fd-42b6-acd3-67122131ea17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a44ef6-4c48-4cad-b440-766cb6ff3759",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e93ea6-d0b8-4fa1-93e6-5b9a4b8cb26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4060199a-1e65-4e15-a71d-f83c702741da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75689b7c-1fb9-43a2-a357-207b3e6a2bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb81bb3-366a-4b39-a317-aedbfd7461e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5873c9-4d7d-4b4d-9456-ba686863c254",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3410e3f-9b62-4913-8472-fba300077a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ae54ca-339a-48ba-8a5d-92e78c1e9b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421566fa-859e-4a5c-97c9-85ecb1d3d8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d7e849-cb43-428e-8189-6a9c31d3bb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be026100-ae20-40df-b214-cd5b3696457f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f9b546-34e5-4cc7-8aea-91d18e4b567f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7e79fa-6965-4785-99d5-b6b730be0d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97512da5-6000-4b35-8bc8-4f4960179348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b5aed5-ad7e-4630-b06c-873c1d658b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7253b2a7-28e7-4796-a40d-6c4d46664318",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fb04bd-d50e-4f7d-9ff1-6c53716a4dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac311c9-aa0d-45b2-9230-741231f686f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030733f4-a90b-4aef-8161-1f0713766560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "25d0ab14-c0aa-4851-aa21-3bd10056859a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ff2ebe-e6bd-43fe-85e5-e43ede2f5361",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126687cc-2e2d-4982-b9cf-6fd4b2a50acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce4ce10-bf06-4304-beb9-3e73d933fee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984f7a6a-3c2a-4993-876f-aacb709774a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8486381b-6b2c-4256-ab79-632a26f76940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec6236e-6fd3-41cd-9830-8c5cb7683ed0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1701e8ae-4c2e-4a66-aece-5abbefd38f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2abc8be-1af8-4d0d-a090-dec05130a505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bd4945-06c8-4d57-837d-825beca7bef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "991bfc8d-6251-47b9-933f-d1dc141a4c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2cadf7d-41c5-4230-a53d-10295e5e16ce",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6741e69-62fb-4185-b112-68bdc99bd718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ee05e3-027a-4c0d-add4-dee6472f6023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8458db31-9b77-49c1-9f43-49155292bd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "040bb11d-baa2-45c4-b218-d2c9b170dd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54511abb-c289-42ac-9ed1-a188fb16c2a2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca3d465-5523-45ed-aacc-6b4fbafb2472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8814de-c7be-4c8f-b0d4-ce5a60a8fc63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72f9a12-da1f-4d0c-882c-8eeea0d4bc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a06c7d92-e228-42c8-aa53-3ac7b20fb3d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7747da-8d4b-49c8-bd84-7fecc889e17a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3193b2-66a1-4c31-96e9-882872fcab6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8308a43c-b21c-4318-a9d4-9ddb1465166f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18f65ae-3807-4c0f-9761-0ff1b1e0cd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e876c50-a68c-4f48-9a41-0f04d79d4b95"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "84bcf206-3923-4c89-b8b6-55482b2058d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "698bf785-6536-4494-8774-7a84be506eb4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fe18b1-4704-41d4-afa3-0017594a2ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a091b75a-de80-4af3-8877-a638ad340ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e701c080-f57a-46c4-a278-fd40437b1627",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18390d08-da21-40c7-8b4f-646342a1d9db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8b3a92a-d2ad-4e36-a973-c723fc3d34e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d633f3b-e094-4db2-97df-35f24d273053"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bbe19c3-2416-4708-a573-ea4dd17a0390",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "208c85d9-8589-40b4-a665-acd0ae1476b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0759fa70-5c1e-497f-a387-4221ef36f250",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f1b1a88-e877-4e65-ad6f-403f438417f4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "47d7646f-55c0-44f2-bdb2-1dde06a816e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd15c38d-d498-4001-85e5-71a9ec815182"
                }
              }
            ]
          },
          {
            "id": "1e74f559-f8c9-419c-bb7a-bccf720e9591",
            "name": "Positive Testing",
            "item": [
              {
                "id": "45febade-ca4e-471b-8a79-be0734dc4b12",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04105da4-3cc2-4c3b-afdb-112276b249a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e19761e7-2e40-45b7-9531-decd39357023"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "745194ed-4efb-4b28-a73d-e16e7f821553",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d5ed9f03-29c8-41b2-9e34-142eba7de46c"
                    }
                  }
                ]
              },
              {
                "id": "f72e4adb-43a3-4b7b-bec2-7c5e09def45f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ba4e591-4f1a-4420-b60c-d5c2bf2d611f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0179ef16-1cc5-4e2a-9297-bc864fb46c68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1eae5e22-ec4e-446e-b7c0-ba974d4b9150",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ab7b3e68-5040-437d-80ba-8118a7888785"
                    }
                  }
                ]
              },
              {
                "id": "b490a5be-8712-44cc-ac54-6c3cbc7623ee",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "729cd589-6404-4986-932e-a90376acc1a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a341b20-b52e-491c-8e11-ab2cae88b1cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07fd3e8f-9912-416a-a27d-baaf26d9dab4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "06b4e4e8-0bf5-434f-a787-86cb53a43db2"
                    }
                  }
                ]
              },
              {
                "id": "10285504-6b0d-4be4-b042-c2ece55f154a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32fe199e-d177-4328-ac02-01e92adb85e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1a2bff0-ffc9-4431-a3c7-177b34cb63e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c68e5f3-70dc-4e2c-aaf8-675435ac1405",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ac725501-a1f9-4dae-88e8-5229432e0a8a"
                    }
                  }
                ]
              },
              {
                "id": "98f1896c-0e60-4d80-a0fd-7eaa4f23ef0d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f62f5f2-f2ef-4ce6-b9b0-0577e11762ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65cb2e28-fd59-48ac-b434-89df1b9a7097"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01dcd1c1-dc35-4b06-865f-3d4762f59e70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "17083e98-931e-4999-8d40-d0f4af9b6a40"
                    }
                  }
                ]
              },
              {
                "id": "05dfc32e-2de0-45ee-ba84-fde8a35b9911",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9efd1ba0-7201-4517-aab8-e7fd3f98af30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bdccf1ca-e2eb-4456-80af-e76b78f20192"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7e77ab3-6cbc-41dc-b1e3-064d7731456d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b8b1bf2-1920-4aef-a517-ea65de858d41"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a6c02313-f182-40f6-8c13-f16a0596e312",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bfb66555-abc7-4997-9e27-b6eea697cbf3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6981f403-c13e-4912-a7c0-3c79ec967d55",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89461ef8-77f2-43e7-8083-e66fc6549366"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d3a1b42-949a-4dfe-b23b-3960f0811e28",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2d5bb762-cb1a-4d54-857a-38b040d31518"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0372eb1e-cd1e-44c6-bd2a-174e8a612ab2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b13b34ea-99ba-48fb-9d19-083578debd02"
            }
          }
        ]
      },
      {
        "id": "fefe5554-5314-42ec-8160-5e48a83e8827",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0a66d4fe-1968-4e08-b989-136a6a3ea894",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1abd361-f3c0-4c2a-9527-d399ac420e64",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "30fb00c7-6963-4f30-ab38-0a9c8f4ea18b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4364fa4d-1ef8-4aae-ab17-f8ba44c63d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b9e6625-9fa7-4234-8b3d-5aae218e7be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c49f8e-4f5e-4f32-bf22-145f9e7bbc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "73a1022a-b5fd-4592-919b-c5ad142feb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a647db-e24b-4715-9865-a2fabff01314",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affea723-1c9d-4609-84d9-83c2e68976ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53afd072-bc84-4f87-a398-468d03e8b67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163bfd42-c645-44bd-8257-e0102281f607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4deea0a4-d6ad-470e-8cea-cd43eb614d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16bf18a-742a-442c-9e05-d2b82c4ca6dd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c324b57a-b01b-4355-8cd6-783fd5bb7269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf7c3d0-79cd-47dc-8cca-c22f4a259159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d709ca2-a957-42e3-9ac0-1a76fe1b3963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d50c771-b5e8-4451-a170-a348bff8268f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b58a595-6cbf-4fd3-8445-eac4fb3a5bc0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f89e73-cf3d-48f3-a8a7-eda2d2b232e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b234658c-aefb-4cfb-a6e9-ed3fe5d8df80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cb3402-0d32-4eae-8e27-ea6a4812b1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0fa6fb-75df-49fe-8a69-3452ceaf7d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d89583-8b4c-4ba1-be88-58a1057896c3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13b82e2-fd31-4f45-9d8c-0ac672d9229d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76a2ef8-7933-46a7-92e9-ad5c3150e387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e807b8c0-a23a-4040-af4e-5d0276359a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67890391-8de6-4de7-afcc-28c9d673eda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f421d4dd-2642-46aa-87a2-ddbb15e1a935",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cfa033-3a60-4c8a-bac4-d4c11d8ef12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75577d06-20ef-45eb-a839-e177f78c0517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6638b6-12a3-4c7b-87e2-29ef29fd13cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd8037d-5ed7-4dab-bda8-f2150cf6b0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d858ab1b-9fe9-4f38-9db8-ccfb6f80afd1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fddc56-5f2e-4126-b5b2-e69d5d93a385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bae3b5d-139c-4143-ab0c-b7742c8ac197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa8cc6f-15ab-41f5-b4e0-9932341d8493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "25fe8eb2-5676-4bdd-a4e1-77919502ed1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cfab92-2ea3-4d44-b69a-6d918740a46c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5852c642-923d-4239-971b-f75a9a253fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64df13c4-b32e-47b4-a115-91221f9b90b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8512087-fb88-484d-8dd9-019de5fbb43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84e5d7cf-c897-4feb-bb87-8cda4764d576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fba1b8-b099-4b84-9a0c-e37ef63669f1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc86860-dfe6-44a3-b89e-94e2e2573b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d2b795-6fba-4157-be11-f38bec73ddf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630982e7-cde0-4efe-9374-e827d2527c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b28a9ae-e664-4549-8102-f25ba7a716a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79648e0-215f-4898-bc0b-b73d2edc322d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6199a1-d529-4ee2-8325-ea3486beba3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ad4338-3ed8-4515-8ba2-8bc0f3f2bbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdf0b5b-2d2b-4663-8da8-78945533298f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c45d8855-7238-4554-bdad-0b843cd2d33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c670a9-c1b0-42c5-9220-b3f1597cff29",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd40e51f-9d20-458a-adab-94dc893ff9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ed946d-6980-46a5-a0dc-272ec69c9d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7987fd09-ec4f-4fae-b945-f4760fbd4fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e875f01d-d427-4e1b-b09d-0689547fd99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218101ab-9cbc-4dd2-9d69-ded8fadcf412",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d8b129-0ddb-4bfc-921e-8f3b3966537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa1ead0-93fd-4856-8d96-b84bb5218626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d80159-aa03-4761-94ec-b25ae11edb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3f7344-4dbf-44d1-9ebe-ecfe74fb2b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5d711c-5d2a-4bd2-bd5b-e6524220a35d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b675a0b-8f34-472d-9a82-5b9316c83187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d38309-170b-4bf5-8f73-98c8c7ab9d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d15b5c-4252-43d0-9622-2cbb9954fc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b9e19b-4052-4eff-82ea-99960803856e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256f6971-1088-4a9a-96a4-eaf0a4368848",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3de9be-b269-47dd-a054-096a6a7739e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75470d9-e1ff-4072-8d9b-47170435feb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59326a2-e66a-4667-af5f-8322b93e69bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7234aee-1cf2-48d5-9d88-201588bae399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a198068-f907-409c-aabd-6efc9fafb7ea",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9230cc79-3751-4d76-b2c2-1004688639ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d474d649-7c88-4007-9ded-464b41c2f70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dba81b4-c551-460b-bfe1-665be05c5781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ed4128-7cd9-4bf7-a686-40cabe6087a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7436a36c-c516-4e1c-8035-d5bbb7eaf5a2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05909cc-aa38-4a75-9c9b-8942c0995f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606918db-75d5-454e-8141-75b286f2b19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcb330e-69ea-41a5-923a-274046f51b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c59d323b-2542-40d6-99ca-2d518564cb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c064a716-af20-423d-a1f7-8cf1f11b474b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f671f2d-c1f2-4a30-adcb-3dd2b06b8e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a1ea78-6070-4834-8904-65a85be5e0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4e752e-8a5f-410d-a0b3-30ed2eb60f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "97be70c3-a314-4939-86a9-cf75296b4a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37dac3d-50cc-4761-81b8-dc654df4fb40",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24aa1250-9853-457e-8a4d-0b514c8ba139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4531a5-b1c8-4d36-be81-6c594ca0ac3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2a88a3-d077-4405-94b4-3a685621bbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "80329282-cbfc-4862-9303-329f6587e8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12acd50e-14e6-4bcb-894b-bcfd54d0d8e6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b911ad65-3607-4f1f-b183-5642125bc257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe281fdc-6b61-47d0-a6f0-4b9311a5bd07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d81a3ef-3ed3-473f-bd7b-01626aa67de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "469d7e4a-bec4-414b-afba-345c9907e1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3c77d8-29c3-4dec-90d9-c2bd5284a3ef",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2ff2ea-2ae6-4776-8fc4-38718341101c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52cc94e6-061f-4bc0-8dc3-fd0bf36ab2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5bb779-81ad-4cf5-93f7-4526b5bcf640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0525f5c6-686a-40fc-bdf8-79c2a77df228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72f2fd0-aa2f-4d80-89a3-d0970d3ec46c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b08460-31dc-476d-806c-9b12cbaab3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8a4345-2063-43f8-9147-7e0c3e2edd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e3cbba-b9a7-49cc-b65d-98c2b2259bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2503cef8-f2b5-4730-8427-a7d4eec15715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b79aa3-23ef-4c4a-8230-85715a3368b1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137783c1-25b6-428b-a743-4a19667290dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93472651-2134-44cd-aa45-3206a4424f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fe31ae-dde9-45ea-8acb-5fe1b9f7a0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5203fd41-57a6-4513-9dc0-1d40be4216bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e313c3a-e286-4b5e-a207-d5add0bb746b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f0be6d-4d56-4291-a2d3-279123feb816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11a00d9-c32c-42cb-94d3-5ce9dd48c4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837efcd4-4bfe-49c8-bca0-f6ee5ea275b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47abca27-bdce-4d00-9165-a78a474f7cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724d741a-5e00-4ae7-8c4a-0a19cf6242cb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6e3739-5bcf-4299-9a91-87c96cc2c8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4bdca3e-6046-456e-93b7-aef01edc9e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c51b3ba-7373-4ef2-b821-95d306bf662c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a90e861-d381-45f6-9b58-b8b892972965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2265461b-1ec2-4ce8-9056-1a024621e3da",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d29625-ce37-4605-ac54-a113319ca79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b00904-6680-4b21-9076-95cc4ee44582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50522cb-d59f-4a6e-b027-147bdfde89cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa1a9a3-1e52-4061-b949-776f0e55a214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8da51d-134d-486b-ac19-169b0619742f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8ce711-474e-429a-b589-8ad6b436ea52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dce645-ebe7-41fa-abf6-3dbe8d94703b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ba807e-93e1-4460-acf9-353e12779754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9e487c-6435-4365-8792-9a36ee8b3eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af77504-0b09-4cf3-a4f9-24efb2e64064",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ae8fe1-0f9c-4cd8-94b3-5f5a1e7b76a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5bd30e-24db-4534-910e-bbf1b6417440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aafacdc-15a9-467c-b442-c1d79a961504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceae4f2b-a89e-4d35-8e9c-2d7572f46b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6da8e1-8b02-4ebd-a004-2fd11845ae1d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747c91c4-5c84-4c6c-9d9b-7e0733c057c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecee7433-ad43-4a07-b5b8-efb4c15e5d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a364bc71-4c50-4825-ac4d-621b6a64aa14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "179a5ae7-23af-4244-8d77-eba93fa33b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23227f1-2a18-433b-94aa-288e2d53306c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144b09ea-a628-49df-b636-d65e1afe37ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f72635-bf72-48ea-911d-fdf0d9012da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0543fc61-de40-427f-b6f1-8ac1a267e202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34ba0772-9a44-45fa-9aa4-08f28eacfe82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cadf76-6bc8-4107-ab51-ea1c0bdd9d43",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a2ecb5-5e34-4ea6-9f31-4b2416818752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c7fd35-e5c9-494d-82e5-6c05ccde47c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9dc456e-16e4-4644-a0ed-b16c3f03dd7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5450980-5741-4180-88a6-1163162d5750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e7a430-2497-49d6-9437-d7f207ede3a9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c317f09f-7594-4f44-89d3-070c8b7b504f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7017b929-bf17-4416-ac8e-4b2508925acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14e48ce-026a-4df0-b934-d91f4d4fdeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10befd44-0a65-4943-86a0-2d9d3ba88172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc54c7f8-d02f-444d-aa42-c4b9135ccd14",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910272d1-6619-49db-b4be-9fe6f971de07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6a450a-dad0-484c-aeaa-e5c91187a7cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b96c2c-5187-476c-912a-ceab36f5a893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0d8551-9806-4e1a-8fa5-77426dcc86ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d153d45-231e-43cf-b2d5-d444761330ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "57560a7d-fb15-49fd-8c06-d84968a5cfdc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef11a76-2c5b-4ef7-b029-196a4a180799",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "861b31b6-7174-4991-9682-84c4dbdd3974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ceef95-1d8a-42ca-8877-1818c740aac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e435190d-e72d-40ac-8261-4f34cb75da0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c4c230a-8218-422b-894b-7e83af641c4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c7f0a88-e4a4-4e61-8286-a14051f3d4dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c15dc669-3ca1-477b-bb76-214901867511",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "708445d6-3047-423b-a4d0-e39b6308c170"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20bdf321-dc88-49e9-8074-c0498e01d1bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b71e8197-59c8-4e0d-a836-686627074f2b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d344605-73c9-4a36-a1bf-370ab96b9669",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c930109-aeb3-49f6-8fd7-fa0a3182c019"
            }
          }
        ]
      },
      {
        "id": "be1eedc7-662c-4240-a3c1-20abc1d9da07",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3c066d49-1b87-410f-8c5b-5bb789897d2e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fea30886-64a0-4da1-a8ea-92970b6a3286",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "af14f202-30f0-4eca-a655-e0c5856dfeac",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c47e32-a03b-4f6f-99c6-3b516004640d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7418f4a7-8147-4fd2-b68c-561792416b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8049433a-bb19-4ea7-8711-e4dd1e319f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a73040-129c-4794-9800-c27d5609571b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f812ef-d7e0-4cf4-8171-48970e36a408",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9a4008-03eb-4ae2-b547-3cbdb137e06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28687e8a-70f6-4f7f-9f51-fbab31faf842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a1f64c-41f3-4b6b-9197-a377cb033033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cbf040b-388e-4cb9-a253-44a290f2b01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae63f976-66b3-4740-a55d-85cf2510ec1c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6ce3fa-b516-437d-8dd6-12d9c654063e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff1096e-56f0-416e-a11a-9754751085ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c95f5f-ca7e-4d4d-856f-422228a6d6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "676a5dcc-fd8f-4c85-a6ce-4dac247606b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6678b72c-6821-4d61-82b5-df8e8631f8ff",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e7f37a-a259-4f7b-a216-124bf94420cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08101e2b-ff82-4fe8-a9fe-8834ba3f6b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b556ac-872e-4516-80e0-87ef80d84b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9b6152-8156-4cd4-b9c7-964f2f8527e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cc26f0-c686-40b4-bd99-0730ec2ee542",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a7c787-218e-478d-93ab-a567575de571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8958ab33-d74f-43cd-8e0d-586f4c3875c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46583fab-b02c-4606-b79f-baa3eb1fe890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de943d8b-98d5-4e7f-8db2-cc883381c352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f385a7a8-82f7-4480-818f-922390d4b31e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b603f436-4a8b-40f9-b475-19d0d44b02e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f51943-c982-4c3a-98d8-3ce6a477b5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1ba1bc-921a-4211-93f9-36d2e49fad6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "994c38ed-d0c6-4f31-8b28-f5cb20a0468d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0fb617-ce72-4942-9e48-a2f57ba125a6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa90805a-c7e0-4a8d-b6c9-ab90474d1949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79b00ae-8cbe-417a-91fb-a8a3c421dd59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43edba33-c1c8-4678-b0c4-de75fcae52bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eeccbd5-0495-4320-968c-3e9c3dd99058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a009b8e-9ea1-4dfa-8ba3-68efcfcb0a79",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180bd79d-46e6-435c-8df8-3a8888d7572f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67ad984-289a-4ed3-b8dc-937906e39587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2378a993-52de-467e-943b-71a764569b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82926b2b-d2f1-46ce-a0f6-f1ee75dc0d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c208d5-0a93-4bef-9204-daf6d2d92a33",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd33838b-77f3-420d-8187-0df1977e438a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741f3845-00be-4287-a8ec-725342474f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c714cd-9961-405b-8a9c-56db9b65d524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12d7f2aa-ffd8-485c-ac90-b0e634ded61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8844302-f8b7-4ebf-a120-c483b41d83e2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4087b00c-3e59-4630-88bc-d3ad288b16a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f6a816-fa88-4f2d-85f5-002f71e828dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c4b16c-ef77-4b77-bc6d-5a43c1cccd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ac205e-c1b3-4b6b-ad71-8b9ae68cf4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b8585c-fb92-4374-9041-77710fc98290",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8eccbd3-b8bf-4d17-9040-62307e67bea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53cba68a-324c-4a56-ad53-9228359d01be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbb32f2-bc1b-49fe-a6f1-9141f21e16e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "055b1660-6d86-4745-9fc8-e87f46e60c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a17466-988b-4aca-835e-40e36b7092f2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06401178-d4b6-42f0-a56a-2599ed55d2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acef824-c785-4556-a462-bb4d57282135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129ccb7f-718a-4e83-994c-e4b1693d6900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69875736-f153-4d4e-91c1-5d1699bdbdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccee796-eb80-4b09-9e4f-fcbe9217df64",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b670fc-df72-41ce-8056-139baae8efc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32792897-6e7e-4abd-b5c2-84ffa035dcb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad48e571-43ff-4434-a984-627256acc899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90376033-fb9c-4847-8a2f-ce1a615f979d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7890de00-f2ca-465e-87b2-928a84507649",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c5de11-4d7f-43c6-bda4-63ae2c7de6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a757e082-801b-4242-a4c6-e6fc0ac36b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d5b7b8-9afa-493e-97b9-bbaaa0db8925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b455b554-c234-40ea-b265-5cb5d9875c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb13a5f-caff-472f-841f-a86335a33fd5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227e8a94-c7eb-4cb4-a1d6-89d6f25b1297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef02daaf-3424-42bf-8a7d-e20486a18f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebb7115-e6a9-4d77-b481-cdd9f500879a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c197701-e824-4e5e-a5ea-12c11f5cb0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86f592c-2f28-4fbf-b8f3-a42c853157c8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a56423-3aba-4dfc-9ad9-032306be693e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86a5a557-874e-4017-a9a5-ea1116150f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9daa708-e773-4a97-8cbf-73176be6430c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "951d7584-2528-4e2d-905d-0064c2da421e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f8bc74-c8a0-4f9e-ab66-50b28189700a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bae6422-7478-4d04-9160-ed6703adc7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8349b0d5-f772-4d17-b342-84167d93b11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d20d037-73dd-41b1-89f0-f5b38f467f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6cad58-a613-47d5-a809-93b7ec5ed1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621150c4-121e-4ec3-8b8a-349f15d0362d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6c8be5-118a-40bd-9424-0dba491298f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5771c185-9985-4132-8cca-f801f848071d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1565cb2-9d86-409a-a3c3-8c77ec7316be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5000809-7acb-45ca-a9e4-462a25123761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c27c73d-a434-48bc-bbd6-badd66ee6975",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aed90f7-21fb-4683-9da5-95f6d0304fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26548e9c-55af-462e-842b-a74eea62100f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404965f5-75cb-42ee-a63a-e000d8382eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8b2247-bcc8-44a3-90f5-8218600802df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc792aa-3f20-4ba7-ae08-2b545830b77e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9a7036-b77f-4439-ae5c-ad862dedce28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f12cc73-7aa9-482e-9d69-c8a2bbd31442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b50bdbd-bc38-4986-b496-4c0f9505254e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c49ed007-940e-463c-a903-4651b82353dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08b2aa6-d4e2-4f8f-b19c-d25d9d072fba",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b95f89-4bcd-4950-9096-21996b66c468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305d9525-f706-4069-ab3d-ed91a246b870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3f0c57-32c4-4aca-a134-87d08653280a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad103975-2250-4efc-8b6e-c8123f020bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e04bcf2-64ad-4dea-91ae-ab5d0c651ae8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faabfc88-06e1-44dc-ab57-2c6a74c6dec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1c6c49-bce4-4521-be06-a56f5a286042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8698da70-7b86-443f-b766-52938e16e80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80cc30f7-196c-4ece-a4e5-ca3ae1828a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a1cff2-7f9c-4b79-aa2d-cb37d5339035",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3946b61-e6a8-48df-8ec1-ef2102bb44e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7981b8b2-9c34-46a5-9280-ebdd5c5cc55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d533602-9204-4438-aeb9-42e07ea60501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80569a38-1126-43c2-87f1-15a95ce86d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16583f54-5b23-4c17-a900-5b3070a4e0fd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8474600-3451-4fc9-bf4b-a3813800be93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff33256-aa03-4619-9663-6665c29a7ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8c2562-1715-489f-9979-49b6e9a4c187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44d09ecc-a40f-45e3-97f5-8a44c3c6a4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907afe25-2c6d-419e-9fb8-d6ba24f56ce2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50330b0f-3059-45a4-9fe6-6cff58114087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08dea62c-83ef-44f5-a326-56e31b655705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f125eed-17d7-4f27-91f2-450ac4492ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5ca0e15-36e4-4413-9197-48e104523ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb804c02-8efd-44b4-bcaf-34464e9d4b7c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b44e15-59f4-44e4-97ce-ba5fcf7c887d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aaaea59-ec4a-417e-817a-ce4c3942be52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0843933d-25af-4b9a-9e2f-006ed73892f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6de66ff9-7d26-4527-8535-bd3bdefc193e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327e3f0f-0dea-4790-a793-c764231d572b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf435578-37e4-4953-a2d0-13a7c942d1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa50089-4862-42fc-ae8c-0150ef6ead09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995acff6-0254-4137-bade-c2a909ba86ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2dcefa6-24ab-4dc8-9f82-3bc00b81087c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0889fb52-9d59-436a-b4c3-07aab7ce559d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769956ea-ed68-4363-ae21-e78b92d11642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3d2dac-2208-42da-adab-4baeec73613a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e725859-ba57-447e-bd40-eb3524889bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c17ffd2-540b-4065-8d6f-c22c14fdb0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89e980d-36ea-46c6-9ca1-2e6bfa8ec74f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff4feb3-af8f-4185-8032-ef94e934d636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa9e9e7-e3ae-4cae-9284-43ebf6f1a894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d005b441-b0d7-450a-9a5e-caa8ff2862df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f632f9b-cf38-46b8-94b1-bf95b786d6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ae3804-0d24-4bb4-93db-733c77bfcd0c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece93721-9497-4a6a-9f97-0c1ae9023cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa912f6-31e3-4d42-a925-876d6bf38ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e0ad6c-018f-4736-988a-2ae7b973db69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a82f14a0-1a11-4d7d-9ed1-abc56c1a7007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82732bd-64e2-44d0-b8c5-a46a34e24ce2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e6976c-619b-4614-90db-c96bf43e6a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a805b23-72c1-4c2f-8252-ca9fb8f7c5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccee922-1bf5-4e28-8a0a-ee494e5db324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c86830a-2696-42b8-89d2-7c5d964f7173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8feb2f31-f149-4d79-be74-90263bec2092",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893df225-a5d5-4836-bb6b-354e3ab75107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c147e5-7888-42c1-8f29-b0efcae0435a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155453ca-8d41-452d-9a89-810793cc2985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "460cd578-f8ed-48bf-9162-710448851a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a067a83-7576-458b-8997-d3be8906c26d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77186cf6-ac39-4b7d-adaa-3887202910e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d45fd3-d13f-417a-aace-8f79dc643fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cacf8f7-c09c-4be8-86ba-dcda1827dd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e6ab35-d8fb-4516-b8d5-5d9f96bffdc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb314eb5-38ae-4a41-a602-72112a5f4feb",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f1636b-4a69-4582-86b5-0f3a19edc3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e406936c-ac65-48ae-85db-114d0badfee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925e243c-a7e6-44f7-94e1-13a7c88f3d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1f11f0-8af7-4bb2-b152-77a9f5da6dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9655594-79bb-40f1-864f-a9192708dd82",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a03edd-2123-46f6-9bf6-aab6986a96e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e75fde-4f96-43e7-a393-44d510007b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7a8471-bdc5-400d-a7f1-00fddc4bd291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8af238b-e905-4477-a9cd-752ac0d0ce0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a9889c-7e3c-4020-8a11-f9f307880f71",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19fdb97-d8d9-4da2-862d-5f87b48a211b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29355b5-ee16-4c21-8d18-8c5010b32e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b39ecb-7cb3-41f3-a60e-50591661e811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53d845d0-a9db-49c1-bbea-b3ec9a858cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04ad044-a8f8-4546-85cd-9bf5f14c9669",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ce6cb4-91e8-46f7-984e-9f3c5a8834e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15922747-20eb-4073-ab17-440bc4b2e3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803098ed-fc0e-4044-9761-1d1089e466e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fba630df-dd2b-4071-8267-8529db31d1a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c6a7f8b3-7ccd-4616-b4d1-a99561941427",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11bfd1b2-e005-4871-88af-5a4d62956b4f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b00f8d7-e808-4fb6-a6c1-2eb9ecd28cce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e12daea9-6c21-43cc-b1c9-ee2d081c0d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea56bc2-4e42-445d-88d0-7f946e202c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0938521e-f748-41ad-9dce-fc739683e6f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd009914-4487-41f1-9760-c519d5d3780a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28aa09a2-ad2b-4c51-983f-c662957c488c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d2d6750-42f9-4b16-a018-02aea3811a91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f43eb19f-5195-4d77-906a-d019fe247914"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3b3f03d-69b1-4e8d-a7b1-b781b9a46d8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9387bd0a-0bf5-445b-ba1e-2cfe77e9a285"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04cd92c3-aa5b-4cfc-80d4-780fe23ddc39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad357a7b-10d7-426e-be0c-41c0488a701b"
            }
          }
        ]
      },
      {
        "id": "63e79dc5-dbaf-46fb-8e0a-fe8c4c1a9cb3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8616072c-8392-4292-95f3-daa07673910c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a54efd4-849d-4aca-80de-05745fd237e5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "61f66437-ac58-4500-8076-676471d893b4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9558a9e2-06df-4952-b131-6a50302e0099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3510502e-43bc-4954-9299-f729b64abc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47a9492-6332-42be-9eca-5710595ea290",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abebc958-c690-48c5-88cd-baf6ee42e33b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6a46c5-79cf-4e44-8496-b2bfbc6fb116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ea104a-262b-419f-89a3-aa8264d960e5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb57fa22-a10d-40cc-9222-b28001b08296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf0318d-de35-4de0-bdce-e264b9be0dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8569fa99-4577-4f1d-8be5-d3e395a10a1f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e5b9b9-4de0-41d8-ac5b-9195b9fe37e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09501678-64d3-4f55-9fdd-6720654f1819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ee73e6-e1e1-4752-b2ef-6df74679882f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec760bc-1185-4eb4-95a1-62a4e56d71cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7f2b31-1823-4075-8a2a-ffa562333654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ada18e8-40db-44d0-8cb3-9b5c7b9da1e0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae128e5c-8666-409a-bc0f-f5bc45e85c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44bceb99-2086-4af9-9b7d-dcd10890b7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7bfb43c-86d8-4b24-85de-0821cdd634b8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f78c9e3-6df7-497a-996d-3d76cec80275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c63792-b818-4dcc-8e91-9c455d6fc863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ae058f-a0a5-4747-bbc9-b0d6abaf0610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eadb233-41c7-4157-b9a3-e9cabe09d81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c3b05f-3fc3-4e6f-8815-a393848e405c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fbe5cf-701e-4c4a-94c8-c4741fb0fdba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa6d288d-07ba-43ea-a7c9-75484e4ac8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfa243b-3648-4d75-8175-c10fd21beafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6cb639-6eb5-4f72-93be-75d0040eb31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8a0338-7547-4c08-9a52-d11ab80534ff",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9e650b-4365-4fd1-9abe-70550a491643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee31bbf-4441-4391-87b1-cf61c6d5d823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0dc99de-5776-4c92-a45a-86077d720956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed79ab19-343e-4a1b-9fd5-f005ae40466c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16c2721-8ba5-4346-a26f-27da85c08cd1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8b9f2f-49db-4b07-a4c8-470525ae692e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abbc6b58-d249-4f17-9d3f-838f934a4a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a212a6-7f9c-45c2-bc48-15a371402cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00708f29-24e0-408f-ab1b-e2b7ee28a586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc62147-f3ae-4b2b-8ff7-bcffdb252a9e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41db9215-ccdc-40ef-a5d5-d0ab5507654b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a7ea24-a75a-4553-af5d-93397bea136b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0086d4-8721-4ca7-a7d8-b2dce7f8e7c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d05427aa-a1b0-41d1-83de-c04b038aad4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1732f5a0-e39c-4136-98fa-bbe6a482c29f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a43071d-9463-47e0-accb-2b1709e88ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f04e1e-0af7-4ffe-9b10-c5af9b1975ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "866c88b5-e504-4c9b-a2ea-61694e02db6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10d7560-53b2-4916-936f-42c0432c0f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800fee33-04d4-469b-ac28-94c14f0c87b4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e72da8-1be5-45a4-b8a2-47a9c1ef2eff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ca0f506-fa65-42b7-a825-0798563678af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c34394-76d9-4942-bd5e-c17335339377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae83023a-aea1-484d-81f9-fe131146a2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadcfb28-e000-47c3-8a13-d3acef965d2e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0525dc-39fa-47ae-8b38-5bda4a002e37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f4fdc95-d691-4b19-aa18-b829b1897bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23aefeab-36d5-4f8b-8cf0-104063a737ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdd6ee0-6e9e-4f84-8b9a-656dac503adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357fac96-f42a-4288-b7ca-7d4941f0aa4b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9012ce4-8cf3-4068-98fc-4508e3400afb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e4fb4e7-eb50-41de-81bd-9b493279790a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6834c8c1-2c33-49b3-80a4-ba3315eb551b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa6626c-c54d-44da-a5bd-57f28d8d2120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476d1665-d414-4d7f-b8cc-bffd0896d9cd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376830d0-f608-4dbe-954a-b6f30c38b3b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d02f488-b76a-42cf-91fe-8f63d1dc3ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe20221-793d-4b1b-b366-d78d1569bfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee066f9c-b269-4ddf-ad9d-d1d9ee0a7c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7156a85b-f4be-4bb2-b371-aa917c3d42a9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca222df-463b-4d1c-a270-dad0df927d8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4f0271-ab05-47d6-8011-f0d428ed3672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5522dd3a-6028-4a65-874b-19bc24771cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6e007f-39ef-474a-943a-02a1d422a6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0513434-40cb-4980-9ef8-5413436b1c38",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fda93d-70f9-44b9-a7b7-cb794aaaaeb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d06c8ef-5b1b-4cc2-96b3-711eff34a350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f4faf8-bff7-4aae-aa23-69f48c6ddc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a10ce3-e844-4ecb-a8be-39d5c1c12404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84809aa2-7970-4c14-81bc-1915d8dfd1b4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370009aa-a5ea-4619-939e-3772118e4b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73cdea4-7a24-4590-846f-292fea5de1d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ea7cf2-02fd-412c-8e21-bae051533e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9054ec0-3b20-4f82-9824-8029f209bf85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e2cd01-3032-40ce-8307-c4b195e00b26",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9eca09-376e-47db-aff4-42aeac19ad00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b786fa56-8d6d-4f72-94cb-e8e8c937c70b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e945fc-4c4d-43da-954a-fd8c5af8ed43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dedb653-bc38-4690-923c-3337964dd15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eda759e-4e85-4b99-8a36-545cccbdeebb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7a5f5c-61fb-4092-aaef-784971052de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b96ee1-56eb-43ba-9198-f1c7a97deca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df3e180-172a-4ee9-a61f-a274c7be0086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e732b1-61de-4467-a814-e5a761740422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd9d4db-3c5e-443b-a936-0046e8e32a8a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a06e010-9fe4-485b-828a-9cb0fc5feb35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3429a9f6-3858-4320-b767-2ab9bd4303e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bad801-3480-453e-a8a5-887142b523e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b56b91-c4e6-4fb0-9a00-a29e2dee7807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8ea686-c476-4aa1-a373-3be74f8dee1a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8844ac02-67e0-4ca4-ac4b-5ba420433ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9cadb5-ab3c-4276-9772-62c42dd5c667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50e861c-c9a2-4329-ab31-c47a0f1462f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202e1019-b76e-465a-8428-93cfdf184a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2260bf96-07fe-416e-8722-0c683ba2c81c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8483ee6a-991f-4665-bb91-2f86728e4ab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153783fe-cec2-4a65-9d42-57864d5b2871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d6f060-f38a-4cde-b91c-dc5673973f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1bdb9c-3ae5-475a-9384-318fb7230c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d4efee-35f0-4d30-9cf9-04c8db00b3ba",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e34d8cb-c6ef-462b-a69d-c1abec2b061d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b850632d-7967-4fff-8b9b-ced02dfe7801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e705765c-cbb8-40c6-8ed1-39580079d881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5f65a0-76c8-4a28-9f2c-f3f8dd6e6e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb21dd7-d9a5-4e72-a246-5952b85bdd79",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951cbce7-4346-4bc1-b76b-faddbcabc471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a98330c-2d7d-43d4-98df-0b4f2ef54ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966f9415-6b6d-4ab9-bd42-bccb0f2ffa42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac3b86e-c873-4855-a451-d3e9c4c5a351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473d034b-5474-4092-9506-429a352beb89",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf2fcc5-91d8-4d70-b28c-01b0ebd6cdce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f7439a0-061a-4f5e-8b50-b89b8a3c2064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b57cf20-b381-416f-ad3a-0bdc24c262bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb9a709-a367-429e-ab1e-ce7f5cc873a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ad33ef-59ac-4b75-a284-0e035fbc1c46",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8d3427-de2d-44a3-a793-6d4b9cc914b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a837456-f057-4494-8a81-8abcd47835bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8013ee3e-8e7d-40bd-9f0c-63dc7772ec25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841d50da-98c4-4431-ac7a-21a4a0410eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987f7688-ee55-46b8-9b58-f136d0bab8ed",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b156063c-f58c-4a75-8d81-8ce8ef69bef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81b560f9-d6c4-4f6c-a655-40ad6600d3cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "078cf96b-16df-4217-8929-1684e2e4e343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7802a452-43e7-437c-a990-f85a5841c581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4283df-95ae-4b4e-8a99-bcfb4436de65",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2df58d4-4357-417e-a348-ba35114b7ba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a928a44-5e13-4b89-80c5-c53c8e741be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bc31e0-a282-4d92-8c68-56342a9fd3bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123c573a-b1f9-4e89-b1a2-9f0a0dbd61fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296f96f8-68e4-4b2d-83e8-47151288d412",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1244b44a-b099-4c3a-8c40-f60ad5683f50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42fc58ce-9c52-46bb-af0d-4ee1e65eaa4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342e94ed-0b34-4fac-8128-1242964ced4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f053b5cc-24af-4428-8d41-b5a89407a8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d85c78-3de7-4cf5-af03-797f07236a0d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94b1902-7163-4b8b-9d5a-e9bf664e9f63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3224d33-957d-4d0f-af98-e6dfbeb291e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d86d5e4-d6cf-4f0e-b1c5-4402781e91d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a51537-62c2-4dd7-8622-949d3b4f7e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc270a92-c835-47de-b297-c58c214f5a3d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88e824e-942b-41ab-87f4-698b7654750a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23a78848-5b3d-4023-977c-31274a36249a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c20553-4c89-4e98-9c07-4538ed920ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061edfbe-66cb-418b-9ba3-9da0d7b34505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88b5d06-47b0-4ff6-bd24-e8a4144ef726",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc14e2b-7485-45e0-b608-ffb10a1468ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4edcdbf-f930-4ead-a3aa-2d3255dbae31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b0e66c-f1fb-477a-a5c9-518d9e883cc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d459f73-e914-486a-8002-e9a4f13c9496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c7ff07-ccdc-465d-9c27-182b7aa2cfb3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8cee69-6348-4f82-aff4-5ef26505a79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c7231e-298f-44e5-979b-045b4068195f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be4f9b7-6d2c-41f6-b08b-be1a3f20b29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99cb05a9-dfa5-4275-9815-bc95262be8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8502a828-b3d2-4195-b449-de661ad041a1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0c38cb-9dee-45cd-a34e-1d87ffa78cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4170a4e-1d9e-48ff-90fc-8d8ed16378ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a0f257-0489-43b1-877f-323235dac7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6b665a-df9e-4aa4-ab70-3f7c86fc39f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09510ada-33cd-4b80-bbea-d3808161fad1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bf0466-8b7d-4a9a-9364-2e245a3513a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f227507-de91-4969-8adc-b8119a93c7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6ebd38-025f-4364-b717-daa4ce2be58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b210fc-67ef-4691-89f4-a776bf7f84dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ea4dfc-9a73-4003-b4e3-dc7cec268b93",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dcd52f-2e04-49a2-b532-49069739e657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b5fb02-f17d-4db2-b94b-51b875f8c129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4814c378-e676-43f9-b39c-9e1911cf6f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94541b2b-122b-418d-9279-3f6afe39c667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b040b779-8076-4b2b-a79f-c1e932f9e9e8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b85ca28-8a0a-4bee-9c0e-2121ccb09b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8853f17e-d713-49b4-ae5e-de5403c92dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1505789-99ca-40bb-b3eb-30233ef3f591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b0d2b8-9a90-4296-a271-177ab2f9402e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a18ec00-ad7e-4761-8867-def8166d8243",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fab3a3c-0bed-482a-b4d3-d26c54ff8291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f8400a-6368-431d-8362-f8b5d6b4df77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979384b8-d694-4f62-9d51-bb07af9b4674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c137ff-95e7-4fa1-90f1-956c2724ece2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae5fae3-647c-4eb8-bfd7-5e58e2bbc635",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe7f493-b100-4d9d-99c7-f7c41400c832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac5e009-0088-4bbb-a571-f11ccf33c4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28dd8fa-b356-4fa3-a819-9f1358c1d090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675c94b8-c9ac-45a2-b4ff-294c23dc0ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9150a2-f495-440a-b537-d7247f5dcbb7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01996b9c-3493-4062-b063-8b0aeb9cd24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1676eeab-957d-4664-a181-054631ba52fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb41283-ea5c-4409-8758-140f2e4ccbd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cace3c02-f38d-4f7d-b6b0-091a32b13454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dca2f0e-af0e-4817-a295-6ab136fa3e6a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02189c9b-d3c9-486f-aa60-d415cf5ae63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1240acb-fa90-42e3-9c9d-a9bbdc7c0f8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0a5a30-3bf8-41f0-9a6f-9302ea450b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a41419a-ece8-41e7-a58a-4437b4e28807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41ec2d6-f83d-44c5-bdb7-9492106cd106",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c10878a-e9dc-43a2-aada-93928616f133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125cbf5e-9035-4dfb-a72c-0267b791540a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82901a9f-10f5-4c78-a7ee-1d9eab4025b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4022cba-a432-42cf-a31f-e2a2f04b7286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8b4788-8d68-4602-baa3-46fc845a20e2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6567bb-2646-446e-9f14-f57f89dae14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64c597b-c837-4f4c-83a0-c0262f15b357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a3d213-4785-4372-958e-a60c7fc43302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a831b860-f87b-4004-bd3f-eaab201248bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfc6b30-bc1c-473d-b189-c44a4b2313e0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03e0672-e292-4002-9301-bc6af12c1d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9affa98a-d25e-4a87-bbf1-3690ae5c5eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bbd560-78cf-4117-a419-acb7f482a021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4fadaea-f458-4551-ba20-d1152cb70ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77844920-f013-4fbd-a685-63e79a44dfab",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0984923c-96a0-4993-87f9-d95f09cae666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1a0e96-cccf-4f8a-a836-d54c7a6da395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1062ec00-d732-4fca-bf76-f451648960e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6db6ba9-e968-47df-a27d-1f3a2a73dc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26dc9c9-c7f7-4f8c-81bd-bba3e94f4ca9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c20b17-e79d-4a2e-b4fa-b1fe6ab7dcd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc6ff58-3a29-4fac-a20b-40be7f481f0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1452aafa-f580-45c4-b816-3136133248dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc16eeda-c9fb-417f-a78c-4a77a656c5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6ac34d-8b4f-4239-a53b-13e5fbbfe8d3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b321f2-ba5e-482c-8185-377ce883fe75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673fcac4-b3ee-4f7f-88c6-dad75e45dbdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00725587-35b9-4a21-b4c5-1e5b0ef4454d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f46098f-664d-476f-9e5f-d452f6b2317c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d35681-df4d-4d47-8200-17f0bd36cb96",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3eadef-e728-4f23-b654-5044b96801f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c53625-4298-4699-aacf-ad9df5bf7967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bdc60e-382e-45ff-8714-cdc362fdf81c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15ce891-b335-46c6-803f-9629e818a54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b4028c-8ad7-49cc-95ed-64be715d14e4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3049af71-6cde-4c2a-ac25-6437cae7eb50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58116fc4-52a1-48a3-b6a1-f015b13ca94c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51cbf92-b98b-457d-a6a5-0df88848eb6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173f7794-5548-4548-a619-46520ab9b867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632f559a-f30a-4b45-8f68-4653cddaa54f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff238519-3fc6-4d62-9697-3d2bd5f89021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f073d9-91dc-467e-b107-939396ff832b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f125e0-5414-46b0-aa3c-8d769b6ebbbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170c09d8-9be4-4da0-9d2e-10c3f5af13f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4c8af1-8666-4601-ae47-b0134f0a879f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4825669-45b3-4587-bd4b-37bdc0b04a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8266b9-b6e5-43ed-8ee9-250e1776e5ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35301d4-f9b3-43ba-b869-228b62d058c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b369733-f071-410c-9e0c-3d01292f6196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ff2826-3ab4-47bb-99bc-29f3bc24788e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6194c97b-db99-4b0c-a7df-fbc4d4f1363e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8545ab0-c0b7-46bf-b645-3dfb205e9e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d739de1f-04cc-4364-bc8f-bedd8f7a24b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c949e14-290a-43b8-85cc-0e35a241663d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92785c84-fe27-49d3-bc08-047f6520072a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453fe904-8107-46a9-bd18-6d60685f4096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00acaa8-911f-4107-a8d6-f5fecee76155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104dd59a-7663-44df-bfe4-e03e1c3a2ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76cd42da-1f99-4aed-a491-49f048ca244b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22df310d-6785-4700-8fad-5ebdfc89d792",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd88f351-14a0-4d3e-adbb-8f334b4cb655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1129c7-832b-4288-a56c-cf3474ee2ade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a03c844-6ba3-42f6-b32b-cee33bb49ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8db9b6-04a5-4e42-8dac-fd26b0c115de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa82d13b-e0a4-496d-a3e2-505f9fedb0c3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f004bb7-aa56-45f1-b6ac-471e9e4ddf40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d731b2-78ff-4fff-a697-23d13331638d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c0b0db-63b7-4d5a-8e99-5b5f9d3a6302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3343e9-9219-48b7-acbc-6ec995fc7808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1a6587-f74b-4f1d-9176-d67e04efd138",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8bf7c4-f09c-4ffa-8e71-30736c3fce41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b00f733-f633-4f6f-ad94-ad04c92dccb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9a6ec5-c0b5-470d-bf62-c4865842d0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6994e6-76ef-4071-afb3-7009a5022a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d72b740-b980-457a-b633-a2b0f8057ac3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b89786-d55d-413b-9576-8d4c1a71f763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d690e8-0139-4878-81cb-b18f8859b1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8e8820-5822-4e14-810d-8763bdc7b460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41bfd4c-707a-41fc-8dc1-358fe9e2a559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d6f36f-0326-4c5d-b900-8a477f16ce7d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf18f9a3-aae0-4148-8116-ce49abcc4462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceb797cd-b80b-47e7-88f5-6e8c167d3d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdfd2eb-d0c5-4125-a95a-67ce84c0274f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067fef19-8dbb-4fa6-bc4f-1bfd6f746bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51539f6c-11d1-42fa-957f-50d3d97a0fd8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aeed2fb-fb30-48ca-8cf3-67ae7c166148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d79553-b152-4fbc-8f55-c188aeb6db56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45eb49d-d9ce-4ee8-bccd-d78b1cc237c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b535f930-6e78-4ee3-8da7-ccfa634c0b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5f9ef2-8702-4eec-954f-59b2bf8d6bf3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd2ab54-8c3f-415c-ab36-47b71fdb3666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2e6286-e469-42c1-a6c5-5295bda9c1d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4df925-7acf-4138-9bbd-c427f74cf71e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778d1649-719a-444a-b8a6-f07c150e1f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34002bd-bdf1-4424-8bee-57e1ba26b889",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee00db4-3e0f-4207-9bcb-37799c6d6905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2020dac8-e5a0-4db6-a24e-c1ad5c95b8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f989ba-e821-42e5-8fe8-da7a67acd98c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff390376-a672-4531-81e8-654e6675dda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975a779d-fa27-480a-987b-788114033351",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48186fcd-5ae4-4de7-a3c4-bc757e363736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5db3f563-69b8-4eb8-900a-fc3e2aa4b0ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab01c19-1532-4572-a0a1-55d228bcd1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac06a89-f927-4ec1-9380-84ee69e0dbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189caeed-d14c-485f-ad8a-c360fb04c9a3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ae7d8d-59fd-4024-b8f6-3a60001f0de0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd983f7b-f0b1-4bef-93cb-5e694f31ae51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39444d50-59ee-4946-b38b-f47364064b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f0e1e7-08fc-4ee9-a069-f69af5d14e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c38e114-3257-43f8-931d-541917b50cb5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea02948b-780a-4f27-8b1a-6e96fe09727c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b3a178e-2a0c-401b-9c39-f7f83cb4227a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc8cc85-5a06-4875-9e72-4f46c66c5da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "153875e1-192c-4680-9610-b5642527455f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe56a035-f78c-48a4-bebd-830f043c84f3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cf3f4a-9f95-4a2b-ad75-8171b4986975",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55124173-c81e-4fd1-b677-a61a1a66bc30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37bb49b-5a96-44f5-b8fc-85615bbbec7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba7fefbd-0933-4f91-9f11-2b7ce0dc4357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbf3eda-8620-4467-b169-a057f39de3cd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9700cc1f-4460-4f70-aebe-67481cb44276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58e1502a-663f-4aa3-b0ba-094a36ccb592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734f8079-8d99-4e7c-a68c-6be5a67a9a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327bad49-34f9-4313-bba8-67e88f52f720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb26af9-ff1c-439c-9769-6d58f7333132",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22dab749-3063-450b-bd44-94ccd5e4e133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6419b8da-fa90-404a-b3c6-34874f4902f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5c225c-393f-43e1-b807-d75c4797a1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e2bb7d-670f-4d8a-871b-314162a0ce08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce1a5ef-0945-4443-862c-f1604c141a53",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e524e7ed-468c-48c1-b76b-c134a14ff370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cad73eaa-0800-4720-afa7-0c538940c7cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8a31dd-700d-42c3-854f-691806bd84d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f586df-163d-4d7b-b4db-304e0d6607d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8f36fa-c814-43da-89c9-9d59e09507aa",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cc3d3f-1ba4-4ab9-8eea-56e563cd2fd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e90bddb-7d7b-477e-a983-b0b8e19c5299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40ae48c-a9f8-4b82-bbbd-dce02aef260b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80956a0-cb45-4afd-844e-ac3c9760c80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb95b2d-3b67-423f-9a1c-4e399242afb5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527a2fc2-4460-4214-8dc5-1a7f33c97b95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bc0d74c-b1da-4d3a-a853-f0f14f15fa50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8be9dd1-786a-4a08-b115-d644e6c6eb57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50ed647-27bc-4cfc-8406-ee67f78ba288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e05d41d-2bdc-4d72-8686-5ed9a8eaa27b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b60bab-34ae-4028-80b4-5bd2478392bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "175e3650-d675-4673-9694-d7cb9f344f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81552888-81df-4865-adfd-580ab5338740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03a2151-fd51-47ba-9d7f-1f3a5378ebe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a69420c-88e4-48ca-861d-30946d4c7ff3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb487bf5-6c42-4c58-8bf2-567531006614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47218b9f-9b03-4f7e-a9a0-d604c35bcb77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4d2166-3953-4c44-b226-57f9a04f4f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbe20bb-6b9b-485b-bf9b-31a71c9f480f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb6d5b1-0cfa-4973-bc5b-5c94392b8347",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01ef43f-86d1-4a32-ae1f-c3927032bdf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01268e78-8023-4a2d-80e6-7e052d0da56a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2d3669-a436-4f6f-83c3-112221f003cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5980aed7-8b6f-4253-8766-8787fa6220d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b59fc50-33e4-4ba4-9418-0faa0d9f2a4a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e105c587-d72e-4e11-8aae-7d3451bc59f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5978e27f-a08a-4433-b36c-0acfb60dcab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92ded3b-2c4f-4b51-ad03-dc8c1f0cd23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bec5281-ff60-45aa-b1fc-256f7a07d5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2b39d2-5c49-4f07-93ff-15ba2ee247b2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa31195e-390a-4b3d-a0bc-3ca98a04b82d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32166c18-a938-40ab-b171-241d1ca9a231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "271ae176-d320-40a1-aeb8-cc3055c4554a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7462f5ea-502a-476d-a414-82ef07c0d210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154a49b1-0960-4cf4-a95d-39c561838a6c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1417d143-3685-48d8-9720-884c52d24a8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f542fbf-00df-4feb-8b93-93669726a34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c2c697-98c3-4fe9-a9d2-a323b5cf0d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6fd8fe-3f01-4be4-bb2f-673224e8c9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52790b9-d6b6-40b2-b4f8-87a21fe7f691",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfa0d9a-fd7b-40bd-a5e7-e7a5d1ad085e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c797066b-5d3a-43f2-9a8a-9542f0b7ef3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce9f9ef-6282-4eac-98e5-9c4ecba6497b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270dc775-c4f8-44f6-ab79-c943270421c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a193c0c6-e2ee-4c84-97a7-2b755fbae6b5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddac567-6016-4a7f-9ad4-2a0e605e7a7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b65b08ee-5de5-4344-9285-87f90837e464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a292dc63-8d00-43c2-b322-41710fb8d8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5d037f-fdee-4f42-b0d9-05d4736e0485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ddbd25-baa1-4757-97f2-c2b37a91954b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24bd440-9598-48c8-818f-652927da4634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6948046d-f2d8-4a54-98aa-75d36a98a8d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8f8ab6-55ac-459b-b3cb-f5830c675901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd6f763f-17dd-44b1-832a-c71f32858698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07671f35-8112-47a2-9ce0-08a469a62c9c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919321f4-baa5-42ec-a8c2-e29541a00f9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc4e0a9d-22e2-42f1-950c-bc1941ac3d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7b655f-30fd-43a3-bb75-16a647930f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87acd815-6e91-448c-beab-22935daba026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c47ffc-ea34-4357-a106-c26108677e54",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027666b3-d671-4505-b86f-34eeceb6f712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9de0d1e6-be11-4b32-a6aa-698e42f44485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfcce61-a87a-4b24-b21a-c01bc3d00ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbebe529-5333-4a7c-8a17-3608da82e389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbc61a3-809d-4986-9355-1d51910db97a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cdd728-91ec-4749-8c25-7abc146de08e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35fadb00-325a-4f45-9d30-c5f37b6700ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96332021-e91b-4895-ad7c-9f88238c08c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba900849-8cfd-4d66-8332-8810eb53bd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ee998c-3ef9-4851-a9f7-e3b0fa30bd23",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a1ad9c-97ed-4f93-aa31-2c26de969190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67a8bfc9-da89-41b4-ae01-7c641445b433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd28a559-865b-4431-9926-fe9794206cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e23e639-f223-4507-bc2c-ed7d4077acb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3015281c-3dec-4ab9-a963-9de22fb8c22e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad193268-556f-4911-9909-2f050ceb2eb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21396932-f8fd-4c44-b1ef-2807c297084c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b3759b-7aa4-4437-8ddc-68586236921f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215cc0d3-4fc7-4e4c-a8e5-fb5624b2f7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e557508b-9b4a-4057-b68f-51da69ec1339",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cb868f-2248-40b2-8ca8-90abf17a15e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69ab0ad9-2b28-4b3e-b154-7d7baf321751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba79af1-0bdd-4476-95df-cbde92f0bd1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238fa07f-fd20-485a-9075-fa62655e3dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e1c5e6-a2ef-4ae8-be3f-42a725a8bab8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6760c425-2a4d-45fa-9786-34546ce0c270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a207717-2fee-4242-9ec5-3f37599b6691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deea558d-6cdd-4e19-b15a-974e0cd8bbec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e66262a-d293-475d-a156-5d9e83a6a735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee4f04b-57ad-4020-80eb-685ccc2320ec",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b940ab5b-d40a-428a-bf50-291e1af23566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "406d6be8-9a5e-44d4-b1bd-d333f12b1d4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a51048-04ec-4c9b-9767-5610b0171609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157c108c-1b73-476f-be04-a700fab94202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5999214-7ebc-41ad-ad10-336b0471fbb8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7495e31-121b-42d3-a3a2-87c554ddc401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a532626-93c7-45dd-aa63-a6d306e9fc24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01529be-d3dc-4a37-89b5-b89053ab0a0e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0816d0cd-5a5b-49f0-a249-62d3f0f44e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1894d63-c1ac-41da-a1e8-18ed5559cd79",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94035714-ffc6-4966-baf0-fe67d2ddad26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c82753c3-a145-4cd2-9f5c-f7d8a4306d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15451cfe-0779-43be-b041-e0e1f50322fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722c7071-007e-49b3-9d7e-53c5d08549ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57506b8e-23fe-4ff4-ac9f-16bd291ddf10",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c07182d-90d5-4583-936c-8292977f4d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c11b92e-78c1-4e4d-9210-2ddd21f7266e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc949da-094b-4b29-95bd-cc78be313ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c581ea-a901-474c-9e9a-88314dc72a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30809acd-d491-4392-92a6-68f24ce042b0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3333a4ae-7ef5-4da9-8f31-7391d1875f90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23d745d3-7c3c-41f5-ae8d-78e0bc923a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ad2599-4954-47c1-8033-ede67e0f08ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1afe4cb5-8765-4a98-b42c-d627bb5dfb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e0655d-c4ab-41c6-bd83-d6c3cf3d8bbe",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a376c573-05bf-4eb3-b1e6-59017960d8b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f50ab4a7-d49f-413a-b2dc-9bcd634271b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5549d4-0af9-4840-8adf-2fc6e11728a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e84be6-3400-48ad-98ca-45986179fc57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1394761b-3059-48a4-b473-7202baaf6b9f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baacc2ab-d5b0-4f00-a244-11289890ed96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e2dd07-baf5-4bf5-b8f7-14fc3f378a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7102291-c409-42ca-9b06-e9c24c8eac73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2068cef-aa7b-4e16-b102-85f7b600a546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023719dc-0076-4253-be93-f4c734c65082",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3965b29b-c4a8-4cbc-94eb-5112a913e47c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5257033-500c-4faf-a394-9bd4c5540df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2287a4-520e-45e6-95c4-cebb246f9c54",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32dfb50c-1f94-49e0-9c09-3088b6090579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8eb7ce-1fa6-437b-88c9-d5a51bc1bca1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05f8636-3b15-49dd-956f-f83bb42927d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b700c69b-bd06-477f-aed1-0b52c7423659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389117e3-3594-4b21-9628-41ed8f65f74d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ff33b6-e809-4575-b876-b8ff029c0040"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "855029f6-04a3-43d0-86d7-8aa0922350c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06321ee0-cc45-4518-b33f-37a9749cd800"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3696bf41-29b9-46ff-85f3-401a73cc82c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48c6ac67-83fa-441d-82e3-3573c3aee17f"
                    }
                  }
                ]
              },
              {
                "id": "eea37cba-2bdd-4f27-98a9-aa8cc52332b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6fcbf085-1e2f-4a22-a9ce-7d58adb5f1c0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214ef8c4-6962-4474-9c68-5226d31ebdc5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ac792563-04a9-4b25-8912-d492dc4cdfe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfe6e08-89ab-45b1-b9f4-419c219c73d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3e5b761-db91-44f6-aeb0-921f1aa20cee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2614ab8-4b67-4fbc-b71c-43fa5d9b7cbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ab06ea7-99fa-4256-b534-0030f8f4e747"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eadc88dd-953f-41fe-9061-28d0ca3dd1d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3595dd6-6bfe-4840-b886-02b607d9a052"
                    }
                  }
                ]
              },
              {
                "id": "3f3c3a11-e6e9-49a8-96bd-c67568d3c504",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "23eb1ca9-c56e-40fb-b1cd-29052f5bdd8c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b427b36-fade-4421-b5b8-c880eccc073f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1cdc5334-917c-4a2c-bae9-442a061bf111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe423ef6-cfd4-401d-bb05-e445c22bcbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce880f01-c8c7-4034-9950-94c990a81af3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "27d51a08-2a1f-414d-99f7-e0b05d852e41",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2ac836db-8603-43ae-aec9-ba0a00694757",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f99b632-b564-4651-ae4e-88dcb2e09426",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4b14d212-d0d3-4a24-96cc-e7e5a865e49c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66f8f5fc-dac8-4d0f-8298-298f5e96cd93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "072e7f87-2214-4e97-a1af-a802c94823bb"
                    }
                  }
                ]
              },
              {
                "id": "d69e8ac9-581d-4bf9-8d23-2abc95bafd73",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13fe6617-805d-4a58-86de-de14d59e9e5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9ba42069-2e72-4839-8b88-29a19eb039ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4c619dd-f45b-452d-b69f-ddc23d5689c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70f61b4d-53b9-4a57-9c46-c332e1cdb6c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b18d0d04-c17a-48cc-abe0-70a4a4a77447",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e66672f0-ce5f-4ac5-b44e-2c4ce852ea32"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da3b0053-49d8-4129-bff9-cb8856526840",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da2ad2a1-8cd6-42ee-86c4-0501834702b4"
            }
          }
        ]
      },
      {
        "id": "73fc43b4-8409-450a-aab1-e341ceded1a2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5b12e45c-2b4a-4595-b591-1d23ef05474e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27a6e2d9-5ea2-4d27-8f70-f1570068d049",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "656ef1a7-dd58-4cd8-976e-3842129ea12a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e2769c-6fa4-4bb0-be48-1beb9a93fb8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "52ed4aac-bd4a-4585-ae32-4b0e2c8c1b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc19990d-14be-4ea1-8e3c-f4ceb5b5be75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2bdbc09-b5d9-4e0e-ab8c-51d409002554"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0894b703-cc0c-472f-a9c4-1ca0e7d9e192",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80c4811d-5758-4c68-98b6-c39ce83e7901"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96417e2a-d297-44dd-9251-fcc779c7b3e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "206134de-7cd7-4212-aab9-8fa0f5fd1af9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bfb24f5-5064-4c29-b190-865a09a4f1f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "23b56207-ae06-4c0f-bb36-fc1bd15b2be1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c69216f-702d-400e-a6dc-ee4bf0159b39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e388fdad-1abd-44c8-93be-a9d0fe7944cd"
            }
          }
        ]
      },
      {
        "id": "be11e83e-1054-4c11-a866-e782a6b9e387",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a6b7dc25-24c1-4aac-a81b-a565c6db3fd2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04c68e21-d1c8-456a-b2d0-277b2d416be5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70bb7155-a937-453e-8a76-6e5e10433671",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc111db-df09-4671-8928-2b9f56869fe2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62ebf831-d20d-4837-b48c-0ccca4519567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc0efe2-bd29-4d00-8efd-4c66272019d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a5eb774-0f1e-4cfa-98dd-66bab6e98454"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "783edefe-ecd6-49a0-a68b-10f56198a437",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab99f81b-2c23-4697-8727-01eb1851d60f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "432b9ea2-9038-431a-b176-dcf87a80ca65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68c8d79e-e012-464b-b206-e4495293befd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d5eda2b-7377-4224-ac06-cc1df4a52d18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d775abe4-00f6-4fe7-9af0-00e9c8a0439e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c31b119d-584b-4d04-9fca-f3b8a714f637",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bf52baa-af09-4d16-b082-41274855001a"
            }
          }
        ]
      },
      {
        "id": "d7fe0558-cc49-4daf-b34b-02986f70fc90",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "99ba050a-27b6-4b88-a931-916d7ed691e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "351be09b-bf77-4fe0-ab9b-5fb49a3074c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92223c04-c260-4489-b081-5e65e6dea6c7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524db197-a89e-425b-9edb-a3441af05fd8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4db04249-cfa1-4891-a837-f2e68c2986b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68f144c-7d0a-411c-807f-223831926898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eabfd0d1-bd3b-4616-8a7a-db72bd361990"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08009cb3-063f-4d50-bc08-d122026cb4fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8db518e8-1fac-4ca4-8ff2-460d48e45aa2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c208178-a4a0-4dde-8546-ce4015d5eaea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bcd828f-8e07-40c4-b1e8-4c38b488af0b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d21d78d-ce3a-45ee-ac3e-c420102e53bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a2bc158-a078-4fbd-80c9-77cd3ee1da42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40ea01af-cb17-49d3-9061-8a5953572993",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c3d6648-9748-4eae-a745-6489803341a7"
            }
          }
        ]
      },
      {
        "id": "a2e63b30-594c-4c6c-84e0-c71eb61a539f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee5bfb25-b46f-4db6-8b52-0fc8761b8592",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d093f82a-e063-455b-83de-831366199ef7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "47d86d00-893a-4276-a6fe-6462f2ec1a70",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27b5cf6f-242a-488b-90e7-ff488dc5f7bd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "573a68fe-2926-4f3f-9888-51fed8e0fac9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 570
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 1749.183951770437,
      "responseMin": 12,
      "responseMax": 40461,
      "responseSd": 7632.776412973482,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696206845107,
      "completed": 1696207840524
    },
    "executions": [
      {
        "id": "5927f91a-2402-4898-8385-ff5100eef6c0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1e139251-a5de-451a-9ca9-5c564ef56af2",
          "httpRequestId": "c0a9e745-8ba8-4bd0-ad68-2ff532ba8fa7"
        },
        "item": {
          "id": "5927f91a-2402-4898-8385-ff5100eef6c0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3119c9f2-50c6-46b6-88a1-e52ace2f79bd",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "740a2a0e-bd3e-4fb3-9b0f-3875c7423608",
        "cursor": {
          "ref": "fedbad21-62f5-4474-a7ae-7b782d6dcb81",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bd4bdca9-3502-49f8-9e50-cc81aebc1dfa"
        },
        "item": {
          "id": "740a2a0e-bd3e-4fb3-9b0f-3875c7423608",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bc734311-36f1-4284-b49d-e057f5dd5b9d",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "f7b01097-2242-44bb-851e-900213bd98f3",
        "cursor": {
          "ref": "80182d2b-b9d8-4bce-8db4-25a612660321",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cc0a0c9c-db12-4959-a3df-c58be29388b1"
        },
        "item": {
          "id": "f7b01097-2242-44bb-851e-900213bd98f3",
          "name": "did_json"
        },
        "response": {
          "id": "03702f29-763a-4403-9f32-8e6336f7be67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 409,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "26b9ab72-caa5-4198-b1f2-55413b51140b",
        "cursor": {
          "ref": "b1d94f21-01d4-4494-a044-9c5dd4518fa3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c5253dcf-4314-4861-84b3-7ba0a02b8110"
        },
        "item": {
          "id": "26b9ab72-caa5-4198-b1f2-55413b51140b",
          "name": "did:invalid"
        },
        "response": {
          "id": "8639c6db-e6b4-4f0b-b95b-998b5e947f77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "26b9ab72-caa5-4198-b1f2-55413b51140b",
        "cursor": {
          "ref": "b1d94f21-01d4-4494-a044-9c5dd4518fa3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c5253dcf-4314-4861-84b3-7ba0a02b8110"
        },
        "item": {
          "id": "26b9ab72-caa5-4198-b1f2-55413b51140b",
          "name": "did:invalid"
        },
        "response": {
          "id": "8639c6db-e6b4-4f0b-b95b-998b5e947f77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "905488e3-e003-4a71-9704-0cbd7eb5ad72",
        "cursor": {
          "ref": "881cae03-601f-483a-b19b-3bfe87a48f4f",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b076352e-07e6-4699-82e2-c333352423d0"
        },
        "item": {
          "id": "905488e3-e003-4a71-9704-0cbd7eb5ad72",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "58b4f38d-d47d-4956-9906-1693e6adde16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "905488e3-e003-4a71-9704-0cbd7eb5ad72",
        "cursor": {
          "ref": "881cae03-601f-483a-b19b-3bfe87a48f4f",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b076352e-07e6-4699-82e2-c333352423d0"
        },
        "item": {
          "id": "905488e3-e003-4a71-9704-0cbd7eb5ad72",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "58b4f38d-d47d-4956-9906-1693e6adde16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "6fa5f115-170f-4506-a145-22ca09751248",
        "cursor": {
          "ref": "8492dc14-d28d-4cf8-ae05-c2fd1c33c675",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b82cdf1b-1138-4ca6-956f-5d0fa6aef39c"
        },
        "item": {
          "id": "6fa5f115-170f-4506-a145-22ca09751248",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b0b52c3c-676d-4c81-a9d6-120cf46acfda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "6fa5f115-170f-4506-a145-22ca09751248",
        "cursor": {
          "ref": "8492dc14-d28d-4cf8-ae05-c2fd1c33c675",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b82cdf1b-1138-4ca6-956f-5d0fa6aef39c"
        },
        "item": {
          "id": "6fa5f115-170f-4506-a145-22ca09751248",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b0b52c3c-676d-4c81-a9d6-120cf46acfda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "fc407aad-d711-4944-ab59-7072ac603c62",
        "cursor": {
          "ref": "a0bc109b-2542-4997-a1de-afaa611a1549",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8b848e13-af63-4cf3-b6a1-5498c3e06639"
        },
        "item": {
          "id": "fc407aad-d711-4944-ab59-7072ac603c62",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "64fbe9b1-8535-47d4-a60b-908c5eeeefbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32215,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "fc407aad-d711-4944-ab59-7072ac603c62",
        "cursor": {
          "ref": "a0bc109b-2542-4997-a1de-afaa611a1549",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8b848e13-af63-4cf3-b6a1-5498c3e06639"
        },
        "item": {
          "id": "fc407aad-d711-4944-ab59-7072ac603c62",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "64fbe9b1-8535-47d4-a60b-908c5eeeefbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32215,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "09ff103d-12e7-43b1-8823-e5f9fe7cc71a",
        "cursor": {
          "ref": "1cf6481d-e547-4051-b6c1-1f6c44864ccb",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "843f0e92-e4bf-4689-8712-c97c7d21c1c9"
        },
        "item": {
          "id": "09ff103d-12e7-43b1-8823-e5f9fe7cc71a",
          "name": "identifiers"
        },
        "response": {
          "id": "80ce50a8-65fb-4888-998e-1bdd1c117808",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "09ff103d-12e7-43b1-8823-e5f9fe7cc71a",
        "cursor": {
          "ref": "1cf6481d-e547-4051-b6c1-1f6c44864ccb",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "843f0e92-e4bf-4689-8712-c97c7d21c1c9"
        },
        "item": {
          "id": "09ff103d-12e7-43b1-8823-e5f9fe7cc71a",
          "name": "identifiers"
        },
        "response": {
          "id": "80ce50a8-65fb-4888-998e-1bdd1c117808",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3c9e99c4-218c-43e4-ac0f-96ddc434eb60",
        "cursor": {
          "ref": "62df8a69-096e-4740-a533-4cd24db239ef",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "43c79356-9946-4192-a2c1-8cc965eb8be0"
        },
        "item": {
          "id": "3c9e99c4-218c-43e4-ac0f-96ddc434eb60",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "35eb9661-05ab-4799-a2da-96a34fa52b7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "3c9e99c4-218c-43e4-ac0f-96ddc434eb60",
        "cursor": {
          "ref": "62df8a69-096e-4740-a533-4cd24db239ef",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "43c79356-9946-4192-a2c1-8cc965eb8be0"
        },
        "item": {
          "id": "3c9e99c4-218c-43e4-ac0f-96ddc434eb60",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "35eb9661-05ab-4799-a2da-96a34fa52b7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "21dad500-af42-47f6-a9b5-dce4aa81c5bb",
        "cursor": {
          "ref": "385a573e-f045-4567-893c-7b5058fd9e4c",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "08c0c2eb-3594-43f3-8383-db9610398d42"
        },
        "item": {
          "id": "21dad500-af42-47f6-a9b5-dce4aa81c5bb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c3d82e7f-1116-4c68-90e4-93f4c1d958bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "21dad500-af42-47f6-a9b5-dce4aa81c5bb",
        "cursor": {
          "ref": "385a573e-f045-4567-893c-7b5058fd9e4c",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "08c0c2eb-3594-43f3-8383-db9610398d42"
        },
        "item": {
          "id": "21dad500-af42-47f6-a9b5-dce4aa81c5bb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c3d82e7f-1116-4c68-90e4-93f4c1d958bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "6e8f1c17-e1df-491d-a108-764613b501e5",
        "cursor": {
          "ref": "f1ec9d99-60f4-48b6-b711-193987ad3543",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "51c39382-3af3-418a-b66f-32da1375ec78"
        },
        "item": {
          "id": "6e8f1c17-e1df-491d-a108-764613b501e5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "701db750-1e66-4764-93fb-e3718e6dfef4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "6e8f1c17-e1df-491d-a108-764613b501e5",
        "cursor": {
          "ref": "f1ec9d99-60f4-48b6-b711-193987ad3543",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "51c39382-3af3-418a-b66f-32da1375ec78"
        },
        "item": {
          "id": "6e8f1c17-e1df-491d-a108-764613b501e5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "701db750-1e66-4764-93fb-e3718e6dfef4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "671b0ead-fc9b-4e73-a487-bb819e39c9c3",
        "cursor": {
          "ref": "7bc2d2b3-761b-4cdc-83a4-c53122171090",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "eccdcd21-c5f2-4568-aa7a-c1cc39cf18d7"
        },
        "item": {
          "id": "671b0ead-fc9b-4e73-a487-bb819e39c9c3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6ad4f138-b756-4e25-b9aa-7862d8be4269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "671b0ead-fc9b-4e73-a487-bb819e39c9c3",
        "cursor": {
          "ref": "7bc2d2b3-761b-4cdc-83a4-c53122171090",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "eccdcd21-c5f2-4568-aa7a-c1cc39cf18d7"
        },
        "item": {
          "id": "671b0ead-fc9b-4e73-a487-bb819e39c9c3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6ad4f138-b756-4e25-b9aa-7862d8be4269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e59be44f-41fa-4472-8c9b-cf61b657a0ef",
        "cursor": {
          "ref": "d016d1e3-dcc6-4aae-8c8f-44eeb6ebe02a",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b28ed9af-aba2-442c-8446-bfa7a72490df"
        },
        "item": {
          "id": "e59be44f-41fa-4472-8c9b-cf61b657a0ef",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "368e7f92-8a81-462b-b27d-7915024486ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "e59be44f-41fa-4472-8c9b-cf61b657a0ef",
        "cursor": {
          "ref": "d016d1e3-dcc6-4aae-8c8f-44eeb6ebe02a",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b28ed9af-aba2-442c-8446-bfa7a72490df"
        },
        "item": {
          "id": "e59be44f-41fa-4472-8c9b-cf61b657a0ef",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "368e7f92-8a81-462b-b27d-7915024486ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "0e4ae5c5-8762-47d2-ba7e-d0a9679cc62f",
        "cursor": {
          "ref": "89df406e-e81a-42b9-b155-032eca5b3050",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4d2e836a-0924-4ea5-9a49-65e31f8a6e43"
        },
        "item": {
          "id": "0e4ae5c5-8762-47d2-ba7e-d0a9679cc62f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7d738d46-b76b-44fc-86d0-f40e2f637dde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "0e4ae5c5-8762-47d2-ba7e-d0a9679cc62f",
        "cursor": {
          "ref": "89df406e-e81a-42b9-b155-032eca5b3050",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4d2e836a-0924-4ea5-9a49-65e31f8a6e43"
        },
        "item": {
          "id": "0e4ae5c5-8762-47d2-ba7e-d0a9679cc62f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7d738d46-b76b-44fc-86d0-f40e2f637dde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "6a76e360-0f1e-4058-afa7-f5ba7e854a2a",
        "cursor": {
          "ref": "707d06cb-b4d9-4211-8e68-6343a4034d7a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8d68fb28-ee98-48b1-8b16-bdbd873b84dc"
        },
        "item": {
          "id": "6a76e360-0f1e-4058-afa7-f5ba7e854a2a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8ffd570b-8f2f-4420-a862-6f0604e2e27f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "6a76e360-0f1e-4058-afa7-f5ba7e854a2a",
        "cursor": {
          "ref": "707d06cb-b4d9-4211-8e68-6343a4034d7a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8d68fb28-ee98-48b1-8b16-bdbd873b84dc"
        },
        "item": {
          "id": "6a76e360-0f1e-4058-afa7-f5ba7e854a2a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8ffd570b-8f2f-4420-a862-6f0604e2e27f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "037e18e2-308a-48b8-ad3e-1aaf5693733a",
        "cursor": {
          "ref": "98a92f13-dc6e-474a-a1b6-20cb2b58684e",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c8161db0-fad2-4cca-8438-fdeb378fad35"
        },
        "item": {
          "id": "037e18e2-308a-48b8-ad3e-1aaf5693733a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "df1f61af-e723-4591-a53c-d0d58f5b3487",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "037e18e2-308a-48b8-ad3e-1aaf5693733a",
        "cursor": {
          "ref": "98a92f13-dc6e-474a-a1b6-20cb2b58684e",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c8161db0-fad2-4cca-8438-fdeb378fad35"
        },
        "item": {
          "id": "037e18e2-308a-48b8-ad3e-1aaf5693733a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "df1f61af-e723-4591-a53c-d0d58f5b3487",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d68be524-3a6c-4c15-a263-55c8b82e7809",
        "cursor": {
          "ref": "5f5a9e78-6907-4750-be97-45a096671900",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5bdc7c62-071b-4ec0-932e-abcbc2b81542"
        },
        "item": {
          "id": "d68be524-3a6c-4c15-a263-55c8b82e7809",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "094b3f23-2a2f-4a82-9fe1-17acf3697003",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37321,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d68be524-3a6c-4c15-a263-55c8b82e7809",
        "cursor": {
          "ref": "5f5a9e78-6907-4750-be97-45a096671900",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5bdc7c62-071b-4ec0-932e-abcbc2b81542"
        },
        "item": {
          "id": "d68be524-3a6c-4c15-a263-55c8b82e7809",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "094b3f23-2a2f-4a82-9fe1-17acf3697003",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37321,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "57feb0c5-279c-4318-b82d-4fe9146fd305",
        "cursor": {
          "ref": "31b92158-0ceb-4284-9ca6-f4981f184fec",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "26003f7b-854e-41d0-ae7a-500b35e016e7"
        },
        "item": {
          "id": "57feb0c5-279c-4318-b82d-4fe9146fd305",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2a77c51a-859c-44cb-ac5f-7db004964abe",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37338,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "57feb0c5-279c-4318-b82d-4fe9146fd305",
        "cursor": {
          "ref": "31b92158-0ceb-4284-9ca6-f4981f184fec",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "26003f7b-854e-41d0-ae7a-500b35e016e7"
        },
        "item": {
          "id": "57feb0c5-279c-4318-b82d-4fe9146fd305",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2a77c51a-859c-44cb-ac5f-7db004964abe",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37338,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "ab8f13ad-03b1-4ea2-8f19-c96eba4f00fb",
        "cursor": {
          "ref": "014ea617-cc42-499b-9884-be5e5584876a",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3c795b7a-ca5f-4b98-900a-0e07eeb0af73"
        },
        "item": {
          "id": "ab8f13ad-03b1-4ea2-8f19-c96eba4f00fb",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "984a50f6-64f9-4d52-b189-403ebaaab67d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ab8f13ad-03b1-4ea2-8f19-c96eba4f00fb",
        "cursor": {
          "ref": "014ea617-cc42-499b-9884-be5e5584876a",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3c795b7a-ca5f-4b98-900a-0e07eeb0af73"
        },
        "item": {
          "id": "ab8f13ad-03b1-4ea2-8f19-c96eba4f00fb",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "984a50f6-64f9-4d52-b189-403ebaaab67d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "2970618f-ac48-43ea-b2cf-fa236874f37d",
        "cursor": {
          "ref": "a8cb528a-6253-4280-a70c-160c4be72a90",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dbe21fe8-1106-4f1f-98ad-53d75b18d91b"
        },
        "item": {
          "id": "2970618f-ac48-43ea-b2cf-fa236874f37d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7b13877d-7f3f-4657-8133-d5572055f23e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2970618f-ac48-43ea-b2cf-fa236874f37d",
        "cursor": {
          "ref": "a8cb528a-6253-4280-a70c-160c4be72a90",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dbe21fe8-1106-4f1f-98ad-53d75b18d91b"
        },
        "item": {
          "id": "2970618f-ac48-43ea-b2cf-fa236874f37d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7b13877d-7f3f-4657-8133-d5572055f23e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "d57641f1-af36-4409-8d32-fd815b59e27c",
        "cursor": {
          "ref": "e4fc8c4e-30b1-4ce3-808b-429065ad12e5",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d28135a9-b756-4c62-86c4-0973df71bc7d"
        },
        "item": {
          "id": "d57641f1-af36-4409-8d32-fd815b59e27c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d9b741a1-ff15-45de-8634-863967bf2c15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d57641f1-af36-4409-8d32-fd815b59e27c",
        "cursor": {
          "ref": "e4fc8c4e-30b1-4ce3-808b-429065ad12e5",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d28135a9-b756-4c62-86c4-0973df71bc7d"
        },
        "item": {
          "id": "d57641f1-af36-4409-8d32-fd815b59e27c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d9b741a1-ff15-45de-8634-863967bf2c15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "68f6be94-4a6a-4a8a-bf50-a902755fcfd1",
        "cursor": {
          "ref": "0bd6564d-85ae-4d32-a57c-5ec6b1dc550a",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f0755fc2-2dbd-4667-b8a4-0001a258f90c"
        },
        "item": {
          "id": "68f6be94-4a6a-4a8a-bf50-a902755fcfd1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f1e26cdd-da13-4225-bda0-c277c1cbb57d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "68f6be94-4a6a-4a8a-bf50-a902755fcfd1",
        "cursor": {
          "ref": "0bd6564d-85ae-4d32-a57c-5ec6b1dc550a",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f0755fc2-2dbd-4667-b8a4-0001a258f90c"
        },
        "item": {
          "id": "68f6be94-4a6a-4a8a-bf50-a902755fcfd1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f1e26cdd-da13-4225-bda0-c277c1cbb57d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "0712f871-4cbf-4cd4-84a1-b502ab70eaab",
        "cursor": {
          "ref": "6472de30-0365-4979-878b-4ac9d33cf2d2",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "643d2257-b588-4eef-990c-537bfae0bc54"
        },
        "item": {
          "id": "0712f871-4cbf-4cd4-84a1-b502ab70eaab",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cdb39293-3b0f-45fd-b469-149ecc6dddf8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0712f871-4cbf-4cd4-84a1-b502ab70eaab",
        "cursor": {
          "ref": "6472de30-0365-4979-878b-4ac9d33cf2d2",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "643d2257-b588-4eef-990c-537bfae0bc54"
        },
        "item": {
          "id": "0712f871-4cbf-4cd4-84a1-b502ab70eaab",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cdb39293-3b0f-45fd-b469-149ecc6dddf8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d8c255c3-7bc7-4442-9ab0-706cf3aa0182",
        "cursor": {
          "ref": "e1996f75-7279-48a0-a4a1-1dc7891ec786",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ae899625-1d5e-4cf2-b021-b13bb4d251a5"
        },
        "item": {
          "id": "d8c255c3-7bc7-4442-9ab0-706cf3aa0182",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1a1ca11c-694a-4ea4-95d4-c2d9acda4370",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 38293,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d8c255c3-7bc7-4442-9ab0-706cf3aa0182",
        "cursor": {
          "ref": "e1996f75-7279-48a0-a4a1-1dc7891ec786",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ae899625-1d5e-4cf2-b021-b13bb4d251a5"
        },
        "item": {
          "id": "d8c255c3-7bc7-4442-9ab0-706cf3aa0182",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1a1ca11c-694a-4ea4-95d4-c2d9acda4370",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 38293,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "0abe0aee-8cbd-4082-8b90-e1f6a066bf3f",
        "cursor": {
          "ref": "56c3c4ad-7f78-43d3-97ac-24376e5e103c",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7c61d492-9c5e-4e32-a991-71cd8483ce31"
        },
        "item": {
          "id": "0abe0aee-8cbd-4082-8b90-e1f6a066bf3f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0b4ae011-67ed-48a0-a5f9-d626e44be6fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0abe0aee-8cbd-4082-8b90-e1f6a066bf3f",
        "cursor": {
          "ref": "56c3c4ad-7f78-43d3-97ac-24376e5e103c",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7c61d492-9c5e-4e32-a991-71cd8483ce31"
        },
        "item": {
          "id": "0abe0aee-8cbd-4082-8b90-e1f6a066bf3f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0b4ae011-67ed-48a0-a5f9-d626e44be6fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "c8c16225-1d31-440c-9f69-4e49579d6943",
        "cursor": {
          "ref": "29b55682-8c24-4dc3-ae1c-fbf7f45f718a",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "733a1d2c-2291-47b4-aba2-f211807862e6"
        },
        "item": {
          "id": "c8c16225-1d31-440c-9f69-4e49579d6943",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b85f4cf4-b36e-4f35-be78-a77a2b072f8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c8c16225-1d31-440c-9f69-4e49579d6943",
        "cursor": {
          "ref": "29b55682-8c24-4dc3-ae1c-fbf7f45f718a",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "733a1d2c-2291-47b4-aba2-f211807862e6"
        },
        "item": {
          "id": "c8c16225-1d31-440c-9f69-4e49579d6943",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b85f4cf4-b36e-4f35-be78-a77a2b072f8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "8150bfeb-284e-4060-abc7-c1bf28bb763f",
        "cursor": {
          "ref": "3a49e9dd-8a23-4c15-b065-c3031fc33fcc",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "11cb79d0-6f8f-4ef6-b734-04ad8269c670"
        },
        "item": {
          "id": "8150bfeb-284e-4060-abc7-c1bf28bb763f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a344285d-1731-43ba-9430-188fd2f6b9f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "8150bfeb-284e-4060-abc7-c1bf28bb763f",
        "cursor": {
          "ref": "3a49e9dd-8a23-4c15-b065-c3031fc33fcc",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "11cb79d0-6f8f-4ef6-b734-04ad8269c670"
        },
        "item": {
          "id": "8150bfeb-284e-4060-abc7-c1bf28bb763f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a344285d-1731-43ba-9430-188fd2f6b9f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "06c5b358-d44f-4230-9629-ef0e2c5cbfa1",
        "cursor": {
          "ref": "150bc793-f21e-47d5-bffa-19cf3236cfea",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8d9ebede-5d1a-40ee-9722-514f0295c3db"
        },
        "item": {
          "id": "06c5b358-d44f-4230-9629-ef0e2c5cbfa1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1917b9bc-4886-48c0-9b04-b112435af7a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "06c5b358-d44f-4230-9629-ef0e2c5cbfa1",
        "cursor": {
          "ref": "150bc793-f21e-47d5-bffa-19cf3236cfea",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8d9ebede-5d1a-40ee-9722-514f0295c3db"
        },
        "item": {
          "id": "06c5b358-d44f-4230-9629-ef0e2c5cbfa1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1917b9bc-4886-48c0-9b04-b112435af7a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "cf0bf855-136d-4f5f-8afd-42eecddf8842",
        "cursor": {
          "ref": "be48f3d7-5846-4327-9331-dddb8bacaf22",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8a30fbff-83e4-4fd0-abc1-3630733cc343"
        },
        "item": {
          "id": "cf0bf855-136d-4f5f-8afd-42eecddf8842",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9db6bc81-aa96-47a7-8344-d676148b5a3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "cf0bf855-136d-4f5f-8afd-42eecddf8842",
        "cursor": {
          "ref": "be48f3d7-5846-4327-9331-dddb8bacaf22",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8a30fbff-83e4-4fd0-abc1-3630733cc343"
        },
        "item": {
          "id": "cf0bf855-136d-4f5f-8afd-42eecddf8842",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9db6bc81-aa96-47a7-8344-d676148b5a3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "a76f4fee-903b-478a-86ec-8e46af4ceb5b",
        "cursor": {
          "ref": "95baf3fe-b2c2-4788-ade8-9ea43aed8833",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4d2d252e-0f3d-4ff5-9595-e2e856a85f56"
        },
        "item": {
          "id": "a76f4fee-903b-478a-86ec-8e46af4ceb5b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9694292b-bffd-45a2-8acb-05583dc44ffa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a76f4fee-903b-478a-86ec-8e46af4ceb5b",
        "cursor": {
          "ref": "95baf3fe-b2c2-4788-ade8-9ea43aed8833",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4d2d252e-0f3d-4ff5-9595-e2e856a85f56"
        },
        "item": {
          "id": "a76f4fee-903b-478a-86ec-8e46af4ceb5b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9694292b-bffd-45a2-8acb-05583dc44ffa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7ac97afd-af20-4d70-9077-05eaacdca7fd",
        "cursor": {
          "ref": "9331165b-3366-44b8-accd-61f2bc69ec54",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c2d885fd-b406-4f91-aa19-8e3edc33879f"
        },
        "item": {
          "id": "7ac97afd-af20-4d70-9077-05eaacdca7fd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2bdec756-f92e-4108-99d1-9abae358be8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "7ac97afd-af20-4d70-9077-05eaacdca7fd",
        "cursor": {
          "ref": "9331165b-3366-44b8-accd-61f2bc69ec54",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c2d885fd-b406-4f91-aa19-8e3edc33879f"
        },
        "item": {
          "id": "7ac97afd-af20-4d70-9077-05eaacdca7fd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2bdec756-f92e-4108-99d1-9abae358be8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "ae358b74-c679-4ed7-a0da-11ddbc5b673c",
        "cursor": {
          "ref": "cd02f165-9559-4922-a81a-6b01edc1a1ad",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "dd4b3847-0678-4dff-bd77-d33215f6bcdb"
        },
        "item": {
          "id": "ae358b74-c679-4ed7-a0da-11ddbc5b673c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "40eb9793-3e6a-4817-b7f1-dee7e3efcab7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "ae358b74-c679-4ed7-a0da-11ddbc5b673c",
        "cursor": {
          "ref": "cd02f165-9559-4922-a81a-6b01edc1a1ad",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "dd4b3847-0678-4dff-bd77-d33215f6bcdb"
        },
        "item": {
          "id": "ae358b74-c679-4ed7-a0da-11ddbc5b673c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "40eb9793-3e6a-4817-b7f1-dee7e3efcab7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "07ca8d1d-61f6-43bb-8175-42bfbb83fe6b",
        "cursor": {
          "ref": "8b2d5b0f-3d1c-4318-8a1f-d7739cef3a55",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7190168f-7c3f-4e11-85b2-8a4f69fe3c1e"
        },
        "item": {
          "id": "07ca8d1d-61f6-43bb-8175-42bfbb83fe6b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a0de12cc-76a5-479c-ae71-7ea5b57a405e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "07ca8d1d-61f6-43bb-8175-42bfbb83fe6b",
        "cursor": {
          "ref": "8b2d5b0f-3d1c-4318-8a1f-d7739cef3a55",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7190168f-7c3f-4e11-85b2-8a4f69fe3c1e"
        },
        "item": {
          "id": "07ca8d1d-61f6-43bb-8175-42bfbb83fe6b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a0de12cc-76a5-479c-ae71-7ea5b57a405e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "482356df-222c-4059-9d8e-f0011077bccf",
        "cursor": {
          "ref": "ee262737-f99f-409b-afb2-61a2bb24e9ed",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e900ead4-e510-4fa3-a072-e36156581c04"
        },
        "item": {
          "id": "482356df-222c-4059-9d8e-f0011077bccf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c9dd2b76-1008-4027-8057-078bc433c6da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "482356df-222c-4059-9d8e-f0011077bccf",
        "cursor": {
          "ref": "ee262737-f99f-409b-afb2-61a2bb24e9ed",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e900ead4-e510-4fa3-a072-e36156581c04"
        },
        "item": {
          "id": "482356df-222c-4059-9d8e-f0011077bccf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c9dd2b76-1008-4027-8057-078bc433c6da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d997eba2-fe80-46d9-85a6-c66dd803010f",
        "cursor": {
          "ref": "a902fda9-3cb0-42f3-b543-d3f62bd2eb0d",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9f844ebb-513c-4cab-9a1d-5192f50f31e9"
        },
        "item": {
          "id": "d997eba2-fe80-46d9-85a6-c66dd803010f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "929f4502-01c3-43ac-bf27-278fee8c3048",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 36289,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d997eba2-fe80-46d9-85a6-c66dd803010f",
        "cursor": {
          "ref": "a902fda9-3cb0-42f3-b543-d3f62bd2eb0d",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9f844ebb-513c-4cab-9a1d-5192f50f31e9"
        },
        "item": {
          "id": "d997eba2-fe80-46d9-85a6-c66dd803010f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "929f4502-01c3-43ac-bf27-278fee8c3048",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 36289,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "0d78019a-546c-4240-9759-60adbf0b23cb",
        "cursor": {
          "ref": "2d4d3ec3-5fab-4444-9a91-7b0aa081269e",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7d65c73c-5527-46e7-af42-b1dc64cd039c"
        },
        "item": {
          "id": "0d78019a-546c-4240-9759-60adbf0b23cb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a58d0484-b0ac-4608-91f8-6256fe93fde7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "0d78019a-546c-4240-9759-60adbf0b23cb",
        "cursor": {
          "ref": "2d4d3ec3-5fab-4444-9a91-7b0aa081269e",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7d65c73c-5527-46e7-af42-b1dc64cd039c"
        },
        "item": {
          "id": "0d78019a-546c-4240-9759-60adbf0b23cb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a58d0484-b0ac-4608-91f8-6256fe93fde7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e286c8a3-fc87-4f7c-8fc1-318f69e33cd4",
        "cursor": {
          "ref": "8a168aca-bef4-463d-92c0-b6417ade8178",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b11bdcfc-fccf-486f-889c-8f8e240000d2"
        },
        "item": {
          "id": "e286c8a3-fc87-4f7c-8fc1-318f69e33cd4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e57bf657-2d1a-41dc-9c32-320df0cd023c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "e286c8a3-fc87-4f7c-8fc1-318f69e33cd4",
        "cursor": {
          "ref": "8a168aca-bef4-463d-92c0-b6417ade8178",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b11bdcfc-fccf-486f-889c-8f8e240000d2"
        },
        "item": {
          "id": "e286c8a3-fc87-4f7c-8fc1-318f69e33cd4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e57bf657-2d1a-41dc-9c32-320df0cd023c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "70c94de6-7b17-4f55-aba7-5ab114670d65",
        "cursor": {
          "ref": "7ac49c7e-3409-4715-940f-1f8d7a18d11b",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "193b272c-c2b1-46b7-80f3-f98296fe0d84"
        },
        "item": {
          "id": "70c94de6-7b17-4f55-aba7-5ab114670d65",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e5e2be0f-29c6-4536-973f-4d19335cf72b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "70c94de6-7b17-4f55-aba7-5ab114670d65",
        "cursor": {
          "ref": "7ac49c7e-3409-4715-940f-1f8d7a18d11b",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "193b272c-c2b1-46b7-80f3-f98296fe0d84"
        },
        "item": {
          "id": "70c94de6-7b17-4f55-aba7-5ab114670d65",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e5e2be0f-29c6-4536-973f-4d19335cf72b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "4e16afa2-475e-41ba-a165-2f256eeebb04",
        "cursor": {
          "ref": "1927bb45-d795-41c7-9ed5-43ab351269e5",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5b78426a-190b-4b32-8cfa-f1e5b47f7aa0"
        },
        "item": {
          "id": "4e16afa2-475e-41ba-a165-2f256eeebb04",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "92b2f5a3-f8c8-4399-9619-7392a3555216",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37284,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4e16afa2-475e-41ba-a165-2f256eeebb04",
        "cursor": {
          "ref": "1927bb45-d795-41c7-9ed5-43ab351269e5",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5b78426a-190b-4b32-8cfa-f1e5b47f7aa0"
        },
        "item": {
          "id": "4e16afa2-475e-41ba-a165-2f256eeebb04",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "92b2f5a3-f8c8-4399-9619-7392a3555216",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37284,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f01c6f4a-580c-403f-9d35-ed7b1ce3e018",
        "cursor": {
          "ref": "393b9f93-3751-4b58-aa5f-3eee9d11e007",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5080c8c8-6e6c-4c8b-b982-b0d683ae5c72"
        },
        "item": {
          "id": "f01c6f4a-580c-403f-9d35-ed7b1ce3e018",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1f2c0c75-ee28-4adc-baea-afd003e80bcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f01c6f4a-580c-403f-9d35-ed7b1ce3e018",
        "cursor": {
          "ref": "393b9f93-3751-4b58-aa5f-3eee9d11e007",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5080c8c8-6e6c-4c8b-b982-b0d683ae5c72"
        },
        "item": {
          "id": "f01c6f4a-580c-403f-9d35-ed7b1ce3e018",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1f2c0c75-ee28-4adc-baea-afd003e80bcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8241fac6-0e61-4f45-8f13-6a917faf31e4",
        "cursor": {
          "ref": "cbf9ceb8-f97a-418f-bc18-7812b11fb701",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "60a52518-6612-4eb3-8e0f-ba0c07b9149e"
        },
        "item": {
          "id": "8241fac6-0e61-4f45-8f13-6a917faf31e4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d9e1548d-ab0c-424f-a5cc-e0bb5fdedf86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8241fac6-0e61-4f45-8f13-6a917faf31e4",
        "cursor": {
          "ref": "cbf9ceb8-f97a-418f-bc18-7812b11fb701",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "60a52518-6612-4eb3-8e0f-ba0c07b9149e"
        },
        "item": {
          "id": "8241fac6-0e61-4f45-8f13-6a917faf31e4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d9e1548d-ab0c-424f-a5cc-e0bb5fdedf86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9e5f4b79-5ede-4ede-a318-a752552e74d4",
        "cursor": {
          "ref": "ceb59c34-1cc3-4b21-9303-180ce382b6d8",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "63bb3a0c-ded1-41e1-8cf5-bff68b0ed7da"
        },
        "item": {
          "id": "9e5f4b79-5ede-4ede-a318-a752552e74d4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "65a0cf0a-f941-49d2-8b2a-81f3a8773cec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "9e5f4b79-5ede-4ede-a318-a752552e74d4",
        "cursor": {
          "ref": "ceb59c34-1cc3-4b21-9303-180ce382b6d8",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "63bb3a0c-ded1-41e1-8cf5-bff68b0ed7da"
        },
        "item": {
          "id": "9e5f4b79-5ede-4ede-a318-a752552e74d4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "65a0cf0a-f941-49d2-8b2a-81f3a8773cec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "6fb134dc-e066-43cd-afb4-2329bca45219",
        "cursor": {
          "ref": "36c54cae-4ba3-428d-a1dd-d2d90c5146eb",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f5c62d68-45e1-4632-b702-c90eb287b409"
        },
        "item": {
          "id": "6fb134dc-e066-43cd-afb4-2329bca45219",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "75307eb7-ec76-44d6-984c-92eaac9855fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6fb134dc-e066-43cd-afb4-2329bca45219",
        "cursor": {
          "ref": "36c54cae-4ba3-428d-a1dd-d2d90c5146eb",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f5c62d68-45e1-4632-b702-c90eb287b409"
        },
        "item": {
          "id": "6fb134dc-e066-43cd-afb4-2329bca45219",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "75307eb7-ec76-44d6-984c-92eaac9855fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8b0da63f-5f6f-404b-b424-78b2351410db",
        "cursor": {
          "ref": "e1c16116-e493-41a9-8077-41fff3a5a113",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aad02e3b-11c3-4fa2-9e6b-7cbcf95da8f6"
        },
        "item": {
          "id": "8b0da63f-5f6f-404b-b424-78b2351410db",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "52bd917c-6c43-4313-b393-ae006340864c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8b0da63f-5f6f-404b-b424-78b2351410db",
        "cursor": {
          "ref": "e1c16116-e493-41a9-8077-41fff3a5a113",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aad02e3b-11c3-4fa2-9e6b-7cbcf95da8f6"
        },
        "item": {
          "id": "8b0da63f-5f6f-404b-b424-78b2351410db",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "52bd917c-6c43-4313-b393-ae006340864c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "31429493-3c0e-4520-86c2-d1935384ab02",
        "cursor": {
          "ref": "5d06db9c-19f0-45b0-9266-d7df9f255c0f",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ef6fc3b9-220c-4753-a775-5cf314400808"
        },
        "item": {
          "id": "31429493-3c0e-4520-86c2-d1935384ab02",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "76875cc6-1687-4ac0-96ec-c95347874fd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "31429493-3c0e-4520-86c2-d1935384ab02",
        "cursor": {
          "ref": "5d06db9c-19f0-45b0-9266-d7df9f255c0f",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ef6fc3b9-220c-4753-a775-5cf314400808"
        },
        "item": {
          "id": "31429493-3c0e-4520-86c2-d1935384ab02",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "76875cc6-1687-4ac0-96ec-c95347874fd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "92a710a0-09c8-4647-a682-ca0540a4fc7d",
        "cursor": {
          "ref": "2283d112-e1f1-40c9-98e3-f1804afb93d9",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a4ebb158-f9df-4aa4-8561-887595cb30f9"
        },
        "item": {
          "id": "92a710a0-09c8-4647-a682-ca0540a4fc7d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7c483609-1821-4a60-8615-854c3f04f6dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "92a710a0-09c8-4647-a682-ca0540a4fc7d",
        "cursor": {
          "ref": "2283d112-e1f1-40c9-98e3-f1804afb93d9",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a4ebb158-f9df-4aa4-8561-887595cb30f9"
        },
        "item": {
          "id": "92a710a0-09c8-4647-a682-ca0540a4fc7d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7c483609-1821-4a60-8615-854c3f04f6dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9fea614f-c9ad-4ed0-a687-159ffc660f86",
        "cursor": {
          "ref": "91591e1b-8065-4510-aba4-57850a2f5e16",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2ea7fa05-39fd-4e92-bd98-c57cfd6cc0de"
        },
        "item": {
          "id": "9fea614f-c9ad-4ed0-a687-159ffc660f86",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "69a1c69a-afe7-4075-8db7-cf86fe8635ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9fea614f-c9ad-4ed0-a687-159ffc660f86",
        "cursor": {
          "ref": "91591e1b-8065-4510-aba4-57850a2f5e16",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2ea7fa05-39fd-4e92-bd98-c57cfd6cc0de"
        },
        "item": {
          "id": "9fea614f-c9ad-4ed0-a687-159ffc660f86",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "69a1c69a-afe7-4075-8db7-cf86fe8635ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f5a62016-68c9-4e99-b7fb-02db90799bcf",
        "cursor": {
          "ref": "906b7778-b0ce-4f5a-92c5-abdedffa0229",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c06dc5cc-7702-4b5b-9532-cbcd7d12c028"
        },
        "item": {
          "id": "f5a62016-68c9-4e99-b7fb-02db90799bcf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b104b2b9-f6e3-47ab-8213-5a1843096cdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f5a62016-68c9-4e99-b7fb-02db90799bcf",
        "cursor": {
          "ref": "906b7778-b0ce-4f5a-92c5-abdedffa0229",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c06dc5cc-7702-4b5b-9532-cbcd7d12c028"
        },
        "item": {
          "id": "f5a62016-68c9-4e99-b7fb-02db90799bcf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b104b2b9-f6e3-47ab-8213-5a1843096cdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0878a771-534e-427c-b9ed-f9531c26985b",
        "cursor": {
          "ref": "1108fed6-73a3-4836-8d9a-ed320b05eccd",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "de53c495-16ba-44d3-86c4-8e7fae34bf1e"
        },
        "item": {
          "id": "0878a771-534e-427c-b9ed-f9531c26985b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "88232021-7059-430d-bda2-e9f2bb3bf669",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0878a771-534e-427c-b9ed-f9531c26985b",
        "cursor": {
          "ref": "1108fed6-73a3-4836-8d9a-ed320b05eccd",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "de53c495-16ba-44d3-86c4-8e7fae34bf1e"
        },
        "item": {
          "id": "0878a771-534e-427c-b9ed-f9531c26985b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "88232021-7059-430d-bda2-e9f2bb3bf669",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cd4b781e-b3d9-4fae-8e17-5b0450267c1d",
        "cursor": {
          "ref": "e7baed5c-7c60-47f7-bae3-e278349dc3fe",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "113b979c-e4de-4a5a-b91d-ba4a01fabd90"
        },
        "item": {
          "id": "cd4b781e-b3d9-4fae-8e17-5b0450267c1d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dfa66d71-94c3-4ebf-bfa5-172b69cf9b36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cd4b781e-b3d9-4fae-8e17-5b0450267c1d",
        "cursor": {
          "ref": "e7baed5c-7c60-47f7-bae3-e278349dc3fe",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "113b979c-e4de-4a5a-b91d-ba4a01fabd90"
        },
        "item": {
          "id": "cd4b781e-b3d9-4fae-8e17-5b0450267c1d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dfa66d71-94c3-4ebf-bfa5-172b69cf9b36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "fa6846fb-1f4d-4072-b146-0cd4d42f6ebb",
        "cursor": {
          "ref": "e78a8e81-9091-448f-8e6e-fb19128bf806",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b8d9386e-d3cd-42a4-98c8-e0079d87063f"
        },
        "item": {
          "id": "fa6846fb-1f4d-4072-b146-0cd4d42f6ebb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "98137e81-e354-4478-b478-8f5f6c8ab628",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fa6846fb-1f4d-4072-b146-0cd4d42f6ebb",
        "cursor": {
          "ref": "e78a8e81-9091-448f-8e6e-fb19128bf806",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b8d9386e-d3cd-42a4-98c8-e0079d87063f"
        },
        "item": {
          "id": "fa6846fb-1f4d-4072-b146-0cd4d42f6ebb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "98137e81-e354-4478-b478-8f5f6c8ab628",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "41929f3f-22ef-46fb-976d-7ace9bf37cce",
        "cursor": {
          "ref": "2784fb0b-2491-44fc-9579-486afee54b64",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3c52238a-28fc-4f14-a95d-b7fc7aa1d2da"
        },
        "item": {
          "id": "41929f3f-22ef-46fb-976d-7ace9bf37cce",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "246723ac-cd0c-40fa-afd6-7b21c163ab1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "41929f3f-22ef-46fb-976d-7ace9bf37cce",
        "cursor": {
          "ref": "2784fb0b-2491-44fc-9579-486afee54b64",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3c52238a-28fc-4f14-a95d-b7fc7aa1d2da"
        },
        "item": {
          "id": "41929f3f-22ef-46fb-976d-7ace9bf37cce",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "246723ac-cd0c-40fa-afd6-7b21c163ab1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "24d09268-f497-46e3-ad77-b206f32cee4d",
        "cursor": {
          "ref": "3e896b94-580f-4276-bc88-85a41f361c6e",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e18bc5da-f1e7-4a35-bfa5-fdb0fad1e32c"
        },
        "item": {
          "id": "24d09268-f497-46e3-ad77-b206f32cee4d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c31f143b-079d-4502-8017-4926b78d0df6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "24d09268-f497-46e3-ad77-b206f32cee4d",
        "cursor": {
          "ref": "3e896b94-580f-4276-bc88-85a41f361c6e",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e18bc5da-f1e7-4a35-bfa5-fdb0fad1e32c"
        },
        "item": {
          "id": "24d09268-f497-46e3-ad77-b206f32cee4d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c31f143b-079d-4502-8017-4926b78d0df6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "67159fc3-a2f1-4067-ba76-cfd644c856c1",
        "cursor": {
          "ref": "891f1d15-a779-48a7-8601-d168c779e20d",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e58ac70b-9afd-49f7-bfc7-75f24ebf8546"
        },
        "item": {
          "id": "67159fc3-a2f1-4067-ba76-cfd644c856c1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d20f28cb-06b1-42a0-82fa-8795c1bfd55e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "67159fc3-a2f1-4067-ba76-cfd644c856c1",
        "cursor": {
          "ref": "891f1d15-a779-48a7-8601-d168c779e20d",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e58ac70b-9afd-49f7-bfc7-75f24ebf8546"
        },
        "item": {
          "id": "67159fc3-a2f1-4067-ba76-cfd644c856c1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d20f28cb-06b1-42a0-82fa-8795c1bfd55e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "fe5105e4-5978-4820-89dd-39e378f2a61e",
        "cursor": {
          "ref": "6d03a257-4dc6-4e83-8103-04f78ba4d3c8",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a2f74148-7644-4643-97a8-d1fb1e0ae1d0"
        },
        "item": {
          "id": "fe5105e4-5978-4820-89dd-39e378f2a61e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c650000b-4a24-4a1b-8fda-e2f103a66e39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "fe5105e4-5978-4820-89dd-39e378f2a61e",
        "cursor": {
          "ref": "6d03a257-4dc6-4e83-8103-04f78ba4d3c8",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a2f74148-7644-4643-97a8-d1fb1e0ae1d0"
        },
        "item": {
          "id": "fe5105e4-5978-4820-89dd-39e378f2a61e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c650000b-4a24-4a1b-8fda-e2f103a66e39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e79bccac-3d14-4205-9328-4d24a28b3fde",
        "cursor": {
          "ref": "8bfaa583-fec9-49a7-86c2-1e2e024abce5",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "cd60dda8-fd10-458b-aa4c-cb1595dde625"
        },
        "item": {
          "id": "e79bccac-3d14-4205-9328-4d24a28b3fde",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7143d542-5c08-4ea5-a3a7-b5e7cb3d830c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11319,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "e79bccac-3d14-4205-9328-4d24a28b3fde",
        "cursor": {
          "ref": "8bfaa583-fec9-49a7-86c2-1e2e024abce5",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "cd60dda8-fd10-458b-aa4c-cb1595dde625"
        },
        "item": {
          "id": "e79bccac-3d14-4205-9328-4d24a28b3fde",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7143d542-5c08-4ea5-a3a7-b5e7cb3d830c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11319,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "bbc38b19-801c-42f8-84da-9353f45a4ce7",
        "cursor": {
          "ref": "00b59fc8-fcb1-4364-ad17-9d1bd8642db2",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f3969915-4974-4794-a3bf-0e0c4f7ecb4d"
        },
        "item": {
          "id": "bbc38b19-801c-42f8-84da-9353f45a4ce7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "379c2309-1ad6-4390-b224-503f24bf2d41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "bbc38b19-801c-42f8-84da-9353f45a4ce7",
        "cursor": {
          "ref": "00b59fc8-fcb1-4364-ad17-9d1bd8642db2",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f3969915-4974-4794-a3bf-0e0c4f7ecb4d"
        },
        "item": {
          "id": "bbc38b19-801c-42f8-84da-9353f45a4ce7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "379c2309-1ad6-4390-b224-503f24bf2d41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "f38d238f-530e-4dd4-9ebf-2f7569fd810e",
        "cursor": {
          "ref": "05fd6984-808f-4578-9fe7-6a350b9d6973",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e5db39bb-0092-4f94-91ce-fea56f18d554"
        },
        "item": {
          "id": "f38d238f-530e-4dd4-9ebf-2f7569fd810e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "444c7408-1b07-4b13-8678-ec04161f8196",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "f38d238f-530e-4dd4-9ebf-2f7569fd810e",
        "cursor": {
          "ref": "05fd6984-808f-4578-9fe7-6a350b9d6973",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e5db39bb-0092-4f94-91ce-fea56f18d554"
        },
        "item": {
          "id": "f38d238f-530e-4dd4-9ebf-2f7569fd810e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "444c7408-1b07-4b13-8678-ec04161f8196",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "1fae66d2-9c44-4781-927f-a72eed070b6c",
        "cursor": {
          "ref": "4c14a071-0dd6-4d95-a749-9eb7949ac03b",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fa375b1d-c699-4403-90e8-29836dc9cac7"
        },
        "item": {
          "id": "1fae66d2-9c44-4781-927f-a72eed070b6c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cd3600e3-068f-4472-a06c-323c0dfbe4b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "1fae66d2-9c44-4781-927f-a72eed070b6c",
        "cursor": {
          "ref": "4c14a071-0dd6-4d95-a749-9eb7949ac03b",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fa375b1d-c699-4403-90e8-29836dc9cac7"
        },
        "item": {
          "id": "1fae66d2-9c44-4781-927f-a72eed070b6c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cd3600e3-068f-4472-a06c-323c0dfbe4b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "6e05cb65-25cc-41e6-9013-c7b21441e845",
        "cursor": {
          "ref": "c22c3a10-6996-48fe-87fc-ba11f9e395d8",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fb37e0b4-3241-4778-ada6-c5fbfa91b771"
        },
        "item": {
          "id": "6e05cb65-25cc-41e6-9013-c7b21441e845",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ad12ca8c-e77e-425d-94ac-3dc898cb3721",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "6e05cb65-25cc-41e6-9013-c7b21441e845",
        "cursor": {
          "ref": "c22c3a10-6996-48fe-87fc-ba11f9e395d8",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fb37e0b4-3241-4778-ada6-c5fbfa91b771"
        },
        "item": {
          "id": "6e05cb65-25cc-41e6-9013-c7b21441e845",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ad12ca8c-e77e-425d-94ac-3dc898cb3721",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c87a99f2-e8fa-4ab4-a968-732aca9ae5e5",
        "cursor": {
          "ref": "679c552d-e7ed-4f6e-ba68-70ab07ffef9f",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "83db74ec-5a3d-47d4-8d1f-00fac359c37b"
        },
        "item": {
          "id": "c87a99f2-e8fa-4ab4-a968-732aca9ae5e5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6a72355a-ccf8-4689-8ed3-ab63c0153000",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "c87a99f2-e8fa-4ab4-a968-732aca9ae5e5",
        "cursor": {
          "ref": "679c552d-e7ed-4f6e-ba68-70ab07ffef9f",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "83db74ec-5a3d-47d4-8d1f-00fac359c37b"
        },
        "item": {
          "id": "c87a99f2-e8fa-4ab4-a968-732aca9ae5e5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6a72355a-ccf8-4689-8ed3-ab63c0153000",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "98ee659e-19be-4f3a-8472-cbd20bf0fe28",
        "cursor": {
          "ref": "82accc63-e6fd-425b-8508-7f7cfa1b2cba",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "27b94c3c-a3bf-4a3f-a1ed-7def0083b0a6"
        },
        "item": {
          "id": "98ee659e-19be-4f3a-8472-cbd20bf0fe28",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "80620a7b-a5aa-4ed0-9ed1-13baad7ba453",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "98ee659e-19be-4f3a-8472-cbd20bf0fe28",
        "cursor": {
          "ref": "82accc63-e6fd-425b-8508-7f7cfa1b2cba",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "27b94c3c-a3bf-4a3f-a1ed-7def0083b0a6"
        },
        "item": {
          "id": "98ee659e-19be-4f3a-8472-cbd20bf0fe28",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "80620a7b-a5aa-4ed0-9ed1-13baad7ba453",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "2dcdf60c-ece1-468f-b5b2-b4d85d7452e9",
        "cursor": {
          "ref": "c7de4bb1-748e-45fa-97ce-6e538924c9f5",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b679feab-f0f8-4882-a293-f7063a80c001"
        },
        "item": {
          "id": "2dcdf60c-ece1-468f-b5b2-b4d85d7452e9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d7d7ab88-8974-4363-a9d5-ee1febb5098b",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37328,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "2dcdf60c-ece1-468f-b5b2-b4d85d7452e9",
        "cursor": {
          "ref": "c7de4bb1-748e-45fa-97ce-6e538924c9f5",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b679feab-f0f8-4882-a293-f7063a80c001"
        },
        "item": {
          "id": "2dcdf60c-ece1-468f-b5b2-b4d85d7452e9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d7d7ab88-8974-4363-a9d5-ee1febb5098b",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37328,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "8f0c5082-4395-4972-b1a4-4ed9e3fd225c",
        "cursor": {
          "ref": "90bfbce7-553e-471c-96e3-bdf6308c1883",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "eace1257-af22-490f-a3f1-cbaab64bfdc4"
        },
        "item": {
          "id": "8f0c5082-4395-4972-b1a4-4ed9e3fd225c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e3d13a00-443e-491f-90f6-51b4c0747c4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "8f0c5082-4395-4972-b1a4-4ed9e3fd225c",
        "cursor": {
          "ref": "90bfbce7-553e-471c-96e3-bdf6308c1883",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "eace1257-af22-490f-a3f1-cbaab64bfdc4"
        },
        "item": {
          "id": "8f0c5082-4395-4972-b1a4-4ed9e3fd225c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e3d13a00-443e-491f-90f6-51b4c0747c4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "5d015764-db47-4e9b-8582-165a06a6b014",
        "cursor": {
          "ref": "0a2b3e55-bf57-44ec-955e-4b2aa8c2ea6e",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0bc31621-c2b7-45b7-98d2-3ad07668b64a"
        },
        "item": {
          "id": "5d015764-db47-4e9b-8582-165a06a6b014",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "89120fab-db98-46ae-90a5-da033c6eabf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3681,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5d015764-db47-4e9b-8582-165a06a6b014",
        "cursor": {
          "ref": "0a2b3e55-bf57-44ec-955e-4b2aa8c2ea6e",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0bc31621-c2b7-45b7-98d2-3ad07668b64a"
        },
        "item": {
          "id": "5d015764-db47-4e9b-8582-165a06a6b014",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "89120fab-db98-46ae-90a5-da033c6eabf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3681,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "dd9e23df-cc7a-468d-9b8c-fc58677f94a6",
        "cursor": {
          "ref": "e1daebeb-0033-439f-afb5-4b8d0d18998e",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "348e1d62-b0eb-47c0-9702-b409de7c808c"
        },
        "item": {
          "id": "dd9e23df-cc7a-468d-9b8c-fc58677f94a6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "260478fa-5c4b-4baa-9271-44d1006ecada",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "dd9e23df-cc7a-468d-9b8c-fc58677f94a6",
        "cursor": {
          "ref": "e1daebeb-0033-439f-afb5-4b8d0d18998e",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "348e1d62-b0eb-47c0-9702-b409de7c808c"
        },
        "item": {
          "id": "dd9e23df-cc7a-468d-9b8c-fc58677f94a6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "260478fa-5c4b-4baa-9271-44d1006ecada",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "83b03c13-786b-4054-a55d-db529cefe532",
        "cursor": {
          "ref": "49f0ac7e-d06b-48c4-8cf6-afd8a6c56804",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6df520e6-13f5-4648-96a7-bb15aec0c87d"
        },
        "item": {
          "id": "83b03c13-786b-4054-a55d-db529cefe532",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c3a2e9bc-0ba9-44b2-a625-d7002e4d4019",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "83b03c13-786b-4054-a55d-db529cefe532",
        "cursor": {
          "ref": "49f0ac7e-d06b-48c4-8cf6-afd8a6c56804",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6df520e6-13f5-4648-96a7-bb15aec0c87d"
        },
        "item": {
          "id": "83b03c13-786b-4054-a55d-db529cefe532",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c3a2e9bc-0ba9-44b2-a625-d7002e4d4019",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e4c55c64-c9ce-4870-ab4a-7e617178ef52",
        "cursor": {
          "ref": "651b6f40-c602-4e95-8a98-b0bdcb70a789",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "78b3c1c5-af54-49c6-b0ff-6fab3323432d"
        },
        "item": {
          "id": "e4c55c64-c9ce-4870-ab4a-7e617178ef52",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c751c387-2d48-46f3-a0f6-b6b5e0967293",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e4c55c64-c9ce-4870-ab4a-7e617178ef52",
        "cursor": {
          "ref": "651b6f40-c602-4e95-8a98-b0bdcb70a789",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "78b3c1c5-af54-49c6-b0ff-6fab3323432d"
        },
        "item": {
          "id": "e4c55c64-c9ce-4870-ab4a-7e617178ef52",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c751c387-2d48-46f3-a0f6-b6b5e0967293",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0d0a311d-c9d3-4c9a-8ef5-809d09bc9a13",
        "cursor": {
          "ref": "79bf9096-97bf-40d0-aff9-b5c7f5513c28",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4399dbbc-bfa2-4d1a-9f47-7e268a93d074"
        },
        "item": {
          "id": "0d0a311d-c9d3-4c9a-8ef5-809d09bc9a13",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2bfb3ab0-7eb2-424a-be49-c850ebeffdd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0d0a311d-c9d3-4c9a-8ef5-809d09bc9a13",
        "cursor": {
          "ref": "79bf9096-97bf-40d0-aff9-b5c7f5513c28",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4399dbbc-bfa2-4d1a-9f47-7e268a93d074"
        },
        "item": {
          "id": "0d0a311d-c9d3-4c9a-8ef5-809d09bc9a13",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2bfb3ab0-7eb2-424a-be49-c850ebeffdd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3e391a98-9cd7-4e12-b2f8-354f796cda33",
        "cursor": {
          "ref": "d6f0119f-9566-4a91-8d13-9ccbb1470d0e",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c61b740a-7a5f-4d48-b989-fac25db3fb89"
        },
        "item": {
          "id": "3e391a98-9cd7-4e12-b2f8-354f796cda33",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1776579f-bc6b-4c0c-965e-bd4383cd5bef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "3e391a98-9cd7-4e12-b2f8-354f796cda33",
        "cursor": {
          "ref": "d6f0119f-9566-4a91-8d13-9ccbb1470d0e",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c61b740a-7a5f-4d48-b989-fac25db3fb89"
        },
        "item": {
          "id": "3e391a98-9cd7-4e12-b2f8-354f796cda33",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1776579f-bc6b-4c0c-965e-bd4383cd5bef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "a04042e5-f4dd-429a-bb67-aafff5d81940",
        "cursor": {
          "ref": "c8b906a0-9b50-4eac-9a71-24465fcb59b5",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4d830f2d-5fc3-4f48-828c-81c98d13b5c9"
        },
        "item": {
          "id": "a04042e5-f4dd-429a-bb67-aafff5d81940",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "db10ffd2-348b-4bf2-93a8-87adb6d3893f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "a04042e5-f4dd-429a-bb67-aafff5d81940",
        "cursor": {
          "ref": "c8b906a0-9b50-4eac-9a71-24465fcb59b5",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4d830f2d-5fc3-4f48-828c-81c98d13b5c9"
        },
        "item": {
          "id": "a04042e5-f4dd-429a-bb67-aafff5d81940",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "db10ffd2-348b-4bf2-93a8-87adb6d3893f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ef5b5747-a966-43d7-bd2c-bbf7fb34e481",
        "cursor": {
          "ref": "a347bd83-f9f3-484e-bfbd-60aac670dd17",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8e9705a1-2e5d-4737-ae05-a5845a9104d1"
        },
        "item": {
          "id": "ef5b5747-a966-43d7-bd2c-bbf7fb34e481",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b339a259-194b-49b9-8d47-0b9366f95662",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "ef5b5747-a966-43d7-bd2c-bbf7fb34e481",
        "cursor": {
          "ref": "a347bd83-f9f3-484e-bfbd-60aac670dd17",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8e9705a1-2e5d-4737-ae05-a5845a9104d1"
        },
        "item": {
          "id": "ef5b5747-a966-43d7-bd2c-bbf7fb34e481",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b339a259-194b-49b9-8d47-0b9366f95662",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "6a1dad35-42c3-49df-86c7-4cb334087cae",
        "cursor": {
          "ref": "5ad9180e-ebf9-4964-8c29-094fe32a9346",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "759220cd-0260-40f1-8e44-80c72ac8a63d"
        },
        "item": {
          "id": "6a1dad35-42c3-49df-86c7-4cb334087cae",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f4da8a6a-6ebf-4e7e-9b35-de81d79289ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "6a1dad35-42c3-49df-86c7-4cb334087cae",
        "cursor": {
          "ref": "5ad9180e-ebf9-4964-8c29-094fe32a9346",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "759220cd-0260-40f1-8e44-80c72ac8a63d"
        },
        "item": {
          "id": "6a1dad35-42c3-49df-86c7-4cb334087cae",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f4da8a6a-6ebf-4e7e-9b35-de81d79289ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "65e2e421-a0c2-4da8-bc5f-dc200ed6fba9",
        "cursor": {
          "ref": "6b7dae83-9144-4d8f-b015-5f57662dec41",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0ec975aa-a6c1-4595-ab6f-ae96e6e5e746"
        },
        "item": {
          "id": "65e2e421-a0c2-4da8-bc5f-dc200ed6fba9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "dd94e469-e9a6-4ff9-b9d3-be7e6053fd93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "65e2e421-a0c2-4da8-bc5f-dc200ed6fba9",
        "cursor": {
          "ref": "6b7dae83-9144-4d8f-b015-5f57662dec41",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0ec975aa-a6c1-4595-ab6f-ae96e6e5e746"
        },
        "item": {
          "id": "65e2e421-a0c2-4da8-bc5f-dc200ed6fba9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "dd94e469-e9a6-4ff9-b9d3-be7e6053fd93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "6226c99a-0e12-4ddc-aa14-3140870ab8ab",
        "cursor": {
          "ref": "454fe8d3-2913-4afc-ac62-69c5fab019d9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "18e00da0-11e1-4313-bdc6-8ec64ca510fc"
        },
        "item": {
          "id": "6226c99a-0e12-4ddc-aa14-3140870ab8ab",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9c193f63-5756-4b82-ba71-5d9024d0aeea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "6226c99a-0e12-4ddc-aa14-3140870ab8ab",
        "cursor": {
          "ref": "454fe8d3-2913-4afc-ac62-69c5fab019d9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "18e00da0-11e1-4313-bdc6-8ec64ca510fc"
        },
        "item": {
          "id": "6226c99a-0e12-4ddc-aa14-3140870ab8ab",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9c193f63-5756-4b82-ba71-5d9024d0aeea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "054a4756-341d-4dd1-b53f-ce91c6abf474",
        "cursor": {
          "ref": "db8c28da-5478-46a1-ba76-1ca68d42e371",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "81f73764-2548-4e51-9b25-170dcb74e412"
        },
        "item": {
          "id": "054a4756-341d-4dd1-b53f-ce91c6abf474",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1daf56ea-ff22-403c-8907-1a2d2c491188",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "054a4756-341d-4dd1-b53f-ce91c6abf474",
        "cursor": {
          "ref": "db8c28da-5478-46a1-ba76-1ca68d42e371",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "81f73764-2548-4e51-9b25-170dcb74e412"
        },
        "item": {
          "id": "054a4756-341d-4dd1-b53f-ce91c6abf474",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1daf56ea-ff22-403c-8907-1a2d2c491188",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "18be54cf-9255-41ce-8d95-b3908efc98af",
        "cursor": {
          "ref": "5e30eda9-ed83-40d7-b725-eb5701793d3d",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e4cf7f44-18ce-41e9-ba17-95d5b422c086"
        },
        "item": {
          "id": "18be54cf-9255-41ce-8d95-b3908efc98af",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "db2e5d4b-963a-4da6-9f93-f45f8dd4fc3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "18be54cf-9255-41ce-8d95-b3908efc98af",
        "cursor": {
          "ref": "5e30eda9-ed83-40d7-b725-eb5701793d3d",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e4cf7f44-18ce-41e9-ba17-95d5b422c086"
        },
        "item": {
          "id": "18be54cf-9255-41ce-8d95-b3908efc98af",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "db2e5d4b-963a-4da6-9f93-f45f8dd4fc3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "b7a8ed74-6ccb-404a-9a1f-b6bf3d1bd382",
        "cursor": {
          "ref": "c75be360-c38c-4797-b4c6-587d12586cc1",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "20edf14e-34f2-49c5-93eb-714bd19d29d2"
        },
        "item": {
          "id": "b7a8ed74-6ccb-404a-9a1f-b6bf3d1bd382",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ebef4704-cc23-42c7-a44b-cca6cf45a570",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "b7a8ed74-6ccb-404a-9a1f-b6bf3d1bd382",
        "cursor": {
          "ref": "c75be360-c38c-4797-b4c6-587d12586cc1",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "20edf14e-34f2-49c5-93eb-714bd19d29d2"
        },
        "item": {
          "id": "b7a8ed74-6ccb-404a-9a1f-b6bf3d1bd382",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ebef4704-cc23-42c7-a44b-cca6cf45a570",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "880b7c56-d894-4175-a385-8a23a337ee46",
        "cursor": {
          "ref": "d2b1ce7d-b155-464f-bdcc-ab4bba1338d7",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "129c4f39-a88c-4443-a39a-9835f11f3e00"
        },
        "item": {
          "id": "880b7c56-d894-4175-a385-8a23a337ee46",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0e52ddd7-86df-4e63-874d-1f196976f238",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "880b7c56-d894-4175-a385-8a23a337ee46",
        "cursor": {
          "ref": "d2b1ce7d-b155-464f-bdcc-ab4bba1338d7",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "129c4f39-a88c-4443-a39a-9835f11f3e00"
        },
        "item": {
          "id": "880b7c56-d894-4175-a385-8a23a337ee46",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0e52ddd7-86df-4e63-874d-1f196976f238",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "0806eefa-02fd-4a90-a5e2-bea9f17cb3a0",
        "cursor": {
          "ref": "0f9624e1-013d-4ebe-a6f9-c1425b011743",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e48ba14f-3a65-46c2-ac3f-fa980c97d273"
        },
        "item": {
          "id": "0806eefa-02fd-4a90-a5e2-bea9f17cb3a0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "62e192bd-941e-45cc-98a9-009836158467",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "0806eefa-02fd-4a90-a5e2-bea9f17cb3a0",
        "cursor": {
          "ref": "0f9624e1-013d-4ebe-a6f9-c1425b011743",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e48ba14f-3a65-46c2-ac3f-fa980c97d273"
        },
        "item": {
          "id": "0806eefa-02fd-4a90-a5e2-bea9f17cb3a0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "62e192bd-941e-45cc-98a9-009836158467",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "2b03ea98-a09d-43cf-9231-c4a6a42f2ce4",
        "cursor": {
          "ref": "5786ea7f-4b21-4556-bb5b-a6f520a7ae23",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "59709f11-b55e-4697-849f-1e14e6d73010"
        },
        "item": {
          "id": "2b03ea98-a09d-43cf-9231-c4a6a42f2ce4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e9c80d8c-228d-4a8c-9a3b-00056897cdb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "2b03ea98-a09d-43cf-9231-c4a6a42f2ce4",
        "cursor": {
          "ref": "5786ea7f-4b21-4556-bb5b-a6f520a7ae23",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "59709f11-b55e-4697-849f-1e14e6d73010"
        },
        "item": {
          "id": "2b03ea98-a09d-43cf-9231-c4a6a42f2ce4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e9c80d8c-228d-4a8c-9a3b-00056897cdb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "16eb1cfe-fb77-48ce-800b-2571d913512a",
        "cursor": {
          "ref": "fce0a9c4-96e9-437a-ae71-76b695cc1584",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a32fc21f-89ea-435f-85fa-3bd2c4d4f9b4"
        },
        "item": {
          "id": "16eb1cfe-fb77-48ce-800b-2571d913512a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "eb0a8351-4c44-4e04-bb20-bcb1505d4aac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "16eb1cfe-fb77-48ce-800b-2571d913512a",
        "cursor": {
          "ref": "fce0a9c4-96e9-437a-ae71-76b695cc1584",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a32fc21f-89ea-435f-85fa-3bd2c4d4f9b4"
        },
        "item": {
          "id": "16eb1cfe-fb77-48ce-800b-2571d913512a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "eb0a8351-4c44-4e04-bb20-bcb1505d4aac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "051b379f-c714-45d6-8746-d04664ada5c9",
        "cursor": {
          "ref": "609e0f4a-0669-46a0-bb39-064878501295",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a67a5fa6-a586-4f10-b287-f268cc53090d"
        },
        "item": {
          "id": "051b379f-c714-45d6-8746-d04664ada5c9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ca0843c4-8598-4d76-9d6e-8a527bc98193",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "051b379f-c714-45d6-8746-d04664ada5c9",
        "cursor": {
          "ref": "609e0f4a-0669-46a0-bb39-064878501295",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a67a5fa6-a586-4f10-b287-f268cc53090d"
        },
        "item": {
          "id": "051b379f-c714-45d6-8746-d04664ada5c9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ca0843c4-8598-4d76-9d6e-8a527bc98193",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "97fb7ade-013a-46fd-acf9-256fcf2f4096",
        "cursor": {
          "ref": "5aa6a444-8f48-4390-ac64-83974fde6462",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "299d9514-cdf7-4bbc-8857-457be7649afa"
        },
        "item": {
          "id": "97fb7ade-013a-46fd-acf9-256fcf2f4096",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7f93ebad-4c68-4610-83a5-de52fa9d3166",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37311,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "97fb7ade-013a-46fd-acf9-256fcf2f4096",
        "cursor": {
          "ref": "5aa6a444-8f48-4390-ac64-83974fde6462",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "299d9514-cdf7-4bbc-8857-457be7649afa"
        },
        "item": {
          "id": "97fb7ade-013a-46fd-acf9-256fcf2f4096",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7f93ebad-4c68-4610-83a5-de52fa9d3166",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37311,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "e0adcac3-6b47-4983-ae53-b730120cce3f",
        "cursor": {
          "ref": "52da9b82-4349-419a-a5e5-7ef52811f90e",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "11edd34c-10aa-42d0-b863-0e19f99868a2"
        },
        "item": {
          "id": "e0adcac3-6b47-4983-ae53-b730120cce3f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "99b2f244-abda-4041-852c-537f3a5e2b05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "e0adcac3-6b47-4983-ae53-b730120cce3f",
        "cursor": {
          "ref": "52da9b82-4349-419a-a5e5-7ef52811f90e",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "11edd34c-10aa-42d0-b863-0e19f99868a2"
        },
        "item": {
          "id": "e0adcac3-6b47-4983-ae53-b730120cce3f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "99b2f244-abda-4041-852c-537f3a5e2b05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "2ec496fe-6f77-433b-971a-3e4ff6464908",
        "cursor": {
          "ref": "a6ef7f37-40d4-4bdb-bf41-33fc9d934996",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f59a3939-e3ad-4d59-a537-810e1345c7b5"
        },
        "item": {
          "id": "2ec496fe-6f77-433b-971a-3e4ff6464908",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e4363557-d760-4c41-a643-008f0121e9ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "2ec496fe-6f77-433b-971a-3e4ff6464908",
        "cursor": {
          "ref": "a6ef7f37-40d4-4bdb-bf41-33fc9d934996",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f59a3939-e3ad-4d59-a537-810e1345c7b5"
        },
        "item": {
          "id": "2ec496fe-6f77-433b-971a-3e4ff6464908",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e4363557-d760-4c41-a643-008f0121e9ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "33e45d73-d5df-4be9-b027-e37fafac5f59",
        "cursor": {
          "ref": "abae7ab6-3056-4b3c-a2fb-0bb4df0742b4",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a523090c-5282-4821-b7f4-bbbe07cac41a"
        },
        "item": {
          "id": "33e45d73-d5df-4be9-b027-e37fafac5f59",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ba7acd2e-d202-4eff-a44a-c7e4158d1109",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "33e45d73-d5df-4be9-b027-e37fafac5f59",
        "cursor": {
          "ref": "abae7ab6-3056-4b3c-a2fb-0bb4df0742b4",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a523090c-5282-4821-b7f4-bbbe07cac41a"
        },
        "item": {
          "id": "33e45d73-d5df-4be9-b027-e37fafac5f59",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ba7acd2e-d202-4eff-a44a-c7e4158d1109",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2c259f93-0537-4aca-87ff-d64574aa4d43",
        "cursor": {
          "ref": "ed917d7a-aa19-41b3-85ee-daec9d013a49",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a3cd0412-3bc8-40e0-9b90-8d58fd9cb3be"
        },
        "item": {
          "id": "2c259f93-0537-4aca-87ff-d64574aa4d43",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "28092abd-95a5-4b6b-9014-ef1f11907227",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "2c259f93-0537-4aca-87ff-d64574aa4d43",
        "cursor": {
          "ref": "ed917d7a-aa19-41b3-85ee-daec9d013a49",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a3cd0412-3bc8-40e0-9b90-8d58fd9cb3be"
        },
        "item": {
          "id": "2c259f93-0537-4aca-87ff-d64574aa4d43",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "28092abd-95a5-4b6b-9014-ef1f11907227",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "7c87378d-a20e-4774-ba56-ae6ac7c1d5cd",
        "cursor": {
          "ref": "fe48dad4-d2b4-48c9-bdd2-0ccc1a5d84d2",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f611faf3-0274-49ec-8bb7-2d48c5fdb491"
        },
        "item": {
          "id": "7c87378d-a20e-4774-ba56-ae6ac7c1d5cd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "febe8de4-8ab0-4b86-8863-80ef6e3d875d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "7c87378d-a20e-4774-ba56-ae6ac7c1d5cd",
        "cursor": {
          "ref": "fe48dad4-d2b4-48c9-bdd2-0ccc1a5d84d2",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f611faf3-0274-49ec-8bb7-2d48c5fdb491"
        },
        "item": {
          "id": "7c87378d-a20e-4774-ba56-ae6ac7c1d5cd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "febe8de4-8ab0-4b86-8863-80ef6e3d875d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "78e691c8-5b34-4322-9b9c-b883b710002a",
        "cursor": {
          "ref": "7a9e5fb0-845b-4826-a3a4-425faa030e2e",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c9ef2089-5cc1-41d9-9038-616ac4150a4e"
        },
        "item": {
          "id": "78e691c8-5b34-4322-9b9c-b883b710002a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8c404c63-5b1e-45ca-80e7-734f65684ab2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "78e691c8-5b34-4322-9b9c-b883b710002a",
        "cursor": {
          "ref": "7a9e5fb0-845b-4826-a3a4-425faa030e2e",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c9ef2089-5cc1-41d9-9038-616ac4150a4e"
        },
        "item": {
          "id": "78e691c8-5b34-4322-9b9c-b883b710002a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8c404c63-5b1e-45ca-80e7-734f65684ab2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "d2dbff65-b2f4-4ac8-add3-396f3f31c547",
        "cursor": {
          "ref": "6e3d5598-44f7-4926-b67f-0f20cb7a0253",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8931b743-8e4f-4fbf-ab00-3a3383fed068"
        },
        "item": {
          "id": "d2dbff65-b2f4-4ac8-add3-396f3f31c547",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7bf8b0f0-e210-4b19-a41e-75e3c8ec926e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "d2dbff65-b2f4-4ac8-add3-396f3f31c547",
        "cursor": {
          "ref": "6e3d5598-44f7-4926-b67f-0f20cb7a0253",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8931b743-8e4f-4fbf-ab00-3a3383fed068"
        },
        "item": {
          "id": "d2dbff65-b2f4-4ac8-add3-396f3f31c547",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7bf8b0f0-e210-4b19-a41e-75e3c8ec926e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "e3a44ef6-4c48-4cad-b440-766cb6ff3759",
        "cursor": {
          "ref": "4df27e98-8d39-416b-87d7-f69467c59361",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3d0dc24f-96c4-4be7-9e3b-cf64b0ddf54b"
        },
        "item": {
          "id": "e3a44ef6-4c48-4cad-b440-766cb6ff3759",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "557ad9aa-1b27-4fb7-a347-da4f018f29ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "e3a44ef6-4c48-4cad-b440-766cb6ff3759",
        "cursor": {
          "ref": "4df27e98-8d39-416b-87d7-f69467c59361",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3d0dc24f-96c4-4be7-9e3b-cf64b0ddf54b"
        },
        "item": {
          "id": "e3a44ef6-4c48-4cad-b440-766cb6ff3759",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "557ad9aa-1b27-4fb7-a347-da4f018f29ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "ba5873c9-4d7d-4b4d-9456-ba686863c254",
        "cursor": {
          "ref": "f48191a4-9b6e-41f5-8df5-2fc5a37e688f",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "52c7132d-0447-4351-82d4-6f6e61c57713"
        },
        "item": {
          "id": "ba5873c9-4d7d-4b4d-9456-ba686863c254",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ea28194c-11de-4143-8a9c-a23177903127",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "ba5873c9-4d7d-4b4d-9456-ba686863c254",
        "cursor": {
          "ref": "f48191a4-9b6e-41f5-8df5-2fc5a37e688f",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "52c7132d-0447-4351-82d4-6f6e61c57713"
        },
        "item": {
          "id": "ba5873c9-4d7d-4b4d-9456-ba686863c254",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ea28194c-11de-4143-8a9c-a23177903127",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "be026100-ae20-40df-b214-cd5b3696457f",
        "cursor": {
          "ref": "61792a88-dfc4-438d-8874-41aa917cbc79",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "571d9905-1caf-4d8d-a2d3-ade2aac49852"
        },
        "item": {
          "id": "be026100-ae20-40df-b214-cd5b3696457f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3206de67-cb43-4f3c-be4b-a180adfcd90d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "be026100-ae20-40df-b214-cd5b3696457f",
        "cursor": {
          "ref": "61792a88-dfc4-438d-8874-41aa917cbc79",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "571d9905-1caf-4d8d-a2d3-ade2aac49852"
        },
        "item": {
          "id": "be026100-ae20-40df-b214-cd5b3696457f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3206de67-cb43-4f3c-be4b-a180adfcd90d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "7253b2a7-28e7-4796-a40d-6c4d46664318",
        "cursor": {
          "ref": "fdabd891-5439-4bdb-bcfc-4bdd86b280ca",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9bae2f9c-1aee-47ca-a3ad-e053569a197e"
        },
        "item": {
          "id": "7253b2a7-28e7-4796-a40d-6c4d46664318",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b0afd7d4-6e38-45bb-ad56-f1dba58c072e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "7253b2a7-28e7-4796-a40d-6c4d46664318",
        "cursor": {
          "ref": "fdabd891-5439-4bdb-bcfc-4bdd86b280ca",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9bae2f9c-1aee-47ca-a3ad-e053569a197e"
        },
        "item": {
          "id": "7253b2a7-28e7-4796-a40d-6c4d46664318",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b0afd7d4-6e38-45bb-ad56-f1dba58c072e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "93ff2ebe-e6bd-43fe-85e5-e43ede2f5361",
        "cursor": {
          "ref": "24d652a5-0609-4f54-9b5e-b2f36ab58a3c",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fc40ef3a-72e1-4e4b-8bc3-aa0292a97274"
        },
        "item": {
          "id": "93ff2ebe-e6bd-43fe-85e5-e43ede2f5361",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "58885ae7-a178-48e2-8d55-30eb4572bd12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "93ff2ebe-e6bd-43fe-85e5-e43ede2f5361",
        "cursor": {
          "ref": "24d652a5-0609-4f54-9b5e-b2f36ab58a3c",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fc40ef3a-72e1-4e4b-8bc3-aa0292a97274"
        },
        "item": {
          "id": "93ff2ebe-e6bd-43fe-85e5-e43ede2f5361",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "58885ae7-a178-48e2-8d55-30eb4572bd12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "9ec6236e-6fd3-41cd-9830-8c5cb7683ed0",
        "cursor": {
          "ref": "5cf98da4-502d-4da5-bd84-49a050cbbaf7",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "74668b94-fd32-4646-b3cc-7397c750a5c4"
        },
        "item": {
          "id": "9ec6236e-6fd3-41cd-9830-8c5cb7683ed0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a190aebd-99a6-486b-8795-652e2f44365b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "9ec6236e-6fd3-41cd-9830-8c5cb7683ed0",
        "cursor": {
          "ref": "5cf98da4-502d-4da5-bd84-49a050cbbaf7",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "74668b94-fd32-4646-b3cc-7397c750a5c4"
        },
        "item": {
          "id": "9ec6236e-6fd3-41cd-9830-8c5cb7683ed0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a190aebd-99a6-486b-8795-652e2f44365b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "d2cadf7d-41c5-4230-a53d-10295e5e16ce",
        "cursor": {
          "ref": "06457fe6-755f-4371-9e57-6877d71aa463",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e9ce22c9-7d32-4b3d-8252-8cd43d39391b"
        },
        "item": {
          "id": "d2cadf7d-41c5-4230-a53d-10295e5e16ce",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a16f4c14-194c-47be-8d51-645c4a05115c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "d2cadf7d-41c5-4230-a53d-10295e5e16ce",
        "cursor": {
          "ref": "06457fe6-755f-4371-9e57-6877d71aa463",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e9ce22c9-7d32-4b3d-8252-8cd43d39391b"
        },
        "item": {
          "id": "d2cadf7d-41c5-4230-a53d-10295e5e16ce",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a16f4c14-194c-47be-8d51-645c4a05115c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "54511abb-c289-42ac-9ed1-a188fb16c2a2",
        "cursor": {
          "ref": "0e959a8e-faf1-42c0-a33b-ca789de5f2f3",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "93a61335-9e46-40c1-9278-7a469529a2d3"
        },
        "item": {
          "id": "54511abb-c289-42ac-9ed1-a188fb16c2a2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "edd9fc35-39a2-46bc-938f-b5bc931a6351",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "54511abb-c289-42ac-9ed1-a188fb16c2a2",
        "cursor": {
          "ref": "0e959a8e-faf1-42c0-a33b-ca789de5f2f3",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "93a61335-9e46-40c1-9278-7a469529a2d3"
        },
        "item": {
          "id": "54511abb-c289-42ac-9ed1-a188fb16c2a2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "edd9fc35-39a2-46bc-938f-b5bc931a6351",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "8d7747da-8d4b-49c8-bd84-7fecc889e17a",
        "cursor": {
          "ref": "e5f00ff3-d362-46f7-90ae-ac60f9e58509",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "213cf3d9-4daa-4a4e-ad27-b015cfa06a8a"
        },
        "item": {
          "id": "8d7747da-8d4b-49c8-bd84-7fecc889e17a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3a733502-2bdd-4a8d-8323-48f0ec280e9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "8d7747da-8d4b-49c8-bd84-7fecc889e17a",
        "cursor": {
          "ref": "e5f00ff3-d362-46f7-90ae-ac60f9e58509",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "213cf3d9-4daa-4a4e-ad27-b015cfa06a8a"
        },
        "item": {
          "id": "8d7747da-8d4b-49c8-bd84-7fecc889e17a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3a733502-2bdd-4a8d-8323-48f0ec280e9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "698bf785-6536-4494-8774-7a84be506eb4",
        "cursor": {
          "ref": "38cd0974-aff2-4575-ace9-7e8cd5557999",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "91c09606-a6a4-4581-89c9-d81129927f50"
        },
        "item": {
          "id": "698bf785-6536-4494-8774-7a84be506eb4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7ec59ae3-ea09-4651-8a0c-c496c64fc874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "698bf785-6536-4494-8774-7a84be506eb4",
        "cursor": {
          "ref": "38cd0974-aff2-4575-ace9-7e8cd5557999",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "91c09606-a6a4-4581-89c9-d81129927f50"
        },
        "item": {
          "id": "698bf785-6536-4494-8774-7a84be506eb4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7ec59ae3-ea09-4651-8a0c-c496c64fc874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "45febade-ca4e-471b-8a79-be0734dc4b12",
        "cursor": {
          "ref": "1d832699-702f-48d2-81ad-64db9dfe14f5",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "13dffb84-6a6c-484b-a2fa-14997f69dece"
        },
        "item": {
          "id": "45febade-ca4e-471b-8a79-be0734dc4b12",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c327086d-5a32-4e63-8588-4341e3122575",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "45febade-ca4e-471b-8a79-be0734dc4b12",
        "cursor": {
          "ref": "1d832699-702f-48d2-81ad-64db9dfe14f5",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "13dffb84-6a6c-484b-a2fa-14997f69dece"
        },
        "item": {
          "id": "45febade-ca4e-471b-8a79-be0734dc4b12",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c327086d-5a32-4e63-8588-4341e3122575",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "f72e4adb-43a3-4b7b-bec2-7c5e09def45f",
        "cursor": {
          "ref": "21d5c0cf-4ad1-478b-af77-5b7bdae7d7e7",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fbce16ff-0383-4b04-8932-cfdb46fe5d79"
        },
        "item": {
          "id": "f72e4adb-43a3-4b7b-bec2-7c5e09def45f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f7b3f318-2e5d-4774-8973-2cbf25ce8173",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "f72e4adb-43a3-4b7b-bec2-7c5e09def45f",
        "cursor": {
          "ref": "21d5c0cf-4ad1-478b-af77-5b7bdae7d7e7",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fbce16ff-0383-4b04-8932-cfdb46fe5d79"
        },
        "item": {
          "id": "f72e4adb-43a3-4b7b-bec2-7c5e09def45f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f7b3f318-2e5d-4774-8973-2cbf25ce8173",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "b490a5be-8712-44cc-ac54-6c3cbc7623ee",
        "cursor": {
          "ref": "a98a4a32-fba5-4457-9317-54503d8201d1",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "818d9a7e-fbcb-480a-9fff-fea029feda8d"
        },
        "item": {
          "id": "b490a5be-8712-44cc-ac54-6c3cbc7623ee",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "67c2a339-e310-4da4-92f6-9d0a53a20254",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "b490a5be-8712-44cc-ac54-6c3cbc7623ee",
        "cursor": {
          "ref": "a98a4a32-fba5-4457-9317-54503d8201d1",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "818d9a7e-fbcb-480a-9fff-fea029feda8d"
        },
        "item": {
          "id": "b490a5be-8712-44cc-ac54-6c3cbc7623ee",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "67c2a339-e310-4da4-92f6-9d0a53a20254",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "10285504-6b0d-4be4-b042-c2ece55f154a",
        "cursor": {
          "ref": "b1091695-6aad-45f9-808e-cdc0a1ab1b0c",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "01596032-df0d-4d6e-8fa0-8b8515248230"
        },
        "item": {
          "id": "10285504-6b0d-4be4-b042-c2ece55f154a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "489b0249-15ac-41d2-87fa-fb270e4c8f6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "10285504-6b0d-4be4-b042-c2ece55f154a",
        "cursor": {
          "ref": "b1091695-6aad-45f9-808e-cdc0a1ab1b0c",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "01596032-df0d-4d6e-8fa0-8b8515248230"
        },
        "item": {
          "id": "10285504-6b0d-4be4-b042-c2ece55f154a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "489b0249-15ac-41d2-87fa-fb270e4c8f6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "98f1896c-0e60-4d80-a0fd-7eaa4f23ef0d",
        "cursor": {
          "ref": "30b39f67-6e42-4fa6-b4e2-382987c089fe",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b7b7aefb-c260-492f-8361-53d4bda94792"
        },
        "item": {
          "id": "98f1896c-0e60-4d80-a0fd-7eaa4f23ef0d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "279b1d42-cad4-48d4-87e2-37d7baeefe6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "98f1896c-0e60-4d80-a0fd-7eaa4f23ef0d",
        "cursor": {
          "ref": "30b39f67-6e42-4fa6-b4e2-382987c089fe",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b7b7aefb-c260-492f-8361-53d4bda94792"
        },
        "item": {
          "id": "98f1896c-0e60-4d80-a0fd-7eaa4f23ef0d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "279b1d42-cad4-48d4-87e2-37d7baeefe6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "05dfc32e-2de0-45ee-ba84-fde8a35b9911",
        "cursor": {
          "ref": "b6bca6aa-2ddb-4190-9743-bb3e0ab92b0d",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2d666d3c-06c7-46ff-a9ff-fe0a47404b23"
        },
        "item": {
          "id": "05dfc32e-2de0-45ee-ba84-fde8a35b9911",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b3d5d13c-80ef-4f8a-938b-4ea175627b15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "05dfc32e-2de0-45ee-ba84-fde8a35b9911",
        "cursor": {
          "ref": "b6bca6aa-2ddb-4190-9743-bb3e0ab92b0d",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2d666d3c-06c7-46ff-a9ff-fe0a47404b23"
        },
        "item": {
          "id": "05dfc32e-2de0-45ee-ba84-fde8a35b9911",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b3d5d13c-80ef-4f8a-938b-4ea175627b15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "30fb00c7-6963-4f30-ab38-0a9c8f4ea18b",
        "cursor": {
          "ref": "a8c26790-4c7d-47b1-ba9f-e42798b56337",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9c2ca70b-d966-4010-b3e3-2d7f19498d5b"
        },
        "item": {
          "id": "30fb00c7-6963-4f30-ab38-0a9c8f4ea18b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "237e3287-ddcf-4497-8c63-2d16bdefe066",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "30fb00c7-6963-4f30-ab38-0a9c8f4ea18b",
        "cursor": {
          "ref": "a8c26790-4c7d-47b1-ba9f-e42798b56337",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9c2ca70b-d966-4010-b3e3-2d7f19498d5b"
        },
        "item": {
          "id": "30fb00c7-6963-4f30-ab38-0a9c8f4ea18b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "237e3287-ddcf-4497-8c63-2d16bdefe066",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "62a647db-e24b-4715-9865-a2fabff01314",
        "cursor": {
          "ref": "0733420b-e99d-41ce-b5b0-0138bab89009",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f1851a0d-b824-4576-add2-7795cbc47f30"
        },
        "item": {
          "id": "62a647db-e24b-4715-9865-a2fabff01314",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "74be30d4-1816-46fe-bd59-ccaecc3ecd58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "62a647db-e24b-4715-9865-a2fabff01314",
        "cursor": {
          "ref": "0733420b-e99d-41ce-b5b0-0138bab89009",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f1851a0d-b824-4576-add2-7795cbc47f30"
        },
        "item": {
          "id": "62a647db-e24b-4715-9865-a2fabff01314",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "74be30d4-1816-46fe-bd59-ccaecc3ecd58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "c16bf18a-742a-442c-9e05-d2b82c4ca6dd",
        "cursor": {
          "ref": "0d910407-d12b-4934-9e72-7e3091120392",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0a80f736-15af-4520-8f9b-bd60c2d27c04"
        },
        "item": {
          "id": "c16bf18a-742a-442c-9e05-d2b82c4ca6dd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b0ad72ca-19ef-4f36-aae9-43341cec24fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "c16bf18a-742a-442c-9e05-d2b82c4ca6dd",
        "cursor": {
          "ref": "0d910407-d12b-4934-9e72-7e3091120392",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0a80f736-15af-4520-8f9b-bd60c2d27c04"
        },
        "item": {
          "id": "c16bf18a-742a-442c-9e05-d2b82c4ca6dd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b0ad72ca-19ef-4f36-aae9-43341cec24fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "8b58a595-6cbf-4fd3-8445-eac4fb3a5bc0",
        "cursor": {
          "ref": "da261237-3ce4-4481-ae11-f5386234ccea",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "63bae941-9df7-4bc6-8a6d-dd8ffac5d1a9"
        },
        "item": {
          "id": "8b58a595-6cbf-4fd3-8445-eac4fb3a5bc0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2cc93a5a-2e34-4c61-8d50-6110689e0710",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "8b58a595-6cbf-4fd3-8445-eac4fb3a5bc0",
        "cursor": {
          "ref": "da261237-3ce4-4481-ae11-f5386234ccea",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "63bae941-9df7-4bc6-8a6d-dd8ffac5d1a9"
        },
        "item": {
          "id": "8b58a595-6cbf-4fd3-8445-eac4fb3a5bc0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2cc93a5a-2e34-4c61-8d50-6110689e0710",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "22d89583-8b4c-4ba1-be88-58a1057896c3",
        "cursor": {
          "ref": "4d349a42-485a-4b3c-a277-320489d3a546",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "adfe858e-c3e4-496b-b213-6577250148f6"
        },
        "item": {
          "id": "22d89583-8b4c-4ba1-be88-58a1057896c3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "64a16fa2-7906-4f51-9aa4-432e2402c5c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "22d89583-8b4c-4ba1-be88-58a1057896c3",
        "cursor": {
          "ref": "4d349a42-485a-4b3c-a277-320489d3a546",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "adfe858e-c3e4-496b-b213-6577250148f6"
        },
        "item": {
          "id": "22d89583-8b4c-4ba1-be88-58a1057896c3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "64a16fa2-7906-4f51-9aa4-432e2402c5c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "f421d4dd-2642-46aa-87a2-ddbb15e1a935",
        "cursor": {
          "ref": "3e86761c-ffc0-4ea3-a84d-f92aaf696f59",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b80a0ce1-7680-463b-af5f-5ee2e55aa307"
        },
        "item": {
          "id": "f421d4dd-2642-46aa-87a2-ddbb15e1a935",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b69abebf-e25c-44b1-bb31-e6163cd1bb2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f421d4dd-2642-46aa-87a2-ddbb15e1a935",
        "cursor": {
          "ref": "3e86761c-ffc0-4ea3-a84d-f92aaf696f59",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b80a0ce1-7680-463b-af5f-5ee2e55aa307"
        },
        "item": {
          "id": "f421d4dd-2642-46aa-87a2-ddbb15e1a935",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b69abebf-e25c-44b1-bb31-e6163cd1bb2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "d858ab1b-9fe9-4f38-9db8-ccfb6f80afd1",
        "cursor": {
          "ref": "23065464-5c81-4397-96ec-5988108668d6",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f9db1053-cd2e-4e16-949e-565622aa6f3e"
        },
        "item": {
          "id": "d858ab1b-9fe9-4f38-9db8-ccfb6f80afd1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b71d0c42-d491-4fdb-9981-d640d46fcbe5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d858ab1b-9fe9-4f38-9db8-ccfb6f80afd1",
        "cursor": {
          "ref": "23065464-5c81-4397-96ec-5988108668d6",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f9db1053-cd2e-4e16-949e-565622aa6f3e"
        },
        "item": {
          "id": "d858ab1b-9fe9-4f38-9db8-ccfb6f80afd1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b71d0c42-d491-4fdb-9981-d640d46fcbe5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "a2cfab92-2ea3-4d44-b69a-6d918740a46c",
        "cursor": {
          "ref": "715885a9-dcab-4998-8b5a-195410b225a0",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6ea8a89f-261c-4a2c-b2a6-7872c2f45868"
        },
        "item": {
          "id": "a2cfab92-2ea3-4d44-b69a-6d918740a46c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4054b058-5730-4dc9-98a6-15885f2580d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "a2cfab92-2ea3-4d44-b69a-6d918740a46c",
        "cursor": {
          "ref": "715885a9-dcab-4998-8b5a-195410b225a0",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6ea8a89f-261c-4a2c-b2a6-7872c2f45868"
        },
        "item": {
          "id": "a2cfab92-2ea3-4d44-b69a-6d918740a46c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4054b058-5730-4dc9-98a6-15885f2580d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "25fba1b8-b099-4b84-9a0c-e37ef63669f1",
        "cursor": {
          "ref": "76bc0874-cf0b-47ba-8fb2-3b04c6a68ab7",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8083ec5e-9549-4e95-9c62-59944dfdf948"
        },
        "item": {
          "id": "25fba1b8-b099-4b84-9a0c-e37ef63669f1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "990a14e5-1aac-4df4-a269-7ce74134dafc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "25fba1b8-b099-4b84-9a0c-e37ef63669f1",
        "cursor": {
          "ref": "76bc0874-cf0b-47ba-8fb2-3b04c6a68ab7",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8083ec5e-9549-4e95-9c62-59944dfdf948"
        },
        "item": {
          "id": "25fba1b8-b099-4b84-9a0c-e37ef63669f1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "990a14e5-1aac-4df4-a269-7ce74134dafc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c79648e0-215f-4898-bc0b-b73d2edc322d",
        "cursor": {
          "ref": "3300cfbd-cf12-43f7-af74-d19ce5ff95ca",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1d8b7130-c8c9-4b11-8acb-4b3b01700bd2"
        },
        "item": {
          "id": "c79648e0-215f-4898-bc0b-b73d2edc322d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d517f516-69c3-49b5-959b-15c127ba916d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c79648e0-215f-4898-bc0b-b73d2edc322d",
        "cursor": {
          "ref": "3300cfbd-cf12-43f7-af74-d19ce5ff95ca",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1d8b7130-c8c9-4b11-8acb-4b3b01700bd2"
        },
        "item": {
          "id": "c79648e0-215f-4898-bc0b-b73d2edc322d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d517f516-69c3-49b5-959b-15c127ba916d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "68c670a9-c1b0-42c5-9220-b3f1597cff29",
        "cursor": {
          "ref": "498826c1-5475-47b0-b6b8-34adc346f85c",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ab99f809-b2eb-413c-af7d-bf94cfcc319c"
        },
        "item": {
          "id": "68c670a9-c1b0-42c5-9220-b3f1597cff29",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7bac43bc-56c2-4609-a38f-bcb35d9e3bda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "68c670a9-c1b0-42c5-9220-b3f1597cff29",
        "cursor": {
          "ref": "498826c1-5475-47b0-b6b8-34adc346f85c",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ab99f809-b2eb-413c-af7d-bf94cfcc319c"
        },
        "item": {
          "id": "68c670a9-c1b0-42c5-9220-b3f1597cff29",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7bac43bc-56c2-4609-a38f-bcb35d9e3bda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "218101ab-9cbc-4dd2-9d69-ded8fadcf412",
        "cursor": {
          "ref": "65ff362f-a6d7-4e97-91a6-ebdd6891cc02",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "46fd8d96-d779-48a4-accf-3001fc27d6f2"
        },
        "item": {
          "id": "218101ab-9cbc-4dd2-9d69-ded8fadcf412",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "de371b86-1e6f-480e-a6f8-dfdad7ba6b1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "218101ab-9cbc-4dd2-9d69-ded8fadcf412",
        "cursor": {
          "ref": "65ff362f-a6d7-4e97-91a6-ebdd6891cc02",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "46fd8d96-d779-48a4-accf-3001fc27d6f2"
        },
        "item": {
          "id": "218101ab-9cbc-4dd2-9d69-ded8fadcf412",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "de371b86-1e6f-480e-a6f8-dfdad7ba6b1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "9b5d711c-5d2a-4bd2-bd5b-e6524220a35d",
        "cursor": {
          "ref": "e6df18f7-7f95-4753-82e8-24cf8a8c5bec",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "35a36e8b-faba-4aa2-829f-aeafe8524851"
        },
        "item": {
          "id": "9b5d711c-5d2a-4bd2-bd5b-e6524220a35d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "63670785-5e29-4119-ae6f-8adb3d4fce30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "9b5d711c-5d2a-4bd2-bd5b-e6524220a35d",
        "cursor": {
          "ref": "e6df18f7-7f95-4753-82e8-24cf8a8c5bec",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "35a36e8b-faba-4aa2-829f-aeafe8524851"
        },
        "item": {
          "id": "9b5d711c-5d2a-4bd2-bd5b-e6524220a35d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "63670785-5e29-4119-ae6f-8adb3d4fce30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "256f6971-1088-4a9a-96a4-eaf0a4368848",
        "cursor": {
          "ref": "c8d83a35-d4a7-4890-85c9-bddcd04edc90",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6fb9ee60-380c-4cb0-8e3b-22bd7e7540a5"
        },
        "item": {
          "id": "256f6971-1088-4a9a-96a4-eaf0a4368848",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cc624828-c24b-466a-8cbe-85b56b960994",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "256f6971-1088-4a9a-96a4-eaf0a4368848",
        "cursor": {
          "ref": "c8d83a35-d4a7-4890-85c9-bddcd04edc90",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6fb9ee60-380c-4cb0-8e3b-22bd7e7540a5"
        },
        "item": {
          "id": "256f6971-1088-4a9a-96a4-eaf0a4368848",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cc624828-c24b-466a-8cbe-85b56b960994",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7a198068-f907-409c-aabd-6efc9fafb7ea",
        "cursor": {
          "ref": "1f4a753a-f3b2-416e-aa3f-54ec49c848c3",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c027867f-4b37-442c-9cec-832d41f5e63c"
        },
        "item": {
          "id": "7a198068-f907-409c-aabd-6efc9fafb7ea",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "241ee778-e7ad-4984-ba6f-7a0f109b0e67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7a198068-f907-409c-aabd-6efc9fafb7ea",
        "cursor": {
          "ref": "1f4a753a-f3b2-416e-aa3f-54ec49c848c3",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c027867f-4b37-442c-9cec-832d41f5e63c"
        },
        "item": {
          "id": "7a198068-f907-409c-aabd-6efc9fafb7ea",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "241ee778-e7ad-4984-ba6f-7a0f109b0e67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7436a36c-c516-4e1c-8035-d5bbb7eaf5a2",
        "cursor": {
          "ref": "88f4e7e6-0760-4ba3-a60d-64e39c6a1d15",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bf2122fc-80f9-4508-b1c2-43e0dfd331d7"
        },
        "item": {
          "id": "7436a36c-c516-4e1c-8035-d5bbb7eaf5a2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "aa1533ae-d0e5-4863-9023-e706098e6f4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7436a36c-c516-4e1c-8035-d5bbb7eaf5a2",
        "cursor": {
          "ref": "88f4e7e6-0760-4ba3-a60d-64e39c6a1d15",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bf2122fc-80f9-4508-b1c2-43e0dfd331d7"
        },
        "item": {
          "id": "7436a36c-c516-4e1c-8035-d5bbb7eaf5a2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "aa1533ae-d0e5-4863-9023-e706098e6f4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c064a716-af20-423d-a1f7-8cf1f11b474b",
        "cursor": {
          "ref": "8c7fc12c-4d2b-42e1-aa43-e228fcc7abac",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b1049f45-2f92-4f58-95cc-f4d6956a5f12"
        },
        "item": {
          "id": "c064a716-af20-423d-a1f7-8cf1f11b474b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5f462fd0-70ba-4194-87a1-f2b12ddad4d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c064a716-af20-423d-a1f7-8cf1f11b474b",
        "cursor": {
          "ref": "8c7fc12c-4d2b-42e1-aa43-e228fcc7abac",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b1049f45-2f92-4f58-95cc-f4d6956a5f12"
        },
        "item": {
          "id": "c064a716-af20-423d-a1f7-8cf1f11b474b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5f462fd0-70ba-4194-87a1-f2b12ddad4d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b37dac3d-50cc-4761-81b8-dc654df4fb40",
        "cursor": {
          "ref": "e6880007-98d8-4a7b-bc76-57d84dc7ba13",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "39f2d288-e597-49ea-af41-1d2ed1dc610a"
        },
        "item": {
          "id": "b37dac3d-50cc-4761-81b8-dc654df4fb40",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6a006b9b-a030-48ac-a610-181f891b7143",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b37dac3d-50cc-4761-81b8-dc654df4fb40",
        "cursor": {
          "ref": "e6880007-98d8-4a7b-bc76-57d84dc7ba13",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "39f2d288-e597-49ea-af41-1d2ed1dc610a"
        },
        "item": {
          "id": "b37dac3d-50cc-4761-81b8-dc654df4fb40",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6a006b9b-a030-48ac-a610-181f891b7143",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "12acd50e-14e6-4bcb-894b-bcfd54d0d8e6",
        "cursor": {
          "ref": "675e8564-ba22-4296-b51a-5a8f25848ff4",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "74655be9-fb0d-43c4-95ca-be582eb336a6"
        },
        "item": {
          "id": "12acd50e-14e6-4bcb-894b-bcfd54d0d8e6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7dc00ebf-c52e-4cda-8156-d030682ab96a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "12acd50e-14e6-4bcb-894b-bcfd54d0d8e6",
        "cursor": {
          "ref": "675e8564-ba22-4296-b51a-5a8f25848ff4",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "74655be9-fb0d-43c4-95ca-be582eb336a6"
        },
        "item": {
          "id": "12acd50e-14e6-4bcb-894b-bcfd54d0d8e6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7dc00ebf-c52e-4cda-8156-d030682ab96a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "2a3c77d8-29c3-4dec-90d9-c2bd5284a3ef",
        "cursor": {
          "ref": "49acdd49-d3d2-42d5-b56e-bac0f9c12ac8",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4ad05794-87d2-4d92-988f-402a23b69239"
        },
        "item": {
          "id": "2a3c77d8-29c3-4dec-90d9-c2bd5284a3ef",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5c7bf005-659d-4e64-a849-847a0305bc0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "2a3c77d8-29c3-4dec-90d9-c2bd5284a3ef",
        "cursor": {
          "ref": "49acdd49-d3d2-42d5-b56e-bac0f9c12ac8",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4ad05794-87d2-4d92-988f-402a23b69239"
        },
        "item": {
          "id": "2a3c77d8-29c3-4dec-90d9-c2bd5284a3ef",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5c7bf005-659d-4e64-a849-847a0305bc0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f72f2fd0-aa2f-4d80-89a3-d0970d3ec46c",
        "cursor": {
          "ref": "1eb25c53-4344-4749-b34a-352b179315a7",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ca54f279-f7c0-4243-b482-00920c5b0fa8"
        },
        "item": {
          "id": "f72f2fd0-aa2f-4d80-89a3-d0970d3ec46c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80cf411c-e5e2-44aa-9774-59dba9709e74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f72f2fd0-aa2f-4d80-89a3-d0970d3ec46c",
        "cursor": {
          "ref": "1eb25c53-4344-4749-b34a-352b179315a7",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ca54f279-f7c0-4243-b482-00920c5b0fa8"
        },
        "item": {
          "id": "f72f2fd0-aa2f-4d80-89a3-d0970d3ec46c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80cf411c-e5e2-44aa-9774-59dba9709e74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "61b79aa3-23ef-4c4a-8230-85715a3368b1",
        "cursor": {
          "ref": "c3849ac2-a037-457f-b6fd-697998bfa092",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "47c430ed-73a9-49bb-8bcb-1964ca665db5"
        },
        "item": {
          "id": "61b79aa3-23ef-4c4a-8230-85715a3368b1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "045438c5-b0e7-4b58-8526-0a69d7974afc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "61b79aa3-23ef-4c4a-8230-85715a3368b1",
        "cursor": {
          "ref": "c3849ac2-a037-457f-b6fd-697998bfa092",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "47c430ed-73a9-49bb-8bcb-1964ca665db5"
        },
        "item": {
          "id": "61b79aa3-23ef-4c4a-8230-85715a3368b1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "045438c5-b0e7-4b58-8526-0a69d7974afc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "7e313c3a-e286-4b5e-a207-d5add0bb746b",
        "cursor": {
          "ref": "4fc90e6f-969f-490c-88d5-48d51281ca2c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6c6656a6-cf7b-45dd-b06c-4d90eb085bb1"
        },
        "item": {
          "id": "7e313c3a-e286-4b5e-a207-d5add0bb746b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4c32d969-4bfa-435e-ace2-5a1c54f119b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7e313c3a-e286-4b5e-a207-d5add0bb746b",
        "cursor": {
          "ref": "4fc90e6f-969f-490c-88d5-48d51281ca2c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6c6656a6-cf7b-45dd-b06c-4d90eb085bb1"
        },
        "item": {
          "id": "7e313c3a-e286-4b5e-a207-d5add0bb746b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4c32d969-4bfa-435e-ace2-5a1c54f119b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "724d741a-5e00-4ae7-8c4a-0a19cf6242cb",
        "cursor": {
          "ref": "a6ba1fce-7b81-42e0-a2a9-649a1edc9f73",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4f902e48-778f-4346-a176-f641b3c3c1ea"
        },
        "item": {
          "id": "724d741a-5e00-4ae7-8c4a-0a19cf6242cb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "43306388-ffad-42b1-833c-516a6653082c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "724d741a-5e00-4ae7-8c4a-0a19cf6242cb",
        "cursor": {
          "ref": "a6ba1fce-7b81-42e0-a2a9-649a1edc9f73",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4f902e48-778f-4346-a176-f641b3c3c1ea"
        },
        "item": {
          "id": "724d741a-5e00-4ae7-8c4a-0a19cf6242cb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "43306388-ffad-42b1-833c-516a6653082c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "2265461b-1ec2-4ce8-9056-1a024621e3da",
        "cursor": {
          "ref": "6c92ab02-bc07-4f35-9085-d1d32e844db7",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "57584031-745f-4020-a26a-e7875ac88b33"
        },
        "item": {
          "id": "2265461b-1ec2-4ce8-9056-1a024621e3da",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "adf24330-de4d-477e-86a4-5955c17d9eca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "2265461b-1ec2-4ce8-9056-1a024621e3da",
        "cursor": {
          "ref": "6c92ab02-bc07-4f35-9085-d1d32e844db7",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "57584031-745f-4020-a26a-e7875ac88b33"
        },
        "item": {
          "id": "2265461b-1ec2-4ce8-9056-1a024621e3da",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "adf24330-de4d-477e-86a4-5955c17d9eca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8a8da51d-134d-486b-ac19-169b0619742f",
        "cursor": {
          "ref": "5e828c09-ee2e-4623-b6d2-c3f535048731",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "214fc72e-9f7e-48ae-bfe2-2492e39cf656"
        },
        "item": {
          "id": "8a8da51d-134d-486b-ac19-169b0619742f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7e2b9cd4-2546-4f22-9ff8-db53159968e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "8a8da51d-134d-486b-ac19-169b0619742f",
        "cursor": {
          "ref": "5e828c09-ee2e-4623-b6d2-c3f535048731",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "214fc72e-9f7e-48ae-bfe2-2492e39cf656"
        },
        "item": {
          "id": "8a8da51d-134d-486b-ac19-169b0619742f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7e2b9cd4-2546-4f22-9ff8-db53159968e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "9af77504-0b09-4cf3-a4f9-24efb2e64064",
        "cursor": {
          "ref": "d638f21d-2695-437a-bf14-3c39124299f7",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "eaefeccc-c1d4-4715-bd8f-b82633f166e3"
        },
        "item": {
          "id": "9af77504-0b09-4cf3-a4f9-24efb2e64064",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "55673756-ad3c-45b0-bd02-7b909fa6a6ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "9af77504-0b09-4cf3-a4f9-24efb2e64064",
        "cursor": {
          "ref": "d638f21d-2695-437a-bf14-3c39124299f7",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "eaefeccc-c1d4-4715-bd8f-b82633f166e3"
        },
        "item": {
          "id": "9af77504-0b09-4cf3-a4f9-24efb2e64064",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "55673756-ad3c-45b0-bd02-7b909fa6a6ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ee6da8e1-8b02-4ebd-a004-2fd11845ae1d",
        "cursor": {
          "ref": "2706934f-8a2d-4630-8f37-533bd62da8c0",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "83a4dda8-85ea-4975-9692-df125f76905a"
        },
        "item": {
          "id": "ee6da8e1-8b02-4ebd-a004-2fd11845ae1d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2ddafe91-4e89-48e8-9011-8d1ad222a094",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ee6da8e1-8b02-4ebd-a004-2fd11845ae1d",
        "cursor": {
          "ref": "2706934f-8a2d-4630-8f37-533bd62da8c0",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "83a4dda8-85ea-4975-9692-df125f76905a"
        },
        "item": {
          "id": "ee6da8e1-8b02-4ebd-a004-2fd11845ae1d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2ddafe91-4e89-48e8-9011-8d1ad222a094",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "d23227f1-2a18-433b-94aa-288e2d53306c",
        "cursor": {
          "ref": "387556ac-fea1-4f5e-aa82-279b955e6bee",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "95726e10-b58f-4162-96c0-1007551f0be1"
        },
        "item": {
          "id": "d23227f1-2a18-433b-94aa-288e2d53306c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b36e8618-e924-445d-89b0-dcd7222c04b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d23227f1-2a18-433b-94aa-288e2d53306c",
        "cursor": {
          "ref": "387556ac-fea1-4f5e-aa82-279b955e6bee",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "95726e10-b58f-4162-96c0-1007551f0be1"
        },
        "item": {
          "id": "d23227f1-2a18-433b-94aa-288e2d53306c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b36e8618-e924-445d-89b0-dcd7222c04b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "20cadf76-6bc8-4107-ab51-ea1c0bdd9d43",
        "cursor": {
          "ref": "6a224f11-476b-485b-b4f4-9f3869ce5c15",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "10870a2a-c1c5-43ee-abbb-b42f70495c6d"
        },
        "item": {
          "id": "20cadf76-6bc8-4107-ab51-ea1c0bdd9d43",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b7c35c1b-1c15-4c63-877c-67635b5232bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "20cadf76-6bc8-4107-ab51-ea1c0bdd9d43",
        "cursor": {
          "ref": "6a224f11-476b-485b-b4f4-9f3869ce5c15",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "10870a2a-c1c5-43ee-abbb-b42f70495c6d"
        },
        "item": {
          "id": "20cadf76-6bc8-4107-ab51-ea1c0bdd9d43",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b7c35c1b-1c15-4c63-877c-67635b5232bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "45e7a430-2497-49d6-9437-d7f207ede3a9",
        "cursor": {
          "ref": "784e97ef-e984-4be4-a8f5-60937676e812",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3cfc9485-4a7f-4f6e-8c73-1949829461d8"
        },
        "item": {
          "id": "45e7a430-2497-49d6-9437-d7f207ede3a9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ffbcc153-4238-40ee-8d03-2a0949baa9c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "45e7a430-2497-49d6-9437-d7f207ede3a9",
        "cursor": {
          "ref": "784e97ef-e984-4be4-a8f5-60937676e812",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3cfc9485-4a7f-4f6e-8c73-1949829461d8"
        },
        "item": {
          "id": "45e7a430-2497-49d6-9437-d7f207ede3a9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ffbcc153-4238-40ee-8d03-2a0949baa9c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "dc54c7f8-d02f-444d-aa42-c4b9135ccd14",
        "cursor": {
          "ref": "138dbe42-47bf-4bd9-aa02-e74e53edfa3c",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6827767d-9406-4720-8f8a-fe0aa839c378"
        },
        "item": {
          "id": "dc54c7f8-d02f-444d-aa42-c4b9135ccd14",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "20b01c9c-417e-4c28-bf50-d4d4fe40104f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "dc54c7f8-d02f-444d-aa42-c4b9135ccd14",
        "cursor": {
          "ref": "138dbe42-47bf-4bd9-aa02-e74e53edfa3c",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6827767d-9406-4720-8f8a-fe0aa839c378"
        },
        "item": {
          "id": "dc54c7f8-d02f-444d-aa42-c4b9135ccd14",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "20b01c9c-417e-4c28-bf50-d4d4fe40104f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "57560a7d-fb15-49fd-8c06-d84968a5cfdc",
        "cursor": {
          "ref": "af1763e3-402f-4d03-939b-8499fb7a062e",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4c2ba32b-1cef-4d7c-bce7-be41569882d3"
        },
        "item": {
          "id": "57560a7d-fb15-49fd-8c06-d84968a5cfdc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "018f924b-441c-4a4a-b3a7-bf33fbf1321e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "57560a7d-fb15-49fd-8c06-d84968a5cfdc",
        "cursor": {
          "ref": "af1763e3-402f-4d03-939b-8499fb7a062e",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4c2ba32b-1cef-4d7c-bce7-be41569882d3"
        },
        "item": {
          "id": "57560a7d-fb15-49fd-8c06-d84968a5cfdc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "018f924b-441c-4a4a-b3a7-bf33fbf1321e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "af14f202-30f0-4eca-a655-e0c5856dfeac",
        "cursor": {
          "ref": "f3fe740c-b549-45aa-811e-381247aa75ac",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "306aa8a7-a127-443f-8083-072275e0d361"
        },
        "item": {
          "id": "af14f202-30f0-4eca-a655-e0c5856dfeac",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0102cea5-e01d-4d77-bb8f-4ee6235af874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "af14f202-30f0-4eca-a655-e0c5856dfeac",
        "cursor": {
          "ref": "f3fe740c-b549-45aa-811e-381247aa75ac",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "306aa8a7-a127-443f-8083-072275e0d361"
        },
        "item": {
          "id": "af14f202-30f0-4eca-a655-e0c5856dfeac",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0102cea5-e01d-4d77-bb8f-4ee6235af874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "11f812ef-d7e0-4cf4-8171-48970e36a408",
        "cursor": {
          "ref": "7ced6175-d319-4491-8f20-0aef7a022cd9",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f92e9263-a66b-4e08-971f-0eaddae6b003"
        },
        "item": {
          "id": "11f812ef-d7e0-4cf4-8171-48970e36a408",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1c3a016b-5107-4b05-af13-617bd44b59a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "11f812ef-d7e0-4cf4-8171-48970e36a408",
        "cursor": {
          "ref": "7ced6175-d319-4491-8f20-0aef7a022cd9",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f92e9263-a66b-4e08-971f-0eaddae6b003"
        },
        "item": {
          "id": "11f812ef-d7e0-4cf4-8171-48970e36a408",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1c3a016b-5107-4b05-af13-617bd44b59a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ae63f976-66b3-4740-a55d-85cf2510ec1c",
        "cursor": {
          "ref": "d42823df-4e8d-4598-9698-df9fdc0fbcb1",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a95022c5-9e50-4446-90d9-a8c257134ea1"
        },
        "item": {
          "id": "ae63f976-66b3-4740-a55d-85cf2510ec1c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0263c606-e3f7-4dc0-9918-b2da104512cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "ae63f976-66b3-4740-a55d-85cf2510ec1c",
        "cursor": {
          "ref": "d42823df-4e8d-4598-9698-df9fdc0fbcb1",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a95022c5-9e50-4446-90d9-a8c257134ea1"
        },
        "item": {
          "id": "ae63f976-66b3-4740-a55d-85cf2510ec1c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0263c606-e3f7-4dc0-9918-b2da104512cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6678b72c-6821-4d61-82b5-df8e8631f8ff",
        "cursor": {
          "ref": "6eb31ded-9568-4c09-8bf7-3720afb70acc",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5ef9de74-875c-49af-a17e-159b1360963d"
        },
        "item": {
          "id": "6678b72c-6821-4d61-82b5-df8e8631f8ff",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "05868181-63f6-4ff0-a911-ec6a289b27cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "6678b72c-6821-4d61-82b5-df8e8631f8ff",
        "cursor": {
          "ref": "6eb31ded-9568-4c09-8bf7-3720afb70acc",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5ef9de74-875c-49af-a17e-159b1360963d"
        },
        "item": {
          "id": "6678b72c-6821-4d61-82b5-df8e8631f8ff",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "05868181-63f6-4ff0-a911-ec6a289b27cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "d7cc26f0-c686-40b4-bd99-0730ec2ee542",
        "cursor": {
          "ref": "a2d1bb0e-f51e-4abf-ba2b-1c18e3d5fa34",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "afb2a038-a888-4aa4-8f8a-5fbbd46614dc"
        },
        "item": {
          "id": "d7cc26f0-c686-40b4-bd99-0730ec2ee542",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "297768e5-2131-481b-bb0c-e8d0e434b422",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "d7cc26f0-c686-40b4-bd99-0730ec2ee542",
        "cursor": {
          "ref": "a2d1bb0e-f51e-4abf-ba2b-1c18e3d5fa34",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "afb2a038-a888-4aa4-8f8a-5fbbd46614dc"
        },
        "item": {
          "id": "d7cc26f0-c686-40b4-bd99-0730ec2ee542",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "297768e5-2131-481b-bb0c-e8d0e434b422",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "f385a7a8-82f7-4480-818f-922390d4b31e",
        "cursor": {
          "ref": "dc3cb89f-a6b8-4d47-b083-e864a8ce92d5",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cfeaab30-3418-44e6-a05f-3a65cba6724a"
        },
        "item": {
          "id": "f385a7a8-82f7-4480-818f-922390d4b31e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ae8628e6-5f06-4102-b10d-1481578d777e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "f385a7a8-82f7-4480-818f-922390d4b31e",
        "cursor": {
          "ref": "dc3cb89f-a6b8-4d47-b083-e864a8ce92d5",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cfeaab30-3418-44e6-a05f-3a65cba6724a"
        },
        "item": {
          "id": "f385a7a8-82f7-4480-818f-922390d4b31e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ae8628e6-5f06-4102-b10d-1481578d777e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "6e0fb617-ce72-4942-9e48-a2f57ba125a6",
        "cursor": {
          "ref": "b41dc464-dfd0-4d97-b6f3-d46cad583398",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "87df171f-7a03-40de-b2f0-3dbea8201295"
        },
        "item": {
          "id": "6e0fb617-ce72-4942-9e48-a2f57ba125a6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6901d7c3-fe83-4cf4-b3a8-298849cb796d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "6e0fb617-ce72-4942-9e48-a2f57ba125a6",
        "cursor": {
          "ref": "b41dc464-dfd0-4d97-b6f3-d46cad583398",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "87df171f-7a03-40de-b2f0-3dbea8201295"
        },
        "item": {
          "id": "6e0fb617-ce72-4942-9e48-a2f57ba125a6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6901d7c3-fe83-4cf4-b3a8-298849cb796d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "6a009b8e-9ea1-4dfa-8ba3-68efcfcb0a79",
        "cursor": {
          "ref": "391f9b29-6402-4225-8b4d-0280d647e841",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "01290c60-f54b-4a6b-9a66-ec94e08e4baf"
        },
        "item": {
          "id": "6a009b8e-9ea1-4dfa-8ba3-68efcfcb0a79",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "463220d9-5b60-40f6-ab47-46d0fce0b9db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "6a009b8e-9ea1-4dfa-8ba3-68efcfcb0a79",
        "cursor": {
          "ref": "391f9b29-6402-4225-8b4d-0280d647e841",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "01290c60-f54b-4a6b-9a66-ec94e08e4baf"
        },
        "item": {
          "id": "6a009b8e-9ea1-4dfa-8ba3-68efcfcb0a79",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "463220d9-5b60-40f6-ab47-46d0fce0b9db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "81c208d5-0a93-4bef-9204-daf6d2d92a33",
        "cursor": {
          "ref": "dfa9d58b-af4d-45a4-8395-b62b821d7df7",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8201406d-a8d1-4a4d-9800-fcb6d30efdbc"
        },
        "item": {
          "id": "81c208d5-0a93-4bef-9204-daf6d2d92a33",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f7d88089-885a-460b-9b94-c93c77e315f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "81c208d5-0a93-4bef-9204-daf6d2d92a33",
        "cursor": {
          "ref": "dfa9d58b-af4d-45a4-8395-b62b821d7df7",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8201406d-a8d1-4a4d-9800-fcb6d30efdbc"
        },
        "item": {
          "id": "81c208d5-0a93-4bef-9204-daf6d2d92a33",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f7d88089-885a-460b-9b94-c93c77e315f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "e8844302-f8b7-4ebf-a120-c483b41d83e2",
        "cursor": {
          "ref": "f19a4558-a5c8-4c9a-8590-ffd6dd78a5ee",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "99714798-5f4a-43ef-b41c-6d593bf9cedf"
        },
        "item": {
          "id": "e8844302-f8b7-4ebf-a120-c483b41d83e2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b5a4cc94-c0be-4dac-821c-89c60eb089b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "e8844302-f8b7-4ebf-a120-c483b41d83e2",
        "cursor": {
          "ref": "f19a4558-a5c8-4c9a-8590-ffd6dd78a5ee",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "99714798-5f4a-43ef-b41c-6d593bf9cedf"
        },
        "item": {
          "id": "e8844302-f8b7-4ebf-a120-c483b41d83e2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b5a4cc94-c0be-4dac-821c-89c60eb089b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "23b8585c-fb92-4374-9041-77710fc98290",
        "cursor": {
          "ref": "07db0ac1-ec73-4393-a29e-fb8fdf357828",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f0c8bb2a-a3ce-4a6e-90e8-92f341e3a6d1"
        },
        "item": {
          "id": "23b8585c-fb92-4374-9041-77710fc98290",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "28f56706-4346-4b3b-a1ab-8c92ed65785a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "23b8585c-fb92-4374-9041-77710fc98290",
        "cursor": {
          "ref": "07db0ac1-ec73-4393-a29e-fb8fdf357828",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f0c8bb2a-a3ce-4a6e-90e8-92f341e3a6d1"
        },
        "item": {
          "id": "23b8585c-fb92-4374-9041-77710fc98290",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "28f56706-4346-4b3b-a1ab-8c92ed65785a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "a4a17466-988b-4aca-835e-40e36b7092f2",
        "cursor": {
          "ref": "b7088a56-58ca-4c79-a647-3b97f0c1fbbf",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d6e92ff7-83bd-4658-9bf9-290fdd8a89ef"
        },
        "item": {
          "id": "a4a17466-988b-4aca-835e-40e36b7092f2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "355f4773-fa3d-45a9-8afa-0f94b8cd758b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a4a17466-988b-4aca-835e-40e36b7092f2",
        "cursor": {
          "ref": "b7088a56-58ca-4c79-a647-3b97f0c1fbbf",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d6e92ff7-83bd-4658-9bf9-290fdd8a89ef"
        },
        "item": {
          "id": "a4a17466-988b-4aca-835e-40e36b7092f2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "355f4773-fa3d-45a9-8afa-0f94b8cd758b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "bccee796-eb80-4b09-9e4f-fcbe9217df64",
        "cursor": {
          "ref": "24d92bf0-13db-4537-b9a3-b6b31eb737bf",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1dc5be37-ef66-4c42-bd4e-8b142d43fc33"
        },
        "item": {
          "id": "bccee796-eb80-4b09-9e4f-fcbe9217df64",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2edc287f-bf97-4c77-8a26-e862c726308a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "bccee796-eb80-4b09-9e4f-fcbe9217df64",
        "cursor": {
          "ref": "24d92bf0-13db-4537-b9a3-b6b31eb737bf",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1dc5be37-ef66-4c42-bd4e-8b142d43fc33"
        },
        "item": {
          "id": "bccee796-eb80-4b09-9e4f-fcbe9217df64",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2edc287f-bf97-4c77-8a26-e862c726308a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "7890de00-f2ca-465e-87b2-928a84507649",
        "cursor": {
          "ref": "08f41d29-4414-4366-86ec-7f29d1d8f19b",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4cccbebe-d263-428a-8722-da0e83fb4db9"
        },
        "item": {
          "id": "7890de00-f2ca-465e-87b2-928a84507649",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9bf70720-776d-4ccb-acb1-9e53df4cf8ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "7890de00-f2ca-465e-87b2-928a84507649",
        "cursor": {
          "ref": "08f41d29-4414-4366-86ec-7f29d1d8f19b",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4cccbebe-d263-428a-8722-da0e83fb4db9"
        },
        "item": {
          "id": "7890de00-f2ca-465e-87b2-928a84507649",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9bf70720-776d-4ccb-acb1-9e53df4cf8ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "0fb13a5f-caff-472f-841f-a86335a33fd5",
        "cursor": {
          "ref": "eaf353df-1822-4bd6-b0d3-54008955a353",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c84c3cc3-4139-4a43-a2bd-62529b37d875"
        },
        "item": {
          "id": "0fb13a5f-caff-472f-841f-a86335a33fd5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1d80af5b-6e87-402b-80b3-75a26e9502d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "0fb13a5f-caff-472f-841f-a86335a33fd5",
        "cursor": {
          "ref": "eaf353df-1822-4bd6-b0d3-54008955a353",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c84c3cc3-4139-4a43-a2bd-62529b37d875"
        },
        "item": {
          "id": "0fb13a5f-caff-472f-841f-a86335a33fd5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1d80af5b-6e87-402b-80b3-75a26e9502d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "f86f592c-2f28-4fbf-b8f3-a42c853157c8",
        "cursor": {
          "ref": "39895809-bc0a-436b-a316-dd63e67de5ce",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "63569422-d1c0-41b2-8352-0a78c10b2163"
        },
        "item": {
          "id": "f86f592c-2f28-4fbf-b8f3-a42c853157c8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f0ade9ca-1572-4520-9507-5c0bce02c7ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "f86f592c-2f28-4fbf-b8f3-a42c853157c8",
        "cursor": {
          "ref": "39895809-bc0a-436b-a316-dd63e67de5ce",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "63569422-d1c0-41b2-8352-0a78c10b2163"
        },
        "item": {
          "id": "f86f592c-2f28-4fbf-b8f3-a42c853157c8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f0ade9ca-1572-4520-9507-5c0bce02c7ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "a7f8bc74-c8a0-4f9e-ab66-50b28189700a",
        "cursor": {
          "ref": "3a328a96-87a8-4b58-9b31-9ebba26702fd",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a783dcb8-9de3-491c-b7fd-b933dd85e19b"
        },
        "item": {
          "id": "a7f8bc74-c8a0-4f9e-ab66-50b28189700a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4c503cab-0eb3-48d8-a418-e030194c1bbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a7f8bc74-c8a0-4f9e-ab66-50b28189700a",
        "cursor": {
          "ref": "3a328a96-87a8-4b58-9b31-9ebba26702fd",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a783dcb8-9de3-491c-b7fd-b933dd85e19b"
        },
        "item": {
          "id": "a7f8bc74-c8a0-4f9e-ab66-50b28189700a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4c503cab-0eb3-48d8-a418-e030194c1bbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "621150c4-121e-4ec3-8b8a-349f15d0362d",
        "cursor": {
          "ref": "b81de160-5557-4163-a427-db4436329062",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "72125e2d-c399-40a3-9f2b-50aa3c86402e"
        },
        "item": {
          "id": "621150c4-121e-4ec3-8b8a-349f15d0362d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "34f7182d-a6e7-4793-aa2f-82864c54f7fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "621150c4-121e-4ec3-8b8a-349f15d0362d",
        "cursor": {
          "ref": "b81de160-5557-4163-a427-db4436329062",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "72125e2d-c399-40a3-9f2b-50aa3c86402e"
        },
        "item": {
          "id": "621150c4-121e-4ec3-8b8a-349f15d0362d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "34f7182d-a6e7-4793-aa2f-82864c54f7fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "3c27c73d-a434-48bc-bbd6-badd66ee6975",
        "cursor": {
          "ref": "1b3b8507-6750-4d47-a2fe-74f162a2ba88",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c3f3f60e-71fd-4a7e-b289-6cdd7c7cfd73"
        },
        "item": {
          "id": "3c27c73d-a434-48bc-bbd6-badd66ee6975",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0ea76507-1391-48a9-b822-09780f431d46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "3c27c73d-a434-48bc-bbd6-badd66ee6975",
        "cursor": {
          "ref": "1b3b8507-6750-4d47-a2fe-74f162a2ba88",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c3f3f60e-71fd-4a7e-b289-6cdd7c7cfd73"
        },
        "item": {
          "id": "3c27c73d-a434-48bc-bbd6-badd66ee6975",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0ea76507-1391-48a9-b822-09780f431d46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "2cc792aa-3f20-4ba7-ae08-2b545830b77e",
        "cursor": {
          "ref": "8a93fafc-2504-4cc1-929c-721cc44b9a53",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d1695e6c-2202-4cc0-88eb-63121429f5c1"
        },
        "item": {
          "id": "2cc792aa-3f20-4ba7-ae08-2b545830b77e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4fd11b51-137d-4453-aed2-5b1ce8c16878",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "2cc792aa-3f20-4ba7-ae08-2b545830b77e",
        "cursor": {
          "ref": "8a93fafc-2504-4cc1-929c-721cc44b9a53",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d1695e6c-2202-4cc0-88eb-63121429f5c1"
        },
        "item": {
          "id": "2cc792aa-3f20-4ba7-ae08-2b545830b77e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4fd11b51-137d-4453-aed2-5b1ce8c16878",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "e08b2aa6-d4e2-4f8f-b19c-d25d9d072fba",
        "cursor": {
          "ref": "56e84b29-4cbf-46f0-81a8-fdfed6716800",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bea851c4-499e-41f4-99e9-f693317b6986"
        },
        "item": {
          "id": "e08b2aa6-d4e2-4f8f-b19c-d25d9d072fba",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6d18d8ad-0bbb-4bc7-8658-79631ffe106b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "e08b2aa6-d4e2-4f8f-b19c-d25d9d072fba",
        "cursor": {
          "ref": "56e84b29-4cbf-46f0-81a8-fdfed6716800",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bea851c4-499e-41f4-99e9-f693317b6986"
        },
        "item": {
          "id": "e08b2aa6-d4e2-4f8f-b19c-d25d9d072fba",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6d18d8ad-0bbb-4bc7-8658-79631ffe106b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "6e04bcf2-64ad-4dea-91ae-ab5d0c651ae8",
        "cursor": {
          "ref": "6b516b17-af19-485a-b4d1-279a14090c1d",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d30e01ed-2f12-457d-a3d9-ce84c75516e8"
        },
        "item": {
          "id": "6e04bcf2-64ad-4dea-91ae-ab5d0c651ae8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f0a81c0d-6142-4e8c-a76a-e0471087a748",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "6e04bcf2-64ad-4dea-91ae-ab5d0c651ae8",
        "cursor": {
          "ref": "6b516b17-af19-485a-b4d1-279a14090c1d",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d30e01ed-2f12-457d-a3d9-ce84c75516e8"
        },
        "item": {
          "id": "6e04bcf2-64ad-4dea-91ae-ab5d0c651ae8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f0a81c0d-6142-4e8c-a76a-e0471087a748",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "15a1cff2-7f9c-4b79-aa2d-cb37d5339035",
        "cursor": {
          "ref": "e6982e6c-c3f7-48b0-ae31-a55b0a020658",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "89498c1d-aaa9-47e6-85e7-cfd4969f0cf4"
        },
        "item": {
          "id": "15a1cff2-7f9c-4b79-aa2d-cb37d5339035",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "32f31b21-eb4d-4a72-8b0f-aedf559fe8b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "15a1cff2-7f9c-4b79-aa2d-cb37d5339035",
        "cursor": {
          "ref": "e6982e6c-c3f7-48b0-ae31-a55b0a020658",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "89498c1d-aaa9-47e6-85e7-cfd4969f0cf4"
        },
        "item": {
          "id": "15a1cff2-7f9c-4b79-aa2d-cb37d5339035",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "32f31b21-eb4d-4a72-8b0f-aedf559fe8b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "16583f54-5b23-4c17-a900-5b3070a4e0fd",
        "cursor": {
          "ref": "d8060cd6-46b0-4353-8e03-5e517b8b4a22",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e63c5a8d-bc93-4c80-8085-bc6bffbc4a8f"
        },
        "item": {
          "id": "16583f54-5b23-4c17-a900-5b3070a4e0fd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dcbc67a0-4cc9-48e2-a254-11000357be8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "16583f54-5b23-4c17-a900-5b3070a4e0fd",
        "cursor": {
          "ref": "d8060cd6-46b0-4353-8e03-5e517b8b4a22",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e63c5a8d-bc93-4c80-8085-bc6bffbc4a8f"
        },
        "item": {
          "id": "16583f54-5b23-4c17-a900-5b3070a4e0fd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dcbc67a0-4cc9-48e2-a254-11000357be8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "907afe25-2c6d-419e-9fb8-d6ba24f56ce2",
        "cursor": {
          "ref": "b60afa85-2dfb-4ec1-89e1-0120b872deb6",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d3f1c133-1bd0-4b68-b06c-c86d0aaac071"
        },
        "item": {
          "id": "907afe25-2c6d-419e-9fb8-d6ba24f56ce2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "81aaa4ed-1b06-40a4-bfd3-21cff2c03a58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "907afe25-2c6d-419e-9fb8-d6ba24f56ce2",
        "cursor": {
          "ref": "b60afa85-2dfb-4ec1-89e1-0120b872deb6",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d3f1c133-1bd0-4b68-b06c-c86d0aaac071"
        },
        "item": {
          "id": "907afe25-2c6d-419e-9fb8-d6ba24f56ce2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "81aaa4ed-1b06-40a4-bfd3-21cff2c03a58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "bb804c02-8efd-44b4-bcaf-34464e9d4b7c",
        "cursor": {
          "ref": "29e2f311-670d-4c9d-98c6-8fcc572802d0",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f84e84ca-6a38-4e37-92d5-1b5100017694"
        },
        "item": {
          "id": "bb804c02-8efd-44b4-bcaf-34464e9d4b7c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a1bd1615-35a6-4601-aafc-cea6d6024b96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "bb804c02-8efd-44b4-bcaf-34464e9d4b7c",
        "cursor": {
          "ref": "29e2f311-670d-4c9d-98c6-8fcc572802d0",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f84e84ca-6a38-4e37-92d5-1b5100017694"
        },
        "item": {
          "id": "bb804c02-8efd-44b4-bcaf-34464e9d4b7c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a1bd1615-35a6-4601-aafc-cea6d6024b96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "327e3f0f-0dea-4790-a793-c764231d572b",
        "cursor": {
          "ref": "f4b9f4ac-359f-46b6-9274-6f1e1ca19869",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8d6e491f-a4ac-4b62-a726-35030c8afcda"
        },
        "item": {
          "id": "327e3f0f-0dea-4790-a793-c764231d572b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "71054c08-3fe2-4ab9-8e56-dff2e6353ca5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "327e3f0f-0dea-4790-a793-c764231d572b",
        "cursor": {
          "ref": "f4b9f4ac-359f-46b6-9274-6f1e1ca19869",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8d6e491f-a4ac-4b62-a726-35030c8afcda"
        },
        "item": {
          "id": "327e3f0f-0dea-4790-a793-c764231d572b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "71054c08-3fe2-4ab9-8e56-dff2e6353ca5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "0889fb52-9d59-436a-b4c3-07aab7ce559d",
        "cursor": {
          "ref": "465f52fc-0949-4935-af64-d749280d4764",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "48c2e16b-390e-4d38-8c08-8287af32101c"
        },
        "item": {
          "id": "0889fb52-9d59-436a-b4c3-07aab7ce559d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "46355f10-c290-4b0a-8208-56f8cc56078d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "0889fb52-9d59-436a-b4c3-07aab7ce559d",
        "cursor": {
          "ref": "465f52fc-0949-4935-af64-d749280d4764",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "48c2e16b-390e-4d38-8c08-8287af32101c"
        },
        "item": {
          "id": "0889fb52-9d59-436a-b4c3-07aab7ce559d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "46355f10-c290-4b0a-8208-56f8cc56078d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "d89e980d-36ea-46c6-9ca1-2e6bfa8ec74f",
        "cursor": {
          "ref": "fe599489-b79d-470a-a05a-8b16a00da6c1",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "30687619-ad88-41b9-8012-5327a75554f2"
        },
        "item": {
          "id": "d89e980d-36ea-46c6-9ca1-2e6bfa8ec74f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1f98a43f-4fdf-49b6-8091-171475fa2077",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "d89e980d-36ea-46c6-9ca1-2e6bfa8ec74f",
        "cursor": {
          "ref": "fe599489-b79d-470a-a05a-8b16a00da6c1",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "30687619-ad88-41b9-8012-5327a75554f2"
        },
        "item": {
          "id": "d89e980d-36ea-46c6-9ca1-2e6bfa8ec74f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1f98a43f-4fdf-49b6-8091-171475fa2077",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "34ae3804-0d24-4bb4-93db-733c77bfcd0c",
        "cursor": {
          "ref": "ba08f993-5da8-4287-9e5a-f0c1b8d4e9a5",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a45c7309-2be2-475e-8fd2-7e1a0da018f2"
        },
        "item": {
          "id": "34ae3804-0d24-4bb4-93db-733c77bfcd0c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "690d3485-a8ee-4437-ad1a-4bf8ebbecef6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "34ae3804-0d24-4bb4-93db-733c77bfcd0c",
        "cursor": {
          "ref": "ba08f993-5da8-4287-9e5a-f0c1b8d4e9a5",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a45c7309-2be2-475e-8fd2-7e1a0da018f2"
        },
        "item": {
          "id": "34ae3804-0d24-4bb4-93db-733c77bfcd0c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "690d3485-a8ee-4437-ad1a-4bf8ebbecef6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "c82732bd-64e2-44d0-b8c5-a46a34e24ce2",
        "cursor": {
          "ref": "0ef7905b-b115-46c8-93a2-d62d2e32a3f9",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2ab4d401-877d-416f-9c15-eb48fcd71ac9"
        },
        "item": {
          "id": "c82732bd-64e2-44d0-b8c5-a46a34e24ce2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "15780a11-c7ec-4542-90e0-0bca190c6b10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "c82732bd-64e2-44d0-b8c5-a46a34e24ce2",
        "cursor": {
          "ref": "0ef7905b-b115-46c8-93a2-d62d2e32a3f9",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2ab4d401-877d-416f-9c15-eb48fcd71ac9"
        },
        "item": {
          "id": "c82732bd-64e2-44d0-b8c5-a46a34e24ce2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "15780a11-c7ec-4542-90e0-0bca190c6b10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "8feb2f31-f149-4d79-be74-90263bec2092",
        "cursor": {
          "ref": "77304585-44a1-4bc2-989d-cabb2c86e456",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "245a7d4f-0708-491a-ae21-6c3122e51d16"
        },
        "item": {
          "id": "8feb2f31-f149-4d79-be74-90263bec2092",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c68b2046-985a-4e44-b5dd-424ca501f189",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "8feb2f31-f149-4d79-be74-90263bec2092",
        "cursor": {
          "ref": "77304585-44a1-4bc2-989d-cabb2c86e456",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "245a7d4f-0708-491a-ae21-6c3122e51d16"
        },
        "item": {
          "id": "8feb2f31-f149-4d79-be74-90263bec2092",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c68b2046-985a-4e44-b5dd-424ca501f189",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "9a067a83-7576-458b-8997-d3be8906c26d",
        "cursor": {
          "ref": "775c5796-40fa-4bf3-962c-0af7abeddc75",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4ad84c3a-afb4-4296-9a23-d0f84479016d"
        },
        "item": {
          "id": "9a067a83-7576-458b-8997-d3be8906c26d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e03a8013-b6f3-4343-863f-db4fbe9ce9a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "9a067a83-7576-458b-8997-d3be8906c26d",
        "cursor": {
          "ref": "775c5796-40fa-4bf3-962c-0af7abeddc75",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4ad84c3a-afb4-4296-9a23-d0f84479016d"
        },
        "item": {
          "id": "9a067a83-7576-458b-8997-d3be8906c26d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e03a8013-b6f3-4343-863f-db4fbe9ce9a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "cb314eb5-38ae-4a41-a602-72112a5f4feb",
        "cursor": {
          "ref": "521b7427-ed7e-496b-9460-373f8961663b",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "74782f14-b42e-4423-8641-c135faca3db7"
        },
        "item": {
          "id": "cb314eb5-38ae-4a41-a602-72112a5f4feb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "11471425-151e-4726-a3a0-122447217d26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "cb314eb5-38ae-4a41-a602-72112a5f4feb",
        "cursor": {
          "ref": "521b7427-ed7e-496b-9460-373f8961663b",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "74782f14-b42e-4423-8641-c135faca3db7"
        },
        "item": {
          "id": "cb314eb5-38ae-4a41-a602-72112a5f4feb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "11471425-151e-4726-a3a0-122447217d26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "d9655594-79bb-40f1-864f-a9192708dd82",
        "cursor": {
          "ref": "bbe6f988-3f1e-4752-88cf-3a35f3a5a89b",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "206b3427-8120-4426-aba4-88a338284296"
        },
        "item": {
          "id": "d9655594-79bb-40f1-864f-a9192708dd82",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "04192aff-3a41-4185-94e4-13728e17f45d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "d9655594-79bb-40f1-864f-a9192708dd82",
        "cursor": {
          "ref": "bbe6f988-3f1e-4752-88cf-3a35f3a5a89b",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "206b3427-8120-4426-aba4-88a338284296"
        },
        "item": {
          "id": "d9655594-79bb-40f1-864f-a9192708dd82",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "04192aff-3a41-4185-94e4-13728e17f45d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "b9a9889c-7e3c-4020-8a11-f9f307880f71",
        "cursor": {
          "ref": "6ac7fe4f-9301-44bd-91ae-5d55d09af9e9",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "40d31509-8587-4e5c-b79a-b3870d01c251"
        },
        "item": {
          "id": "b9a9889c-7e3c-4020-8a11-f9f307880f71",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "43075921-d5ee-4564-8c3a-86d20f6ff989",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "b9a9889c-7e3c-4020-8a11-f9f307880f71",
        "cursor": {
          "ref": "6ac7fe4f-9301-44bd-91ae-5d55d09af9e9",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "40d31509-8587-4e5c-b79a-b3870d01c251"
        },
        "item": {
          "id": "b9a9889c-7e3c-4020-8a11-f9f307880f71",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "43075921-d5ee-4564-8c3a-86d20f6ff989",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "f04ad044-a8f8-4546-85cd-9bf5f14c9669",
        "cursor": {
          "ref": "fc099abe-c485-4c6f-bae1-049bc7ba4a82",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1bc0a051-1359-4bd2-92a0-c41122a3a137"
        },
        "item": {
          "id": "f04ad044-a8f8-4546-85cd-9bf5f14c9669",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ac110161-61df-4657-98b5-ae9983cd9099",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "f04ad044-a8f8-4546-85cd-9bf5f14c9669",
        "cursor": {
          "ref": "fc099abe-c485-4c6f-bae1-049bc7ba4a82",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1bc0a051-1359-4bd2-92a0-c41122a3a137"
        },
        "item": {
          "id": "f04ad044-a8f8-4546-85cd-9bf5f14c9669",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ac110161-61df-4657-98b5-ae9983cd9099",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "11bfd1b2-e005-4871-88af-5a4d62956b4f",
        "cursor": {
          "ref": "36cc8779-8eea-40d1-8255-1c8d7f480f85",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "34ffb21d-b2f2-486e-a05b-ad664bdf0dd2"
        },
        "item": {
          "id": "11bfd1b2-e005-4871-88af-5a4d62956b4f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cc264bb8-577b-4eee-88af-9a044d54af18",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37259,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "11bfd1b2-e005-4871-88af-5a4d62956b4f",
        "cursor": {
          "ref": "36cc8779-8eea-40d1-8255-1c8d7f480f85",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "34ffb21d-b2f2-486e-a05b-ad664bdf0dd2"
        },
        "item": {
          "id": "11bfd1b2-e005-4871-88af-5a4d62956b4f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cc264bb8-577b-4eee-88af-9a044d54af18",
          "status": "Service Unavailable",
          "code": 503,
          "responseTime": 37259,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'S' at 1:1\nService Unavailable\n^",
              "stack": "JSONError: Unexpected token 'S' at 1:1\nService Unavailable\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "61f66437-ac58-4500-8076-676471d893b4",
        "cursor": {
          "ref": "d835fcbc-b0cb-4f17-943c-d6cbf61e75d8",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1608a8a4-ab43-428a-bc6f-661566f41587"
        },
        "item": {
          "id": "61f66437-ac58-4500-8076-676471d893b4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "553d43e5-af6a-4a2c-a67e-83681adb5a75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "61f66437-ac58-4500-8076-676471d893b4",
        "cursor": {
          "ref": "d835fcbc-b0cb-4f17-943c-d6cbf61e75d8",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1608a8a4-ab43-428a-bc6f-661566f41587"
        },
        "item": {
          "id": "61f66437-ac58-4500-8076-676471d893b4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "553d43e5-af6a-4a2c-a67e-83681adb5a75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "c47a9492-6332-42be-9eca-5710595ea290",
        "cursor": {
          "ref": "09e60e76-440f-436a-881d-f0dbeb6b7f70",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ce69a618-68c7-4fd3-a637-222ce06158ac"
        },
        "item": {
          "id": "c47a9492-6332-42be-9eca-5710595ea290",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6ffcffa0-85e5-49c6-8099-5bbe509ddc5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "c47a9492-6332-42be-9eca-5710595ea290",
        "cursor": {
          "ref": "09e60e76-440f-436a-881d-f0dbeb6b7f70",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ce69a618-68c7-4fd3-a637-222ce06158ac"
        },
        "item": {
          "id": "c47a9492-6332-42be-9eca-5710595ea290",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6ffcffa0-85e5-49c6-8099-5bbe509ddc5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "c7ea104a-262b-419f-89a3-aa8264d960e5",
        "cursor": {
          "ref": "d269c958-8473-4516-ad15-3e7ad5476025",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d6bdaeaa-7a0c-4ea8-85e3-9c9efd0c102f"
        },
        "item": {
          "id": "c7ea104a-262b-419f-89a3-aa8264d960e5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "80797db6-bbb7-46fd-a24b-1f58176c71d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "c7ea104a-262b-419f-89a3-aa8264d960e5",
        "cursor": {
          "ref": "d269c958-8473-4516-ad15-3e7ad5476025",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d6bdaeaa-7a0c-4ea8-85e3-9c9efd0c102f"
        },
        "item": {
          "id": "c7ea104a-262b-419f-89a3-aa8264d960e5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "80797db6-bbb7-46fd-a24b-1f58176c71d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "8569fa99-4577-4f1d-8be5-d3e395a10a1f",
        "cursor": {
          "ref": "a5bdbd3c-b46a-4e4d-83b6-7ee335e100ed",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "41d64002-fd32-45a7-9bb7-285804f97ac5"
        },
        "item": {
          "id": "8569fa99-4577-4f1d-8be5-d3e395a10a1f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9c282015-2777-4b6a-9841-95556733fc32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "8569fa99-4577-4f1d-8be5-d3e395a10a1f",
        "cursor": {
          "ref": "a5bdbd3c-b46a-4e4d-83b6-7ee335e100ed",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "41d64002-fd32-45a7-9bb7-285804f97ac5"
        },
        "item": {
          "id": "8569fa99-4577-4f1d-8be5-d3e395a10a1f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9c282015-2777-4b6a-9841-95556733fc32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c2ee73e6-e1e1-4752-b2ef-6df74679882f",
        "cursor": {
          "ref": "444d4da1-f22b-48c2-b7c9-8513be22f436",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "940add14-5000-4e4f-8718-95f3e723c61a"
        },
        "item": {
          "id": "c2ee73e6-e1e1-4752-b2ef-6df74679882f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1a4ce724-82a7-4c2d-a660-9fe8bc9055a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "c2ee73e6-e1e1-4752-b2ef-6df74679882f",
        "cursor": {
          "ref": "444d4da1-f22b-48c2-b7c9-8513be22f436",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "940add14-5000-4e4f-8718-95f3e723c61a"
        },
        "item": {
          "id": "c2ee73e6-e1e1-4752-b2ef-6df74679882f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1a4ce724-82a7-4c2d-a660-9fe8bc9055a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "9ada18e8-40db-44d0-8cb3-9b5c7b9da1e0",
        "cursor": {
          "ref": "87eaa2e4-187b-428d-be31-2b6b85a65a78",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4e3bd973-733e-4a3e-a42a-79f4949e0783"
        },
        "item": {
          "id": "9ada18e8-40db-44d0-8cb3-9b5c7b9da1e0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4bd58a85-840b-4451-979d-6e29c9b846d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "9ada18e8-40db-44d0-8cb3-9b5c7b9da1e0",
        "cursor": {
          "ref": "87eaa2e4-187b-428d-be31-2b6b85a65a78",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4e3bd973-733e-4a3e-a42a-79f4949e0783"
        },
        "item": {
          "id": "9ada18e8-40db-44d0-8cb3-9b5c7b9da1e0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4bd58a85-840b-4451-979d-6e29c9b846d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c7bfb43c-86d8-4b24-85de-0821cdd634b8",
        "cursor": {
          "ref": "171d18bc-6080-4f66-801b-c40f5c59300e",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8bb98967-02af-44ea-882f-2e87095464ff"
        },
        "item": {
          "id": "c7bfb43c-86d8-4b24-85de-0821cdd634b8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "15c155e9-2413-4f1a-b8f6-d874bcfe950e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c7bfb43c-86d8-4b24-85de-0821cdd634b8",
        "cursor": {
          "ref": "171d18bc-6080-4f66-801b-c40f5c59300e",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8bb98967-02af-44ea-882f-2e87095464ff"
        },
        "item": {
          "id": "c7bfb43c-86d8-4b24-85de-0821cdd634b8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "15c155e9-2413-4f1a-b8f6-d874bcfe950e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f3c3b05f-3fc3-4e6f-8815-a393848e405c",
        "cursor": {
          "ref": "f38cdcdf-5a29-4bb9-83d1-932dbde69d4a",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b0aad04b-0360-4ede-99b9-9fc2c4e22777"
        },
        "item": {
          "id": "f3c3b05f-3fc3-4e6f-8815-a393848e405c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bdf8363d-7beb-48c7-bf1a-8ca583df4832",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "f3c3b05f-3fc3-4e6f-8815-a393848e405c",
        "cursor": {
          "ref": "f38cdcdf-5a29-4bb9-83d1-932dbde69d4a",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b0aad04b-0360-4ede-99b9-9fc2c4e22777"
        },
        "item": {
          "id": "f3c3b05f-3fc3-4e6f-8815-a393848e405c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bdf8363d-7beb-48c7-bf1a-8ca583df4832",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "ae8a0338-7547-4c08-9a52-d11ab80534ff",
        "cursor": {
          "ref": "1ccd41a2-e909-4091-b8dc-e07ffa522cec",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b3a2af90-e4fb-4561-83d2-a25630e52e94"
        },
        "item": {
          "id": "ae8a0338-7547-4c08-9a52-d11ab80534ff",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b8c008f2-e1e8-41dd-950b-02e83f2023f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "ae8a0338-7547-4c08-9a52-d11ab80534ff",
        "cursor": {
          "ref": "1ccd41a2-e909-4091-b8dc-e07ffa522cec",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b3a2af90-e4fb-4561-83d2-a25630e52e94"
        },
        "item": {
          "id": "ae8a0338-7547-4c08-9a52-d11ab80534ff",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b8c008f2-e1e8-41dd-950b-02e83f2023f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b16c2721-8ba5-4346-a26f-27da85c08cd1",
        "cursor": {
          "ref": "1a7d3f1f-775d-4106-bb67-be549d82503e",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7c3a500b-76ef-490f-8f33-630c4d0d1845"
        },
        "item": {
          "id": "b16c2721-8ba5-4346-a26f-27da85c08cd1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "adab512f-f9f7-4b2f-9cb8-8c6f41d9e315",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "b16c2721-8ba5-4346-a26f-27da85c08cd1",
        "cursor": {
          "ref": "1a7d3f1f-775d-4106-bb67-be549d82503e",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7c3a500b-76ef-490f-8f33-630c4d0d1845"
        },
        "item": {
          "id": "b16c2721-8ba5-4346-a26f-27da85c08cd1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "adab512f-f9f7-4b2f-9cb8-8c6f41d9e315",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "4fc62147-f3ae-4b2b-8ff7-bcffdb252a9e",
        "cursor": {
          "ref": "76e090f1-f6c7-450d-9cc4-4b75369a7e55",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0f966142-6a24-4a2a-a590-99b681774e31"
        },
        "item": {
          "id": "4fc62147-f3ae-4b2b-8ff7-bcffdb252a9e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fd9e4018-48ad-46fa-b787-733e5d423410",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "4fc62147-f3ae-4b2b-8ff7-bcffdb252a9e",
        "cursor": {
          "ref": "76e090f1-f6c7-450d-9cc4-4b75369a7e55",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0f966142-6a24-4a2a-a590-99b681774e31"
        },
        "item": {
          "id": "4fc62147-f3ae-4b2b-8ff7-bcffdb252a9e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fd9e4018-48ad-46fa-b787-733e5d423410",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "1732f5a0-e39c-4136-98fa-bbe6a482c29f",
        "cursor": {
          "ref": "f16279bf-7745-4b61-ba7c-c715e6cc5ea8",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e26a3ec1-4356-4153-bea4-127e658078c0"
        },
        "item": {
          "id": "1732f5a0-e39c-4136-98fa-bbe6a482c29f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "03b5e910-cfad-462a-984f-98add09bbd42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "1732f5a0-e39c-4136-98fa-bbe6a482c29f",
        "cursor": {
          "ref": "f16279bf-7745-4b61-ba7c-c715e6cc5ea8",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e26a3ec1-4356-4153-bea4-127e658078c0"
        },
        "item": {
          "id": "1732f5a0-e39c-4136-98fa-bbe6a482c29f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "03b5e910-cfad-462a-984f-98add09bbd42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "800fee33-04d4-469b-ac28-94c14f0c87b4",
        "cursor": {
          "ref": "63824cec-1545-4707-a401-f0700850785b",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f4396382-3d3a-4399-8033-2fb88a2cd3d4"
        },
        "item": {
          "id": "800fee33-04d4-469b-ac28-94c14f0c87b4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5229ce9f-02e2-4dbb-bd49-e56f5f1f40cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "800fee33-04d4-469b-ac28-94c14f0c87b4",
        "cursor": {
          "ref": "63824cec-1545-4707-a401-f0700850785b",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f4396382-3d3a-4399-8033-2fb88a2cd3d4"
        },
        "item": {
          "id": "800fee33-04d4-469b-ac28-94c14f0c87b4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5229ce9f-02e2-4dbb-bd49-e56f5f1f40cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "dadcfb28-e000-47c3-8a13-d3acef965d2e",
        "cursor": {
          "ref": "dc970ebe-c136-4be9-bf42-305bc7b510c3",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "17e5a558-bc61-4b71-86c6-b794af551f35"
        },
        "item": {
          "id": "dadcfb28-e000-47c3-8a13-d3acef965d2e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c4e1a79a-8dde-4944-bce1-49328362fab4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "dadcfb28-e000-47c3-8a13-d3acef965d2e",
        "cursor": {
          "ref": "dc970ebe-c136-4be9-bf42-305bc7b510c3",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "17e5a558-bc61-4b71-86c6-b794af551f35"
        },
        "item": {
          "id": "dadcfb28-e000-47c3-8a13-d3acef965d2e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c4e1a79a-8dde-4944-bce1-49328362fab4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "357fac96-f42a-4288-b7ca-7d4941f0aa4b",
        "cursor": {
          "ref": "ebde8e16-010d-4b56-8f2b-327aa90fbd77",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ca65fcd9-bfb9-45d8-9d96-f708106f2e78"
        },
        "item": {
          "id": "357fac96-f42a-4288-b7ca-7d4941f0aa4b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "edc8c371-f12d-4c5d-8eb2-974129dbda57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "357fac96-f42a-4288-b7ca-7d4941f0aa4b",
        "cursor": {
          "ref": "ebde8e16-010d-4b56-8f2b-327aa90fbd77",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ca65fcd9-bfb9-45d8-9d96-f708106f2e78"
        },
        "item": {
          "id": "357fac96-f42a-4288-b7ca-7d4941f0aa4b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "edc8c371-f12d-4c5d-8eb2-974129dbda57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "476d1665-d414-4d7f-b8cc-bffd0896d9cd",
        "cursor": {
          "ref": "8df451e7-fded-49c0-973e-0252189bda04",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b884d652-63c7-4219-9db2-cfbabeac1c6f"
        },
        "item": {
          "id": "476d1665-d414-4d7f-b8cc-bffd0896d9cd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "18519825-44b8-425b-9df1-cd3783ee045f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "476d1665-d414-4d7f-b8cc-bffd0896d9cd",
        "cursor": {
          "ref": "8df451e7-fded-49c0-973e-0252189bda04",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b884d652-63c7-4219-9db2-cfbabeac1c6f"
        },
        "item": {
          "id": "476d1665-d414-4d7f-b8cc-bffd0896d9cd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "18519825-44b8-425b-9df1-cd3783ee045f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "7156a85b-f4be-4bb2-b371-aa917c3d42a9",
        "cursor": {
          "ref": "ac9a03f0-9b31-4b1c-af65-fd3183cdc7f6",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2dd526c3-3025-4c3d-91b0-022008c188e3"
        },
        "item": {
          "id": "7156a85b-f4be-4bb2-b371-aa917c3d42a9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "900fb50d-dd4b-4dae-9ae0-9cb49a5e5229",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "7156a85b-f4be-4bb2-b371-aa917c3d42a9",
        "cursor": {
          "ref": "ac9a03f0-9b31-4b1c-af65-fd3183cdc7f6",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2dd526c3-3025-4c3d-91b0-022008c188e3"
        },
        "item": {
          "id": "7156a85b-f4be-4bb2-b371-aa917c3d42a9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "900fb50d-dd4b-4dae-9ae0-9cb49a5e5229",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "a0513434-40cb-4980-9ef8-5413436b1c38",
        "cursor": {
          "ref": "d8e28324-20a4-4a8a-9879-eeb895416133",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bd956671-331d-49f5-acea-08576116d612"
        },
        "item": {
          "id": "a0513434-40cb-4980-9ef8-5413436b1c38",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f107999d-8ef9-4406-9f58-f0a24affd1e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "a0513434-40cb-4980-9ef8-5413436b1c38",
        "cursor": {
          "ref": "d8e28324-20a4-4a8a-9879-eeb895416133",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bd956671-331d-49f5-acea-08576116d612"
        },
        "item": {
          "id": "a0513434-40cb-4980-9ef8-5413436b1c38",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f107999d-8ef9-4406-9f58-f0a24affd1e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "84809aa2-7970-4c14-81bc-1915d8dfd1b4",
        "cursor": {
          "ref": "1136f186-adc2-4ca5-bee1-17a69c946677",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "da5fa5a8-2499-47d4-ac9c-655a29770781"
        },
        "item": {
          "id": "84809aa2-7970-4c14-81bc-1915d8dfd1b4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b477dbb3-a20c-451e-af8f-7a5d15533bfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "84809aa2-7970-4c14-81bc-1915d8dfd1b4",
        "cursor": {
          "ref": "1136f186-adc2-4ca5-bee1-17a69c946677",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "da5fa5a8-2499-47d4-ac9c-655a29770781"
        },
        "item": {
          "id": "84809aa2-7970-4c14-81bc-1915d8dfd1b4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b477dbb3-a20c-451e-af8f-7a5d15533bfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "46e2cd01-3032-40ce-8307-c4b195e00b26",
        "cursor": {
          "ref": "a83dc744-6219-43ca-abaa-d5a72d6b03c9",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "338c34e5-1afa-411d-b2c5-6b995508879c"
        },
        "item": {
          "id": "46e2cd01-3032-40ce-8307-c4b195e00b26",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a42c17dd-b79a-4d81-8751-c39aa9a976f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "46e2cd01-3032-40ce-8307-c4b195e00b26",
        "cursor": {
          "ref": "a83dc744-6219-43ca-abaa-d5a72d6b03c9",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "338c34e5-1afa-411d-b2c5-6b995508879c"
        },
        "item": {
          "id": "46e2cd01-3032-40ce-8307-c4b195e00b26",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a42c17dd-b79a-4d81-8751-c39aa9a976f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "9eda759e-4e85-4b99-8a36-545cccbdeebb",
        "cursor": {
          "ref": "0ce204bd-bb83-4245-94f2-15f35edb663c",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f6058b67-c959-4b15-95e7-9f21d73a16a0"
        },
        "item": {
          "id": "9eda759e-4e85-4b99-8a36-545cccbdeebb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a36a76a3-ecef-4771-a693-a85cd17b1146",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "9eda759e-4e85-4b99-8a36-545cccbdeebb",
        "cursor": {
          "ref": "0ce204bd-bb83-4245-94f2-15f35edb663c",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f6058b67-c959-4b15-95e7-9f21d73a16a0"
        },
        "item": {
          "id": "9eda759e-4e85-4b99-8a36-545cccbdeebb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a36a76a3-ecef-4771-a693-a85cd17b1146",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "acd9d4db-3c5e-443b-a936-0046e8e32a8a",
        "cursor": {
          "ref": "2bbe03a0-c9ee-4aae-b489-e762dee97892",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4b068d88-4a86-4dda-a257-1d47f89a103b"
        },
        "item": {
          "id": "acd9d4db-3c5e-443b-a936-0046e8e32a8a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1c1795f3-7b02-4b0c-bccc-711d6b130154",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "acd9d4db-3c5e-443b-a936-0046e8e32a8a",
        "cursor": {
          "ref": "2bbe03a0-c9ee-4aae-b489-e762dee97892",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4b068d88-4a86-4dda-a257-1d47f89a103b"
        },
        "item": {
          "id": "acd9d4db-3c5e-443b-a936-0046e8e32a8a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1c1795f3-7b02-4b0c-bccc-711d6b130154",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "bb8ea686-c476-4aa1-a373-3be74f8dee1a",
        "cursor": {
          "ref": "cf9d8a50-b752-40d6-83e6-a7d1085d9d7a",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ce86644a-6405-4835-ae14-dc7a18dff13a"
        },
        "item": {
          "id": "bb8ea686-c476-4aa1-a373-3be74f8dee1a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ce3a4e67-4888-49b6-8a68-4c140ddc5fdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "bb8ea686-c476-4aa1-a373-3be74f8dee1a",
        "cursor": {
          "ref": "cf9d8a50-b752-40d6-83e6-a7d1085d9d7a",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ce86644a-6405-4835-ae14-dc7a18dff13a"
        },
        "item": {
          "id": "bb8ea686-c476-4aa1-a373-3be74f8dee1a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ce3a4e67-4888-49b6-8a68-4c140ddc5fdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "2260bf96-07fe-416e-8722-0c683ba2c81c",
        "cursor": {
          "ref": "f3883a75-b97b-476f-b493-3d10df00e555",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f123772a-60d9-48f7-b7b2-9b9e9b6d740b"
        },
        "item": {
          "id": "2260bf96-07fe-416e-8722-0c683ba2c81c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0a0cfe0a-84fb-4b96-b48f-807d026e296a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "2260bf96-07fe-416e-8722-0c683ba2c81c",
        "cursor": {
          "ref": "f3883a75-b97b-476f-b493-3d10df00e555",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f123772a-60d9-48f7-b7b2-9b9e9b6d740b"
        },
        "item": {
          "id": "2260bf96-07fe-416e-8722-0c683ba2c81c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0a0cfe0a-84fb-4b96-b48f-807d026e296a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "95d4efee-35f0-4d30-9cf9-04c8db00b3ba",
        "cursor": {
          "ref": "b75e95be-25ea-43f1-98c5-f1d47f5ef4f4",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "59687061-f722-470b-ba7d-9096313e2859"
        },
        "item": {
          "id": "95d4efee-35f0-4d30-9cf9-04c8db00b3ba",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2d9f390e-8a6a-4d6d-826d-c7bc5b585f2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "95d4efee-35f0-4d30-9cf9-04c8db00b3ba",
        "cursor": {
          "ref": "b75e95be-25ea-43f1-98c5-f1d47f5ef4f4",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "59687061-f722-470b-ba7d-9096313e2859"
        },
        "item": {
          "id": "95d4efee-35f0-4d30-9cf9-04c8db00b3ba",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2d9f390e-8a6a-4d6d-826d-c7bc5b585f2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "feb21dd7-d9a5-4e72-a246-5952b85bdd79",
        "cursor": {
          "ref": "22cdae4d-002e-48c2-bedb-e19da73bbc0f",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2de3a8cf-1cc9-4d98-8b12-4131a116ff75"
        },
        "item": {
          "id": "feb21dd7-d9a5-4e72-a246-5952b85bdd79",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "641704e2-7f46-4bc6-9bc7-7f91fef019c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "feb21dd7-d9a5-4e72-a246-5952b85bdd79",
        "cursor": {
          "ref": "22cdae4d-002e-48c2-bedb-e19da73bbc0f",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2de3a8cf-1cc9-4d98-8b12-4131a116ff75"
        },
        "item": {
          "id": "feb21dd7-d9a5-4e72-a246-5952b85bdd79",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "641704e2-7f46-4bc6-9bc7-7f91fef019c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "473d034b-5474-4092-9506-429a352beb89",
        "cursor": {
          "ref": "f31d5f3c-016f-4644-890d-f0331e37c319",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c790a330-4792-4c10-bf89-bb228446776b"
        },
        "item": {
          "id": "473d034b-5474-4092-9506-429a352beb89",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c9f8ffa4-153a-4f5c-81fa-eb9d44017154",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "473d034b-5474-4092-9506-429a352beb89",
        "cursor": {
          "ref": "f31d5f3c-016f-4644-890d-f0331e37c319",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c790a330-4792-4c10-bf89-bb228446776b"
        },
        "item": {
          "id": "473d034b-5474-4092-9506-429a352beb89",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c9f8ffa4-153a-4f5c-81fa-eb9d44017154",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "79ad33ef-59ac-4b75-a284-0e035fbc1c46",
        "cursor": {
          "ref": "2e8df220-0535-4c47-9b53-4ea7a7f7a6f2",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "41ec41fd-76d4-471f-875e-3b49802a0824"
        },
        "item": {
          "id": "79ad33ef-59ac-4b75-a284-0e035fbc1c46",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9e65a0d3-b40d-4ba7-8e3f-de478e84792c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "79ad33ef-59ac-4b75-a284-0e035fbc1c46",
        "cursor": {
          "ref": "2e8df220-0535-4c47-9b53-4ea7a7f7a6f2",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "41ec41fd-76d4-471f-875e-3b49802a0824"
        },
        "item": {
          "id": "79ad33ef-59ac-4b75-a284-0e035fbc1c46",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9e65a0d3-b40d-4ba7-8e3f-de478e84792c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "987f7688-ee55-46b8-9b58-f136d0bab8ed",
        "cursor": {
          "ref": "af771ac6-3e05-454c-916b-5faf874965e5",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9dc101ff-9a54-4c19-8e68-b1915e3bec5d"
        },
        "item": {
          "id": "987f7688-ee55-46b8-9b58-f136d0bab8ed",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a414a137-de64-4386-9717-9a66671b80e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "987f7688-ee55-46b8-9b58-f136d0bab8ed",
        "cursor": {
          "ref": "af771ac6-3e05-454c-916b-5faf874965e5",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9dc101ff-9a54-4c19-8e68-b1915e3bec5d"
        },
        "item": {
          "id": "987f7688-ee55-46b8-9b58-f136d0bab8ed",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a414a137-de64-4386-9717-9a66671b80e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ed4283df-95ae-4b4e-8a99-bcfb4436de65",
        "cursor": {
          "ref": "4b71995b-bb65-443d-892c-14438b7576f6",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6cd5e6bf-864d-4f09-bb6e-e0a8cfb30e33"
        },
        "item": {
          "id": "ed4283df-95ae-4b4e-8a99-bcfb4436de65",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bed707c3-f50e-4907-b043-29368cce8ddf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "ed4283df-95ae-4b4e-8a99-bcfb4436de65",
        "cursor": {
          "ref": "4b71995b-bb65-443d-892c-14438b7576f6",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6cd5e6bf-864d-4f09-bb6e-e0a8cfb30e33"
        },
        "item": {
          "id": "ed4283df-95ae-4b4e-8a99-bcfb4436de65",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bed707c3-f50e-4907-b043-29368cce8ddf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "296f96f8-68e4-4b2d-83e8-47151288d412",
        "cursor": {
          "ref": "14ac79bc-5f17-46cd-b4f8-dd89f6e51acc",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bdb6387f-d603-4257-85ea-6c7106903598"
        },
        "item": {
          "id": "296f96f8-68e4-4b2d-83e8-47151288d412",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1b30a428-0769-41cf-abe3-2982340aa95f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "296f96f8-68e4-4b2d-83e8-47151288d412",
        "cursor": {
          "ref": "14ac79bc-5f17-46cd-b4f8-dd89f6e51acc",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bdb6387f-d603-4257-85ea-6c7106903598"
        },
        "item": {
          "id": "296f96f8-68e4-4b2d-83e8-47151288d412",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1b30a428-0769-41cf-abe3-2982340aa95f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "38d85c78-3de7-4cf5-af03-797f07236a0d",
        "cursor": {
          "ref": "380693d4-7799-4c6d-b6e5-991200e3d349",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7a3867ee-9186-49e2-be70-74785e2477d7"
        },
        "item": {
          "id": "38d85c78-3de7-4cf5-af03-797f07236a0d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4f03e016-392a-400b-b152-0142206263d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "38d85c78-3de7-4cf5-af03-797f07236a0d",
        "cursor": {
          "ref": "380693d4-7799-4c6d-b6e5-991200e3d349",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7a3867ee-9186-49e2-be70-74785e2477d7"
        },
        "item": {
          "id": "38d85c78-3de7-4cf5-af03-797f07236a0d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4f03e016-392a-400b-b152-0142206263d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "fc270a92-c835-47de-b297-c58c214f5a3d",
        "cursor": {
          "ref": "5d6e5943-c099-40e9-bf96-123f341b8d17",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "92cbd6e8-5ced-4fa6-b6bb-abbfaa3f07a4"
        },
        "item": {
          "id": "fc270a92-c835-47de-b297-c58c214f5a3d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e9fcac4e-923d-49d1-ac0e-98540214f849",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "fc270a92-c835-47de-b297-c58c214f5a3d",
        "cursor": {
          "ref": "5d6e5943-c099-40e9-bf96-123f341b8d17",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "92cbd6e8-5ced-4fa6-b6bb-abbfaa3f07a4"
        },
        "item": {
          "id": "fc270a92-c835-47de-b297-c58c214f5a3d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e9fcac4e-923d-49d1-ac0e-98540214f849",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "c88b5d06-47b0-4ff6-bd24-e8a4144ef726",
        "cursor": {
          "ref": "628d8fdf-f8af-4cd0-8fec-997fa46008f6",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3a123875-d463-44cb-a746-62347a4685e4"
        },
        "item": {
          "id": "c88b5d06-47b0-4ff6-bd24-e8a4144ef726",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7de4d21d-55f9-41a0-a395-5786e2deab78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "c88b5d06-47b0-4ff6-bd24-e8a4144ef726",
        "cursor": {
          "ref": "628d8fdf-f8af-4cd0-8fec-997fa46008f6",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3a123875-d463-44cb-a746-62347a4685e4"
        },
        "item": {
          "id": "c88b5d06-47b0-4ff6-bd24-e8a4144ef726",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7de4d21d-55f9-41a0-a395-5786e2deab78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "45c7ff07-ccdc-465d-9c27-182b7aa2cfb3",
        "cursor": {
          "ref": "d95e7353-01da-4ef1-ad12-0f57bb93ec65",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "eb226c03-74af-4bcd-ae14-764fd8f367b5"
        },
        "item": {
          "id": "45c7ff07-ccdc-465d-9c27-182b7aa2cfb3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a873d2ee-a3de-44f5-8c8c-7cfed6ee825e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "45c7ff07-ccdc-465d-9c27-182b7aa2cfb3",
        "cursor": {
          "ref": "d95e7353-01da-4ef1-ad12-0f57bb93ec65",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "eb226c03-74af-4bcd-ae14-764fd8f367b5"
        },
        "item": {
          "id": "45c7ff07-ccdc-465d-9c27-182b7aa2cfb3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a873d2ee-a3de-44f5-8c8c-7cfed6ee825e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "8502a828-b3d2-4195-b449-de661ad041a1",
        "cursor": {
          "ref": "5468d78d-9c8a-45b9-9cf8-74d955457aed",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eee6171e-09b9-4891-9f5e-ccb66fdd4eae"
        },
        "item": {
          "id": "8502a828-b3d2-4195-b449-de661ad041a1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c99139a2-db19-4e18-8406-02d7f13a116f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "8502a828-b3d2-4195-b449-de661ad041a1",
        "cursor": {
          "ref": "5468d78d-9c8a-45b9-9cf8-74d955457aed",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eee6171e-09b9-4891-9f5e-ccb66fdd4eae"
        },
        "item": {
          "id": "8502a828-b3d2-4195-b449-de661ad041a1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c99139a2-db19-4e18-8406-02d7f13a116f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "09510ada-33cd-4b80-bbea-d3808161fad1",
        "cursor": {
          "ref": "fe9f4d4d-44ae-4389-805e-242011418f8e",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d84d00f7-412d-4cef-9dbc-18c88aa94f6e"
        },
        "item": {
          "id": "09510ada-33cd-4b80-bbea-d3808161fad1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0924fc9a-65aa-430b-b11c-92eaf36d36c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "09510ada-33cd-4b80-bbea-d3808161fad1",
        "cursor": {
          "ref": "fe9f4d4d-44ae-4389-805e-242011418f8e",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d84d00f7-412d-4cef-9dbc-18c88aa94f6e"
        },
        "item": {
          "id": "09510ada-33cd-4b80-bbea-d3808161fad1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0924fc9a-65aa-430b-b11c-92eaf36d36c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a8ea4dfc-9a73-4003-b4e3-dc7cec268b93",
        "cursor": {
          "ref": "be29b7f5-4fec-4866-ac0d-e083cae63914",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d479df6c-4c59-490c-886c-fb51d7225ac5"
        },
        "item": {
          "id": "a8ea4dfc-9a73-4003-b4e3-dc7cec268b93",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a18a2879-892e-494a-8479-caf9812badf9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "a8ea4dfc-9a73-4003-b4e3-dc7cec268b93",
        "cursor": {
          "ref": "be29b7f5-4fec-4866-ac0d-e083cae63914",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d479df6c-4c59-490c-886c-fb51d7225ac5"
        },
        "item": {
          "id": "a8ea4dfc-9a73-4003-b4e3-dc7cec268b93",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a18a2879-892e-494a-8479-caf9812badf9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "b040b779-8076-4b2b-a79f-c1e932f9e9e8",
        "cursor": {
          "ref": "2512445a-9dcc-4e61-a06b-592f005942a4",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "132d401f-7d0d-44df-803e-d2abacea76c6"
        },
        "item": {
          "id": "b040b779-8076-4b2b-a79f-c1e932f9e9e8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bcace3ca-30dd-4f21-b435-16a01abbaa4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b040b779-8076-4b2b-a79f-c1e932f9e9e8",
        "cursor": {
          "ref": "2512445a-9dcc-4e61-a06b-592f005942a4",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "132d401f-7d0d-44df-803e-d2abacea76c6"
        },
        "item": {
          "id": "b040b779-8076-4b2b-a79f-c1e932f9e9e8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bcace3ca-30dd-4f21-b435-16a01abbaa4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9a18ec00-ad7e-4761-8867-def8166d8243",
        "cursor": {
          "ref": "554beb3a-8ecd-4313-9bb1-6b8f0ca198be",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d471d36d-f2df-47ea-b790-1b4f51b5b5ab"
        },
        "item": {
          "id": "9a18ec00-ad7e-4761-8867-def8166d8243",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "90ff6992-72a7-43f1-bde9-4355b11ffe88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "9a18ec00-ad7e-4761-8867-def8166d8243",
        "cursor": {
          "ref": "554beb3a-8ecd-4313-9bb1-6b8f0ca198be",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d471d36d-f2df-47ea-b790-1b4f51b5b5ab"
        },
        "item": {
          "id": "9a18ec00-ad7e-4761-8867-def8166d8243",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "90ff6992-72a7-43f1-bde9-4355b11ffe88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "bae5fae3-647c-4eb8-bfd7-5e58e2bbc635",
        "cursor": {
          "ref": "e46cf7db-2ea1-4586-a69a-6af4ae1ba4a5",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2f340797-51bd-4643-8727-9a894c7c443e"
        },
        "item": {
          "id": "bae5fae3-647c-4eb8-bfd7-5e58e2bbc635",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "110f95db-26cb-4e3b-838a-ddeacc50a299",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "bae5fae3-647c-4eb8-bfd7-5e58e2bbc635",
        "cursor": {
          "ref": "e46cf7db-2ea1-4586-a69a-6af4ae1ba4a5",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2f340797-51bd-4643-8727-9a894c7c443e"
        },
        "item": {
          "id": "bae5fae3-647c-4eb8-bfd7-5e58e2bbc635",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "110f95db-26cb-4e3b-838a-ddeacc50a299",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8c9150a2-f495-440a-b537-d7247f5dcbb7",
        "cursor": {
          "ref": "58dae423-591c-485a-9f53-f2afdc3cc02b",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "161a0465-9968-4448-abfb-24652f6a8b88"
        },
        "item": {
          "id": "8c9150a2-f495-440a-b537-d7247f5dcbb7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e9336645-18f6-4361-8fbb-81bbe304b419",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8c9150a2-f495-440a-b537-d7247f5dcbb7",
        "cursor": {
          "ref": "58dae423-591c-485a-9f53-f2afdc3cc02b",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "161a0465-9968-4448-abfb-24652f6a8b88"
        },
        "item": {
          "id": "8c9150a2-f495-440a-b537-d7247f5dcbb7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e9336645-18f6-4361-8fbb-81bbe304b419",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4dca2f0e-af0e-4817-a295-6ab136fa3e6a",
        "cursor": {
          "ref": "d901a8d8-127b-42b8-a934-cf67abdfd5ed",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d5111e75-dad8-43ba-86a2-43b8e15b1857"
        },
        "item": {
          "id": "4dca2f0e-af0e-4817-a295-6ab136fa3e6a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "399e0214-b2df-4d9c-a1b2-cbb5abd24b02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4dca2f0e-af0e-4817-a295-6ab136fa3e6a",
        "cursor": {
          "ref": "d901a8d8-127b-42b8-a934-cf67abdfd5ed",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d5111e75-dad8-43ba-86a2-43b8e15b1857"
        },
        "item": {
          "id": "4dca2f0e-af0e-4817-a295-6ab136fa3e6a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "399e0214-b2df-4d9c-a1b2-cbb5abd24b02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e41ec2d6-f83d-44c5-bdb7-9492106cd106",
        "cursor": {
          "ref": "d7536335-a818-4501-9a33-23bac678c3f6",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a7e11098-52fa-4cc5-91ae-3feda8fb25f9"
        },
        "item": {
          "id": "e41ec2d6-f83d-44c5-bdb7-9492106cd106",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "baf9c556-67be-4978-95e2-e4cd01bc2be1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e41ec2d6-f83d-44c5-bdb7-9492106cd106",
        "cursor": {
          "ref": "d7536335-a818-4501-9a33-23bac678c3f6",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a7e11098-52fa-4cc5-91ae-3feda8fb25f9"
        },
        "item": {
          "id": "e41ec2d6-f83d-44c5-bdb7-9492106cd106",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "baf9c556-67be-4978-95e2-e4cd01bc2be1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "bb8b4788-8d68-4602-baa3-46fc845a20e2",
        "cursor": {
          "ref": "cfeead1d-6ac4-449d-bc43-ba59ba616000",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f35d3de9-fe39-4070-ab46-229785a9b74c"
        },
        "item": {
          "id": "bb8b4788-8d68-4602-baa3-46fc845a20e2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "642aae52-38fc-4c53-b134-1e5a14a2aca9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "bb8b4788-8d68-4602-baa3-46fc845a20e2",
        "cursor": {
          "ref": "cfeead1d-6ac4-449d-bc43-ba59ba616000",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f35d3de9-fe39-4070-ab46-229785a9b74c"
        },
        "item": {
          "id": "bb8b4788-8d68-4602-baa3-46fc845a20e2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "642aae52-38fc-4c53-b134-1e5a14a2aca9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7cfc6b30-bc1c-473d-b189-c44a4b2313e0",
        "cursor": {
          "ref": "768e49a4-3b59-45ba-afd9-cc6ff8768c61",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ba165d39-1b35-43f2-89ee-a05ff1838966"
        },
        "item": {
          "id": "7cfc6b30-bc1c-473d-b189-c44a4b2313e0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f56e514f-36f4-4c70-b371-8f327c3cea31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "7cfc6b30-bc1c-473d-b189-c44a4b2313e0",
        "cursor": {
          "ref": "768e49a4-3b59-45ba-afd9-cc6ff8768c61",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ba165d39-1b35-43f2-89ee-a05ff1838966"
        },
        "item": {
          "id": "7cfc6b30-bc1c-473d-b189-c44a4b2313e0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f56e514f-36f4-4c70-b371-8f327c3cea31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "77844920-f013-4fbd-a685-63e79a44dfab",
        "cursor": {
          "ref": "4cb00b1e-dbb9-488a-88a0-86440e517724",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "afe3af2f-ac13-45ef-99c4-dd3218cc85f2"
        },
        "item": {
          "id": "77844920-f013-4fbd-a685-63e79a44dfab",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "082b1afe-b0c1-4bfe-9832-81769e1d94fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "77844920-f013-4fbd-a685-63e79a44dfab",
        "cursor": {
          "ref": "4cb00b1e-dbb9-488a-88a0-86440e517724",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "afe3af2f-ac13-45ef-99c4-dd3218cc85f2"
        },
        "item": {
          "id": "77844920-f013-4fbd-a685-63e79a44dfab",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "082b1afe-b0c1-4bfe-9832-81769e1d94fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "d26dc9c9-c7f7-4f8c-81bd-bba3e94f4ca9",
        "cursor": {
          "ref": "d7fd6017-1b6f-4858-9eb6-acedd544fc87",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b6932089-00c3-4872-bffe-bc278cb3cbf0"
        },
        "item": {
          "id": "d26dc9c9-c7f7-4f8c-81bd-bba3e94f4ca9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "580bb57f-869f-4ec7-8527-7db7d21a746d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "d26dc9c9-c7f7-4f8c-81bd-bba3e94f4ca9",
        "cursor": {
          "ref": "d7fd6017-1b6f-4858-9eb6-acedd544fc87",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b6932089-00c3-4872-bffe-bc278cb3cbf0"
        },
        "item": {
          "id": "d26dc9c9-c7f7-4f8c-81bd-bba3e94f4ca9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "580bb57f-869f-4ec7-8527-7db7d21a746d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "2b6ac34d-8b4f-4239-a53b-13e5fbbfe8d3",
        "cursor": {
          "ref": "d01746bf-4dec-4073-a230-cba95e1c2186",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7e814e8c-c15d-4aaa-bf69-a2c53284ec20"
        },
        "item": {
          "id": "2b6ac34d-8b4f-4239-a53b-13e5fbbfe8d3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c3133735-660f-4527-aa3c-500aa8188eee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "2b6ac34d-8b4f-4239-a53b-13e5fbbfe8d3",
        "cursor": {
          "ref": "d01746bf-4dec-4073-a230-cba95e1c2186",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7e814e8c-c15d-4aaa-bf69-a2c53284ec20"
        },
        "item": {
          "id": "2b6ac34d-8b4f-4239-a53b-13e5fbbfe8d3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c3133735-660f-4527-aa3c-500aa8188eee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "68d35681-df4d-4d47-8200-17f0bd36cb96",
        "cursor": {
          "ref": "76c54d76-c202-4a6d-b4d0-86481877d265",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0b96c595-f8d1-4b97-8e4a-93bb0fa8951a"
        },
        "item": {
          "id": "68d35681-df4d-4d47-8200-17f0bd36cb96",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "607bfcf9-35eb-4331-923f-09e7d89d9cf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "68d35681-df4d-4d47-8200-17f0bd36cb96",
        "cursor": {
          "ref": "76c54d76-c202-4a6d-b4d0-86481877d265",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0b96c595-f8d1-4b97-8e4a-93bb0fa8951a"
        },
        "item": {
          "id": "68d35681-df4d-4d47-8200-17f0bd36cb96",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "607bfcf9-35eb-4331-923f-09e7d89d9cf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "60b4028c-8ad7-49cc-95ed-64be715d14e4",
        "cursor": {
          "ref": "d9c98313-e5d6-41ad-b8f0-5ea216783dc0",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1315fa37-14d2-4d0e-b6f1-0e8044a31063"
        },
        "item": {
          "id": "60b4028c-8ad7-49cc-95ed-64be715d14e4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2656dfa6-32bf-4816-a651-c48197ccb87f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "60b4028c-8ad7-49cc-95ed-64be715d14e4",
        "cursor": {
          "ref": "d9c98313-e5d6-41ad-b8f0-5ea216783dc0",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1315fa37-14d2-4d0e-b6f1-0e8044a31063"
        },
        "item": {
          "id": "60b4028c-8ad7-49cc-95ed-64be715d14e4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2656dfa6-32bf-4816-a651-c48197ccb87f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "632f559a-f30a-4b45-8f68-4653cddaa54f",
        "cursor": {
          "ref": "a82f2b0b-d35c-40fa-9ff0-2e1a8a13e7f1",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cce206d6-091b-4108-a70e-634cf45f5949"
        },
        "item": {
          "id": "632f559a-f30a-4b45-8f68-4653cddaa54f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "df7c9ef7-a254-454a-96da-473565d7c9e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "632f559a-f30a-4b45-8f68-4653cddaa54f",
        "cursor": {
          "ref": "a82f2b0b-d35c-40fa-9ff0-2e1a8a13e7f1",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cce206d6-091b-4108-a70e-634cf45f5949"
        },
        "item": {
          "id": "632f559a-f30a-4b45-8f68-4653cddaa54f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "df7c9ef7-a254-454a-96da-473565d7c9e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "bd4c8af1-8666-4601-ae47-b0134f0a879f",
        "cursor": {
          "ref": "27583093-9c09-40da-a6a7-dbcfbe7d708b",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ad9d28e1-b04e-4b89-8a94-db7ef0823faf"
        },
        "item": {
          "id": "bd4c8af1-8666-4601-ae47-b0134f0a879f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "116f8e00-e49c-40d4-bf44-6f9119a71aea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "bd4c8af1-8666-4601-ae47-b0134f0a879f",
        "cursor": {
          "ref": "27583093-9c09-40da-a6a7-dbcfbe7d708b",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ad9d28e1-b04e-4b89-8a94-db7ef0823faf"
        },
        "item": {
          "id": "bd4c8af1-8666-4601-ae47-b0134f0a879f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "116f8e00-e49c-40d4-bf44-6f9119a71aea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "95ff2826-3ab4-47bb-99bc-29f3bc24788e",
        "cursor": {
          "ref": "b0949d96-96f8-4858-ae89-f5bb9731ae45",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "13d2e582-a09d-4ee9-ba92-45889204e274"
        },
        "item": {
          "id": "95ff2826-3ab4-47bb-99bc-29f3bc24788e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "393460ed-947b-4d67-a868-b2fe51e2b07b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "95ff2826-3ab4-47bb-99bc-29f3bc24788e",
        "cursor": {
          "ref": "b0949d96-96f8-4858-ae89-f5bb9731ae45",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "13d2e582-a09d-4ee9-ba92-45889204e274"
        },
        "item": {
          "id": "95ff2826-3ab4-47bb-99bc-29f3bc24788e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "393460ed-947b-4d67-a868-b2fe51e2b07b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "92785c84-fe27-49d3-bc08-047f6520072a",
        "cursor": {
          "ref": "335d126c-fa6e-4ebe-abc0-667e175fd2e3",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "509f401e-3289-48e6-9790-167a72e64a31"
        },
        "item": {
          "id": "92785c84-fe27-49d3-bc08-047f6520072a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7aa2b670-d425-4440-a70f-d07f659a98fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "92785c84-fe27-49d3-bc08-047f6520072a",
        "cursor": {
          "ref": "335d126c-fa6e-4ebe-abc0-667e175fd2e3",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "509f401e-3289-48e6-9790-167a72e64a31"
        },
        "item": {
          "id": "92785c84-fe27-49d3-bc08-047f6520072a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7aa2b670-d425-4440-a70f-d07f659a98fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "22df310d-6785-4700-8fad-5ebdfc89d792",
        "cursor": {
          "ref": "a23a92cd-7f86-4960-9399-6af52ea6846b",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "03f6a9b5-15c5-428d-b3a4-a4e9b3131c3c"
        },
        "item": {
          "id": "22df310d-6785-4700-8fad-5ebdfc89d792",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "592a8750-f7aa-4a59-9c1c-3061b95d9499",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "22df310d-6785-4700-8fad-5ebdfc89d792",
        "cursor": {
          "ref": "a23a92cd-7f86-4960-9399-6af52ea6846b",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "03f6a9b5-15c5-428d-b3a4-a4e9b3131c3c"
        },
        "item": {
          "id": "22df310d-6785-4700-8fad-5ebdfc89d792",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "592a8750-f7aa-4a59-9c1c-3061b95d9499",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "aa82d13b-e0a4-496d-a3e2-505f9fedb0c3",
        "cursor": {
          "ref": "3a5e9d27-2852-4277-88b9-1b0334635935",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ea3a21b1-d0ac-4ffc-80fb-2a214816ca39"
        },
        "item": {
          "id": "aa82d13b-e0a4-496d-a3e2-505f9fedb0c3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "340480ac-cf93-4210-8834-49ab96cf3233",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "aa82d13b-e0a4-496d-a3e2-505f9fedb0c3",
        "cursor": {
          "ref": "3a5e9d27-2852-4277-88b9-1b0334635935",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ea3a21b1-d0ac-4ffc-80fb-2a214816ca39"
        },
        "item": {
          "id": "aa82d13b-e0a4-496d-a3e2-505f9fedb0c3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "340480ac-cf93-4210-8834-49ab96cf3233",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "6a1a6587-f74b-4f1d-9176-d67e04efd138",
        "cursor": {
          "ref": "435d246f-616e-408d-ac40-0e45b4ec52ee",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5c616222-a553-412b-8d57-3683f58d51cc"
        },
        "item": {
          "id": "6a1a6587-f74b-4f1d-9176-d67e04efd138",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "68b2bfd5-2d4c-4061-b184-0b76d7638fdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "6a1a6587-f74b-4f1d-9176-d67e04efd138",
        "cursor": {
          "ref": "435d246f-616e-408d-ac40-0e45b4ec52ee",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5c616222-a553-412b-8d57-3683f58d51cc"
        },
        "item": {
          "id": "6a1a6587-f74b-4f1d-9176-d67e04efd138",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "68b2bfd5-2d4c-4061-b184-0b76d7638fdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "1d72b740-b980-457a-b633-a2b0f8057ac3",
        "cursor": {
          "ref": "d5ef92b2-57a3-483d-8d98-d2f020b96785",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b9fbae24-e0a8-412b-a251-fa467b8093dd"
        },
        "item": {
          "id": "1d72b740-b980-457a-b633-a2b0f8057ac3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "54fd9803-a640-44f8-9982-7a0eec1eeebe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "1d72b740-b980-457a-b633-a2b0f8057ac3",
        "cursor": {
          "ref": "d5ef92b2-57a3-483d-8d98-d2f020b96785",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b9fbae24-e0a8-412b-a251-fa467b8093dd"
        },
        "item": {
          "id": "1d72b740-b980-457a-b633-a2b0f8057ac3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "54fd9803-a640-44f8-9982-7a0eec1eeebe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "c0d6f36f-0326-4c5d-b900-8a477f16ce7d",
        "cursor": {
          "ref": "250af3be-963c-441b-9bf8-68ad8df501ad",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6ba5ef6f-e85b-43ea-92f8-42cc5bdd2392"
        },
        "item": {
          "id": "c0d6f36f-0326-4c5d-b900-8a477f16ce7d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e4e8c749-d00c-4e45-9fa1-c585944b51b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c0d6f36f-0326-4c5d-b900-8a477f16ce7d",
        "cursor": {
          "ref": "250af3be-963c-441b-9bf8-68ad8df501ad",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6ba5ef6f-e85b-43ea-92f8-42cc5bdd2392"
        },
        "item": {
          "id": "c0d6f36f-0326-4c5d-b900-8a477f16ce7d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e4e8c749-d00c-4e45-9fa1-c585944b51b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "51539f6c-11d1-42fa-957f-50d3d97a0fd8",
        "cursor": {
          "ref": "d781e24d-376e-40eb-b2af-45a5e47e15ae",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2c323882-9806-41fd-ac7d-01df91fffc75"
        },
        "item": {
          "id": "51539f6c-11d1-42fa-957f-50d3d97a0fd8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "53775d2e-1092-4b42-901b-2180184a5474",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "51539f6c-11d1-42fa-957f-50d3d97a0fd8",
        "cursor": {
          "ref": "d781e24d-376e-40eb-b2af-45a5e47e15ae",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2c323882-9806-41fd-ac7d-01df91fffc75"
        },
        "item": {
          "id": "51539f6c-11d1-42fa-957f-50d3d97a0fd8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "53775d2e-1092-4b42-901b-2180184a5474",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "3b5f9ef2-8702-4eec-954f-59b2bf8d6bf3",
        "cursor": {
          "ref": "b5482b5b-88cb-4c74-8982-e38007761302",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b20ea889-f20d-47b1-b710-90b269ab6d53"
        },
        "item": {
          "id": "3b5f9ef2-8702-4eec-954f-59b2bf8d6bf3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "55198992-29bb-43fd-8866-04978e4372eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3b5f9ef2-8702-4eec-954f-59b2bf8d6bf3",
        "cursor": {
          "ref": "b5482b5b-88cb-4c74-8982-e38007761302",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b20ea889-f20d-47b1-b710-90b269ab6d53"
        },
        "item": {
          "id": "3b5f9ef2-8702-4eec-954f-59b2bf8d6bf3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "55198992-29bb-43fd-8866-04978e4372eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f34002bd-bdf1-4424-8bee-57e1ba26b889",
        "cursor": {
          "ref": "c9d7fb40-d4e8-4421-8548-e92c6d9c6298",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2ed2848a-7f9d-4c43-a36c-48e094c2843e"
        },
        "item": {
          "id": "f34002bd-bdf1-4424-8bee-57e1ba26b889",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fb51f9d5-f8c5-4a85-9e7f-1fda532f2e9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f34002bd-bdf1-4424-8bee-57e1ba26b889",
        "cursor": {
          "ref": "c9d7fb40-d4e8-4421-8548-e92c6d9c6298",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2ed2848a-7f9d-4c43-a36c-48e094c2843e"
        },
        "item": {
          "id": "f34002bd-bdf1-4424-8bee-57e1ba26b889",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fb51f9d5-f8c5-4a85-9e7f-1fda532f2e9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "975a779d-fa27-480a-987b-788114033351",
        "cursor": {
          "ref": "4210786f-dff9-416b-b3e4-e0252d0a4652",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "91ca176d-babf-4bab-9709-8e6612f2497f"
        },
        "item": {
          "id": "975a779d-fa27-480a-987b-788114033351",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4542bd39-866c-45dd-8f87-c0db2dca9c54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "975a779d-fa27-480a-987b-788114033351",
        "cursor": {
          "ref": "4210786f-dff9-416b-b3e4-e0252d0a4652",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "91ca176d-babf-4bab-9709-8e6612f2497f"
        },
        "item": {
          "id": "975a779d-fa27-480a-987b-788114033351",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4542bd39-866c-45dd-8f87-c0db2dca9c54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "189caeed-d14c-485f-ad8a-c360fb04c9a3",
        "cursor": {
          "ref": "02ed8b47-d903-47d2-b7ac-800b60111e9a",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5a181772-1f46-4f95-aa4d-ccb1f76eefee"
        },
        "item": {
          "id": "189caeed-d14c-485f-ad8a-c360fb04c9a3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3f6c8520-8306-4fc6-a793-002c27fe4dbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "189caeed-d14c-485f-ad8a-c360fb04c9a3",
        "cursor": {
          "ref": "02ed8b47-d903-47d2-b7ac-800b60111e9a",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5a181772-1f46-4f95-aa4d-ccb1f76eefee"
        },
        "item": {
          "id": "189caeed-d14c-485f-ad8a-c360fb04c9a3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3f6c8520-8306-4fc6-a793-002c27fe4dbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "2c38e114-3257-43f8-931d-541917b50cb5",
        "cursor": {
          "ref": "4f4d2682-c350-4320-9b7a-1ec6f7602a35",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f51b461d-da6a-4e84-8983-b38e595a9fc2"
        },
        "item": {
          "id": "2c38e114-3257-43f8-931d-541917b50cb5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "92212e2d-7b69-4cbf-b2a2-63a808d59983",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "2c38e114-3257-43f8-931d-541917b50cb5",
        "cursor": {
          "ref": "4f4d2682-c350-4320-9b7a-1ec6f7602a35",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f51b461d-da6a-4e84-8983-b38e595a9fc2"
        },
        "item": {
          "id": "2c38e114-3257-43f8-931d-541917b50cb5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "92212e2d-7b69-4cbf-b2a2-63a808d59983",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "fe56a035-f78c-48a4-bebd-830f043c84f3",
        "cursor": {
          "ref": "3f54b4d2-fb51-4000-be1a-879279dc3770",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "500c5692-c772-4aac-adcc-3cadbc416900"
        },
        "item": {
          "id": "fe56a035-f78c-48a4-bebd-830f043c84f3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "137ed22c-9d07-48cb-a774-71347f683644",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "fe56a035-f78c-48a4-bebd-830f043c84f3",
        "cursor": {
          "ref": "3f54b4d2-fb51-4000-be1a-879279dc3770",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "500c5692-c772-4aac-adcc-3cadbc416900"
        },
        "item": {
          "id": "fe56a035-f78c-48a4-bebd-830f043c84f3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "137ed22c-9d07-48cb-a774-71347f683644",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "bbbf3eda-8620-4467-b169-a057f39de3cd",
        "cursor": {
          "ref": "7937e689-034d-4457-86d0-cab453bea3e2",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3a994386-f11a-4f0f-9b5a-0e3bc10a755e"
        },
        "item": {
          "id": "bbbf3eda-8620-4467-b169-a057f39de3cd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3d102544-36fe-4033-a56f-5960357e51d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "bbbf3eda-8620-4467-b169-a057f39de3cd",
        "cursor": {
          "ref": "7937e689-034d-4457-86d0-cab453bea3e2",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3a994386-f11a-4f0f-9b5a-0e3bc10a755e"
        },
        "item": {
          "id": "bbbf3eda-8620-4467-b169-a057f39de3cd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3d102544-36fe-4033-a56f-5960357e51d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "8bb26af9-ff1c-439c-9769-6d58f7333132",
        "cursor": {
          "ref": "24969405-cff3-4d33-851e-94fa62a7b1f3",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ff7ea1e1-9efe-433d-a7b1-bc6d8b778f4b"
        },
        "item": {
          "id": "8bb26af9-ff1c-439c-9769-6d58f7333132",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "407e432b-5565-46ea-90a1-50ec1584240d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "8bb26af9-ff1c-439c-9769-6d58f7333132",
        "cursor": {
          "ref": "24969405-cff3-4d33-851e-94fa62a7b1f3",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ff7ea1e1-9efe-433d-a7b1-bc6d8b778f4b"
        },
        "item": {
          "id": "8bb26af9-ff1c-439c-9769-6d58f7333132",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "407e432b-5565-46ea-90a1-50ec1584240d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "dce1a5ef-0945-4443-862c-f1604c141a53",
        "cursor": {
          "ref": "ea93a7f4-97a4-44ba-8e48-080df2bdbeb0",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "17829c26-365c-4f70-9102-d7df5befb3ec"
        },
        "item": {
          "id": "dce1a5ef-0945-4443-862c-f1604c141a53",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6693d6e6-3f7b-4a7d-981e-56a842e8f72f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "dce1a5ef-0945-4443-862c-f1604c141a53",
        "cursor": {
          "ref": "ea93a7f4-97a4-44ba-8e48-080df2bdbeb0",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "17829c26-365c-4f70-9102-d7df5befb3ec"
        },
        "item": {
          "id": "dce1a5ef-0945-4443-862c-f1604c141a53",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6693d6e6-3f7b-4a7d-981e-56a842e8f72f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bf8f36fa-c814-43da-89c9-9d59e09507aa",
        "cursor": {
          "ref": "42af28bf-a990-41a7-929f-b2662bb5cf3c",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1f3279ba-7c2f-43bc-b7df-83be807b354c"
        },
        "item": {
          "id": "bf8f36fa-c814-43da-89c9-9d59e09507aa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5122f6f4-8ebf-48ea-aded-4939d49625fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bf8f36fa-c814-43da-89c9-9d59e09507aa",
        "cursor": {
          "ref": "42af28bf-a990-41a7-929f-b2662bb5cf3c",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1f3279ba-7c2f-43bc-b7df-83be807b354c"
        },
        "item": {
          "id": "bf8f36fa-c814-43da-89c9-9d59e09507aa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5122f6f4-8ebf-48ea-aded-4939d49625fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "9fb95b2d-3b67-423f-9a1c-4e399242afb5",
        "cursor": {
          "ref": "042bff78-87ad-4164-99fa-afaeb83931b5",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "84fec5d5-0e14-419a-a729-8d27d2577536"
        },
        "item": {
          "id": "9fb95b2d-3b67-423f-9a1c-4e399242afb5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d711d7c9-06c6-4e20-9d1f-688c82272d43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9fb95b2d-3b67-423f-9a1c-4e399242afb5",
        "cursor": {
          "ref": "042bff78-87ad-4164-99fa-afaeb83931b5",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "84fec5d5-0e14-419a-a729-8d27d2577536"
        },
        "item": {
          "id": "9fb95b2d-3b67-423f-9a1c-4e399242afb5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d711d7c9-06c6-4e20-9d1f-688c82272d43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5e05d41d-2bdc-4d72-8686-5ed9a8eaa27b",
        "cursor": {
          "ref": "42d8a4bc-052a-4c6b-b984-fbb82919bee6",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "32cb9931-f8f0-471c-937d-1c13a442d976"
        },
        "item": {
          "id": "5e05d41d-2bdc-4d72-8686-5ed9a8eaa27b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "638c1afd-72fe-43e5-9307-5ded1af456af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "5e05d41d-2bdc-4d72-8686-5ed9a8eaa27b",
        "cursor": {
          "ref": "42d8a4bc-052a-4c6b-b984-fbb82919bee6",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "32cb9931-f8f0-471c-937d-1c13a442d976"
        },
        "item": {
          "id": "5e05d41d-2bdc-4d72-8686-5ed9a8eaa27b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "638c1afd-72fe-43e5-9307-5ded1af456af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "6a69420c-88e4-48ca-861d-30946d4c7ff3",
        "cursor": {
          "ref": "10604652-2a0a-40b8-b4d7-5a99b5c1af70",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "045123da-6f7b-473e-85a6-e078d2f4d08b"
        },
        "item": {
          "id": "6a69420c-88e4-48ca-861d-30946d4c7ff3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "838af009-8def-4690-809e-8e291d943271",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "6a69420c-88e4-48ca-861d-30946d4c7ff3",
        "cursor": {
          "ref": "10604652-2a0a-40b8-b4d7-5a99b5c1af70",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "045123da-6f7b-473e-85a6-e078d2f4d08b"
        },
        "item": {
          "id": "6a69420c-88e4-48ca-861d-30946d4c7ff3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "838af009-8def-4690-809e-8e291d943271",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fbb6d5b1-0cfa-4973-bc5b-5c94392b8347",
        "cursor": {
          "ref": "2d99991d-b922-4397-9ada-73607b2cbd44",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5be810de-4a6f-4c03-9045-a2de419b587a"
        },
        "item": {
          "id": "fbb6d5b1-0cfa-4973-bc5b-5c94392b8347",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57506541-2c75-412c-8199-e8d3dc520c0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "fbb6d5b1-0cfa-4973-bc5b-5c94392b8347",
        "cursor": {
          "ref": "2d99991d-b922-4397-9ada-73607b2cbd44",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5be810de-4a6f-4c03-9045-a2de419b587a"
        },
        "item": {
          "id": "fbb6d5b1-0cfa-4973-bc5b-5c94392b8347",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57506541-2c75-412c-8199-e8d3dc520c0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "0b59fc50-33e4-4ba4-9418-0faa0d9f2a4a",
        "cursor": {
          "ref": "b866d08b-e69f-4614-9e45-0a6467df7321",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "bf0f6dfb-1671-46c3-b552-698f67263597"
        },
        "item": {
          "id": "0b59fc50-33e4-4ba4-9418-0faa0d9f2a4a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "888b988c-2040-4b9a-96eb-566d14617781",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "0b59fc50-33e4-4ba4-9418-0faa0d9f2a4a",
        "cursor": {
          "ref": "b866d08b-e69f-4614-9e45-0a6467df7321",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "bf0f6dfb-1671-46c3-b552-698f67263597"
        },
        "item": {
          "id": "0b59fc50-33e4-4ba4-9418-0faa0d9f2a4a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "888b988c-2040-4b9a-96eb-566d14617781",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "3b2b39d2-5c49-4f07-93ff-15ba2ee247b2",
        "cursor": {
          "ref": "214a35f8-3a6b-42ea-9dd6-7242255d2e22",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "e8ec0e15-96e8-4fb5-945a-7de5518d7309"
        },
        "item": {
          "id": "3b2b39d2-5c49-4f07-93ff-15ba2ee247b2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c5775996-fb4c-4098-bdd1-cbb4356c25e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "3b2b39d2-5c49-4f07-93ff-15ba2ee247b2",
        "cursor": {
          "ref": "214a35f8-3a6b-42ea-9dd6-7242255d2e22",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "e8ec0e15-96e8-4fb5-945a-7de5518d7309"
        },
        "item": {
          "id": "3b2b39d2-5c49-4f07-93ff-15ba2ee247b2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c5775996-fb4c-4098-bdd1-cbb4356c25e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "154a49b1-0960-4cf4-a95d-39c561838a6c",
        "cursor": {
          "ref": "32580134-2ae7-4078-83ae-1dee1d2641a3",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f02bc368-0d8b-421f-b003-7d0b2b53f78f"
        },
        "item": {
          "id": "154a49b1-0960-4cf4-a95d-39c561838a6c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "320d49d5-7884-4749-abd2-ac6546cab046",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "154a49b1-0960-4cf4-a95d-39c561838a6c",
        "cursor": {
          "ref": "32580134-2ae7-4078-83ae-1dee1d2641a3",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f02bc368-0d8b-421f-b003-7d0b2b53f78f"
        },
        "item": {
          "id": "154a49b1-0960-4cf4-a95d-39c561838a6c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "320d49d5-7884-4749-abd2-ac6546cab046",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "e52790b9-d6b6-40b2-b4f8-87a21fe7f691",
        "cursor": {
          "ref": "9e1ffa6d-ab57-4176-bf4b-25a860605900",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "04f4aac2-e595-43e9-b1bb-990edaace005"
        },
        "item": {
          "id": "e52790b9-d6b6-40b2-b4f8-87a21fe7f691",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "100968f5-3c63-4ab2-bf6c-f47c55547ca7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "e52790b9-d6b6-40b2-b4f8-87a21fe7f691",
        "cursor": {
          "ref": "9e1ffa6d-ab57-4176-bf4b-25a860605900",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "04f4aac2-e595-43e9-b1bb-990edaace005"
        },
        "item": {
          "id": "e52790b9-d6b6-40b2-b4f8-87a21fe7f691",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "100968f5-3c63-4ab2-bf6c-f47c55547ca7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "a193c0c6-e2ee-4c84-97a7-2b755fbae6b5",
        "cursor": {
          "ref": "5043a875-55f8-4bca-9c95-55ae19f0b240",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "78abbe88-ae3f-47ec-9c3d-13abf5a71786"
        },
        "item": {
          "id": "a193c0c6-e2ee-4c84-97a7-2b755fbae6b5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3433b311-1cfe-463c-a92e-2b9392ea0d46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "a193c0c6-e2ee-4c84-97a7-2b755fbae6b5",
        "cursor": {
          "ref": "5043a875-55f8-4bca-9c95-55ae19f0b240",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "78abbe88-ae3f-47ec-9c3d-13abf5a71786"
        },
        "item": {
          "id": "a193c0c6-e2ee-4c84-97a7-2b755fbae6b5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3433b311-1cfe-463c-a92e-2b9392ea0d46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "21ddbd25-baa1-4757-97f2-c2b37a91954b",
        "cursor": {
          "ref": "7439e46b-fe71-485d-a3ae-a0138881513a",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4cefe751-f731-4dd9-9f3a-5c84d3bab51f"
        },
        "item": {
          "id": "21ddbd25-baa1-4757-97f2-c2b37a91954b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "78f1f280-9a65-401b-8b3e-883df7be87ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "21ddbd25-baa1-4757-97f2-c2b37a91954b",
        "cursor": {
          "ref": "7439e46b-fe71-485d-a3ae-a0138881513a",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4cefe751-f731-4dd9-9f3a-5c84d3bab51f"
        },
        "item": {
          "id": "21ddbd25-baa1-4757-97f2-c2b37a91954b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "78f1f280-9a65-401b-8b3e-883df7be87ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "07671f35-8112-47a2-9ce0-08a469a62c9c",
        "cursor": {
          "ref": "b2bb717d-6f72-4e21-b542-2e5bbbd5f0e6",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5cb8f0aa-cd0a-47d7-92d0-b9ca22bb2200"
        },
        "item": {
          "id": "07671f35-8112-47a2-9ce0-08a469a62c9c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ede3bdb3-3a75-42f3-b585-57af7bc91e93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "07671f35-8112-47a2-9ce0-08a469a62c9c",
        "cursor": {
          "ref": "b2bb717d-6f72-4e21-b542-2e5bbbd5f0e6",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5cb8f0aa-cd0a-47d7-92d0-b9ca22bb2200"
        },
        "item": {
          "id": "07671f35-8112-47a2-9ce0-08a469a62c9c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ede3bdb3-3a75-42f3-b585-57af7bc91e93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "61c47ffc-ea34-4357-a106-c26108677e54",
        "cursor": {
          "ref": "6794e247-d3d0-491c-87fb-ea0cec404afa",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c4cb4097-f214-47b5-b460-eac46945c86a"
        },
        "item": {
          "id": "61c47ffc-ea34-4357-a106-c26108677e54",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9602d6cb-fe07-49d8-885b-d6d1df4fecf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "61c47ffc-ea34-4357-a106-c26108677e54",
        "cursor": {
          "ref": "6794e247-d3d0-491c-87fb-ea0cec404afa",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c4cb4097-f214-47b5-b460-eac46945c86a"
        },
        "item": {
          "id": "61c47ffc-ea34-4357-a106-c26108677e54",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9602d6cb-fe07-49d8-885b-d6d1df4fecf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "bdbc61a3-809d-4986-9355-1d51910db97a",
        "cursor": {
          "ref": "ad401584-123b-44af-8698-f74930abd7ba",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d7c5fa6f-3247-4cdd-85f0-bbff9c6249fa"
        },
        "item": {
          "id": "bdbc61a3-809d-4986-9355-1d51910db97a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "79ad9974-400a-42e5-91fc-c5f7712a3126",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2770,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "bdbc61a3-809d-4986-9355-1d51910db97a",
        "cursor": {
          "ref": "ad401584-123b-44af-8698-f74930abd7ba",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d7c5fa6f-3247-4cdd-85f0-bbff9c6249fa"
        },
        "item": {
          "id": "bdbc61a3-809d-4986-9355-1d51910db97a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "79ad9974-400a-42e5-91fc-c5f7712a3126",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2770,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "38ee998c-3ef9-4851-a9f7-e3b0fa30bd23",
        "cursor": {
          "ref": "1c299177-888c-4cb5-97b7-f4075a037f0f",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c816d82c-27ed-4a25-8acb-911b26eb7ed9"
        },
        "item": {
          "id": "38ee998c-3ef9-4851-a9f7-e3b0fa30bd23",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "50942e3a-00e3-41f9-b7a3-37ab9bca63dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "38ee998c-3ef9-4851-a9f7-e3b0fa30bd23",
        "cursor": {
          "ref": "1c299177-888c-4cb5-97b7-f4075a037f0f",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c816d82c-27ed-4a25-8acb-911b26eb7ed9"
        },
        "item": {
          "id": "38ee998c-3ef9-4851-a9f7-e3b0fa30bd23",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "50942e3a-00e3-41f9-b7a3-37ab9bca63dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "3015281c-3dec-4ab9-a963-9de22fb8c22e",
        "cursor": {
          "ref": "01ba75b7-7cac-4c03-a5a4-1dc282ff649b",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3fc66232-ae1d-4576-bce3-40a8888cc4cc"
        },
        "item": {
          "id": "3015281c-3dec-4ab9-a963-9de22fb8c22e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a3326885-52de-4f62-833f-38ff7a763648",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "3015281c-3dec-4ab9-a963-9de22fb8c22e",
        "cursor": {
          "ref": "01ba75b7-7cac-4c03-a5a4-1dc282ff649b",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3fc66232-ae1d-4576-bce3-40a8888cc4cc"
        },
        "item": {
          "id": "3015281c-3dec-4ab9-a963-9de22fb8c22e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a3326885-52de-4f62-833f-38ff7a763648",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "e557508b-9b4a-4057-b68f-51da69ec1339",
        "cursor": {
          "ref": "3f4e6b0f-2eef-4f66-b4f7-edb1618aedbf",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "21884310-4f93-4886-a676-08b1120d5774"
        },
        "item": {
          "id": "e557508b-9b4a-4057-b68f-51da69ec1339",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a13b9576-5466-402a-999f-0e8f3081709e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "e557508b-9b4a-4057-b68f-51da69ec1339",
        "cursor": {
          "ref": "3f4e6b0f-2eef-4f66-b4f7-edb1618aedbf",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "21884310-4f93-4886-a676-08b1120d5774"
        },
        "item": {
          "id": "e557508b-9b4a-4057-b68f-51da69ec1339",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a13b9576-5466-402a-999f-0e8f3081709e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "08e1c5e6-a2ef-4ae8-be3f-42a725a8bab8",
        "cursor": {
          "ref": "15906145-0ecf-4fd6-8599-1db4ab694782",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "114a597b-260a-4b0f-88a2-f2371510ee93"
        },
        "item": {
          "id": "08e1c5e6-a2ef-4ae8-be3f-42a725a8bab8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d7c3d53c-a187-4e08-b2cc-a58fcc79db5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "08e1c5e6-a2ef-4ae8-be3f-42a725a8bab8",
        "cursor": {
          "ref": "15906145-0ecf-4fd6-8599-1db4ab694782",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "114a597b-260a-4b0f-88a2-f2371510ee93"
        },
        "item": {
          "id": "08e1c5e6-a2ef-4ae8-be3f-42a725a8bab8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d7c3d53c-a187-4e08-b2cc-a58fcc79db5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "3ee4f04b-57ad-4020-80eb-685ccc2320ec",
        "cursor": {
          "ref": "26a34716-ce41-4111-84cd-e8d8e56b1881",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "06f389ed-d88c-430e-9795-78c42abd4e83"
        },
        "item": {
          "id": "3ee4f04b-57ad-4020-80eb-685ccc2320ec",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9020c911-f814-4b86-b649-43cd68273d99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "3ee4f04b-57ad-4020-80eb-685ccc2320ec",
        "cursor": {
          "ref": "26a34716-ce41-4111-84cd-e8d8e56b1881",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "06f389ed-d88c-430e-9795-78c42abd4e83"
        },
        "item": {
          "id": "3ee4f04b-57ad-4020-80eb-685ccc2320ec",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9020c911-f814-4b86-b649-43cd68273d99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "c5999214-7ebc-41ad-ad10-336b0471fbb8",
        "cursor": {
          "ref": "c2260c97-68fa-401d-8614-fb4f63d412a9",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "80936901-4b1e-4776-9769-7f414b5968a7"
        },
        "item": {
          "id": "c5999214-7ebc-41ad-ad10-336b0471fbb8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ae78bca7-1a45-460f-93cd-32af9dfd7b6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "c5999214-7ebc-41ad-ad10-336b0471fbb8",
        "cursor": {
          "ref": "c2260c97-68fa-401d-8614-fb4f63d412a9",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "80936901-4b1e-4776-9769-7f414b5968a7"
        },
        "item": {
          "id": "c5999214-7ebc-41ad-ad10-336b0471fbb8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ae78bca7-1a45-460f-93cd-32af9dfd7b6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "a1894d63-c1ac-41da-a1e8-18ed5559cd79",
        "cursor": {
          "ref": "b3616e47-560c-436d-8093-dfbb2a7de6f7",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "caa4f04b-fe31-4686-998a-3bea99059e1d"
        },
        "item": {
          "id": "a1894d63-c1ac-41da-a1e8-18ed5559cd79",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "559d4874-80a0-4d83-a2ba-b5573d359f45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "a1894d63-c1ac-41da-a1e8-18ed5559cd79",
        "cursor": {
          "ref": "b3616e47-560c-436d-8093-dfbb2a7de6f7",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "caa4f04b-fe31-4686-998a-3bea99059e1d"
        },
        "item": {
          "id": "a1894d63-c1ac-41da-a1e8-18ed5559cd79",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "559d4874-80a0-4d83-a2ba-b5573d359f45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "57506b8e-23fe-4ff4-ac9f-16bd291ddf10",
        "cursor": {
          "ref": "55daff7d-1f57-45b3-a6c2-08b4b61fa2f0",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "7dbe645e-ae72-4144-b506-affc400b4f2a"
        },
        "item": {
          "id": "57506b8e-23fe-4ff4-ac9f-16bd291ddf10",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4fe67f58-adf2-4335-a032-814f5cef5804",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "57506b8e-23fe-4ff4-ac9f-16bd291ddf10",
        "cursor": {
          "ref": "55daff7d-1f57-45b3-a6c2-08b4b61fa2f0",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "7dbe645e-ae72-4144-b506-affc400b4f2a"
        },
        "item": {
          "id": "57506b8e-23fe-4ff4-ac9f-16bd291ddf10",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4fe67f58-adf2-4335-a032-814f5cef5804",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "30809acd-d491-4392-92a6-68f24ce042b0",
        "cursor": {
          "ref": "c666e488-2169-4e9c-8a2d-f2bb9b77a4f3",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a87deea5-5ce5-43fc-a946-fec131c89d59"
        },
        "item": {
          "id": "30809acd-d491-4392-92a6-68f24ce042b0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3529bafa-926f-42ad-a0a7-0041f3fe129e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "30809acd-d491-4392-92a6-68f24ce042b0",
        "cursor": {
          "ref": "c666e488-2169-4e9c-8a2d-f2bb9b77a4f3",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a87deea5-5ce5-43fc-a946-fec131c89d59"
        },
        "item": {
          "id": "30809acd-d491-4392-92a6-68f24ce042b0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3529bafa-926f-42ad-a0a7-0041f3fe129e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "64e0655d-c4ab-41c6-bd83-d6c3cf3d8bbe",
        "cursor": {
          "ref": "5af5318a-f57a-48e5-be7d-cf4a0b8e2788",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7bb0e170-23a1-4878-b2c6-26161efca8bf"
        },
        "item": {
          "id": "64e0655d-c4ab-41c6-bd83-d6c3cf3d8bbe",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cf504538-994c-4eac-bf93-c9c2a14dde5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "64e0655d-c4ab-41c6-bd83-d6c3cf3d8bbe",
        "cursor": {
          "ref": "5af5318a-f57a-48e5-be7d-cf4a0b8e2788",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7bb0e170-23a1-4878-b2c6-26161efca8bf"
        },
        "item": {
          "id": "64e0655d-c4ab-41c6-bd83-d6c3cf3d8bbe",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cf504538-994c-4eac-bf93-c9c2a14dde5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "1394761b-3059-48a4-b473-7202baaf6b9f",
        "cursor": {
          "ref": "86b03054-33c2-4507-9119-a939360f84f6",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6eaed279-8a5a-41c5-9514-d7fb9dac8fa9"
        },
        "item": {
          "id": "1394761b-3059-48a4-b473-7202baaf6b9f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d1211496-9300-4460-bfd2-d926eecd6bad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2724,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "1394761b-3059-48a4-b473-7202baaf6b9f",
        "cursor": {
          "ref": "86b03054-33c2-4507-9119-a939360f84f6",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6eaed279-8a5a-41c5-9514-d7fb9dac8fa9"
        },
        "item": {
          "id": "1394761b-3059-48a4-b473-7202baaf6b9f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d1211496-9300-4460-bfd2-d926eecd6bad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2724,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "023719dc-0076-4253-be93-f4c734c65082",
        "cursor": {
          "ref": "c07b8da8-5ab4-4a9f-afd8-b270c27b721b",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "249aef22-1709-4125-a63e-c797c912b5d9"
        },
        "item": {
          "id": "023719dc-0076-4253-be93-f4c734c65082",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fa0ab59b-fe36-496c-a128-899ef5097ad0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "023719dc-0076-4253-be93-f4c734c65082",
        "cursor": {
          "ref": "c07b8da8-5ab4-4a9f-afd8-b270c27b721b",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "249aef22-1709-4125-a63e-c797c912b5d9"
        },
        "item": {
          "id": "023719dc-0076-4253-be93-f4c734c65082",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fa0ab59b-fe36-496c-a128-899ef5097ad0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "af8eb7ce-1fa6-437b-88c9-d5a51bc1bca1",
        "cursor": {
          "ref": "faa9309c-3366-411f-ad01-2c2282111f19",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "fa121834-de87-4274-bda6-da933a217c6c"
        },
        "item": {
          "id": "af8eb7ce-1fa6-437b-88c9-d5a51bc1bca1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6378b785-c4e7-4974-b1fa-eb666df0a67b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "af8eb7ce-1fa6-437b-88c9-d5a51bc1bca1",
        "cursor": {
          "ref": "faa9309c-3366-411f-ad01-2c2282111f19",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "fa121834-de87-4274-bda6-da933a217c6c"
        },
        "item": {
          "id": "af8eb7ce-1fa6-437b-88c9-d5a51bc1bca1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6378b785-c4e7-4974-b1fa-eb666df0a67b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "6fcbf085-1e2f-4a22-a9ce-7d58adb5f1c0",
        "cursor": {
          "ref": "1d7d8e3c-ef68-4950-97c1-0853725fe0cc",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ade9d4d2-de9d-476b-aefd-4f82f42cd69f"
        },
        "item": {
          "id": "6fcbf085-1e2f-4a22-a9ce-7d58adb5f1c0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "08b229a4-f7b7-4263-b964-1d012649fc40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "6fcbf085-1e2f-4a22-a9ce-7d58adb5f1c0",
        "cursor": {
          "ref": "1d7d8e3c-ef68-4950-97c1-0853725fe0cc",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ade9d4d2-de9d-476b-aefd-4f82f42cd69f"
        },
        "item": {
          "id": "6fcbf085-1e2f-4a22-a9ce-7d58adb5f1c0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "08b229a4-f7b7-4263-b964-1d012649fc40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "23eb1ca9-c56e-40fb-b1cd-29052f5bdd8c",
        "cursor": {
          "ref": "a05ebe9e-4ef1-4503-953a-b26b63ab51f9",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6305d70a-d0c7-452c-8cb9-046c1f9fbe98"
        },
        "item": {
          "id": "23eb1ca9-c56e-40fb-b1cd-29052f5bdd8c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "554efe27-f179-4fd9-b277-964b7cb4af74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "23eb1ca9-c56e-40fb-b1cd-29052f5bdd8c",
        "cursor": {
          "ref": "a05ebe9e-4ef1-4503-953a-b26b63ab51f9",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6305d70a-d0c7-452c-8cb9-046c1f9fbe98"
        },
        "item": {
          "id": "23eb1ca9-c56e-40fb-b1cd-29052f5bdd8c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "554efe27-f179-4fd9-b277-964b7cb4af74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "2ac836db-8603-43ae-aec9-ba0a00694757",
        "cursor": {
          "ref": "d8d7e85f-76bf-4d17-b762-9b5e79c335bb",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e68f7bbf-c751-4ce2-884b-9b1453c29e4b"
        },
        "item": {
          "id": "2ac836db-8603-43ae-aec9-ba0a00694757",
          "name": "credentials_verify"
        },
        "response": {
          "id": "00a291ae-c717-425e-9d0f-96d02efedc41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2ac836db-8603-43ae-aec9-ba0a00694757",
        "cursor": {
          "ref": "d8d7e85f-76bf-4d17-b762-9b5e79c335bb",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e68f7bbf-c751-4ce2-884b-9b1453c29e4b"
        },
        "item": {
          "id": "2ac836db-8603-43ae-aec9-ba0a00694757",
          "name": "credentials_verify"
        },
        "response": {
          "id": "00a291ae-c717-425e-9d0f-96d02efedc41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d69e8ac9-581d-4bf9-8d23-2abc95bafd73",
        "cursor": {
          "ref": "d1e92339-08a7-4643-92a4-6c79e5c9230d",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7276978a-7a21-408e-817b-83b9c1e2e7cf"
        },
        "item": {
          "id": "d69e8ac9-581d-4bf9-8d23-2abc95bafd73",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "10124464-76e8-44ff-b091-8627d4ddbdce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "d69e8ac9-581d-4bf9-8d23-2abc95bafd73",
        "cursor": {
          "ref": "d1e92339-08a7-4643-92a4-6c79e5c9230d",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7276978a-7a21-408e-817b-83b9c1e2e7cf"
        },
        "item": {
          "id": "d69e8ac9-581d-4bf9-8d23-2abc95bafd73",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "10124464-76e8-44ff-b091-8627d4ddbdce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 323
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 2:1\n<html><head>\n^",
              "stack": "JSONError: Unexpected token '<' at 2:1\n<html><head>\n^\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "656ef1a7-dd58-4cd8-976e-3842129ea12a",
        "cursor": {
          "ref": "bcb13230-a67f-4440-a119-e3b63cc70fcd",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "cc64b742-960c-4753-a1b5-62e04bbbacf6"
        },
        "item": {
          "id": "656ef1a7-dd58-4cd8-976e-3842129ea12a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "656ef1a7-dd58-4cd8-976e-3842129ea12a",
        "cursor": {
          "ref": "bcb13230-a67f-4440-a119-e3b63cc70fcd",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "cc64b742-960c-4753-a1b5-62e04bbbacf6"
        },
        "item": {
          "id": "656ef1a7-dd58-4cd8-976e-3842129ea12a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "656ef1a7-dd58-4cd8-976e-3842129ea12a",
        "cursor": {
          "ref": "bcb13230-a67f-4440-a119-e3b63cc70fcd",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "cc64b742-960c-4753-a1b5-62e04bbbacf6"
        },
        "item": {
          "id": "656ef1a7-dd58-4cd8-976e-3842129ea12a",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "70bb7155-a937-453e-8a76-6e5e10433671",
        "cursor": {
          "ref": "1c126731-8c64-4ac6-a1d8-37f02c0f7f84",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d6d9306e-fa73-4919-bc47-b79b9cba3379"
        },
        "item": {
          "id": "70bb7155-a937-453e-8a76-6e5e10433671",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "70bb7155-a937-453e-8a76-6e5e10433671",
        "cursor": {
          "ref": "1c126731-8c64-4ac6-a1d8-37f02c0f7f84",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d6d9306e-fa73-4919-bc47-b79b9cba3379"
        },
        "item": {
          "id": "70bb7155-a937-453e-8a76-6e5e10433671",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "70bb7155-a937-453e-8a76-6e5e10433671",
        "cursor": {
          "ref": "1c126731-8c64-4ac6-a1d8-37f02c0f7f84",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d6d9306e-fa73-4919-bc47-b79b9cba3379"
        },
        "item": {
          "id": "70bb7155-a937-453e-8a76-6e5e10433671",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "92223c04-c260-4489-b081-5e65e6dea6c7",
        "cursor": {
          "ref": "51783eeb-d78d-4aa0-bfe3-7e0bb06deb21",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e9bc8598-9980-42de-a3b1-f866a7afaa6e"
        },
        "item": {
          "id": "92223c04-c260-4489-b081-5e65e6dea6c7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      },
      {
        "id": "92223c04-c260-4489-b081-5e65e6dea6c7",
        "cursor": {
          "ref": "51783eeb-d78d-4aa0-bfe3-7e0bb06deb21",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e9bc8598-9980-42de-a3b1-f866a7afaa6e"
        },
        "item": {
          "id": "92223c04-c260-4489-b081-5e65e6dea6c7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      },
      {
        "id": "92223c04-c260-4489-b081-5e65e6dea6c7",
        "cursor": {
          "ref": "51783eeb-d78d-4aa0-bfe3-7e0bb06deb21",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e9bc8598-9980-42de-a3b1-f866a7afaa6e"
        },
        "item": {
          "id": "92223c04-c260-4489-b081-5e65e6dea6c7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}