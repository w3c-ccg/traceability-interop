{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8c8fd34a-b84d-4fe3-ae94-73359310ee4d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d3b0fd11-bae3-483f-994b-8dc7758dc5c3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7de2490c-80ee-45a4-b6d3-ac14399a11e0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bb348094-0f8a-4e88-98f8-d503dd67f71d"
                }
              }
            ]
          },
          {
            "id": "5e5dc87e-4b2d-4b35-9c0d-bd7cfb86df20",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f1e3da38-178f-4416-a39f-06f857a8c7ff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "75a1b4a7-2ccf-4271-a02e-3cf0ce868285"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8f724f42-341f-4c39-a4a9-8366f9be26c1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3512daf6-e60c-4c99-885a-ab6ba36181c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0014d522-3651-40e6-9fbb-8671728453f3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e646eca8-b296-44d0-803d-67ce1d6d089d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ede90c3-8770-4806-9a9b-3313ab050ac0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8ae7596-09c0-4d61-859e-4eb085f50729",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e43bc84-8b7c-4e98-989e-19c3e6a489d7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "db5427b8-5b22-4eeb-9a19-7cd6dae766ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aa3a5a6e-29e5-4613-a870-e8e64639189e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad6f116e-63b7-4699-9846-e9298eff47c7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "dbc76319-df20-42c9-a19c-73dcf367133f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ae0969d-264a-4e83-92c9-ecbd9b25c1eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df0d8a0d-a4b8-4bb7-a90d-45018f846187"
            }
          }
        ]
      },
      {
        "id": "b7b912ef-66f2-4686-a3cf-4b5787fd5d47",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1ca2f1a5-5a42-4d9e-844d-c8b1abff11c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd257f79-96ed-4ff7-8266-ba3271a12815",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "51d2fa51-d741-4be4-bcc1-ea478a7ff552",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16d976e-89a5-4403-aff3-9b88585187e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d2f4c1d-c4f8-4ace-8835-df396b1bc827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b255da6-54ba-43c9-b448-708429feb8cc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e03db49-93bf-427a-9ee5-b1cd63c7dabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd0df0f8-fd75-4067-84f5-8d600c8b926a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cd6557-aed8-4e91-b1e6-38ac648d1992",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c896ea4-30c8-4af8-8497-f4e39362f929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c90080f2-04bd-444a-a712-64e4a288899d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "13614210-eebf-4eac-ab3e-35fb1eb32d43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c334fac-c6db-4973-82b2-801c7235b798",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c536f006-5bbe-46a9-9324-eb1172ce1b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "588b2d84-5822-491a-9ff2-33c3365f8956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631593e8-217a-48f6-baf6-72d3aa04fe23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46eafbe-a9f3-428a-a151-d761d68b8b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423a79f6-369a-43f8-920b-cfd982a39c5f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699291bf-b59a-4e96-b974-16f9745b3575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b23eb1a-e356-4e6d-a48a-c2fd547b474d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4320f762-26f5-4ceb-ab08-2ee272a5ddaf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8d72dd9c-11a4-4a2b-ad6e-b10816d1d349"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "783d6410-e0aa-46e8-94b7-92159b467da8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4e278288-0ad7-4ca9-9b8b-12282df7691d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a8b94c4-861d-4994-9287-94b0af72c461",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1f3dcb3a-d997-4c7b-9226-e7696b056ab3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9dfe43f-61d6-48da-9bad-3c8bb814bc4e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e920a22d-7655-4e27-b0f4-57de85894c77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8865ba2-f47f-468a-95b7-0b8e5a246f88",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54938971-5fab-4633-913c-50d0b91bcab4"
            }
          }
        ]
      },
      {
        "id": "43bcc7fe-6fb2-444d-9d15-8b56c3368400",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f7a7249d-df43-455e-a4a0-b04b349516d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ee181b1-9281-4ece-9733-15939a3961a0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8bc8d04e-b763-4eb9-8759-e06b6f5e2f10",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418dc91e-bb1f-444b-a286-a5761111728b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f12c4d-d3db-453e-93e1-d3d0586626aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91849949-33bb-4f49-b568-1889c064da71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "450bb2fa-1cac-4a35-b0a2-b993834c0ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fc2e60-22ec-4644-bb47-8cf12d0331f0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471ac29b-4b9f-47ac-b628-296fe45450b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17f7572-d452-45b6-bdc7-7e3e6ea45138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a9f6ab-f38d-49bf-a0ea-c1192beee320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c107196b-d435-4324-9fc9-c81e0d3a92bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c0198b-713b-408c-9032-366bd74ec24f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e39e63a-3ff5-43a1-8e45-73b3b9a8de00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a28fa35-0420-43d0-960d-a40b9c8b495b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3644a8-a292-42a4-9283-2c742546aa7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46554135-ef32-4106-9102-bbde62755841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd990383-c01c-4540-aeab-80e407683145",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3137e0f9-77fd-4a2d-aba2-b7bf79bcf336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811ccbd7-79bd-4cff-8a71-2c39a306c3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25800de1-11ce-4d46-a296-7f25a366e578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a37e2b0-7201-49f1-a9c0-d792371c773f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7592fbc-74c8-4d91-b75d-63bff03f21e5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d447f377-b0e4-4dfc-90ea-4510be2a64d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839c8b96-e00c-4e7f-9b6d-224ca8005365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3da80e4-083a-49ce-bf21-11b7eef8bcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5ab21af-1605-47f9-92b5-8b33bc7163da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4103f4b-f706-4bb3-82ab-200b4070bada",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21437517-2c5b-4762-a39a-2b18601180c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469fac49-ecf7-4713-9529-7b87ede1df68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bceead7-2e2b-460e-bcab-fbdad5c7ba40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b443a801-8f98-431c-ab38-678a4da818f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf9d0b6-c822-4d57-ba51-97925e07ec2d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2dc88e8-23ee-4596-a39c-c978f1420d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d98c58-7fa6-455a-9fa8-4154a56d552a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65afe1ea-dba7-494f-a323-ce92da1b9c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da7c2439-aef0-41de-bf10-92a5b53052fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a686ca0c-c592-49f6-963e-6d1c8320c54b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e4a4fc-3347-403d-8c5c-4a972f772cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6152cbe-d2ec-43f3-af9c-6082ad760860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1e7b85-9a70-40c5-9002-51d7b416c672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd62b6da-bc59-4b1d-ac58-8c28a8c94f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5f905c-83ca-48e8-848c-95331b600b13",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e069f0-c0a8-4553-bac3-2b8625fc8738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51285700-483a-4588-86e8-68ec9c796231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6519e4da-5ff6-43a3-bb86-4612427bf064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df8b6adf-e6e6-4efa-b47b-c051269d04b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d69985-289d-4b44-ad6d-3808cfa8d81f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8baeb0-1e3f-4339-a1a3-d843d8c6f46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53e564d-2435-41af-a178-2a6dab471a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eeea551-5d9b-46a0-bf98-a42c457c0b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccbf552d-7a82-4fce-b451-1d017c6ea990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22a376c-021b-4a14-8940-f8879a948e49",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5f3c3a-63d6-42c9-9024-2ddaa837895e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9092e854-8e97-49e2-8c34-1f3713303d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cc345d-1673-477c-9ddf-338d85be6df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f3acf85-3547-44c4-886b-f99627b2bb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eeed51-780b-4b44-bf0a-120366f426bd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97ceabc-f15a-42f9-bf1e-99ef9d0203f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22cd3009-5d3c-4afb-9274-54497c7e3e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dcaf77-4535-4f69-b40f-ce23d42b609e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "326040d3-3db3-454c-ba34-df0b61075bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c231eba4-b8bb-4a9f-a0fc-c1d6fe0b67c4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a32f0c7-2f03-43e8-a7d0-d2ca4bab54da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb05395-99f7-4c3a-99de-65d1e6856093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699c5f0c-3ea4-4adc-8985-afcbaaba1903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dee69512-53d7-4e0c-aaeb-8dd5944850bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cb996c-c055-4777-829f-c788983077a4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64c2ede-e095-47e5-8dc7-e27a5376f371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7945cf-4cba-4ae2-9507-ba59c5f3d169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbc5c94-216f-43b0-a59a-63a5fbfbc16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e7c22ca-57e9-4f5b-b3f2-9c8c5cd30118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea467a26-c1b8-47c9-9dd8-84c373f8c6d9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5d21db-6801-47b8-ab0f-c9f54c87ef76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4049439f-3fc6-4f90-9ba6-72f4497a61d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1de0054-6f8e-44ae-816e-0937759851e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2641178-6db2-4792-9bee-b65818e059ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7c3b14-c507-4af2-b80a-23bb6bc13f0a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95ecf7c-80cd-4c82-b508-5c95206222ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7fc36cc-b4d8-4331-a11d-249cbc07ff81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e1480a-4f8b-45df-bb03-6e2bd73c5fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee8592b2-b330-4b89-8542-9965553882d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcb3078-432c-4a2b-acad-feeb62fa70db",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3edc180-e66c-461b-9024-08ce0b3a7a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505c18b0-430a-428b-9569-93d6dedc25fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5960b3-f797-4d14-ac93-f11c1c9dd86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "204f38d0-2205-4ff9-ac4a-fb7b5d2513a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a951fc-67cf-46a2-9ad2-68ce1627a270",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b365fd-5a2f-4c10-aaa8-e1458759c091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78a31f1-37be-4c72-90b1-72dc34227dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f96d71-b3d6-4a89-a898-bf02be631d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf4b9b3-9242-4e41-a388-5fd26e5f9163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797139c2-4924-47ca-8523-5d8e1c01e419",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1736ef18-05a5-4ff6-b9a5-856cdffadf79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183d8061-9aab-4d62-b14a-5b610d7a3f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f5f3d6-3f55-4356-8ffa-57a3602f0cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fbe5071-d592-4357-bc7a-99ba1becd02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f38758-97c2-43fb-9eb6-b6b5eb65d0c8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f777c33e-0060-4e40-b9d0-173c387d9304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb751a77-6230-4b9d-88c3-f5ec63799924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2969389a-ea79-4498-93ee-ea7e1ba2f293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90da9463-c895-4aa3-852a-5a8ea82c82d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d01b20-8678-483e-ad9d-60b6043d79b1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b4a89b-4c25-4b6a-a523-60990b0a22f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57fbf287-b422-4eb1-a3a8-5feec6819a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7a5c20-797a-4599-9180-3a7dda28bdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc043523-9958-42ab-a53d-6f58aac10b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b263ac9-227e-4225-b8ae-f08214fd0f50",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f61f0e-1405-4dde-85f4-e88fdba12c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886d4c6c-af46-4e8e-b619-006d7adc7855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acce3a12-1534-486e-922c-759d4ebeb0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ffabc6-5d5f-4dc0-ae6e-1e597cfdaf97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5836d67b-540f-4a51-b3bb-3383bbf86499",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26bd3579-1b53-43b3-839c-9c763fae69dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d489c86-949d-486a-a6d3-8936a64f982f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1a2220-727a-4a71-9147-434bd8f8868c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64730c39-bc94-4a4d-b72f-a944d6b9a705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41942649-97a7-4021-be91-d70bb92f3fa3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29e33d8-c4dc-42ba-90d1-daff7756b7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86713961-bd54-4c2c-b9e1-9b1644ecd9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0be2794-8aac-4549-ac61-35e45257c174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d28426-5ffa-4e09-aab5-1e696b9a5578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86005104-dbdd-4c72-a64c-8f7bb0c613cb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "997330c1-cedc-4aed-8725-f95a6b2c8e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1ccd88-63f1-4b4f-adf6-ad3c82fa884a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e2bba6-a5cd-400b-9616-4d535e0fe568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "20fa037e-21dc-4913-8614-f9119fd893a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11b612d-0d08-4d02-a86c-a96f9e9b37ea",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f687b0-c29f-4208-9660-cc1d9dc8f19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a55f94a9-dfb9-416b-9cbb-b0b77f063c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34406a10-dc6b-40d5-a3ca-10b2b15f968a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bfba5ae-878d-4f98-8ebe-65c481ca5575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ce5cb0-3d70-4944-bfbc-87fc8308682c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3e4cde-d046-4217-81a5-63f67daa2527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d74d5b-778d-433a-a4a4-5123705ea58e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a1d93a-28e9-4921-9914-8f2da46af925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e48ca8f6-33b2-4f74-bf1f-703c906aef06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ec01f4-aa87-4300-ad4e-0f75957c5222",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880cda8f-bec3-4c5d-8294-14af11c1d0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da399b9-27d2-4ab7-861c-753351ad4f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86febf25-e463-403b-90ec-023f4dbae6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "904ade86-dd72-4f3c-8274-6e39d924d84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152e3167-ed7a-4eb8-8024-43adba390215",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7406230-e2c0-4f5a-be63-977d0bbf7065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e625aff-8a51-46ce-a923-eda01c3b5687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d3be80-b7c0-467a-a158-aae3f35aaf13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd836a8a-ca8a-4867-aeed-84fc266fa80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd574e36-b7f1-401f-bff5-b0c8ef2737b3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc46bb4-697d-4803-accf-af20d8934c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38ad9e5-59aa-4946-a4bc-7a5f1f1d1715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab62a6ec-350a-4286-8212-c11aacf7f83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1d2c88-6e40-42c8-9d90-79717fedb221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8b4362-ca1b-4ce0-b8c6-48d77ccf8050",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bb16f0-1b9d-4a83-ae87-dd4d65c77c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5b4f1a-4ca4-4951-8388-475159921eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b53b6b-e2a2-4839-85d0-4eddfb6a18fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce607ce9-0fea-4f49-801f-b180760143da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aac882a-62e6-469a-861a-58b41c222c7a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ca20f2-3b8f-44b6-b93d-af92c463348e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1119d575-ac99-41a3-a5e9-eceb43a723e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f7c16d-be95-4abc-9a04-8559a5e229e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dff19567-37bc-45b0-afbe-19cdda996e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f16c8a-b997-4343-a95a-b83baeb1f7f3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a54f3e-6eb0-46b1-83a6-9364db5ef75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb9d0d0-5f99-41bb-ba8e-46aef7edb901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe63309-9f9c-42da-a716-d02746c54afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3e34b0d-b285-4a5c-a3cb-0d57ff9bd795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338afb74-8cb4-43a0-9ed3-986b91f08e69",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4d4fc5-226f-4b51-87aa-5d78c6e4a620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb62b20-7349-4cd5-981a-8f4e5c2dfce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ee5cbc-a1cf-4703-adcb-78210fe80747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b999dccc-61ee-4b8d-9139-3b56bf1625a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7e1e3a-94ea-40c7-b696-5539607d1b8b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984a6c81-00b3-4ad3-8846-7407c5dbaea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce8b90f-6857-4b6f-88e4-c37a18fcc1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f82318d-29d4-43ff-a398-5887b29d89d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "11edb2e1-f669-4fb6-abf8-fd1e37cea897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66e4be0-c8b7-461b-bb00-426066198f61",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94cedcd-7fe1-47d5-af31-5e746356370c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2755e54-84dc-48a9-b691-57f8a85f52fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ccbb3f6-2dc2-436d-a982-8054d1312644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d563f6-f9f3-4e8e-8261-ad93d153ca54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11c4d28-51c8-4b95-91c6-f93ba42489ad",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2219fdba-320a-418d-9d38-fc9cb4ecc94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f2af3e-7775-47f0-97e4-36f5bba6166e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb12999c-238d-4bb6-9f61-30f6de7d8b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b17d6c72-78b1-4444-9f88-53a43b758b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9934bc7a-7427-4cfb-b99c-65c56e4c3b93",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551b9dbf-10bc-4ac4-a0d6-732d4fe5515b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a506c370-fe27-4875-90ac-e3b19493a292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ba87c9-9f06-4d41-ab27-d710f1ebe5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb16ee3-6b89-4c4c-8643-5d1144dbaac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d866c6ba-c611-47a6-a899-786949f5be2f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac336e5-9ecf-4eec-965f-b44854225d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f230ed7-83ed-4810-beb8-4098850f0dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3da882b-5d72-45c9-834a-6e8e0467d593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "36f945d6-da34-40fd-9c35-a3ba0033ecfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8ea3a8-aa47-4e56-a136-091327634fba",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4433bb8b-1d47-49a3-b573-1821191877fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ef2883-d0bd-41d1-809a-7c01acaca126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a8331f-4ffa-4573-88d1-527617696a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef897345-81e8-4a33-8197-84bf2fc47feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4aab43-9029-4c09-93ed-a93df7a341b1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8132a9c-22a5-438a-b5ce-0e4bdf8a9c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95194eb1-adb7-4249-881b-41c84f806efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905065f8-1a94-4744-8206-e5c5a1496b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "626ec217-c58b-45cf-a5c2-b50b9f0b575d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202424af-8fd0-4372-9ded-4aac49ea57e3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67753e46-1120-45a5-93c4-4d03eb91cfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79e14cc-794d-43ed-838d-5488cefdf7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd1d798-7f38-42ca-a273-2910ad7070be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1f9a56-ee76-4ea9-b18e-c17f085b75d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3764b2cb-1fae-41ae-876f-04605bea639f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb191418-9812-4b93-8b49-3fab254192bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b1ab33-adfa-4556-b4d1-aa2a38822e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94eab76-1e0c-4028-ae13-ec75716a363d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "27a01ba1-3307-4e7f-ad62-55e36bd24c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e299ae57-d20d-49ae-a5f4-9a2d3d8214f0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ca50f8-f0fd-47c6-a105-81fb0c1084c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a5710e-d5b9-43d5-9d98-178d1fd8a7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61afa4a-faef-4e5c-9d81-36a70fa4689f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f99cc1f5-2940-47cc-986b-7b14a4d2d58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc80aeec-b56e-4f00-81fa-5e1116982e9d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f296df5-06ee-4c6a-baae-2473a8aa38aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "795474fe-901e-480b-bef9-bb10d2f9cf2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47906f44-4d27-4d16-9aac-d7c927c5c341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "43095636-e74f-416e-b255-d8beb912cac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de486a6a-4557-4c59-96d6-2e06163902df",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16002e17-939c-4c30-b833-319d955c3d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9224841-100c-4578-a3cc-00f9a3494602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516418ac-b49c-4ef0-abe5-0ca418dde34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14e8beaf-1ac9-42ec-ba4b-5f69449a5f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4558bf-6d1c-4b77-b53d-6056a03509d3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bafb8d-6e95-4a57-ad03-71e3943a6dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c72f54-3fe8-4743-8328-e938cddcd515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68dccf9-f21c-4a56-ac81-7a3d16c7b918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e64d74-1566-46b0-8d5d-7eee14ab0c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f4f31a-f9a6-4c1c-b79d-09c51b666de3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a82678-950f-486a-b075-e45e86c6c17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74cc0d9-9933-4458-a5be-52c99b54bb7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64baee48-c2c0-4228-bc9b-95e7e3f0f303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3da863-e133-491a-abc7-4bbf512ccbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3eb0e8-9e35-4731-b399-c75cd34cfca6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdecd83-53c0-43d5-8754-01cc62cc4348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0bf2a63-0992-4d11-8719-072c07538ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2797ba-d5e2-4f1c-842d-e48f60e3e905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33b86fe0-91cb-48bb-af4a-9a90c2f1484c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ede903-dd15-49ea-972f-d8a8d30820ba",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344e754c-e7f4-4ed5-b307-d91186aea328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0279c7c-b4d4-456f-beeb-65dad8579ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c347ec-f5c8-4ae6-8ce2-44dcee9b81fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6503d295-4e84-40a0-bc73-10cd67651016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ded2aeb-44f1-4d7f-838f-999c4b68b6ba",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d0fc7c-ca3e-4c47-8558-386e2951479a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2b29b2-e2cf-430a-a4b9-a21a423b8515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc30979-ba2e-444b-af0d-46af1004ce89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "878e1042-ed85-4fbc-aead-cc7eec22bcab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07cb0c8-29e1-4ede-a6bc-e6406c164ca3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f507cf10-d7eb-42d2-97f4-1d0874854fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63928d4a-8b2b-4d51-85a9-b64e00122337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbd51c0-7c1d-4e1e-8716-fcb920e748c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d612f1b0-bb0e-47cf-bed6-ee66d391a7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd30679-515a-4a5a-98e1-04ce6688a8c8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d336a7ae-e1e1-4676-8a26-683e45d9b06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e75a3c-8398-468c-b8a3-0694f29c0abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece0c552-5ff8-41ff-b53a-f04afda32d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17ad1d0d-d306-4791-a2b5-120954390370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42b56a6-a915-483d-9e0e-5c85bb5e4a27",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d85989d-1073-4729-a05c-6208cf6dadbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337f4d96-607f-43fa-994f-151bd7060c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ed63f1-ec8d-4576-be40-5db8e0091e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "445bbcff-74c4-4ff2-a850-f985fb5482d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbae879-ada7-4289-bfbb-06114ecac689",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578a597d-7e47-4103-bfdb-123437efe5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc43df20-8ccc-47e0-8b84-c222903cedca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d980d2c-81f8-4a5c-8d06-ae2360bdfcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd832a91-12e9-49ff-89ae-94ba04158d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674765df-d355-41c7-b040-fc18f8a336ad",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d38a54-0b68-4292-ae68-5b17ab48986b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3541873-749f-40c2-9be6-e9cc8298958f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24a9728-1b6d-48a7-8a65-75c58e68bd52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb7caf9-bd7e-4636-8699-c595529b2008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cf768a-fba4-496c-a7c7-bc40a6c33540",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6763278-0707-40b3-8c88-94bfc43eb205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a6bdbb-67be-4148-b4d9-63241512eb96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ccc625-e112-489f-b920-961e9e1e4fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a516eb7-800d-4d0d-85d2-d6dc3c5774b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4081c7ff-b3d6-4ed9-962a-f006bd08c682",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bff4076-ef3a-4f1d-98e0-e368609823ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb011443-748c-48ec-886f-5335e2c59807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d914b5c1-25ce-4017-b741-93e8caecb460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "47f75a3a-1666-4b6f-8c17-587e4fd85d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0974bb-d7c7-4a1c-8027-4ed2a15bdcad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f6d161-75ed-4c6d-a6f2-c75a13b8a109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a712f13-28e8-4659-8ac9-70b57095e1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c493ac-e3df-43e4-ad05-81a041289a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7235cf87-bbc8-4aca-932d-f892adcd6f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d1c38a-593b-4b10-b279-fc78e79f7705",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfa3fae-8cee-4975-aeb1-13243fd57bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f082ff8d-edde-469e-b39e-12e53b00446f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f46c567-060c-4583-a853-08eafb4c5370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ee80bd-b638-44ab-9e32-9575f8750f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef099b1-55be-47c1-9882-ddc1f01e5a24",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e33973-3492-440a-8176-41ff9869e277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c56a3ac-7586-4105-bd22-73c44b83747b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3fd9d0-6dfd-447f-ad08-a924f270f7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "899076b7-1d12-4fba-a7b6-32bd4d32146b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adc6ce2-b73f-4e7a-9846-ac44eb7d8cb1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a04074-0bbe-422d-9943-d76434ec2ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64534d92-d010-4109-bfef-07dfd9754058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5157e05-20eb-4aca-a1e4-e8b03174a4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "37729313-3d4b-4654-9256-1867db1e5c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183bf7f0-d4a1-4e52-9b55-15a8d31079b9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff048017-c072-4244-8e04-872326edbd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e458006f-93d1-4b81-af52-ba715629bc20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd74ea5-1951-477d-a361-05d8a1612fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "75922c15-e7cb-4916-89bf-cce54212ce88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850ff45d-0369-4a22-98aa-abf2bd027aa8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea766796-1a31-4748-bfa6-dd963f8e6c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631acd72-8bc1-483f-b491-171540237327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d9d876-7853-4040-897b-2290b8885023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9587572-743a-43ee-a339-54ccd8f7bdb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5981b81-229b-4611-b80a-1d8690533e40",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce327814-4a41-48d7-82fa-56056a24f5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27b9e31-3e9e-43e4-9bd6-0a12a03dead9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ac5921-67ee-4bad-85c6-59852d173d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4723bf43-5683-4eca-97d6-f6cbf4586804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac66ee3-4c78-4676-95a9-883ee84f7322",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3912535-98d6-455e-b9a8-b2513ce87172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05aafd54-159e-4122-ad9c-ea90c00c6e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9eb884-d335-4c87-82e4-409e4cb6ac96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5336526a-413d-4cbf-9348-89f87651bedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ae3274-0692-4060-b146-f3b8b68c2587",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267a7147-f4a4-4166-8f2c-2cba9cdda712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1717687d-a0ac-4024-9a89-87ea57b36419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b19243c-da1e-4ae9-a4c9-65824734e272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34cbe9a8-1d3e-4ead-8ac6-83cc80576bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d30a96-248e-42e1-84de-fd73e18553f0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c57511e-5352-4f38-88fe-e831fb498dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e985888d-dc2f-443a-ac55-f4c45402ef95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f3907b-cc3d-47f9-bf9e-e71a44c426dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "29109a66-727b-4f25-80f6-d0b6f8642a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78181427-9a9f-48a2-a960-4580402ca0fe",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a336f3-22f8-4a1c-bfe2-34d403a7b29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76c8a3b-7624-4ad0-a247-11277fb4aa3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7feebc1-7f89-4a80-8903-58d7c3a29107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b74ba016-4eee-423f-bddd-ecb01e2b20ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345f3cf2-5d2d-407e-a458-b724cfa53a49",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ff179b-af94-431d-a119-cd7d484c65f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478d6e8b-9d39-48fc-ab23-cfef5e850b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35328867-3df6-47f6-8a4e-1497f40b5595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97169c35-12db-406a-b164-223feceba460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef9c942-2698-49dd-93bd-7501153a1997",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f3e75f-8184-4e7a-93d3-d766cfc1b1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5c33bf-e8d1-482a-b0aa-14807d746986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bbae98-3d2e-481a-8d61-58c4d36d3e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e9a767-d015-49fb-9909-7ae892083d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da1fe6b-f83f-449b-906f-b6b12bb86db6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bbee13-464c-4134-b1bb-016a5571b423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84e0c17-be31-4b21-8482-d2b42f8125e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3f0a00-ec97-42a0-b786-4f765b6dfa6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c69a2fa7-38d2-4531-a32f-e4a49f2cb0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713ec46d-291c-4cb2-bf99-025328bd668f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1043c2bf-555a-497e-aa6b-a4a170ab7959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8905642a-cd07-4db1-9e15-1e38b95064a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e03604-96dc-44a8-86da-4e826a0d9299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7028a3-3a83-4899-afb4-ad417ca1e872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e9deef-0941-477d-ac8d-56a054ff0eb5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c3a692-e108-4a6c-b084-9c3930eec317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe07265-08f7-494f-834c-230baec2bf57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc2c3b1-ef02-4a28-8e8d-7ecb5fb9f8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d579e1ec-9168-4b06-b6a8-ff67afee1307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59657881-da5f-4c1a-b9d9-e280214a6c0f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff969a6-5e0a-4ee4-80d0-04d146bed410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b8d7af-d153-4884-8e8c-1f1c91203d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5134c5c6-fb1a-4c5b-83e9-ef4350857040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c09af4-20c5-4ef5-81a8-b8495a5724ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b094a4f0-0614-4076-ae59-a60331f78498",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dca8e51-471f-46e1-8b71-d930161ba57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a94d89-06db-4480-a9bc-1f8683eca345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a279f8-17ca-4834-9021-dba62a6b8778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a85f8ad-3498-4ef1-8339-5f71de0b0286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1075ca8a-1898-4ed6-b73f-10a3fada41ac",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b712a14-e7b4-46fb-89a2-b0e589accba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2379dedb-ab4a-4c3f-84f3-c955f7d22e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873db4c4-9c61-4bc0-9dea-99bc4e5d234e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8651ea9-de68-490f-b39f-56c75040252e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1f2e7e-4e87-404f-b0bc-1e271cc206e1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35216e7-41c6-4cc9-a57f-53a390fd401a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8ee320-ce75-47ad-9d00-d1e0578aca98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdaf68b-861e-48d0-a603-b984cb6f1184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87deb883-4a05-48a3-843d-1e46c1e981b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56263e8d-fe1f-46cd-b55d-81132571fb9c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ef7514-fc1f-4f26-9c29-f5c1dd0f28d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1294bbb6-cc34-4df7-9673-8f3902bd88c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce183ee0-4d68-4805-836c-19f40db4940c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef4e4a2-f82a-444e-ab1a-c99101a25c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2eae04-160c-4289-931a-b2f2d8161b4f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05405b75-8f0c-43c1-b21a-95473fb1772f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae09b307-5e04-42ef-96de-6701cca09f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a965e9bb-c7de-4e66-884a-42ef58fc14e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f25cd40-945a-4358-9850-24325272591e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8bd90b-9e4b-4e48-ac9c-9338b20aaa8d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22709843-c965-46b7-8a83-3b56fc2fe12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b43310e7-22c0-42ef-b379-28895a885242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5a2e91-2696-445a-a128-f7bbe2d8adce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6613883e-b4ff-4cd6-83d3-ab4e874d8f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398f7029-902d-4126-a3d0-98f3c7e31c2c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8f319d-b3de-4f80-b78a-cb505cb6635e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdc2a96-8270-4123-83e3-dcea9f461a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556213ce-51f2-43c7-ab18-a925d0c485f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9954e224-5572-46f6-8d66-e40e1d4bd081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23581578-f6f7-4e4f-a8fe-211bde111658",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282686dd-8c5c-4615-acb1-bbd9be96e554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2e45c7-fd45-4afe-9840-28119afacde8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffdfd39b-05a7-4c95-9ef1-d336f8e1a383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "693b46e2-a214-46e9-91c9-68b962dd990a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a650e281-d5eb-471e-95fb-f1d5f5d00920",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655a1347-b850-4c5e-865a-1423d9bf027b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0bf55d-7a85-4d9b-8d1f-c0607a01965f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab52695-23da-4ff0-a5fb-bd24b89bc3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d92a1598-f0d1-4ec9-8ddf-3056a7ba2a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0565db-a164-4573-a17f-f6c72cb198c4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657bb40a-0056-444f-9a6a-3ae0ed35b138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee9310b-6505-45c6-a0b0-ddce310c7294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ee020b-1d71-4968-bbc1-ba6754fb69b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79ee6418-791c-4868-bd26-a75caf938d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7ddb74-b534-44f4-ab27-77c175cfb16a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cb04aa-cdcd-4478-adba-3577f5dfd3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ff30ca-f4de-43a7-9edc-cd5aad0c961c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b9f2fb-69f4-4d3f-b940-04ce614fd44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "44288de4-809a-418f-9475-b1e9419a52fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045edf1a-952b-4b9c-b5e5-278a92ba8a6e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8520310-ff4a-445a-98dd-1ec5e9b67f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1285caed-8544-48b4-9b36-a2c959b6e895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01e65d7-ea8b-494c-bbc8-395c2058d4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "44566f23-5843-4740-8c43-620f0ecaf6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cf4a29-b653-4431-9b45-88f5b40eb82a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef53481c-15f8-4549-aab2-aeb2b55e8bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ea74b4-6e4d-44f5-8284-a18b1bb8a775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799a1344-8e51-4d61-a0b4-140c37f5fd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbead613-e3c3-4a76-bf52-541971ca265f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691080cb-bd1c-40e6-a000-9af202cb7add",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90a51d7-fa3a-42ae-a74c-5d0c52b66fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56add5cb-b1ce-494d-bb3f-7d1a466f00ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b378bebe-bdc5-45ba-85fb-b726603cd755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ec4c16-eabc-4ba8-8c6c-99f5c673fb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be706aef-6761-4240-bb8b-cf2a56c70d82",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3238c3-9483-4529-a170-f593946e7b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139d8286-1780-4791-a97b-7dd9e314c660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58559098-4012-4320-8e2a-aaee4839b6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d655491-25c5-428c-99d8-06940d6d4b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9586224-fa2b-4d1c-86a8-75d197fe921a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafa3ade-31cc-4b91-89cf-7a2b53be3a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e42360a-a041-4897-9da4-5d99cbe4893b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d4af33-c47a-49c6-abc6-9e1850cce98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bfd6ab2-d69a-40f9-821e-6cdbcd769d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809ae02d-591e-4ad2-8131-27ac867f7261",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d2a38b-93c4-4a39-b433-8b6f1018bf4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "df377893-343c-4807-97f4-0cd4e0435056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562d2e25-ce1b-49a7-88f5-aca46773ecb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcba2cf1-5d53-4980-9929-390fa98fb814"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0eed0bbe-b371-4eea-af1e-c494c7ec35dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a3caab2-101e-4e3d-ad5c-f0d249d8c3cb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f979289b-c92e-4710-8726-9b207d314955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf74c4e2-c386-45d0-b4b6-e83195984f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3265d52b-4120-4c6b-9ba7-f317f767bd2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4771944-c870-4762-a8de-fa16ff275cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d07866-ae9b-4aeb-9b38-a078130781f1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "993c3990-faab-4c75-8a8b-1bfc81ba6b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05dee151-4f55-47bb-b896-4eec8baf218e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9c4960-a986-4143-b91a-49946c4d2cb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f19f30e9-456f-493c-887a-1640b315c1c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57b07e71-3105-44c6-9260-824f316018ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "760438be-7bfb-4b72-af03-1e3840eee083"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed22ec61-6d75-473d-93c7-74f9afd43b27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40c2fe06-83c7-43fc-8517-a12b5ef5f0c3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "637acaae-64be-432a-8e31-fecff7ea3589",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a79816c7-b821-4ddc-b732-4b584db5e47a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "81f4d539-87b1-4337-825e-f759bbefaa02",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aa2fc2e4-6f00-49a7-bf53-8d5e6ba08720"
                }
              }
            ]
          },
          {
            "id": "db572fa9-a7df-4716-adf7-35343133e2e9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "10770e0b-c10c-4b18-980a-0dbd21ec0eae",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd5f0157-b46c-4ab4-999d-93b15422d9be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dfef1ecc-d46f-4f8d-94fa-e94a157da39a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "125ba460-67d1-4aca-b549-4b109b6376e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8ca29d5a-aafe-49e0-9e37-07d6e8180895"
                    }
                  }
                ]
              },
              {
                "id": "b7519a59-79c2-438b-945e-6640096ae540",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19afea36-4599-49ad-9712-db7411a94529",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82a2dfc1-ec61-4ee4-a4b6-42d0e27829f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a57bb7b7-9281-4e5d-8719-e0c2fcbc2be7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fa625584-554d-4efd-a7b7-74c6593210f2"
                    }
                  }
                ]
              },
              {
                "id": "59cfa0ac-94a4-4a1c-952e-fc84e467b8a1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "defef707-6e9b-4a36-a544-2f84bcc3414f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e81a120-f545-4c15-9064-40f7dfcf7d0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcf03ff5-2b49-4103-b832-0b3acfd22aec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a17f5a91-6c97-4d13-9192-4861b62dee29"
                    }
                  }
                ]
              },
              {
                "id": "ae8ebdfd-16b4-4897-a42b-8020a048dffe",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cd4e9e6-9d90-4f32-a1cc-12d7ec58560d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4ad4d73-81fa-4277-b344-d375538ec27e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fa31baf-3d4e-47fb-a665-007436ab1e9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "df10da96-3db7-45b8-8be6-517b20401e66"
                    }
                  }
                ]
              },
              {
                "id": "78b8de0d-3573-4706-8aa0-fbf96f08fe4f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4319ca15-8995-4720-91d3-7087882351b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce563b20-32c7-44c7-8244-a9515ac5cbab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70c8be83-e153-41a3-a58d-e68ae7bc1da9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "84fab5db-3b02-47b8-8f01-f8c676186228"
                    }
                  }
                ]
              },
              {
                "id": "5ef5b7d5-2ac6-4bb7-b1ad-bb41da43d96b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7633fd9-a5d4-4181-b57d-67d77c900b24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b31ead12-dfa5-4000-ba84-ca0f07355748"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e8fb36e-0d4c-46c7-b861-79df62de9c29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9f08f23c-aadb-44ce-a688-b89edced84af"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "749191b8-d001-4007-b3f1-5b53ae60536d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c7d2d8de-a06c-4218-9e1f-b843f34e6504"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9c51aa6f-7503-45d3-93ce-eeaa7606f7e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be57e56f-56dc-4c2a-ae5b-d72b044155df"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f87372c-4ca9-47b1-bf48-60d67f1864df",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8662353b-46da-4de2-86e9-40bcfa418acb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca12ebda-ec63-48ba-ab2c-743212631657",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20fda7e3-d1b9-4969-a690-857ba20ae3dc"
            }
          }
        ]
      },
      {
        "id": "cfa37d6b-47bd-48ec-9997-266f5277f9da",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f3979b18-c7e0-43c2-a185-79b41d218746",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1609f563-8d54-451d-9367-2b3e2ab6b7f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d794a20-accd-4b5b-b33a-1eff0242201a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115716ed-be08-4117-a2a8-0f4c1452ba2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8058d7b1-381c-4c49-a963-a4a7bb58aa40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc0592c-d030-4fd1-893f-fb9a9052f969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee3858e-348e-4f4b-a51a-2573b4f213bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee58457-9bf2-40c5-a396-b254cf718798",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771c870d-e544-4692-9721-81fe268f03f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad573f46-f8f7-4a60-ad26-dd8d2e66ab1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4ec576-71af-4aab-a929-95233488e09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f568030-bd5b-43bf-acae-e22ac1ae770d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ffd8bf-c8e7-4076-a79d-5d2319aba65c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd7caae-db2e-4abc-a223-6c5b0c57e5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda2a156-0e79-4b74-bad0-45d5ef0c8fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ae36b7-2f2d-4e36-95b6-25d6cbc59490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d90ebca8-303b-46fd-90ee-9de804bca23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5db285-abcd-4916-a230-fb2c1030db17",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28092d67-ed9a-4949-a39b-47d5ef8676ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4355afd2-d498-4c6c-8389-2edc96e7469a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46a7a48-cc53-4d19-b4c3-8604373064bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6554e81b-3587-4aa7-86c4-e155526d789b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa87c594-1853-448d-ba97-caa95c1cffe5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12884997-5095-49c7-9275-6fe9eb145d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3dc9365-5151-442d-b429-069380f4fc7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbedb741-2746-4712-98b5-bcff65132b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf389905-7482-4f3b-8ad3-e7e2dd3d9c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a315653c-c5a7-4795-973b-eab8ebc7fdda",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cfab20-b3e9-4a5b-b580-70aa2160d77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c87ffb5-973f-4128-b015-da21d871cc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23f12fb-e3ae-4228-960b-7d427a2cc24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b98fc3b-bd34-43f0-9999-f381bc3c0c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3b3d25-3390-4a4f-8069-a4dbeb50f430",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f533dce5-9477-46cf-848c-7b136aff1e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5571752-ecb9-48ea-86c3-2703031095f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80e1731-5b9f-4802-86e1-5f6de4b54771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "80cb805a-c831-4298-89ab-a6f100e98803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6839aabb-de23-4859-ae46-d54d7abe76ca",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2507ed84-fc57-40ec-8593-cec56e064223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84763b80-4f66-4839-bb26-667c68ac003a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc198d15-633f-485c-8f9d-336f3d8929f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8301e5-5dfc-4279-950b-406779e45acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece67f10-a8cd-4698-9372-e9e63a45cb88",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c032ce6-48c6-4939-8c31-3e59abf33064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb83a7d-2e75-490b-9878-41a2c10c49e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e6e585-d7bf-4a50-8096-801700792b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31d1e5a2-fc27-493b-83db-3d22f9abca91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69cf7e7-8bb7-4362-a1bc-4ec4de1fb254",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be7d54a-27f9-4d7c-a3f2-0f221a19e396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c778073d-27b5-4bee-9f92-53de16ebd300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2056de16-1f21-4d4a-bfb0-55aa5ddc2ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b79e4fa7-e4ee-470d-920e-921877effdea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb48b252-5c5d-4dc0-8648-3aaae45a6600",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a7a254-d5d2-4482-89fc-55fb1a7f0eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf23b70-e0fc-4080-8a97-961b895144eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0354fe6b-517f-464d-8394-76736d2f6396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8fda7a06-beed-49fb-ad06-b94c72babed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f5f15e-08d0-4d46-8335-251c1b4e133e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d093dc26-2719-4e9e-a98d-1b2bc80a69a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca9a628-5b77-4509-a775-459f9664c8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684b1832-79c5-43c5-ac0a-b74c63ef830f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7552b32-6a90-47bf-826a-eb6c30d6e8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d948350-4b28-43a9-9058-4118ea4e1dc9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648ab618-d85d-4ebb-a6ee-dad98109e705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32480b2-f462-4a37-b9b4-b3528457bbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce42e76e-11f5-40f2-a1aa-d68cf603f2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b231257-22d9-4cbd-830b-c722928bb384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1f4c8f-7254-4430-9862-b6cbf8369586",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ea7ecb-07bc-4077-b697-6b0eb340eed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a32846-d2c7-416d-a279-5f52a00076c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3e2e74-6079-4bcb-9def-54e23ecc0249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ba1919-09f8-4290-a1fa-c0b37b9d54fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1d04bb-168a-4fe3-907b-f3bd8e219366",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d327e86e-6d68-4d94-bb97-9212aa5e38de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16bc54b1-cda5-4520-9dd8-cee774f3020e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964c41f5-597a-48ab-a02c-6b58dc034abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c92778e-e025-4234-9a72-5895107c3fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f0190b-e28f-4461-aca9-1979e328b19f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d803e897-d7dc-431a-8008-7562fadffb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16390efe-658a-4bdb-bf37-4c5db9d4b711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9088993-6ff8-45bb-9b11-b35f47b5655f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1ad3d7-5039-4c66-b887-b871bee7bf2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330a00f1-cec6-4995-a44a-7d4a1342ee0f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b90686-dc45-49e0-8ddf-73783bce2af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24cdf0e9-7be3-4f69-8734-c809fdea8bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f6056d-24e2-4610-b0c8-a09acfd92984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1af3cbe7-6814-4ed8-be6f-958b8c10541b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22953f38-0fb5-4c24-9911-cd34bad7a9bb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d117013-d223-4df1-8564-5aeac4ed3668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f0723a-e4af-4d81-bf33-9feb7c23dbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c82f189-e9c8-4abc-966e-6db7c6aa1d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3dfd4cc-1e5a-4231-9d01-2a88c8a42dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0834f986-b338-42bc-8d8a-5b254dcc2ba9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63c7a53-1b64-41d7-a629-9a032c986c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1097bebb-583f-440a-ab8a-09f26b01a5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde2787d-9f54-4a4b-872e-41de062d350a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a07d37-3699-4eb5-a63b-31b4a80042b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378d0a93-2bf1-41fc-9274-9b2632104bb8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c267e35-cd0d-496a-8117-7421ab7bf187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4d8ba8-e354-4b61-858a-6df0e11fcfce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c13492-be6f-4977-a2d1-65614e158d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3612513-5fb9-4f15-b9c7-67132c7abe2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a096b035-4c8d-4522-b190-3625a1b0f48e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305c17fd-d1b8-41a0-89a1-dab00a69c1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98805a49-df83-4b61-8e48-fecbaae77094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a25512-f1a3-4c62-a22e-181704b1773b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94e045bd-36c1-4856-8c2d-cdcdf36d37bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5e0c3f-b909-43ad-999b-ea5d871033c4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a4e6b2-de25-4e84-b04a-8fd33e6c9f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be87e197-d686-45d3-adec-a6ef419153ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c98cc1-ebf5-479a-ae10-e46f5d709e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd014773-a9e0-4c9a-9ce7-d1c6f3d49c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906b70b1-5220-4598-a7d1-cc61c024f104",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a219f0-43d8-4367-9156-3966db1f41b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c910e3-904f-4f15-9f2c-8076d9312c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40033283-c52b-49ff-b117-bd90d3a90f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7799ee01-e9d0-47af-871a-f9252000560b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bca0833-2a2c-46ed-8006-80e4bbc8a3a3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a8963c-8eb9-4f06-b287-ae55c6ca46ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9446ef3b-ede8-4c2f-b239-9c2d6e662f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab7e00c-93c7-43fd-8a6b-5e20701b241e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31aa0ae6-b0a2-412e-813f-a97b103f4702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15633b7-0fe7-4bb5-8d0e-5ad537db44f3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c498538f-656b-4679-8bfc-aad124144407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2190eb0f-5050-4666-a04b-96f31648c67d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab9982e-a080-46ff-9a0b-40f32819c1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbfdf53e-df68-44a3-a8b3-49556b5bc9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfeee36-b3f5-469a-9d50-8b437cbe6401",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc39388-bf45-4f76-9edb-92520b9481f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3995ec11-c691-4354-8b27-8c03820eb974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef596ad6-1a91-4f83-aea7-726345dfc199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7822e7-b2f0-42e6-973d-448b4036766a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae08f40-8fe6-49e8-9d02-e3909078159a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968f5371-b585-4ae0-8654-945a33f66701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70338762-1f7b-4524-a362-a8fd09640aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1ef8be-f5be-4460-be60-c402200331e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24ff7d57-ccd5-41b9-9fa0-2e4d853aab42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322ab8bb-099f-4b7c-8f3c-2dddf1326e24",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6ae5f4-7b8e-4b87-9b68-296c31b87972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592179bf-e769-49f3-b1de-3dcb0ee94990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcda13ee-a967-40ab-9110-22831e3a7522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebadbb1f-a142-4782-9cdd-1b64de0ef825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9effd7-2cb6-46d6-baf9-0371147df46f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfeaad1-f233-4c4c-acd7-48f95b49bc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9422fc5b-82bf-44b5-ab0b-d9f20e62a3c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdde224-34a6-4c42-84db-809faeb36ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad5c301-0571-4399-b1b8-bb0a7ace156f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2e088a-a4f6-49e7-96b8-aca1e2471be4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a6ecc4-36c6-440a-a644-8341275cbf1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787ddeda-a7c9-4faf-bedc-3b0578cab039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1913de-5311-412f-94a3-11a09ec517a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c17b227-8330-4504-b0dc-16b8bc68ecac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec11a3c-882f-4535-89bf-7d6ca43c6937",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799a5e93-1b56-402e-8a5e-558c3858e2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd8eb72-7683-4c26-8931-d2123edeec6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c6eda2-89d1-4617-8bb8-9cef8f68d086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "156a19bb-9335-4d5e-9ba3-a3fe30e46963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45723ea-764e-4f7b-8e1f-744436abce2d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3e6c67-4eb3-4bf4-98ad-31ee7d87f369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3955b9d7-81dc-4fd2-a07b-79926a41d67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e84a4d-714b-40bd-9295-8f8de2824afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11c71695-55c1-4f67-af17-e7d4dd60c4ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f6de33de-db00-4d27-8b33-3a7a9cce2386",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ccabd5d9-8473-4b54-a6c4-5222b034f325",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d21789f-8f55-4a49-872f-deda58eeb92f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff04649-c4fa-412e-bd70-e2fec7585f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af130d4-d645-4860-8d60-f560758a750d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd65c485-5237-4a0e-a15e-706ee9f2203e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9964b0d-0b90-4c7b-bd1d-e47ae52482c1",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f399072-2a8a-48b7-8694-49bcf3b55412",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b037b8cb-27c1-4fda-8c74-2e84e5260db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb9f8a7-8679-42a0-8ccb-f7608125f7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2016e44a-720c-494a-b544-9a70d8be562b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd9f86fe-2ef6-45e5-b2f1-57a619016f6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7915c84a-2a30-4bef-9d14-5364810ddcc1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4f3ca94-c70f-4704-bf44-370c2cb6ae56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5c46942-0d61-4756-a8d5-360e12d0d22d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cc52018-c6ad-48e4-8960-46b91c2e65f1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "204343e3-26b0-483f-a064-286488527e19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "093b248f-86a1-4fde-9c5d-4a69f2ac33a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56027269-0978-456d-978f-7a897a343569"
            }
          }
        ]
      },
      {
        "id": "d3ba1017-2f52-4698-8d06-5c746e34ee81",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "52c1e6c2-6214-459c-b097-19dfa89adb0b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49b2a538-8c22-4475-a63b-ce74f0affb67",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57ecbe4e-2a21-4fdd-bd79-d234b5f0caa9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561daf71-ac9f-4461-97d2-330dcf72c8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba97e5a7-be37-4d0e-8898-aad43a717c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc184cd-1c46-4c4d-9903-0f4b9fcb9e56",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c7aaa2-105d-4340-85a5-0fed9408299d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79cc6f95-dae9-4d27-a1ed-21b3b5c0f5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e990e6-4651-4e68-8782-e43f35123d44",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e986e773-72ca-4cac-9e1b-3a46d0060162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f692afb8-3452-4863-b7c4-da9b9ed17256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380c2263-6693-49fb-8647-2b060474ad49",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8eef38-bfc6-43b9-800f-36c2e5ecbce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a2234a-f4fe-4c0f-8c5b-1a7f270cddce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04d55d4-a5b2-4708-af27-b6457addb317",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c2e6aa-c507-49bc-ab0a-6fbd9f7570af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08508b6c-4cc2-4df0-b52b-2f2cab8ea21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26977f48-353c-4d9d-9d09-9266e79fdd59",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c9e5b3-7ccd-430e-b86a-7c7515e0a7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50d22bc-6a71-458c-8b9c-25cda1f78a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8702c95c-8684-42cb-ac82-fd3e6b052fe1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c9f98f-e081-462f-8c04-cefe87f8c2e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c69249-e918-487d-b38f-67df12e1ed8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a114c5-254a-4679-a00d-c5c16fcd9c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877d2182-1833-4003-953a-be2df880e390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c178aa3-6958-4165-82a6-a71a80fffa75",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26a2179-22cd-49f6-bb85-a9ae238caf29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75356d31-396d-4dd9-8e20-e7202874021d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01a1671-cc23-44f3-bbe2-46ca9e65bcd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb9d0ec-cfaf-4054-b154-e79f1257b7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3711daab-51cd-43fe-9232-726ff458d38d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4edd6410-021b-4c8f-a3e0-6fda3d89e297",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3740fdb2-e8a7-485a-bac3-d84dac6586f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f7bc88-75f2-4862-96be-2bb3b764c02a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfcfffd5-96c0-4ea7-8124-c0d59e510f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d520f0-adb6-4ecc-87d0-86f3bfb67ccd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e08d0b-a95a-4be9-a076-291352483770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f55663-fc2b-4962-b5cd-7104daf68d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b7acad-04f2-417c-9fc6-03e9a9465265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364fc135-4f67-415d-bfbc-afff6357a5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5034fc-029f-4483-a1f1-61a00a6e079b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cd5435-09be-48f1-b39d-cae6982cd6f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f0f113-06eb-453f-9b19-6d51729a9938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c6bdbf-45c6-42c2-b0fd-e034dd524fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee568d76-8a64-4b55-b893-9a51da3779db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20072e12-6dc7-4e45-aebc-b8c73b41dce6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c4c52f-15bc-4745-9ad8-f35ccbd16ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224f3608-b5fb-450f-9732-4e6b9b305af2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3ffbc0-bb1b-4567-973c-821a5f922bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3b0e89-3dbe-4c2d-8b7d-3cb04b3af2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9008c02d-fa8a-4419-b307-2db0becc9a80",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955e9874-3478-44b9-82b6-f0bf70f48c11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "253b250a-885e-4b9e-9dbd-0938346e9570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcad927-5e23-4272-8499-cb8a479524b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1d1a20-b963-4cfb-80e5-c8ce82a6beb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4c952d-e5c6-4e1c-8518-72dc8e35694a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b23c742-aa5a-48fa-8f3f-7e74e70944e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d396b70-b090-4661-b916-9d9a98290dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04cb243-85ad-4a32-8358-cdb62dea62a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62cf4534-9b7d-400f-b587-f7f61066f9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93888c7c-cd14-4760-8d97-dc4458aee9d3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e146617-9787-4b9e-9311-1f1b0b53d834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcfdfe0f-d3f3-42e3-81fa-479a757d9f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4880d30c-387d-4087-80a5-8cf95cf69403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182af55c-cae3-4ec3-a696-bae620b5f94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73905ff7-d06c-4873-bdd9-4339834dd71e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f63db2d-ca47-4015-b2aa-9300154ce02a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed58c3c0-0200-4403-92cb-4bd5a50e0b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a6f2d7-60df-46c0-9c6a-6a79fe51a210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00077f1e-974d-4a66-924b-2be0e3364a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39430cf1-8f77-449c-8ea8-5e609f6da6aa",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef35e5a6-d68e-4ec2-898b-888d647d6943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e185a9f-11df-4003-8ca9-493ba6023033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e79d90c-9512-4fac-9fe6-af2c66e829a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c49f349-328e-4ce5-956f-a141bcd7a522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23aa2303-4820-4192-ad4c-9211316afa3b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1fcc47-be41-40b3-a59f-f7762268da60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066324e0-e83e-455a-abc7-ec7601a55641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfa6d68-f731-40f9-a1e5-59e440d6b136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2b8653d-20f2-44f2-91d6-703538b3c5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8eb64d-7696-41b0-bf5a-6e05190bd1a3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c761e511-6e28-4e69-83e2-407fb1bf2ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40a2e47-4486-4130-9c58-43bd5b6061cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e231fb0c-8342-4206-bf8e-ac5952a4a53e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad65db3-9754-4082-a283-5c832b26c368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5db895b-043a-4b83-8b8f-da8a931245d1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bf6369-e3b4-4d6e-b7c0-04b1ba6326e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "367a48bc-a61b-4d8b-b30c-8347a4e8c63a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add432cf-b152-4699-adc2-1ccbe1610b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b40f4b-dba7-4138-90b3-4695c323b782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b58d390-1a71-495f-bf73-568af10b38ce",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c866eb-7f5e-4d76-ba15-5c67756e1a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a8eec1-4cf2-4ab4-86e4-d96d00de5ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b73d3c0-8385-4e30-b22d-872465717ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db5196f-0a3f-4cf5-b45b-ddc12d22b018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55d284e-4e4e-47ab-b3e1-ba3c02b3aa64",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686204df-0811-4d66-849f-3c681ebfc9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff9d128-9867-4cb9-8052-5bc2a1c0bb8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d122f4d-ee4b-4fda-a03c-5d7207960363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef1893c-d553-4267-b05c-b858ef0ecc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3518ec6c-9096-4fdf-aebf-7d46a19ef849",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1f8b60-6577-4c72-87bb-b63e61a70026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae91dfa1-e00f-44bd-b920-831e933b7e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b85ea50-ff17-415c-824c-65b2145d19e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5905e8d-048d-4e3c-9085-7bac36ced5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8190fd4f-b7ba-4e01-a6a5-ca6edc92456e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ac19ee-3205-4b11-93d2-71c43c0add7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f00d15e-326d-41c2-b2bd-3b51d54f3e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8f958f-1cae-4218-96b4-39cd422bef47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "647aee80-5c8a-48cc-9857-db2dcf424ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcc2da4-3aee-44ae-8e5a-175329c8469f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab1fb3a-fc9a-4c16-a93c-da31fc81326f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d710349f-cf26-426e-9e5b-cf0d01fc228d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "865eed1c-3f66-4e8b-b893-99d40414cd4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce0feecb-bcbf-4ca2-97d3-78b3a0316fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97a6eec-5020-4bea-91a2-4970dca063a5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29010d7-0023-47f8-8537-127659f1bbf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb2ab0ce-4968-420a-9a26-976669f31d2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de950f26-7e1a-49b1-b28e-b29d08c6408b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79b7f67-35e8-4994-95fc-586ea8a7279d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3533b0a-d9d0-4793-9200-2ffed7c5df0c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9f9266-0a95-4bfd-b1de-4e61fd2ba938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7984b6cc-f309-4a96-ab0c-7a66553ece1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af02f2a5-c111-4d41-9f33-3b98f4e04773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b7043d-18d6-4b82-9899-02a49898a5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22f8e8c-ceea-44b6-ac09-c9c5fbf25c51",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4765a4b-7cab-4c04-84db-51e95cae2215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12835554-5357-4438-92b4-5af1c7952c57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef393eb0-02c1-42f0-ae00-1fa101a98037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd17d7b-5389-4cc7-838f-01b5ebd50e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6de4c38-31c7-4a6f-80eb-5be6823bb7f0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb1ff6c-cbaf-413b-ba58-980927d9f083",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7da9a55e-2e8e-46a9-ac00-90d9bf002875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e7be2c-5104-4fa5-a5af-769fb5c8d3e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591d1daa-59be-4092-af79-ca0535e80992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c604bb94-c2ec-4b11-a2cc-153b830fa6c8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f7fcf8-9047-4101-9955-9379764a3d9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d523c84c-6d5f-4ab9-b4bf-830ed04b2695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e915d96f-2b19-43e1-9e51-981fa0f400d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb51c896-6529-4edd-a287-94015feb923a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f50fa79-b28d-4a9c-a364-0bc19ddc1f0b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6400da66-8520-4820-be97-9da611a0ef52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0740a570-9b9a-4ec0-a917-c16a5068dd51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "634950ca-3a97-4e9c-bbec-2276d6d9e00d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fea8140-abcf-4c56-b481-d8140a76c54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d8bd21-ccb4-430a-80c2-19b4e1ccea5d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da5b2c9-22d1-4b27-8be4-6376a6d8e7de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9074db7-2a88-4510-92dd-baa7c7806081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9460c051-5c21-4189-8025-477bc18b2371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96e0ef3-ccff-4064-8f5f-071676b102b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f63cbb-baed-4501-9e0d-4cf6049412e3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ef535f-55b0-4b73-a975-fde717352740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4fa7a3-40f2-4eff-8157-ff5084816275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56696242-585c-4bf7-9a07-a121b67b2376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28afc0c0-bfc1-4370-ba43-611a7f206078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f530a26e-406f-4b09-ad81-1aeeb391bfb4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c046ae-f0c2-4190-a744-06114dca8377",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46964afb-b5fc-43c8-9fae-ceb4eaaf9d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f935cef9-aa94-4f7f-b947-886c603e9cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06847b0a-8bfb-41bd-816c-eeff4afd1bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8343638c-2696-4d25-bdba-58a54800c901",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214f0274-8122-47b0-beed-a80c00e70e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4996052-c1ff-47e4-8957-79b6bdc2281e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0807c54d-5998-4e0d-bcc0-6470ed86f036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7347b059-62f9-4133-b5ce-18bcdc4c4930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900abd1c-af49-4cd6-99ca-d4a70baebf88",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575863f4-be66-4dab-acc1-b520811bdc9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78efb5ef-2c8c-44ba-bb77-0c6d8331985d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c68b659-6062-4cbf-a677-c07887ba908e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd935be-29ec-4ae3-bdfb-8bb70d4457ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db007fd2-d721-4731-89af-040e3f23551d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba11bbb4-3344-4f86-8b8c-139fb9febbc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f56cc58-e7f8-4125-b128-5c556e333978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb177c4-a1d7-407a-b22c-32c59597f4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0a27ac-14aa-4f05-b3f1-245b4110bd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41958040-7642-432a-b34c-fd636750863e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398a4a74-24dc-4a70-978e-7de90194ac5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c2bd21-2f15-4d0c-9154-497043b386e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba2dd8c-f669-42a1-873c-e46d81d77c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aeff38f-3458-41b2-9012-68a1e32c9f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94ad7d4-2d09-4943-b44f-82007fa4722a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5106aa64-e8e3-4306-97ae-f2a9a633f94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4ba64f-4438-4be4-8d54-328f65b3e26e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba98f77e-ee98-47ba-8eb9-0739a705ad39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c857d5-3786-46e0-bc8f-e031f94cadea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374f4faa-7dc7-4365-9a67-e2b290c4e5c8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62d1f11-cd9e-489b-b7ee-97fc2cfa2c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31bdeab-5a6c-4961-9ff3-13bbf6a1603e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456919ce-2cd4-4b64-a673-721b2f72aec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1c169c-9e7e-4ed3-b3a1-c8b75b030199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bcdd2b-281a-4d21-949d-9625707c2261",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfc8c4e-37f5-4cb6-9e96-00be8fc80d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b0319f-0b30-4717-9541-83a52d88455d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbc0d76-2632-4f3c-9e5d-d27a3d6f1cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92479a9a-21e7-4b59-b038-0b770f2565a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b182c6-17f7-4c15-bcbe-0c3ac504f913",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014dc690-625a-45e6-9171-d368c4fb347d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdab908-0082-47f6-b732-6116722bb4b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3763b2-45ca-4077-893b-cd0bd86c55dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19235c24-2a52-445f-a319-efc20c79523a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac22b10a-5c8a-4bc0-9238-5cd59f8d71e2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56aff6d1-060f-4e1d-a3f2-a21680bfc4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc845b5-107a-4d25-845a-ffe9e83337de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a77d519-a554-470e-ae70-a6bc9a4b7cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff786d84-c55a-45cd-ab5d-3f5cf393cb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8612f47b-d418-4fee-85b8-36d97fc836c7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15223b3a-a6b7-40d5-8d48-6cce191b4005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e4df0f-b0d3-49ef-bc25-2c0d8aa28db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4500226-91cc-4f8c-96fc-ad9036727f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bf3302-867d-4848-b9f2-4f02236a4423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754167a0-2e3f-4ada-afb0-8bab1712f6ec",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd4a987-e0b5-4f9e-8ed4-7d86a67efb5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5c0f73-a30f-464d-b0af-bf2752fa1ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0162a74b-49ed-4892-9990-20faf4fbf16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b87550-50fa-42a4-875e-484cb291e712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2da98b-a3da-4d58-89f3-8f0f29882d77",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a13c2d1-f8c8-42a3-a1bc-810d89ef7b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3827f611-304e-47d5-a2e3-ff55dd9bee99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a378e5ac-1731-4068-b0ae-804e6f0d98e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "affc1729-5d9c-4455-808f-8eaa8b9ec958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e08209-2784-4c33-884c-2b890bbf570f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d54476-e45b-4414-a705-2e520b4310bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df4017fd-756c-47ea-a4da-9659e590e997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "834c7be8-1820-4624-9fb1-b0b64f62ef59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb5999a-0f15-4e69-be80-febc43cfeda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f9b505-63b6-44d4-8dd5-771ea259a68e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017272c8-8600-4488-9740-60b740b4201f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d1d5b4-1fa4-40dd-85bb-237f83b7aa30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cd933a-a5e0-4d08-baae-a0c08e32c886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a042af0-214b-42b6-a9cc-93da852b6c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa510c6-84e0-4a26-9802-e187ee47cb00",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e50662e-300d-4d44-82e1-6e134fb88363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49911e46-8bd6-4a85-9e45-ec74223eec5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83b9f4f-2d19-40a9-8f16-2673d7871206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848da6b6-fb73-4f9e-a486-88477229f958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4c7db5-06f0-4443-89b0-2891b74bfa65",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8dd4cc-4127-482c-be1a-bbe28c734bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd9bc54-a8dd-4e41-9df7-e7450b81ef54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9008e27b-0492-4756-ba70-a96e9ee7d1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493e7cbf-34aa-4798-8681-c1e676970718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992ef8e8-207a-445d-8aac-3b3d4e35796b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaa5344-5851-4ef5-9b4c-ec75cfee60c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656ad072-1d88-4816-ab54-b8c6d651108c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4446eae-f473-4c3f-8e6b-0b7914ce388c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd0abea-e9f8-4e1b-ad23-31486871b1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63739c44-d27a-478c-bf1b-a3a0a53f7780",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7143db48-85a0-4b20-956f-111b3861d305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d86cb9-2a7d-4553-9bac-187eec684ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb87577-e908-48b3-868d-2a4507a63df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bacd5106-123e-4de5-8a41-ea2a5d461e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012cf360-521b-494d-a6be-78ee4a1f5ed7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f6d5bb-44b1-450a-8ea0-ba6cc36be2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b4ccd0-6ff2-4691-a8ee-6fbb32d4940d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df23c493-1eac-422a-8139-263215ff0611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039eee71-dcdb-4d6f-9ffb-3abe64ff778b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68fae80-3aac-43bf-9ecd-7ffa3878a6a1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19acb8d-37dd-4ae3-88c4-af63786328c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7cf58a-5161-4041-acfa-76b4c214e006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303a7b2e-fa5f-4fb2-8c44-11504f6c4e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d18f07-3bb7-4376-973c-0a4aa7ec0ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe121c7d-f067-4a38-b352-61f3e96e58de",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b808a31e-baa5-43e1-9e73-506ce488e936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b4df20-1e19-478f-a0a7-b302ab20bfe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "502f0e1a-a47a-48ec-9a05-6536b98b641c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8311996e-abe0-4ffa-a60b-d3d41ac2a8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb846d8-4fdd-49a7-b8fc-7128ad926df5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf91e4a6-a113-4bb5-a46d-5476cca15853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b080b93-c52c-4eca-9397-03d16220a44d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "098acb95-e006-475d-98d0-11f88f52981c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6e0a56-2196-4fae-ba6d-0c917e013ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153363c3-78c4-4f04-9ce7-d26296c3a38d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e45db44-04f6-421a-8080-08bde79e0cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb8f6eb-a7e7-4261-a945-dcf478a133f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c0a9cf-6a66-4f5f-90ba-f59fdf7b15a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56792b8c-7d9f-4bde-9a79-55e9bb014d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a893b02b-b31c-40c2-b98c-1a767cbbd9d6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bdbea5-bf60-479d-bf9c-3e2e8e3302a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7a73cb-65e3-47ee-a3e0-a22d3d0f9c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb7cf4a-d300-464a-9a85-3f7059e60df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ca34ed-c36b-46b1-8ad0-bb1f88cdad05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8873556-6bad-4ad7-9e01-41e497d6960f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3738cbfd-9274-43a3-90ce-a23680d747a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445a3cf0-4dec-47a7-a901-04c289e3ab16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc653b77-ef40-46bf-94a1-dabe6cfb7b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb8427c1-5a4e-4812-8238-d3c73e358c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5546b792-3400-4650-8945-7104875d1315",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f303167-4446-4353-9efc-953a43ee730d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20078d70-50d2-4c7f-8e39-631f71f2b3da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef180a5-8959-473d-82c0-316ff681ecd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9716e0d-e636-45de-9164-6f63640f36a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15563e84-1091-4160-ac46-af7463c2bb51",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5de6fc-b264-4960-8a2d-f79fb256e632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e53083-940b-4164-ad62-29b82d72ea4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580f9cbb-25a7-41fd-8817-6bc26c56d7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08dcd4c9-d3f2-45fd-8d30-226840b0ed71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30055c18-6afd-4e22-b884-97d3dbc99d5f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230edc64-2820-4ec2-80e3-dc44f73580b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700c0744-b256-4456-be16-f975029ffc15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ac1e66-f009-4e00-a54d-e362c31c1db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fd309c-aaab-4d80-abff-2bc527110f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605d4cbd-f057-496f-a431-6218524c91b5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d5996e-2842-4729-bb6d-36cd2a55c762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887112d4-56a3-4264-b0f4-e030d72fe6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053aaeb7-39c2-4c01-baed-0d981d1aee98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc3f42e-c651-4f10-b68a-bb1a603bc775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed88667-2298-45f4-a42a-25ef0ffb0540",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efeaee3a-96c2-4113-b75f-f43980c9d895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22848ba2-f170-4a66-b92d-9af358d88512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fe9f09-d959-4de5-a4ba-bdd733cab804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730c9ee7-7217-4b04-9f41-bd43feb9bd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f159b184-f7d3-4a0b-bfcd-62fd185467e8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975f7f57-ed3b-488a-aba7-36d40ea606a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b076f2-8e8e-4bba-a6e4-5fb68476d2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22b4d88-9809-4c89-9a1d-c39cf7ec6533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99aa7231-95e8-43c5-b73a-a7e07a4aa834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed9a83d-0ed2-4b80-8e44-4b0119b0dbf6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4046f0-3b55-4d45-ba01-8d83ada8ac4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f460543-81b2-4acc-971b-b58becb5080e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "624c3923-6ae4-4ee8-b38b-2420675cadbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2198bc6d-c121-4091-9753-d1ae18ec0d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0bbc1b-54a3-4348-b5a8-8c05f04ef214",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af707bdb-7119-40a4-a45a-bf5c74feaf98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30eef387-8d23-469b-9b31-a0130a41ce99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e63f69-4819-4557-b6d1-6eb04e1ecc92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea75ded-551c-48c3-8116-9685bc6c60a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8be860-a150-4e1e-9775-8860a92a5468",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0ec54f-d02c-401b-bba8-b67acf8b8f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e19907d-bc21-450d-89fd-27ed1f6c4e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c77047-9101-498b-9608-0ea442fb0b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e6c7a5-385f-41b5-b16a-5f1f6c543b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fe695e-27a8-459b-86ec-c44f38115df9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d84dca-d299-4eca-9cfd-3b49314341d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6488f401-e4a7-4769-a28a-c75f5a4d5917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f2a940-4ab6-4619-b90c-688e7bc6f70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e60170-e54b-4cd8-9eb7-2e81f1151f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24afe35-23b2-4bbf-b483-9a6a7c53207f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb1f429-5716-4f0e-bfd1-228351f670f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aac0a183-3470-47eb-902f-19eed1285167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d594c62-17b6-4705-a144-678d55acde63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a555013-1803-4202-b79a-204326cb4325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ded33b7-b627-4f33-94a4-7450ef1748d1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afd27a7-17a9-411c-ba6a-7715aaedeeaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "594305a0-d9de-4265-83c9-b01a33021ab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a475dcaf-199f-4616-9f51-1dd2123748e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f133e9-7fee-4d80-a574-3a63ad97cc52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5da324e-43c5-4fbf-85dd-dbc0c0e4ccca",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30adc3d-3dbf-43c1-b3b7-6026b4d5e1b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58bba521-34d5-4390-8864-e9e6ee50870e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "921a7a07-5430-4c84-bcbb-42ef14b14819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fbe474-3962-414a-8640-38def0998829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891a3fd9-7045-4ce7-b9ea-8ef36c2dda15",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab139e5-578f-43b4-80de-fc0001eed431",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c176db2-9edc-4e85-a8b4-c7e6a607d466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6eaeafa-428a-4f88-b9f2-51e26f9fb052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ef13a4-81e8-4cd3-ae94-3683869022eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318b08ff-a3f0-4183-9040-2aae53d6ac91",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6722d065-23e0-4669-9281-d58a3cff34ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4007f6e1-151a-4595-a948-43e4b6e9eedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032fd69b-39cf-480f-a54d-85ffc57540c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb137aa-6fbc-489d-981e-ec3bca8b24f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f3eddc-959d-42b5-ab02-79cb9a36720d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c22eeb-791a-49c5-afbc-af798c810b74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90f9ad8d-2ab3-44f7-b3d6-1c414bf64084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f58775d-9c31-44ba-9a82-0136306a5519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2116474a-0dcb-47bf-90d9-4d518f80037a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2a0713-aac3-4a14-9498-a5309760b161",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baab9a45-1173-4565-ab94-91ddff630811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32beaca2-69be-4d1a-a685-990d7a2f0242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "946c2222-7e72-4a1f-91ba-df88d5e0b833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a67113-078e-4d38-b1ba-cbf14b29ea19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a3237c-5c2e-4810-a8c6-5b96043a74a2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94687ab3-4f3a-4045-8d1e-62e79f5be09c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e772ac84-0daa-4377-b046-2baff5d3d0ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ad6026-4ee9-4857-82e5-5d26a53ba0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab823c4-1649-44cd-b340-d2bd0956bb09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee28c099-705b-4f84-81f6-659f7581bde1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc4bd54-02c6-481e-a21a-dbda88708bbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d64b3b8c-0ef7-4b01-86c5-1130a2ebd37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f0b784-bf7c-4089-93ad-3f7349c38dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8ef7f9-d338-40fd-b5eb-b29921d05446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e28e67-d728-4e3c-ad9f-570a25780e63",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23931219-1c43-4365-aabf-93a67c3f8c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a31eb72-9f41-4bb1-aa9e-95933b4f2248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e36bd1-d9a7-4cc3-bc78-5fb2442fca7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe4aff9-5c9f-43af-a8d0-f6e8eece370c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1484f1-0b16-4dfc-9ec2-6c23ee168521",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af01afe4-144a-41f0-b8c6-541013dc793b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b0f19b-12c9-4626-974c-8517fd22f635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3132a67d-c5ec-407d-b39f-59ea736aae01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1ad32f-ec5b-47e1-8363-853df8721a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badd17ce-b54d-4a52-8a9f-e52066b66761",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10495b1-6684-404e-a2e2-543f8abe5421",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a7d76a5-7e3e-46fb-8451-e71591fb5059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0310309-5a87-4e95-86ed-770a4afafac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45328131-27a4-4a0f-9137-1e129383c6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b29bfd-f9b6-4723-8a12-d06606f1556a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394f10e3-8961-44ff-9aaa-195cbf9abf3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bd41652-d376-4f2d-b0dc-cba722ae765e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b884314-b8a6-4b99-87e6-a65f33db6927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6219e189-dc9e-48bc-a48b-fb60ce0b77e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cede59a3-1997-46b1-8171-ebd8bf4b8505",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d30d00e-ec56-47b4-be2f-8151e2d7ed16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "795c2034-2f40-4fb4-9368-3b760aaf8af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2569a7-34c9-4948-8ca8-a3583c1c40d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a93f10-09e8-4e36-838e-cb2512ac9816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16beb3c9-954b-4f69-b480-d390be5a7ac4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6864c742-f947-4966-8b89-c087b9e21eb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e716dd44-537c-4458-9bf9-dc6a23355690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dce46a3-9f59-4cec-88e4-7052820b1469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a25d5dc-3bae-4476-86ed-2a6bfd0d4aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de9dc7e-9bab-4e0d-a5cb-970d3a2b1bf9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378790c5-c65a-4a3c-8b34-809df6b4e3ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11c2662f-bdcf-4b22-aef2-458ee167ef34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af031d92-4109-47b2-b653-85c35e556dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e252ba8-783d-4485-8966-08cc0255573e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbc0698-4ec6-463b-8272-3e9562ab4ff4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b17eec1-200e-4712-86e3-beecfb74479c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3fa26a0-151f-4866-832d-a1e716f1cdd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9335ae-b07d-4580-9819-7846b0e47ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40066327-52e4-413f-8af0-38d60aef59b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c427bd3-ed8d-45e1-a06e-a06c99b57079",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31759502-64ac-4ea4-84b3-5f7935c6d04b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac959bcd-b182-4923-b850-8a432c153551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a09eacb-e258-4a79-9e3b-826154833a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bc0ed8-1f26-4138-88b3-4a9e3defa683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af62fab-ec52-49d6-a463-c6e25b5b84bd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81bb6c0b-cc12-4630-9df1-471e21ef7a84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6716e95-6ff1-4a01-8027-822b6ae94454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e281609-3f05-488a-a95c-7cefb2c3b0c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb9bca5-e452-4896-b634-d5b4df913d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed4b4b4-92cc-403d-9390-c6543d330a15",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4a397d-5785-4fed-baaa-90a7288c2610",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8dd9d7e-7744-4f5e-a710-9902296080aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2237dfa8-5cf9-4df3-9363-07c97a53f9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab4f8d5-6a9e-496a-a441-ae163b423258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b204f097-3395-4ad2-9fa1-1c483eb1a496",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca208a4-afb7-4b2f-b7bb-f94c93664c37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32f2e5fa-03b4-4ebd-a572-3f09c74298aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f541396b-84c0-4b54-9047-ee56cfd9fdd7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df1868d-741b-4c6a-a2bb-4e7e1d453408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cce06d-51eb-47f5-b9f2-d0359eaf6f84",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ac7c85-6a90-488d-85ca-f912bc648d51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8a26ee3-bad4-42a7-8f3b-44a3f49ed70b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b7e56e-38f5-46b5-831a-e4295a93e6b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99527b7-20e3-4b85-aae8-5ab6521bca46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae7b71b-8fa0-4ff0-b192-09643c872f04",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828ed38f-c96f-4c06-bef1-ef3f131a2ea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49c88d74-cafd-430e-902e-ecd3a83b1eea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3653a12b-cf0e-429a-954a-e773eb1f7d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c1f064-6427-4cb6-b4d8-f1acfc4104af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbb80d5-8c7f-42ac-9246-3e8b1519eb12",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794468af-9686-4e8d-8074-35e7b4e9fd59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95614e45-f024-40d6-9984-db30ded7c6c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87483e3e-6923-42ba-ba55-2986bae80df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7995588-efff-4b51-ba84-34d178d97f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545a0b78-8d3d-4ce8-af2f-237bc525dec5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e87000a-111b-4e4a-aacb-df91e841ee60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bd79672-4621-4ba1-88bc-c28f9df6e873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8de4a39-de87-4f05-ac1f-dc5583842624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fb141a-df9e-4140-b642-6db839158a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84581d14-21a0-4b9b-97d1-e53233e2d586",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f157c2b-f9d9-41b8-83b6-a7dd2efe5f62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f1c7598-7bb0-403b-96ac-9ebb4a945582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa99cb2-5c6e-4ba8-94bb-9eb5771a13d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2d8714-33e3-4159-8ce6-5ed09391fe2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6061ef-e66b-4fdc-aec9-31905436f73e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7807fcd5-4d20-4df4-bd77-ae9f3699a00b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ab71007-962b-44eb-b010-92e15afc79f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd5bed2-b32a-4caf-a274-501d02bcef05",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb6cc759-4d68-4701-90c7-71e066f4fa36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b8bd9a-5524-4c78-93ea-67dbd3e15025",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13f602d-04d3-4d4a-ac9c-8f704005e2e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aa6ba6c-b964-4b13-afd4-673ab466c509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0573453-312b-41eb-9979-c10697cbff17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67198a26-5d53-4484-8766-badb453b5a41"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2b5fb4f-bebf-443b-ab85-e134a07e482e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57c9583a-bcb4-4393-a0cd-20202f9be8b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7914f07-5400-4afb-8f1f-5669c6d3e0a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2eee6d7d-abf5-4c0e-9e69-839ce0cae3fd"
                    }
                  }
                ]
              },
              {
                "id": "c1602195-1e93-4c0b-86c9-aa17dcc9e2f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a7f8af4-e807-4013-aff8-eabf344c40cf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba9bb44-0819-4487-8ef2-bb1c5f0b4c42",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8c395533-cf87-4044-b1f9-193ebea76628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad441c62-2a42-40b7-829e-51844688b662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bb25d4d-3982-4d60-8c32-fe14a5751176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab9ef1f-70cf-4d02-8d83-ed4bcb4b0476",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a278bb-3bd8-434d-b68f-43a3aa12d444",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dcd53a15-b658-4491-905d-729483cb4eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0ffe4d-c0f1-442a-b7cb-97b3005822b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f54d7278-ca30-4dfa-9226-330c3469cb30"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34518ea7-458c-4089-9abf-0bca7a4987f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4ab4637-1503-4622-b77e-525bb037fe40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4486069f-f332-4031-ad98-06dcd92e1b59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a289bef3-3ebd-4808-b429-50ac1ae30691"
                    }
                  }
                ]
              },
              {
                "id": "3a4a7277-549d-445c-94fb-5c22968c6186",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c1763b83-ce8a-43b9-90f9-28b1c5399efc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554512fd-5941-4270-bc9c-c35fa7f365e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "da5862f0-f169-4990-bfdb-696143ed9a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c9a15b-054a-4fbb-8dbe-3a6c35fb3690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38424a4e-3218-4784-ac74-92c0349e83a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "45b1ef2f-d64f-45b9-bb21-3cd8840e3609",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d7a436f1-7905-43f5-8ea5-2d5ce5644e37",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "272b7fb7-6b5e-46a3-9c27-fa10cb2cf980",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "70fb36a5-d888-41ea-ae65-678dedf173f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2c3a964-9737-406b-89ba-efdcc4360ee1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4304f4b6-7f23-4814-b3ac-3d807b920569"
                    }
                  }
                ]
              },
              {
                "id": "0a319142-4c43-4838-97a2-92c911858e7e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "638a99a6-b13f-40a0-ba06-4bb8b223a3e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2a8f2352-030e-46a1-ae8e-879f98502922"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c97b5731-af95-4e7e-9763-2f9425631d08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad767d9e-785b-4fc3-a3c9-be98098c2f87"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f04c09b3-a15f-4901-8bbf-09965cc09310",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4ac2ce57-942f-4da2-b9f3-a18347cfc5b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ecbda3c-3528-4aab-b97e-4646412e83fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "865d66b8-d921-42e5-8594-becfab541d6c"
            }
          }
        ]
      },
      {
        "id": "463fe55a-add3-4862-aa89-bfe5f7696370",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a0a3be9d-865b-4f3c-be71-c3c22939e305",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a623b0c-b290-4c87-a313-77729f692309",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8350825-bfe6-4f8f-9a79-d824e188cc41",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f0f772-404d-4447-9e49-bd44fd092646",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9ee74992-c6b5-42bc-bb92-d5a9e4b942c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cf697f-d452-4c1f-b1a5-5cbf4b62d2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab2674e6-e159-46d2-b9af-5ff3c974630e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a1ff24-3c3b-46b4-ba08-5da4f52e007a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc343a60-bbc7-4660-ae99-8fa2d2513752",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4319f52e-e8ef-4754-b1a2-72bdf566ef75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab50f7f8-c23e-494b-9b88-56086d7e45bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f74c39a8-1db8-496b-ab7d-511f7409ae09"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e30086d7-2a94-4df6-88a2-5160a87244d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad547bb6-a4f2-4568-8675-ed0d0ecc232d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0437d0f4-6569-47de-9baf-3a67194c6a22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "549686fb-011c-4f99-850f-ccb7dddfb1dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9596405-bdd6-4df5-be49-dfd04be663b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2e3ee07e-d5a2-4838-b9fb-4992f5ef3553"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a78a18fb-486e-4763-bfb0-389b95bd6df0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd1f535e-e48f-43e6-a692-6cece9516646"
            }
          }
        ]
      },
      {
        "id": "e16ee977-e7da-4dca-bd66-ca33bb395e75",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "06bccb31-bf50-4884-8812-3282f8e2c7d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ae0550b-1004-415d-a4e8-531a2d2ba8b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88dbaff3-b678-46fa-a106-c69f49065641",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb2ad54-f49b-4630-8b05-672d7fcdbe0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fca9f023-42f8-4b47-af6c-4d14126c70f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b650fecb-22f0-4578-a1d5-ea457d47afa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26d33bb2-29eb-4acb-aafe-d4a00b9a3b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480e8a3c-c9aa-4417-8ebf-25de39749190",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d225ce1-67c4-4670-98d9-58843d6b4e48",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "84a9e36f-7769-4b6e-8d86-74449470939e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16499ff3-0687-4aae-b8f1-966099f5a5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53e87993-f934-4c97-add5-7452bb94b853"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "959c92bd-a8a6-4e36-946a-960d467c4fcf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e0e6c66-b005-4074-b334-36502c128958"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08d22eff-7d7e-4cb3-b381-64ae2a0352a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b573334-f470-498c-ae4b-51c46ed94273"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "600bd9e6-47f8-445b-a853-b36d259c3d67",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "73a9afba-353f-4b76-8a3b-395ee8643221"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59cd7d1c-afd8-4586-96f1-6fb674656d7c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46f81b05-6488-45af-82dd-6c3bccf1a689"
            }
          }
        ]
      },
      {
        "id": "32ce62c8-3d81-4dc6-a2e6-ab85163d3606",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "60ce23e3-4a4e-43e2-a6a5-5ce714167da8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5563e329-2e40-4971-8366-3398a447cacf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2927266d-51de-4296-a46c-3235baf85c5e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34be1d6a-6b35-48c0-8f29-7c15ec7d6751",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76b6dd9f-0824-48a1-bcd8-692c33d18d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dadf4f-29e9-41db-bbf7-ab1a63900288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4faba81e-415a-4103-8e75-326424e61f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdb8b62-1cb5-48bc-b74d-e0a33bb2ce0c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05daac78-beb7-4c65-ad1a-8bcdd9f558e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "636dde52-2e57-4aab-8a48-b7e6106fbd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6405a17-530c-4844-b8f4-2324b608f316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d43c4d3c-8ac2-43d4-9202-3439b0db0021"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c33dc0f-8ba2-4cad-b6de-f4b3b9637b11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9057685d-b81f-48d2-ac0e-f19dbfd3b981"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fff01718-8202-4e8b-85d0-13be50cf9cc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d29f6c9-c152-4264-82ee-6754d703aa91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e877907-ed8a-476c-93da-feedef540cf6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6ea6dceb-9cbe-4859-bddc-8294b54a1182"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "364e0275-e7b0-4a4f-b3c2-5ab754213927",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d0f6e1f-38cb-4f9c-825f-937c936dd789"
            }
          }
        ]
      },
      {
        "id": "5f83caf3-6787-412e-b821-5cb9e7b6ab50",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff57d941-1a20-432e-96c6-7974953d31d3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8af3d032-9c5c-429c-b503-3c384c5d4673",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9cfa74cd-1e23-47e2-af40-3eee0aea695e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf88eb84-a867-4579-860b-4c0550f6d0c1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "065343b7-3730-4673-896d-d730d55d818d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 304.36538461538476,
      "responseMin": 15,
      "responseMax": 8390,
      "responseSd": 886.7394255370486,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679445435457,
      "completed": 1679445528936
    },
    "executions": [
      {
        "id": "d3b0fd11-bae3-483f-994b-8dc7758dc5c3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b70a8cb9-8afc-435b-bb67-06de2da054b4",
          "httpRequestId": "78fe32ce-b6f8-40cc-815d-9b4d21558add"
        },
        "item": {
          "id": "d3b0fd11-bae3-483f-994b-8dc7758dc5c3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "94b75276-b789-4f44-a0f9-cf47ad512dee",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 0
        }
      },
      {
        "id": "5e5dc87e-4b2d-4b35-9c0d-bd7cfb86df20",
        "cursor": {
          "ref": "c11e4d1d-d3c5-4bf0-93eb-7bba7d77c4e4",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "884e842e-d073-4d62-b2d1-6edbc5e76ba4"
        },
        "item": {
          "id": "5e5dc87e-4b2d-4b35-9c0d-bd7cfb86df20",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "448087cc-fce3-42cb-8193-39e01eb62860",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "0014d522-3651-40e6-9fbb-8671728453f3",
        "cursor": {
          "ref": "1e6ea1bb-f64c-433d-b6d4-b4397b8a8a81",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e6f8bf19-6443-452e-8b5c-00fb47a316fd"
        },
        "item": {
          "id": "0014d522-3651-40e6-9fbb-8671728453f3",
          "name": "did_json"
        },
        "response": {
          "id": "11e587c5-7af6-4991-a418-0d473977c6ec",
          "status": "OK",
          "code": 200,
          "responseTime": 480,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d2fa51-d741-4be4-bcc1-ea478a7ff552",
        "cursor": {
          "ref": "5d07cd02-0d98-4684-9111-65f1fe93edab",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b1eab452-adc8-44d8-8a6b-0c356f3f4f0d"
        },
        "item": {
          "id": "51d2fa51-d741-4be4-bcc1-ea478a7ff552",
          "name": "did:invalid"
        },
        "response": {
          "id": "b0a32394-ce1c-4c78-86c1-b63f6c41e16b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1245,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "51d2fa51-d741-4be4-bcc1-ea478a7ff552",
        "cursor": {
          "ref": "5d07cd02-0d98-4684-9111-65f1fe93edab",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b1eab452-adc8-44d8-8a6b-0c356f3f4f0d"
        },
        "item": {
          "id": "51d2fa51-d741-4be4-bcc1-ea478a7ff552",
          "name": "did:invalid"
        },
        "response": {
          "id": "b0a32394-ce1c-4c78-86c1-b63f6c41e16b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1245,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0b255da6-54ba-43c9-b448-708429feb8cc",
        "cursor": {
          "ref": "159edf2a-69e7-4365-ba73-d9f0d282693c",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2435c826-dbd1-4bbe-8b1d-7907c430bdc3"
        },
        "item": {
          "id": "0b255da6-54ba-43c9-b448-708429feb8cc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2788fe46-b0ef-406b-97ac-06cea291df14",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cd6557-aed8-4e91-b1e6-38ac648d1992",
        "cursor": {
          "ref": "c5e954cb-9ee7-4787-869c-d65228f7beef",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "70d24c47-6708-4d4c-aad0-1d5b570b17a8"
        },
        "item": {
          "id": "83cd6557-aed8-4e91-b1e6-38ac648d1992",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bad99d0e-edd5-43cb-815d-748abfd315e5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c334fac-c6db-4973-82b2-801c7235b798",
        "cursor": {
          "ref": "ca853c5b-d1e5-4fde-a612-c25e4b59044c",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a06963e9-9fc6-46b6-a9dd-d9690f556428"
        },
        "item": {
          "id": "2c334fac-c6db-4973-82b2-801c7235b798",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "63e9b148-9505-4247-9d5d-25ba87130e5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "423a79f6-369a-43f8-920b-cfd982a39c5f",
        "cursor": {
          "ref": "71491b1d-43ab-4859-9d92-46b936b9dc34",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5f4771a9-0ea5-4c50-8d4e-92806bd9e8a7"
        },
        "item": {
          "id": "423a79f6-369a-43f8-920b-cfd982a39c5f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cbe63ea8-aafc-4138-9fdd-0ccbcc13858d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "423a79f6-369a-43f8-920b-cfd982a39c5f",
        "cursor": {
          "ref": "71491b1d-43ab-4859-9d92-46b936b9dc34",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5f4771a9-0ea5-4c50-8d4e-92806bd9e8a7"
        },
        "item": {
          "id": "423a79f6-369a-43f8-920b-cfd982a39c5f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cbe63ea8-aafc-4138-9fdd-0ccbcc13858d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4e278288-0ad7-4ca9-9b8b-12282df7691d",
        "cursor": {
          "ref": "1ca1fe32-8ce5-4490-b2e6-cc496b7e18a0",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b1dc7c56-1d39-40fd-9f1e-f6f7e3f6dc0f"
        },
        "item": {
          "id": "4e278288-0ad7-4ca9-9b8b-12282df7691d",
          "name": "identifiers"
        },
        "response": {
          "id": "8ef4fc30-9e52-42de-b3b7-5e73d4789560",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc8d04e-b763-4eb9-8759-e06b6f5e2f10",
        "cursor": {
          "ref": "c403f3bf-9066-4ff4-a999-6cc9600c6ada",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "41d365ed-73a5-4346-bb53-844ea4929ed4"
        },
        "item": {
          "id": "8bc8d04e-b763-4eb9-8759-e06b6f5e2f10",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dab197b4-17b8-4015-95a1-8db8f5d161f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc8d04e-b763-4eb9-8759-e06b6f5e2f10",
        "cursor": {
          "ref": "c403f3bf-9066-4ff4-a999-6cc9600c6ada",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "41d365ed-73a5-4346-bb53-844ea4929ed4"
        },
        "item": {
          "id": "8bc8d04e-b763-4eb9-8759-e06b6f5e2f10",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dab197b4-17b8-4015-95a1-8db8f5d161f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fc2e60-22ec-4644-bb47-8cf12d0331f0",
        "cursor": {
          "ref": "23e594c1-e343-4fa1-a4ab-346b85ed9e55",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d3b018b8-be05-46e0-9af6-3dec8e5c31a7"
        },
        "item": {
          "id": "28fc2e60-22ec-4644-bb47-8cf12d0331f0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a226b47f-76ca-4481-857f-31959db85faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c0198b-713b-408c-9032-366bd74ec24f",
        "cursor": {
          "ref": "ea66a40f-7f44-4ce0-97cb-26afb7050ffc",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c30ea869-aad4-4ca8-8394-7d58ee56da7f"
        },
        "item": {
          "id": "57c0198b-713b-408c-9032-366bd74ec24f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3d2c4ba7-2b5b-42e4-8394-713cbb9cb287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd990383-c01c-4540-aeab-80e407683145",
        "cursor": {
          "ref": "435ed8e2-c43f-4a6a-bd81-b5b911a23475",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cb5aa07c-33d6-4eb0-a43e-b7071d67958d"
        },
        "item": {
          "id": "fd990383-c01c-4540-aeab-80e407683145",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c727c97d-ecd9-4fe2-ab3e-0dbb73b21a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7592fbc-74c8-4d91-b75d-63bff03f21e5",
        "cursor": {
          "ref": "8dd3712e-bf27-4176-b7b8-421b2bf8a344",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a563ed9f-65b9-4b9b-8994-26c4c8f50112"
        },
        "item": {
          "id": "e7592fbc-74c8-4d91-b75d-63bff03f21e5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "672eb2c1-734b-4709-8d16-d82f0a4ee6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4103f4b-f706-4bb3-82ab-200b4070bada",
        "cursor": {
          "ref": "06c64365-fbc6-454c-84ba-f6708a19e622",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d1903dda-a7d3-4123-9094-288a68c8888d"
        },
        "item": {
          "id": "a4103f4b-f706-4bb3-82ab-200b4070bada",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cfe65307-6911-411d-8ae4-31490c3fa3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf9d0b6-c822-4d57-ba51-97925e07ec2d",
        "cursor": {
          "ref": "df6b3234-f601-4169-b526-e013f66f85d0",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d28fbfae-e55b-46ff-891e-77c2cd906a4c"
        },
        "item": {
          "id": "9cf9d0b6-c822-4d57-ba51-97925e07ec2d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f05a69c0-21ed-4455-854e-fbec4cf2e5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a686ca0c-c592-49f6-963e-6d1c8320c54b",
        "cursor": {
          "ref": "d0ae0307-701e-4693-a1a5-4e8969a7985f",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e76f4c35-a3af-4417-b300-1f6737f8e4d9"
        },
        "item": {
          "id": "a686ca0c-c592-49f6-963e-6d1c8320c54b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2951c1fd-0f63-41ec-8ded-bbacec78710b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5f905c-83ca-48e8-848c-95331b600b13",
        "cursor": {
          "ref": "3cc9ccb5-4ab6-493d-83c3-088412886630",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c94c324f-1441-47f2-957d-80c595edd0bb"
        },
        "item": {
          "id": "ec5f905c-83ca-48e8-848c-95331b600b13",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "33c5db55-26ef-42a2-9b43-9db1f20d41c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d69985-289d-4b44-ad6d-3808cfa8d81f",
        "cursor": {
          "ref": "4270363f-c0a9-47f8-a274-6c3fe48dcfec",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4d4f593f-429b-48ab-a15d-bd52a7053f74"
        },
        "item": {
          "id": "e6d69985-289d-4b44-ad6d-3808cfa8d81f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cea4f746-5628-405a-a0a9-a563a63f529c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22a376c-021b-4a14-8940-f8879a948e49",
        "cursor": {
          "ref": "eee6b198-d541-42a1-a4d7-ea25fd806c1d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "52524ed8-497a-47c6-8121-94d551d53bb7"
        },
        "item": {
          "id": "e22a376c-021b-4a14-8940-f8879a948e49",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "30a5dc94-9233-4910-b9a5-f2a48cdeb888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4eeed51-780b-4b44-bf0a-120366f426bd",
        "cursor": {
          "ref": "8092faaa-679c-4650-85bd-2efb9f999993",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f1c42c05-6509-4d16-bfb9-79191189a880"
        },
        "item": {
          "id": "a4eeed51-780b-4b44-bf0a-120366f426bd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "293e0e46-c4e3-4e2d-9ddb-0c50ad50e970",
          "status": "Created",
          "code": 201,
          "responseTime": 1739,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c231eba4-b8bb-4a9f-a0fc-c1d6fe0b67c4",
        "cursor": {
          "ref": "7d9cac55-03a3-4949-801c-86e326114c9b",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8cf69050-24d3-466d-8c49-f2565ba91f01"
        },
        "item": {
          "id": "c231eba4-b8bb-4a9f-a0fc-c1d6fe0b67c4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "972ccd41-cf1a-4cac-a0d1-46dd1b036042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cb996c-c055-4777-829f-c788983077a4",
        "cursor": {
          "ref": "e317fd41-88c6-4d08-a300-90a50342558e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ff78039c-8f19-46f5-b06b-822cc3a87c51"
        },
        "item": {
          "id": "86cb996c-c055-4777-829f-c788983077a4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b473f199-6541-4220-8627-c345c92fdbfb",
          "status": "Created",
          "code": 201,
          "responseTime": 5169,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "ea467a26-c1b8-47c9-9dd8-84c373f8c6d9",
        "cursor": {
          "ref": "7155f5f0-8ef6-407f-85c3-522a0837b36d",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "98dbcb76-f3ce-46ee-a45f-fb25ca143c35"
        },
        "item": {
          "id": "ea467a26-c1b8-47c9-9dd8-84c373f8c6d9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "54b93a5b-df3e-4948-b341-e22215b44e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7c3b14-c507-4af2-b80a-23bb6bc13f0a",
        "cursor": {
          "ref": "8c5c585b-e0fd-4891-9d49-6ea0dd927321",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "472b3d47-8832-4650-8f63-11e5ad804e78"
        },
        "item": {
          "id": "dd7c3b14-c507-4af2-b80a-23bb6bc13f0a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "bfab5956-784f-42f3-8b4d-26d9e6b699fa",
          "status": "Created",
          "code": 201,
          "responseTime": 8390,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "bbcb3078-432c-4a2b-acad-feeb62fa70db",
        "cursor": {
          "ref": "5825bd3a-63ae-4a43-87bc-998975a67181",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c4980365-8489-43c9-8c99-30404a507bf5"
        },
        "item": {
          "id": "bbcb3078-432c-4a2b-acad-feeb62fa70db",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "176dc96e-9bfe-4d7d-9e87-8ab033199e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a951fc-67cf-46a2-9ad2-68ce1627a270",
        "cursor": {
          "ref": "632026a2-b70d-4bf9-b424-d228625d1b6f",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "83b7d5d1-22f1-40b1-a9d0-61724b962cd2"
        },
        "item": {
          "id": "82a951fc-67cf-46a2-9ad2-68ce1627a270",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5d65086c-4a76-4f87-9cdd-3d9e9f25887a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797139c2-4924-47ca-8523-5d8e1c01e419",
        "cursor": {
          "ref": "7b693968-0f66-4052-b87f-2965f1f0b1c9",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "57bbed03-8757-4504-abed-11da13e342a1"
        },
        "item": {
          "id": "797139c2-4924-47ca-8523-5d8e1c01e419",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f1736ba3-d83f-4be8-b363-1520983fb4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f38758-97c2-43fb-9eb6-b6b5eb65d0c8",
        "cursor": {
          "ref": "584fc536-41ad-4ecf-ac2c-c6ff5d2be0d8",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "78c4c805-bceb-468e-82df-f6c77f9668c9"
        },
        "item": {
          "id": "01f38758-97c2-43fb-9eb6-b6b5eb65d0c8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d4dafc5a-96a2-44b9-9f1e-6c879cf95d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d01b20-8678-483e-ad9d-60b6043d79b1",
        "cursor": {
          "ref": "cbed8532-5cb6-4903-a9f1-efd9cd23301c",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2ab0ddd5-f2e5-4f39-b52d-1c2152a3dd4d"
        },
        "item": {
          "id": "f8d01b20-8678-483e-ad9d-60b6043d79b1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ddcbe7e2-50e9-4c2c-b212-6fe4b10b8eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b263ac9-227e-4225-b8ae-f08214fd0f50",
        "cursor": {
          "ref": "93513989-e2fb-436d-8451-ae44ab429ad3",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6a5c4ca0-7c0b-4dcd-8fa5-6794d1c528d5"
        },
        "item": {
          "id": "6b263ac9-227e-4225-b8ae-f08214fd0f50",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1d3a3b37-9c62-4497-b4f4-1edc21028e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5836d67b-540f-4a51-b3bb-3383bbf86499",
        "cursor": {
          "ref": "b3cfd467-ef78-465d-bad3-120137d5c507",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9c984f51-2f4f-40fd-ac25-02fc5c38587a"
        },
        "item": {
          "id": "5836d67b-540f-4a51-b3bb-3383bbf86499",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "85e0ee01-5b33-4093-906b-04061420967a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41942649-97a7-4021-be91-d70bb92f3fa3",
        "cursor": {
          "ref": "b5767b36-f601-4f07-aba5-93027558f225",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "67cb6c61-30af-4627-b9e4-2906ed26f681"
        },
        "item": {
          "id": "41942649-97a7-4021-be91-d70bb92f3fa3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fd61d7ef-d8dc-4682-a827-efab96e9baab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86005104-dbdd-4c72-a64c-8f7bb0c613cb",
        "cursor": {
          "ref": "15b6929b-1b9c-4759-a091-293aa42f9a64",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c224757d-cc48-4a0d-bf90-fbb0179aeac9"
        },
        "item": {
          "id": "86005104-dbdd-4c72-a64c-8f7bb0c613cb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "83f1e3ee-7241-4ddf-853a-6cb914a8acc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11b612d-0d08-4d02-a86c-a96f9e9b37ea",
        "cursor": {
          "ref": "5ef4d7c5-5dec-45a6-8620-e1607f6b64d8",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "72bc3e05-022b-463b-9594-438996a16322"
        },
        "item": {
          "id": "c11b612d-0d08-4d02-a86c-a96f9e9b37ea",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9bfc6234-4dd4-4f58-9409-1ac586a8499b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ce5cb0-3d70-4944-bfbc-87fc8308682c",
        "cursor": {
          "ref": "a9b68513-c0e6-4c32-9b54-f1414e5d2c7a",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "de4eaaf9-c2e9-43a6-bb07-33218b47fb02"
        },
        "item": {
          "id": "54ce5cb0-3d70-4944-bfbc-87fc8308682c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f2fb65b3-01ac-4ee4-9229-45dbd14f20be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ec01f4-aa87-4300-ad4e-0f75957c5222",
        "cursor": {
          "ref": "327ccfcf-a2f1-4b07-a12f-61b80661202c",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ca822c2e-74f8-4362-a7ab-debe88440f0a"
        },
        "item": {
          "id": "70ec01f4-aa87-4300-ad4e-0f75957c5222",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0199c27d-92f0-4e5b-af14-89bb64dd3d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152e3167-ed7a-4eb8-8024-43adba390215",
        "cursor": {
          "ref": "7df56130-c83a-4aa6-a8c1-b9d995a34aba",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "033a507a-bedc-4243-858e-039e2c62c515"
        },
        "item": {
          "id": "152e3167-ed7a-4eb8-8024-43adba390215",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7a996b46-48d2-4d2e-aed5-bc095299de7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd574e36-b7f1-401f-bff5-b0c8ef2737b3",
        "cursor": {
          "ref": "623355d4-0c91-42e2-9df0-df3778172e95",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "09da2461-6c68-4daf-a198-6b2dd48744ed"
        },
        "item": {
          "id": "bd574e36-b7f1-401f-bff5-b0c8ef2737b3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e30e5a6c-aab8-4ea5-af0d-182fce5b15d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8b4362-ca1b-4ce0-b8c6-48d77ccf8050",
        "cursor": {
          "ref": "220a8872-2dd7-499c-aa64-9daab8bd1864",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6599ba81-5e0c-465b-9471-8ba77e839ab2"
        },
        "item": {
          "id": "2b8b4362-ca1b-4ce0-b8c6-48d77ccf8050",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d926ccd8-53d7-4b84-bb81-ffcc62fe3911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aac882a-62e6-469a-861a-58b41c222c7a",
        "cursor": {
          "ref": "6d3f8a9b-c655-4dd4-8df4-d636342323c5",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "30da1a87-63f7-4940-b171-ccdba5463a46"
        },
        "item": {
          "id": "5aac882a-62e6-469a-861a-58b41c222c7a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1df5194a-966f-485a-ba67-970a470e4146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f16c8a-b997-4343-a95a-b83baeb1f7f3",
        "cursor": {
          "ref": "80dbbf9d-4990-4a29-8d3a-402122471403",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "625b7b63-002e-42df-9a59-a63c93ee0685"
        },
        "item": {
          "id": "21f16c8a-b997-4343-a95a-b83baeb1f7f3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7ef91cb6-d6dc-4481-a63a-ea75cb8687e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338afb74-8cb4-43a0-9ed3-986b91f08e69",
        "cursor": {
          "ref": "7142488c-7708-44f1-8f2f-9aad174f6831",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6214a194-a024-413b-bd38-ecfc5cdb8fb6"
        },
        "item": {
          "id": "338afb74-8cb4-43a0-9ed3-986b91f08e69",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5019d788-b61c-4f37-8b98-79d2b53fff67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7e1e3a-94ea-40c7-b696-5539607d1b8b",
        "cursor": {
          "ref": "1645ac95-8579-4eed-b29b-078bd457e164",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fa28997c-cd07-4d1e-a3e6-9ee9f342a0f3"
        },
        "item": {
          "id": "7e7e1e3a-94ea-40c7-b696-5539607d1b8b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "07d86feb-a4b6-432c-9fb9-7c792e820364",
          "status": "Created",
          "code": 201,
          "responseTime": 3441,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a66e4be0-c8b7-461b-bb00-426066198f61",
        "cursor": {
          "ref": "ee6486a0-31a3-410f-a730-39c1161aa2fb",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8f201e02-50fe-4e45-8b61-70e809baa193"
        },
        "item": {
          "id": "a66e4be0-c8b7-461b-bb00-426066198f61",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b84d3736-8337-4b52-9b3b-9c741a809043",
          "status": "Created",
          "code": 201,
          "responseTime": 2595,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e11c4d28-51c8-4b95-91c6-f93ba42489ad",
        "cursor": {
          "ref": "229f5db0-2a44-4861-ad8e-a2ff3ed923f3",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7809dc7d-c642-4a03-a875-2f1ac3a38848"
        },
        "item": {
          "id": "e11c4d28-51c8-4b95-91c6-f93ba42489ad",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8a441bee-156a-466f-8d1c-e3239dab07b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9934bc7a-7427-4cfb-b99c-65c56e4c3b93",
        "cursor": {
          "ref": "e50fe21c-55dc-4e6c-bc3f-e2c9ce8f89e9",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5b402566-e20d-4624-a16a-4914dd515698"
        },
        "item": {
          "id": "9934bc7a-7427-4cfb-b99c-65c56e4c3b93",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "af49d394-dfbf-40cc-b907-42035c0cdb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d866c6ba-c611-47a6-a899-786949f5be2f",
        "cursor": {
          "ref": "2885a9c0-1195-43bf-90b8-6924c4ecf7df",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0ca51275-94e5-4502-9d90-2cf0fbd97a93"
        },
        "item": {
          "id": "d866c6ba-c611-47a6-a899-786949f5be2f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "eed63ba2-c3cb-40bb-a4fb-b9136c35ecd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8ea3a8-aa47-4e56-a136-091327634fba",
        "cursor": {
          "ref": "5674d333-ab8f-4e8b-8156-9e2cb0925165",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8f568568-09c9-47a5-9a16-deed7f9208b1"
        },
        "item": {
          "id": "9c8ea3a8-aa47-4e56-a136-091327634fba",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9e88b6cd-580b-4406-ab0f-aedbb3df3a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4aab43-9029-4c09-93ed-a93df7a341b1",
        "cursor": {
          "ref": "1064d372-ae56-4e9e-913c-4e05c865c21b",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "38d45438-9ff9-4910-895d-19f1ebdda141"
        },
        "item": {
          "id": "de4aab43-9029-4c09-93ed-a93df7a341b1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9dc1a9c9-2119-4fc9-8141-27f1e4b3e786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202424af-8fd0-4372-9ded-4aac49ea57e3",
        "cursor": {
          "ref": "38d78617-ca38-421e-9b9e-fdb01c8e216f",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8cbe038d-d85a-402e-bfb2-c9bdfcfa7dfd"
        },
        "item": {
          "id": "202424af-8fd0-4372-9ded-4aac49ea57e3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "215e2061-f65e-40b0-a8a3-d293621d8392",
          "status": "Created",
          "code": 201,
          "responseTime": 2980,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3764b2cb-1fae-41ae-876f-04605bea639f",
        "cursor": {
          "ref": "f3dcbf8e-d1d8-4fbc-95e8-60f1a96ae7a5",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "365e2904-bfa6-4296-8113-e7cdc9be2dc0"
        },
        "item": {
          "id": "3764b2cb-1fae-41ae-876f-04605bea639f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "78d52d5b-1013-4ee3-a189-8f3ad2a682ec",
          "status": "Created",
          "code": 201,
          "responseTime": 4281,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e299ae57-d20d-49ae-a5f4-9a2d3d8214f0",
        "cursor": {
          "ref": "4aa34d58-c794-44c1-a0d5-54bef771f165",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1e6925b3-bb29-4d4b-bb76-39e1062def6b"
        },
        "item": {
          "id": "e299ae57-d20d-49ae-a5f4-9a2d3d8214f0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "40e7fff3-3487-4f7e-b4ce-c9c9e2ec2196",
          "status": "Created",
          "code": 201,
          "responseTime": 2625,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "fc80aeec-b56e-4f00-81fa-5e1116982e9d",
        "cursor": {
          "ref": "0b7a1dcc-b2a8-4cc1-87ba-039597d88dc9",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6b44536f-7d7e-4ee7-9bb5-d11c09a1041b"
        },
        "item": {
          "id": "fc80aeec-b56e-4f00-81fa-5e1116982e9d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6b9ad607-f55f-413a-a209-eb1502210e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de486a6a-4557-4c59-96d6-2e06163902df",
        "cursor": {
          "ref": "63dc1924-3419-47b1-8f2f-684eded6f1f7",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f04565f9-eaec-4b63-9aa4-e98a7f74d014"
        },
        "item": {
          "id": "de486a6a-4557-4c59-96d6-2e06163902df",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e9c7faff-697d-4037-857d-0538d2fb9ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4558bf-6d1c-4b77-b53d-6056a03509d3",
        "cursor": {
          "ref": "421e4012-e615-434d-ac31-6ef65606b8ba",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7b4c34d1-f016-49ec-9953-bdddb9f86897"
        },
        "item": {
          "id": "ce4558bf-6d1c-4b77-b53d-6056a03509d3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f178b90a-e196-4a3d-aa8a-66445e3d6cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f4f31a-f9a6-4c1c-b79d-09c51b666de3",
        "cursor": {
          "ref": "0d95380a-5035-4b1c-bcfc-78527e4594a1",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4a486f8f-daa5-4315-a330-7230a7c22fc5"
        },
        "item": {
          "id": "d2f4f31a-f9a6-4c1c-b79d-09c51b666de3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d02b085b-c518-4782-a77f-1f5092dbd619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3eb0e8-9e35-4731-b399-c75cd34cfca6",
        "cursor": {
          "ref": "f0a93aa0-d8aa-4f9b-a49b-2c625268e87e",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6d209241-5200-48b7-8d9e-f1d71e4496d8"
        },
        "item": {
          "id": "1c3eb0e8-9e35-4731-b399-c75cd34cfca6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2acb27b0-521c-4ea5-9f95-c8422a66213c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ede903-dd15-49ea-972f-d8a8d30820ba",
        "cursor": {
          "ref": "5d387916-9eed-4c75-8d2d-6920b95a0d3c",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9c5b7ccd-5ac1-4139-a739-0946df1b79bf"
        },
        "item": {
          "id": "72ede903-dd15-49ea-972f-d8a8d30820ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9b5fa99d-8d78-47f5-a1d9-b1b2bfdec3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ded2aeb-44f1-4d7f-838f-999c4b68b6ba",
        "cursor": {
          "ref": "a645b89f-fbd0-4416-a25b-398016bef060",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1ce3271d-5b54-4d18-9a19-814afeefb3b4"
        },
        "item": {
          "id": "8ded2aeb-44f1-4d7f-838f-999c4b68b6ba",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dbf725e9-ca1e-4ebd-b003-ad6c4a94645b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07cb0c8-29e1-4ede-a6bc-e6406c164ca3",
        "cursor": {
          "ref": "1db2544d-b1e1-4558-9e58-c7e01c8dcc69",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6c89a138-3aa0-4e14-bb1c-083410913f0c"
        },
        "item": {
          "id": "d07cb0c8-29e1-4ede-a6bc-e6406c164ca3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7fda0f50-69dc-4238-996e-b68bc2845e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd30679-515a-4a5a-98e1-04ce6688a8c8",
        "cursor": {
          "ref": "9c1d4432-104a-496d-b23c-601a8ce1eb70",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2022ec78-2490-4db5-8ed3-d69d86d403b4"
        },
        "item": {
          "id": "bfd30679-515a-4a5a-98e1-04ce6688a8c8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "caf1b284-9636-4594-b6b0-ec211d2c0644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42b56a6-a915-483d-9e0e-5c85bb5e4a27",
        "cursor": {
          "ref": "4331dda1-a6b5-40fd-a2ee-fd8d6d58f8a7",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f53e59f6-7a7f-4948-ad97-e08d2ef3242b"
        },
        "item": {
          "id": "d42b56a6-a915-483d-9e0e-5c85bb5e4a27",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "99e043e4-bba0-4eed-9638-0a21efce8a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbae879-ada7-4289-bfbb-06114ecac689",
        "cursor": {
          "ref": "c6a31b39-fe48-436f-b346-cabd55c3b71f",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "62eb94e8-d46b-4af5-8fe5-ae4737bad812"
        },
        "item": {
          "id": "9cbae879-ada7-4289-bfbb-06114ecac689",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a31252d3-d28d-400e-93a2-8a8b2d0345b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674765df-d355-41c7-b040-fc18f8a336ad",
        "cursor": {
          "ref": "22e48f91-b684-4b98-b63f-166243ca1c34",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "dd61f068-901d-472a-9d4b-fa35e8fd79b4"
        },
        "item": {
          "id": "674765df-d355-41c7-b040-fc18f8a336ad",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b75927b8-e65c-4f99-81e4-c4a34334d0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cf768a-fba4-496c-a7c7-bc40a6c33540",
        "cursor": {
          "ref": "3b0e812d-deaa-4852-a133-0c2707656857",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c2e34191-4c17-4095-b017-2e1b5c0fd901"
        },
        "item": {
          "id": "52cf768a-fba4-496c-a7c7-bc40a6c33540",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "90b04a1c-2175-44fa-ba63-022913d8cb87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4081c7ff-b3d6-4ed9-962a-f006bd08c682",
        "cursor": {
          "ref": "2d49a14d-451e-402f-869f-fd44d928476d",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cd5e9a67-e432-4d98-80d3-5cbad6311c9d"
        },
        "item": {
          "id": "4081c7ff-b3d6-4ed9-962a-f006bd08c682",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "755b3cbc-9af8-415f-9a08-113cf18c1140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0974bb-d7c7-4a1c-8027-4ed2a15bdcad",
        "cursor": {
          "ref": "0d69a8b4-445d-4267-83a5-d1d4ea1a8447",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c48d5746-aac2-40d9-830e-a58e8088b22d"
        },
        "item": {
          "id": "be0974bb-d7c7-4a1c-8027-4ed2a15bdcad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d71fe5b3-3c98-4301-ab18-b4169685584f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d1c38a-593b-4b10-b279-fc78e79f7705",
        "cursor": {
          "ref": "785e20f8-60fc-4b3a-97e0-ad005cfd8992",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "89e18f7f-09e6-4c14-b1fc-48c4f4064d13"
        },
        "item": {
          "id": "c3d1c38a-593b-4b10-b279-fc78e79f7705",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6282cb60-aaed-435b-a3b5-a53ff6652d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef099b1-55be-47c1-9882-ddc1f01e5a24",
        "cursor": {
          "ref": "208774d7-a75a-428c-939b-099b4486e0b2",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7c78a420-34d1-4e28-811b-d107ce8f2675"
        },
        "item": {
          "id": "cef099b1-55be-47c1-9882-ddc1f01e5a24",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "210a4bcc-d259-40a2-a4c3-eab500c2cf4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adc6ce2-b73f-4e7a-9846-ac44eb7d8cb1",
        "cursor": {
          "ref": "93724bdb-2bf4-4e37-b945-5c9fc3286589",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "337ef49d-8320-46da-88dd-6aa26d88a546"
        },
        "item": {
          "id": "3adc6ce2-b73f-4e7a-9846-ac44eb7d8cb1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "730a62e9-1cfb-4d2c-a1d0-14e1e6e242d0",
          "status": "Created",
          "code": 201,
          "responseTime": 2654,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "183bf7f0-d4a1-4e52-9b55-15a8d31079b9",
        "cursor": {
          "ref": "b44e2512-d1bd-4c48-b3fa-221a80757c15",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5a3659b9-e0b7-4a99-ab19-5a76dc36d833"
        },
        "item": {
          "id": "183bf7f0-d4a1-4e52-9b55-15a8d31079b9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b71c4bb4-c3ac-4679-9a40-f138ce982f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850ff45d-0369-4a22-98aa-abf2bd027aa8",
        "cursor": {
          "ref": "e0d09981-6615-44b7-b862-74a7f538f6fe",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "236119e2-c989-4741-bf08-7514ad896a7d"
        },
        "item": {
          "id": "850ff45d-0369-4a22-98aa-abf2bd027aa8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cf9279bd-492e-48eb-8206-b49206670324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5981b81-229b-4611-b80a-1d8690533e40",
        "cursor": {
          "ref": "3a76a4c5-1a47-4912-a22f-7d81d698f69b",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "10371bb6-3a3e-4f4c-873f-ff52ebc6020f"
        },
        "item": {
          "id": "b5981b81-229b-4611-b80a-1d8690533e40",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "af6ebbae-9071-4bc0-a983-1e8946d837aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac66ee3-4c78-4676-95a9-883ee84f7322",
        "cursor": {
          "ref": "505cc7f3-a557-4992-8976-b7e93e134929",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "681ada6e-e8c2-43be-8da1-152673244974"
        },
        "item": {
          "id": "1ac66ee3-4c78-4676-95a9-883ee84f7322",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1a96be25-408a-432a-bcc5-e856b33a7ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ae3274-0692-4060-b146-f3b8b68c2587",
        "cursor": {
          "ref": "2bc0de13-f896-4bbe-83ad-56f6245a3a5a",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1e940b23-7ccf-42b5-ade3-a496c460d0a4"
        },
        "item": {
          "id": "44ae3274-0692-4060-b146-f3b8b68c2587",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f846a519-261a-4e5b-bd45-090e66993b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d30a96-248e-42e1-84de-fd73e18553f0",
        "cursor": {
          "ref": "21263adf-1014-451b-a117-465547fa750d",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7f64ce0b-aaeb-436a-9201-e9c8a228a11a"
        },
        "item": {
          "id": "46d30a96-248e-42e1-84de-fd73e18553f0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "78ee6638-a593-4d19-8e51-8a90988e8ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78181427-9a9f-48a2-a960-4580402ca0fe",
        "cursor": {
          "ref": "82ee76f5-f1bd-4fb2-a2e4-b37cb1cc09e5",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f870b794-70e4-40bb-aa36-69b4f9b6eb46"
        },
        "item": {
          "id": "78181427-9a9f-48a2-a960-4580402ca0fe",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8cd1c57a-84e2-4ab3-9443-4b01dcb1ea9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345f3cf2-5d2d-407e-a458-b724cfa53a49",
        "cursor": {
          "ref": "29b9c6bc-704b-40fe-9429-e6b9069a4543",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "851b1937-e215-433b-a83d-216897e54f47"
        },
        "item": {
          "id": "345f3cf2-5d2d-407e-a458-b724cfa53a49",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "38d8b7e8-0444-46fc-b4f7-b1deb3008ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef9c942-2698-49dd-93bd-7501153a1997",
        "cursor": {
          "ref": "5959d764-9587-4998-9075-59b3414f7319",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a037d27c-a77c-4c28-9bc5-ec602bf4c68a"
        },
        "item": {
          "id": "5ef9c942-2698-49dd-93bd-7501153a1997",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6968c7ca-9852-40e6-aeeb-14f6b400dd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da1fe6b-f83f-449b-906f-b6b12bb86db6",
        "cursor": {
          "ref": "49da006a-3b18-43d2-a1b8-ab7e802e03e8",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1d41a287-81a4-49b7-8bae-ce90a9d0078a"
        },
        "item": {
          "id": "9da1fe6b-f83f-449b-906f-b6b12bb86db6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3c60f41f-dc68-4b69-bdca-89e5ccce29ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713ec46d-291c-4cb2-bf99-025328bd668f",
        "cursor": {
          "ref": "786e6f08-6839-48dc-bf3f-2baf9ad5ccff",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7cf77af9-fa59-410c-80ce-9496e4802bc0"
        },
        "item": {
          "id": "713ec46d-291c-4cb2-bf99-025328bd668f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "dbf8162f-c02e-4a31-b18f-21d6f02237a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e9deef-0941-477d-ac8d-56a054ff0eb5",
        "cursor": {
          "ref": "dc4761f2-69e5-4af9-b8d1-620c4a765e0d",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e67f8275-ebd7-478b-95a8-000cc54eb8ba"
        },
        "item": {
          "id": "27e9deef-0941-477d-ac8d-56a054ff0eb5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "15066013-1225-4db8-819b-63225b5f52b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59657881-da5f-4c1a-b9d9-e280214a6c0f",
        "cursor": {
          "ref": "7e1c1ba6-a8bd-4983-a146-37f91a436d45",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9ebf76ec-0a63-48c1-8f8c-adf489d38096"
        },
        "item": {
          "id": "59657881-da5f-4c1a-b9d9-e280214a6c0f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6a54250c-426e-4d39-b646-9246afb28866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b094a4f0-0614-4076-ae59-a60331f78498",
        "cursor": {
          "ref": "627a100f-b55a-4ccf-84f9-2221ececed99",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a43e7da4-3e29-444c-b6c9-e5049f93276a"
        },
        "item": {
          "id": "b094a4f0-0614-4076-ae59-a60331f78498",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "464a7647-0021-49ee-9705-6d70902d7681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1075ca8a-1898-4ed6-b73f-10a3fada41ac",
        "cursor": {
          "ref": "16e99629-ccab-4190-809d-d68090837882",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "610dc2ed-839f-42a5-b557-2db828c0d2cf"
        },
        "item": {
          "id": "1075ca8a-1898-4ed6-b73f-10a3fada41ac",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "657f0fa4-1600-4b94-8aa2-f387067f366b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1f2e7e-4e87-404f-b0bc-1e271cc206e1",
        "cursor": {
          "ref": "77280bb4-1fc4-4761-8fea-ac45d573f0a6",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3cf3828c-8142-478d-a90a-c5e9a69dfd1a"
        },
        "item": {
          "id": "1a1f2e7e-4e87-404f-b0bc-1e271cc206e1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "37814b80-f5af-4e49-ae88-21bfdef76e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56263e8d-fe1f-46cd-b55d-81132571fb9c",
        "cursor": {
          "ref": "ce2c27e0-e59c-470e-916c-7468939a4079",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "387ea65b-a01f-441c-9d05-69939176b434"
        },
        "item": {
          "id": "56263e8d-fe1f-46cd-b55d-81132571fb9c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9a9d753f-2e89-484f-9c57-a0fff9857ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2eae04-160c-4289-931a-b2f2d8161b4f",
        "cursor": {
          "ref": "5e947293-98b7-4394-a954-b3d2ab4324cf",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "73ef771b-42bf-4cc1-9632-74a14deb1d17"
        },
        "item": {
          "id": "4e2eae04-160c-4289-931a-b2f2d8161b4f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "100e891d-81a0-45ce-b4e7-af2c5cad29d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8bd90b-9e4b-4e48-ac9c-9338b20aaa8d",
        "cursor": {
          "ref": "1fe38c5c-4cd4-4ef2-bac3-0d26e109a81b",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4fd57122-80bb-4984-bb48-84f34b18726c"
        },
        "item": {
          "id": "cb8bd90b-9e4b-4e48-ac9c-9338b20aaa8d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "eabb6fa8-e609-4b70-b656-1cb13111de35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398f7029-902d-4126-a3d0-98f3c7e31c2c",
        "cursor": {
          "ref": "53a8622e-7e4e-4aa7-96bf-d0070b66f6c2",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "de2391d4-90de-479a-830d-c68920173e5c"
        },
        "item": {
          "id": "398f7029-902d-4126-a3d0-98f3c7e31c2c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e0fea41c-09c8-4e15-84c8-f17398e1efbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23581578-f6f7-4e4f-a8fe-211bde111658",
        "cursor": {
          "ref": "9e8ffce3-a203-4fd2-ac7c-e1e992155b1b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "31941a02-6c25-489c-8ae1-91c540741d9f"
        },
        "item": {
          "id": "23581578-f6f7-4e4f-a8fe-211bde111658",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e32374cb-642a-49b4-a590-d4c40baa353c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a650e281-d5eb-471e-95fb-f1d5f5d00920",
        "cursor": {
          "ref": "797bfacf-b506-4ed8-8268-b7cc3341e226",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a4400f2d-7dd6-41f1-8ace-08f4b31eb44e"
        },
        "item": {
          "id": "a650e281-d5eb-471e-95fb-f1d5f5d00920",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d6a73760-ed62-4c49-ad6a-11a1921a1a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0565db-a164-4573-a17f-f6c72cb198c4",
        "cursor": {
          "ref": "74ed88d5-a712-4507-805e-72895b157384",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1fede106-b9e8-46fd-bb11-5e4c62b9e851"
        },
        "item": {
          "id": "6f0565db-a164-4573-a17f-f6c72cb198c4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "171fe041-a45f-4487-b9dc-2853390a1c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7ddb74-b534-44f4-ab27-77c175cfb16a",
        "cursor": {
          "ref": "2f6976ad-99ba-4641-88cc-bd218234dc0a",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "08e8870a-8db1-40ef-8192-00f2e35120b1"
        },
        "item": {
          "id": "ef7ddb74-b534-44f4-ab27-77c175cfb16a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3c3970de-15da-4298-9027-b8a0bf51efd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045edf1a-952b-4b9c-b5e5-278a92ba8a6e",
        "cursor": {
          "ref": "162d85ce-ea18-4657-ba73-0ddf0d0ab8f4",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cc78bb0b-13d8-4597-b04d-2faa02e6342f"
        },
        "item": {
          "id": "045edf1a-952b-4b9c-b5e5-278a92ba8a6e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b99923c1-bca0-435a-b2d3-e3e7618efad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cf4a29-b653-4431-9b45-88f5b40eb82a",
        "cursor": {
          "ref": "8de94ea6-6cc7-4abd-a97a-9ce604fe03b1",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e88e9c70-a51e-4b98-a42b-dcf0a7bef3d3"
        },
        "item": {
          "id": "41cf4a29-b653-4431-9b45-88f5b40eb82a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "67311d61-3942-4f80-aecc-64fb2d40428f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691080cb-bd1c-40e6-a000-9af202cb7add",
        "cursor": {
          "ref": "7083cd1a-f4b8-4f86-8008-6979c3b4c75f",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9f9158f5-9515-4eeb-9c5e-e3b2c1ef8070"
        },
        "item": {
          "id": "691080cb-bd1c-40e6-a000-9af202cb7add",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "70a3687c-2482-4e3d-a320-4633f1cfae7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be706aef-6761-4240-bb8b-cf2a56c70d82",
        "cursor": {
          "ref": "de4b153e-bc9d-4760-bfdd-00a28a282de0",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c0529a3d-802f-42bf-b48e-9740b0a86f59"
        },
        "item": {
          "id": "be706aef-6761-4240-bb8b-cf2a56c70d82",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "14915559-e6db-4fc2-98aa-a81053259dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9586224-fa2b-4d1c-86a8-75d197fe921a",
        "cursor": {
          "ref": "229e46d1-62bc-4291-99e4-aca1259bc2d3",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fc1db09f-099e-4192-ab20-09c7fcc49183"
        },
        "item": {
          "id": "a9586224-fa2b-4d1c-86a8-75d197fe921a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "82a95bed-399f-4a24-ae18-402611729d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809ae02d-591e-4ad2-8131-27ac867f7261",
        "cursor": {
          "ref": "8e2f7e92-2702-448c-98d2-fbef81fe858d",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f79ba80f-ed72-44a0-b3f7-87e545786e75"
        },
        "item": {
          "id": "809ae02d-591e-4ad2-8131-27ac867f7261",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f7144b62-1615-4964-9cb7-76d78efa91d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3caab2-101e-4e3d-ad5c-f0d249d8c3cb",
        "cursor": {
          "ref": "55ea349c-f3ad-4258-88ff-4681237e55bb",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1b3ca600-150e-4b93-b5b7-96366f6d5113"
        },
        "item": {
          "id": "1a3caab2-101e-4e3d-ad5c-f0d249d8c3cb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9e2a877d-c77d-40ea-9432-3934a28986cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "18d07866-ae9b-4aeb-9b38-a078130781f1",
        "cursor": {
          "ref": "5ebc39f0-6a4e-4039-823c-d0f5e6fc58a5",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0d923a51-d001-4200-9e24-c92da5431384"
        },
        "item": {
          "id": "18d07866-ae9b-4aeb-9b38-a078130781f1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4f0c3fc7-ee49-44d8-afb5-14312b7d3f17",
          "status": "Created",
          "code": 201,
          "responseTime": 2624,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "10770e0b-c10c-4b18-980a-0dbd21ec0eae",
        "cursor": {
          "ref": "4ee950b4-9271-451f-a9fb-89108cd4edae",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bc37b0f4-6575-4260-8caa-91a0aad78790"
        },
        "item": {
          "id": "10770e0b-c10c-4b18-980a-0dbd21ec0eae",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9c5e9921-7ff6-450d-bea8-101efa00fa7d",
          "status": "Created",
          "code": 201,
          "responseTime": 2626,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7519a59-79c2-438b-945e-6640096ae540",
        "cursor": {
          "ref": "2a1a3408-38dd-4120-a58d-2181c001e716",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6311144c-fe15-4c2e-9679-871d615d7154"
        },
        "item": {
          "id": "b7519a59-79c2-438b-945e-6640096ae540",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0e78a707-4f57-40ef-bef3-c02c0b48c76a",
          "status": "Created",
          "code": 201,
          "responseTime": 2597,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cfa0ac-94a4-4a1c-952e-fc84e467b8a1",
        "cursor": {
          "ref": "b7f6445e-1988-4dee-958b-1671f8c9c622",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b4da009c-783b-45a1-935f-b211416c9a81"
        },
        "item": {
          "id": "59cfa0ac-94a4-4a1c-952e-fc84e467b8a1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fe31455d-fc52-4042-ab36-f5e5e524a840",
          "status": "Created",
          "code": 201,
          "responseTime": 2188,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8ebdfd-16b4-4897-a42b-8020a048dffe",
        "cursor": {
          "ref": "1511470f-3558-4bf5-abba-879e351b43e9",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "32073c06-53ed-4f73-adf4-975afccae2ab"
        },
        "item": {
          "id": "ae8ebdfd-16b4-4897-a42b-8020a048dffe",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8aa4ca0d-b473-4caf-bdbe-e208b195cebf",
          "status": "Created",
          "code": 201,
          "responseTime": 2599,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b8de0d-3573-4706-8aa0-fbf96f08fe4f",
        "cursor": {
          "ref": "a8dc6c62-5909-465d-af37-8fd5627c6c7b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7f80e212-0990-40ea-b812-7b85de52f836"
        },
        "item": {
          "id": "78b8de0d-3573-4706-8aa0-fbf96f08fe4f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ca2bdb41-b8d5-47a9-b987-fe536ba7bf67",
          "status": "Created",
          "code": 201,
          "responseTime": 2280,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-22T00:38:19Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-22T00:38:19Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "5ef5b7d5-2ac6-4bb7-b1ad-bb41da43d96b",
        "cursor": {
          "ref": "9885eb4f-8b09-4bd9-b2c7-35aedc3ac599",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c29f4021-1092-4f69-ac33-edd64cd8246d"
        },
        "item": {
          "id": "5ef5b7d5-2ac6-4bb7-b1ad-bb41da43d96b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ecac1bb7-0d36-44b6-bcc8-7988411e193b",
          "status": "Created",
          "code": 201,
          "responseTime": 2379,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d794a20-accd-4b5b-b33a-1eff0242201a",
        "cursor": {
          "ref": "efe159e8-5fb7-43bf-a2a1-5aa75d3bd3c3",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "493426f0-c7dc-4fb8-a0c7-9a56d992b611"
        },
        "item": {
          "id": "0d794a20-accd-4b5b-b33a-1eff0242201a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "93983eab-2c9c-4deb-a1da-0e0c7f947be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d794a20-accd-4b5b-b33a-1eff0242201a",
        "cursor": {
          "ref": "efe159e8-5fb7-43bf-a2a1-5aa75d3bd3c3",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "493426f0-c7dc-4fb8-a0c7-9a56d992b611"
        },
        "item": {
          "id": "0d794a20-accd-4b5b-b33a-1eff0242201a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "93983eab-2c9c-4deb-a1da-0e0c7f947be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee58457-9bf2-40c5-a396-b254cf718798",
        "cursor": {
          "ref": "5fd24d0e-6042-49c8-876f-a8b1e622fd02",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dcd82cf6-d1dd-4721-b075-eae684fc8f31"
        },
        "item": {
          "id": "eee58457-9bf2-40c5-a396-b254cf718798",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "732cf74a-7aaf-4a32-af55-989de5f588d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ffd8bf-c8e7-4076-a79d-5d2319aba65c",
        "cursor": {
          "ref": "a57ca738-cb78-4682-8667-3cf51e9b68b3",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f760a3ce-15f0-467f-805e-e577874d500c"
        },
        "item": {
          "id": "94ffd8bf-c8e7-4076-a79d-5d2319aba65c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "54e49a69-606e-47ba-8672-f6da50699a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5db285-abcd-4916-a230-fb2c1030db17",
        "cursor": {
          "ref": "e939c147-1527-4479-8b12-66f8d5c16150",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "69916f29-352d-48de-9361-4e20d09ef6e8"
        },
        "item": {
          "id": "fb5db285-abcd-4916-a230-fb2c1030db17",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e0af1b85-b7cf-447e-ac1a-dd901f3de56a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa87c594-1853-448d-ba97-caa95c1cffe5",
        "cursor": {
          "ref": "417ac770-01dd-4b5e-ab4c-c54fe78f21e6",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "40e4bf86-9739-4585-9770-99ce6cbf487c"
        },
        "item": {
          "id": "aa87c594-1853-448d-ba97-caa95c1cffe5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4c04ede8-cee1-4366-9b6d-3a168d1be3c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a315653c-c5a7-4795-973b-eab8ebc7fdda",
        "cursor": {
          "ref": "c15e2296-517f-41dd-8d09-24b5083e2d17",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c907382c-a655-430f-a211-920b22fea4c5"
        },
        "item": {
          "id": "a315653c-c5a7-4795-973b-eab8ebc7fdda",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "33e3a0e0-ff4b-40fd-9d7c-6689a3b67430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3b3d25-3390-4a4f-8069-a4dbeb50f430",
        "cursor": {
          "ref": "27ebc068-842d-4672-b0e1-28eface869d6",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3cb92043-a3f9-473c-8d67-573ed826663e"
        },
        "item": {
          "id": "ab3b3d25-3390-4a4f-8069-a4dbeb50f430",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3fe066fb-4925-486f-89aa-466cc7166923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6839aabb-de23-4859-ae46-d54d7abe76ca",
        "cursor": {
          "ref": "20023a67-3e0a-4ed9-9fae-b12ea5c6faa4",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "96495f05-1248-47e8-8c30-8ce705e5063c"
        },
        "item": {
          "id": "6839aabb-de23-4859-ae46-d54d7abe76ca",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f088904a-8eb3-4b1c-a173-eb2109d0dc7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece67f10-a8cd-4698-9372-e9e63a45cb88",
        "cursor": {
          "ref": "21e57f05-c33b-46f0-8453-1a8e95c1296c",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "254fb86a-d67b-452e-9917-2af748c908ac"
        },
        "item": {
          "id": "ece67f10-a8cd-4698-9372-e9e63a45cb88",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "99e887a7-3069-4d31-89f2-6a1fe5203954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69cf7e7-8bb7-4362-a1bc-4ec4de1fb254",
        "cursor": {
          "ref": "602dfe19-590f-4c9e-8b59-730eda698f47",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "86dfb86d-f10c-40a0-819b-af2031bf9fe6"
        },
        "item": {
          "id": "c69cf7e7-8bb7-4362-a1bc-4ec4de1fb254",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "92c647db-7e56-4955-a723-1dce482cc4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb48b252-5c5d-4dc0-8648-3aaae45a6600",
        "cursor": {
          "ref": "bd1511fc-10b4-4cca-80dd-5dd7a9aa0025",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1d0c6ab3-312f-4fdb-864a-a3984000e65b"
        },
        "item": {
          "id": "fb48b252-5c5d-4dc0-8648-3aaae45a6600",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad0b7a3e-e05f-4f93-bfc1-016947c71e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f5f15e-08d0-4d46-8335-251c1b4e133e",
        "cursor": {
          "ref": "69d6cfd9-8930-4e89-93ec-56b0370bcf9c",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9c962ad7-7d70-4401-924c-e4b66a075eb8"
        },
        "item": {
          "id": "88f5f15e-08d0-4d46-8335-251c1b4e133e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "426e2ac6-efa7-4445-95eb-7183b0cdb343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d948350-4b28-43a9-9058-4118ea4e1dc9",
        "cursor": {
          "ref": "bd266a3b-0b46-4d9b-b2bc-e404f69e5551",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9b7d5e38-1d7c-4bb6-b880-f49d4b44a53d"
        },
        "item": {
          "id": "2d948350-4b28-43a9-9058-4118ea4e1dc9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ce6b5b05-51c5-466e-a66e-41d8fed76c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1f4c8f-7254-4430-9862-b6cbf8369586",
        "cursor": {
          "ref": "13dbda23-df10-4456-be2c-278ce0dde180",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2d6806b9-c986-4df9-b7a3-32c084065eee"
        },
        "item": {
          "id": "9f1f4c8f-7254-4430-9862-b6cbf8369586",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bf90fa5c-cf38-4252-8802-0f1087ae0a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1d04bb-168a-4fe3-907b-f3bd8e219366",
        "cursor": {
          "ref": "0a838900-387b-40d1-bddc-80fd1c1d6ed0",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "dcfdfee0-6b52-45f1-9b3c-0b2bcfd4661a"
        },
        "item": {
          "id": "de1d04bb-168a-4fe3-907b-f3bd8e219366",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7576ebdf-2f57-4490-b7d2-151dde3cc5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f0190b-e28f-4461-aca9-1979e328b19f",
        "cursor": {
          "ref": "f2b9025c-6495-4197-b9e0-984671ed29e1",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "03e9e865-84c0-43d5-9476-952af916aa17"
        },
        "item": {
          "id": "a1f0190b-e28f-4461-aca9-1979e328b19f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4b1880cb-9dd2-4117-bb4b-bbfa37d18c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330a00f1-cec6-4995-a44a-7d4a1342ee0f",
        "cursor": {
          "ref": "97540f38-ec32-4151-a455-ff68fd3356c5",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "851d5bd7-e6e5-48af-9674-3d3dc79515eb"
        },
        "item": {
          "id": "330a00f1-cec6-4995-a44a-7d4a1342ee0f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5d91edb9-0cc4-487c-9f49-e6cedf19320a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22953f38-0fb5-4c24-9911-cd34bad7a9bb",
        "cursor": {
          "ref": "09e569b3-dc35-47eb-97f6-63013ebc043f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c6ad9d85-f2e4-4d64-9bb9-afdad53baee6"
        },
        "item": {
          "id": "22953f38-0fb5-4c24-9911-cd34bad7a9bb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "276750d9-2cf3-4168-9080-75e0d23ac46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0834f986-b338-42bc-8d8a-5b254dcc2ba9",
        "cursor": {
          "ref": "e8df5902-34d9-4ecc-b762-65dca5815f2b",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "65942527-1894-45ed-997b-817aa3d8844c"
        },
        "item": {
          "id": "0834f986-b338-42bc-8d8a-5b254dcc2ba9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cb73286a-ae42-4661-8962-14aedca68114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378d0a93-2bf1-41fc-9274-9b2632104bb8",
        "cursor": {
          "ref": "b51d4c7d-ba79-4f57-a015-83544d38def5",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1869da07-1664-45f7-9c10-7832f09e7849"
        },
        "item": {
          "id": "378d0a93-2bf1-41fc-9274-9b2632104bb8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ba88f1fd-d9b2-4491-9dc5-70e0cd593850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a096b035-4c8d-4522-b190-3625a1b0f48e",
        "cursor": {
          "ref": "31ce3b43-d37f-4212-9323-2e0a46ab100d",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6a9b6f31-5459-4eae-aba4-d7222bc22d8b"
        },
        "item": {
          "id": "a096b035-4c8d-4522-b190-3625a1b0f48e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9110e96e-3009-4491-a107-fb695334e3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5e0c3f-b909-43ad-999b-ea5d871033c4",
        "cursor": {
          "ref": "bd8af61b-0d94-4ce1-96c9-2804f709120a",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "761b0629-b182-493d-9233-b8b1ea76f856"
        },
        "item": {
          "id": "6e5e0c3f-b909-43ad-999b-ea5d871033c4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2e038765-2939-46ea-b650-095f339335fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906b70b1-5220-4598-a7d1-cc61c024f104",
        "cursor": {
          "ref": "919a2e4e-48af-4722-9199-6ff489722c45",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "dc7bcf52-1363-46d5-8d66-015e3c3974c6"
        },
        "item": {
          "id": "906b70b1-5220-4598-a7d1-cc61c024f104",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f0928a59-d9ef-4e78-94b2-d0026131a315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bca0833-2a2c-46ed-8006-80e4bbc8a3a3",
        "cursor": {
          "ref": "09474c29-3ead-4ae8-b4d9-85d3a9c35669",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "09504ffb-b8bb-4828-9f96-db94e924af8a"
        },
        "item": {
          "id": "5bca0833-2a2c-46ed-8006-80e4bbc8a3a3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "886dfd83-694a-45e7-9cfa-729e7d28d389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15633b7-0fe7-4bb5-8d0e-5ad537db44f3",
        "cursor": {
          "ref": "87106eaa-0791-4f7b-83be-1f0c23ed9c32",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fd58b1ee-69ce-43c3-88c5-47ccf83a80b9"
        },
        "item": {
          "id": "d15633b7-0fe7-4bb5-8d0e-5ad537db44f3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d84083c3-c063-4d5d-bfdd-ef3ff1c41c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfeee36-b3f5-469a-9d50-8b437cbe6401",
        "cursor": {
          "ref": "33894478-d8f1-449a-ad99-aa0250acc0b6",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c308c708-fbc4-42df-b167-60f895b8ab97"
        },
        "item": {
          "id": "0cfeee36-b3f5-469a-9d50-8b437cbe6401",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f2d8ff21-5081-4900-bd7f-69a7ba133828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae08f40-8fe6-49e8-9d02-e3909078159a",
        "cursor": {
          "ref": "a35a60e9-be68-427b-8c38-508189857db4",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "33788e8a-7fba-4b3a-8f67-031b3ff55315"
        },
        "item": {
          "id": "9ae08f40-8fe6-49e8-9d02-e3909078159a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b9c4ddc3-c8eb-44b4-90a6-f83be63dd5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322ab8bb-099f-4b7c-8f3c-2dddf1326e24",
        "cursor": {
          "ref": "6c109fab-fb24-4f9a-9d86-9f12bad427a4",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "afad2840-727f-4c25-8022-7e5502d64e8f"
        },
        "item": {
          "id": "322ab8bb-099f-4b7c-8f3c-2dddf1326e24",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "924025f2-cdd7-455b-bc4a-4f9623f1207e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9effd7-2cb6-46d6-baf9-0371147df46f",
        "cursor": {
          "ref": "9ef10dec-65b9-44cf-b98b-f0a0a1a105bb",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4573f17f-513d-4cca-926c-fd6cc4b0665f"
        },
        "item": {
          "id": "ae9effd7-2cb6-46d6-baf9-0371147df46f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3592d652-a0a9-4dc8-84e5-3765f3a40e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2e088a-a4f6-49e7-96b8-aca1e2471be4",
        "cursor": {
          "ref": "a8484c73-710c-41b3-a0ec-9f5ec04f0bd5",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "77859114-5e20-47ca-bcb4-1666f7e1a951"
        },
        "item": {
          "id": "0f2e088a-a4f6-49e7-96b8-aca1e2471be4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6bc0cdeb-479d-417d-9f3b-92311717abd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec11a3c-882f-4535-89bf-7d6ca43c6937",
        "cursor": {
          "ref": "7c6dd6a3-a68d-46e7-8d9e-87be388e9739",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f75fb340-cd1a-4250-8a3c-2eb489439e85"
        },
        "item": {
          "id": "eec11a3c-882f-4535-89bf-7d6ca43c6937",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0dcac725-4b17-406e-ae19-f25c30a7d1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45723ea-764e-4f7b-8e1f-744436abce2d",
        "cursor": {
          "ref": "04b9f4c6-421b-4c8b-b79f-d715f1b8484f",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3395c6bd-e1c5-4be6-9c30-6ea600245c2b"
        },
        "item": {
          "id": "c45723ea-764e-4f7b-8e1f-744436abce2d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9ab7c67a-e17f-4789-a68e-681192424580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccabd5d9-8473-4b54-a6c4-5222b034f325",
        "cursor": {
          "ref": "10dbb2a9-4e0f-44f8-ad06-42b5ad7043bd",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2426f0e3-70da-4e67-b49e-d33aa1ae5608"
        },
        "item": {
          "id": "ccabd5d9-8473-4b54-a6c4-5222b034f325",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9503018c-c517-44c0-8d17-04f9581c159a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b9964b0d-0b90-4c7b-bd1d-e47ae52482c1",
        "cursor": {
          "ref": "86d2e403-fc06-43ce-bcc7-10fd2ac1d271",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8c8a946c-f588-4341-91ee-0e0d8e4690af"
        },
        "item": {
          "id": "b9964b0d-0b90-4c7b-bd1d-e47ae52482c1",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4621b8e2-0788-4506-898f-33524479baa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "57ecbe4e-2a21-4fdd-bd79-d234b5f0caa9",
        "cursor": {
          "ref": "d6e7aa62-b32a-474b-90dd-77a309b8fe34",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ff3475bc-4e51-462d-87a4-b9313d6849a6"
        },
        "item": {
          "id": "57ecbe4e-2a21-4fdd-bd79-d234b5f0caa9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7a0f149c-d7fd-4a15-b265-f25224d32f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ecbe4e-2a21-4fdd-bd79-d234b5f0caa9",
        "cursor": {
          "ref": "d6e7aa62-b32a-474b-90dd-77a309b8fe34",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ff3475bc-4e51-462d-87a4-b9313d6849a6"
        },
        "item": {
          "id": "57ecbe4e-2a21-4fdd-bd79-d234b5f0caa9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7a0f149c-d7fd-4a15-b265-f25224d32f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc184cd-1c46-4c4d-9903-0f4b9fcb9e56",
        "cursor": {
          "ref": "6d3bf41e-15f8-4640-b9bd-8fd88f21f0f5",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "32f1e0de-a9fe-4a44-95a9-af61202758ab"
        },
        "item": {
          "id": "0dc184cd-1c46-4c4d-9903-0f4b9fcb9e56",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b586c1df-4bd5-481b-9313-53c9a8f4a204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e990e6-4651-4e68-8782-e43f35123d44",
        "cursor": {
          "ref": "099e5927-746f-4de3-9016-a2bcae6cb39a",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "85f6fc78-7c5a-4dc4-a4ff-506e376f990b"
        },
        "item": {
          "id": "18e990e6-4651-4e68-8782-e43f35123d44",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1b5c24e2-ff28-486c-87f0-f017336ab151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380c2263-6693-49fb-8647-2b060474ad49",
        "cursor": {
          "ref": "0abae288-e210-4ee5-b9fd-7ee5d2b30392",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c057f35e-8d4f-49cc-9b99-2028a7c0874c"
        },
        "item": {
          "id": "380c2263-6693-49fb-8647-2b060474ad49",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5bde8bc1-80b9-4a8d-bafe-385a193b719f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04d55d4-a5b2-4708-af27-b6457addb317",
        "cursor": {
          "ref": "3444c38b-56aa-4425-817c-445adacde987",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8940ed48-93c4-4f19-8699-28ed2b47a73a"
        },
        "item": {
          "id": "a04d55d4-a5b2-4708-af27-b6457addb317",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fde41cc9-68a3-49e4-8505-54e268ef35a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26977f48-353c-4d9d-9d09-9266e79fdd59",
        "cursor": {
          "ref": "e29ff7ad-ba63-4258-a26e-a3b08626d170",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a7c51b5e-4b28-4fe3-966d-2b000f0d2ea5"
        },
        "item": {
          "id": "26977f48-353c-4d9d-9d09-9266e79fdd59",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "764da574-84fe-4468-85bb-dee144b270ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8702c95c-8684-42cb-ac82-fd3e6b052fe1",
        "cursor": {
          "ref": "9741c783-1990-4746-830f-b71aebfec01e",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "147c45ef-4806-457a-bc63-f66e709ef401"
        },
        "item": {
          "id": "8702c95c-8684-42cb-ac82-fd3e6b052fe1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "deccc5d7-5066-4ffa-8c07-a04295c05daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c178aa3-6958-4165-82a6-a71a80fffa75",
        "cursor": {
          "ref": "125d4e68-2185-491d-bf3f-99cf6e7d1a89",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "45ac2084-bf59-4b21-93b5-49d3c59021db"
        },
        "item": {
          "id": "0c178aa3-6958-4165-82a6-a71a80fffa75",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "797a9d54-6d53-4ebc-aabf-9cc67ba01239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3711daab-51cd-43fe-9232-726ff458d38d",
        "cursor": {
          "ref": "e54e217f-4624-479b-b5b4-e6d68a245385",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bc1231f2-d232-4196-969f-a856da682c56"
        },
        "item": {
          "id": "3711daab-51cd-43fe-9232-726ff458d38d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "add4aba1-2705-4846-825b-7b0224dc72ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d520f0-adb6-4ecc-87d0-86f3bfb67ccd",
        "cursor": {
          "ref": "51af7773-c1e3-4540-ac6c-92bc8cf68896",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bf4a0186-7706-477c-8a02-b67557754572"
        },
        "item": {
          "id": "39d520f0-adb6-4ecc-87d0-86f3bfb67ccd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "acb8a028-b893-4da3-bb66-eed052690bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5034fc-029f-4483-a1f1-61a00a6e079b",
        "cursor": {
          "ref": "f00aa1af-95be-4955-aa86-43d12a85bb47",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "16aaad97-0dc9-4de5-a93b-3563a9ba6818"
        },
        "item": {
          "id": "dd5034fc-029f-4483-a1f1-61a00a6e079b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "94a735eb-c271-4f8a-bfe4-daee062b626e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20072e12-6dc7-4e45-aebc-b8c73b41dce6",
        "cursor": {
          "ref": "b8d225f1-49a9-4b96-a623-4fecabe63de7",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b0ee9f20-46e7-43a9-bcb7-c44337027e4d"
        },
        "item": {
          "id": "20072e12-6dc7-4e45-aebc-b8c73b41dce6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4a3cf0a1-7ef0-4d2b-be06-508f49a3b320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9008c02d-fa8a-4419-b307-2db0becc9a80",
        "cursor": {
          "ref": "bfd55316-b49e-43fe-8a04-647a51fa2011",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "889c4ac0-3949-484c-8eef-8b3b62508e22"
        },
        "item": {
          "id": "9008c02d-fa8a-4419-b307-2db0becc9a80",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "56b9e601-40f3-497c-925a-554218d79634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4c952d-e5c6-4e1c-8518-72dc8e35694a",
        "cursor": {
          "ref": "da98a943-1f5e-49c3-a9a8-7375a51a4b2d",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8f235968-222f-4ef4-bc7b-c949ff32488b"
        },
        "item": {
          "id": "bd4c952d-e5c6-4e1c-8518-72dc8e35694a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7780ff03-35ef-44b4-aa28-a38de345ecd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93888c7c-cd14-4760-8d97-dc4458aee9d3",
        "cursor": {
          "ref": "10da60be-c37d-4777-8e23-85ee2da0e12e",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f3aa6e60-0ee8-43e0-8282-6534b14e626a"
        },
        "item": {
          "id": "93888c7c-cd14-4760-8d97-dc4458aee9d3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f470d1cf-d2b6-47e1-a2d3-c3f0655e8bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73905ff7-d06c-4873-bdd9-4339834dd71e",
        "cursor": {
          "ref": "35b0d9d6-1aac-4da6-917a-8bf95c379250",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5b42b91f-e048-410d-880d-70b6a856f71e"
        },
        "item": {
          "id": "73905ff7-d06c-4873-bdd9-4339834dd71e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fb5d6a23-8807-40e3-b1b7-e093963c200e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39430cf1-8f77-449c-8ea8-5e609f6da6aa",
        "cursor": {
          "ref": "78c760a2-4833-419b-bd04-aa9d21d3b8f2",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "11637091-696c-4271-a8dc-9c1f7759ce2c"
        },
        "item": {
          "id": "39430cf1-8f77-449c-8ea8-5e609f6da6aa",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7e63eba8-7f82-469b-8c06-eda403228318",
          "status": "OK",
          "code": 200,
          "responseTime": 320,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "23aa2303-4820-4192-ad4c-9211316afa3b",
        "cursor": {
          "ref": "3634451b-382e-4ca4-bb24-98841c8fb69a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "52faed4b-d23a-439a-8083-2db18ebf3b9c"
        },
        "item": {
          "id": "23aa2303-4820-4192-ad4c-9211316afa3b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9692d0f6-ec24-4a1a-8249-f8b9ed35a04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8eb64d-7696-41b0-bf5a-6e05190bd1a3",
        "cursor": {
          "ref": "f106f05f-3d72-4966-a449-117f042cdec0",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c78fe2f5-23b7-49d8-b5d4-8b1fd7983dd3"
        },
        "item": {
          "id": "fa8eb64d-7696-41b0-bf5a-6e05190bd1a3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8492472a-2338-4b0d-aaf7-c54b8bfaa0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5db895b-043a-4b83-8b8f-da8a931245d1",
        "cursor": {
          "ref": "48d2718d-8962-4d49-96cd-5777ef884e9d",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c96a060e-64d2-4e2e-909e-181dd3a57f7f"
        },
        "item": {
          "id": "f5db895b-043a-4b83-8b8f-da8a931245d1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fc5ec347-d3a8-4a9b-bfec-7b6163664557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b58d390-1a71-495f-bf73-568af10b38ce",
        "cursor": {
          "ref": "8e78d539-30e1-466f-9e4d-16a9106cf4c7",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4aa87950-10df-4e2d-8423-09ab7c91a263"
        },
        "item": {
          "id": "2b58d390-1a71-495f-bf73-568af10b38ce",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f3282fe8-6a16-4680-912f-7b97ea84084f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55d284e-4e4e-47ab-b3e1-ba3c02b3aa64",
        "cursor": {
          "ref": "54e8da15-a246-47f6-96c9-92872ec6aa8c",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3ee05e40-c965-4de2-91ca-9e5176e4b8b4"
        },
        "item": {
          "id": "e55d284e-4e4e-47ab-b3e1-ba3c02b3aa64",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bb6e3f0a-b783-461c-be0b-d8f53cde43e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3518ec6c-9096-4fdf-aebf-7d46a19ef849",
        "cursor": {
          "ref": "b82911c0-996d-421b-81be-4ca81ed7bb4b",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d34fbfb6-66e9-4559-a220-e300e60ec40b"
        },
        "item": {
          "id": "3518ec6c-9096-4fdf-aebf-7d46a19ef849",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "af8a143f-2589-4cfc-93ab-818d79276c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8190fd4f-b7ba-4e01-a6a5-ca6edc92456e",
        "cursor": {
          "ref": "87a4f022-4f6e-405e-b4ec-e8662396b229",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "82c51391-d551-4789-b161-d12347fde9b1"
        },
        "item": {
          "id": "8190fd4f-b7ba-4e01-a6a5-ca6edc92456e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b48ce510-b9e9-4472-9b2f-c97aa1fd09cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcc2da4-3aee-44ae-8e5a-175329c8469f",
        "cursor": {
          "ref": "55ae8b6e-8a6d-4ea1-8f39-212ec23dc877",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d8f99efd-6cfb-4901-8c8a-42b5d1a03991"
        },
        "item": {
          "id": "7dcc2da4-3aee-44ae-8e5a-175329c8469f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9c878e1e-94a8-43f7-b961-927c670cbe2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97a6eec-5020-4bea-91a2-4970dca063a5",
        "cursor": {
          "ref": "1a52f65e-2b85-4924-aefc-46fd28d14224",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "59b8d09f-f631-45ad-a9e2-9e3d1155e60d"
        },
        "item": {
          "id": "f97a6eec-5020-4bea-91a2-4970dca063a5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "29786538-58ef-4ce6-9c97-3df835b5278a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3533b0a-d9d0-4793-9200-2ffed7c5df0c",
        "cursor": {
          "ref": "5e124654-5829-46ba-8742-5fe7d502f34d",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f8dae2cd-d038-4419-83f7-4cdba11c8f92"
        },
        "item": {
          "id": "d3533b0a-d9d0-4793-9200-2ffed7c5df0c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4d8e459c-4474-4ad7-a64e-6b02a5bee551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22f8e8c-ceea-44b6-ac09-c9c5fbf25c51",
        "cursor": {
          "ref": "9c9accd7-63f7-4a45-90c9-6ee84ff22a27",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0c844eea-42f2-4a84-8624-5f719ad1dd11"
        },
        "item": {
          "id": "f22f8e8c-ceea-44b6-ac09-c9c5fbf25c51",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a3c9ebf3-c5c1-4729-bef5-829a132553ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6de4c38-31c7-4a6f-80eb-5be6823bb7f0",
        "cursor": {
          "ref": "bbe952fc-eeee-4bff-8d6d-c6a228d07bbc",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d38b1db8-9870-47e5-b2bc-5a6d6300eea1"
        },
        "item": {
          "id": "b6de4c38-31c7-4a6f-80eb-5be6823bb7f0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1f74b56c-f697-40de-a2b0-3bd33db077f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c604bb94-c2ec-4b11-a2cc-153b830fa6c8",
        "cursor": {
          "ref": "e73c6c9a-fd48-4f88-acc5-be23c4c9c2bc",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b1817b88-f0ce-42da-8edb-0bbb5ad833c6"
        },
        "item": {
          "id": "c604bb94-c2ec-4b11-a2cc-153b830fa6c8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b17d24ec-ca55-4e5d-b7f4-5e1944231fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f50fa79-b28d-4a9c-a364-0bc19ddc1f0b",
        "cursor": {
          "ref": "1ff8c02c-5f1e-4afa-9a01-83a640ca2a96",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "54d6ee4d-7880-43a1-8f22-e47ce86dd05a"
        },
        "item": {
          "id": "0f50fa79-b28d-4a9c-a364-0bc19ddc1f0b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "16a9a5fc-a4bc-4fc4-8600-e02938abc7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d8bd21-ccb4-430a-80c2-19b4e1ccea5d",
        "cursor": {
          "ref": "d7c76719-91bc-42db-b027-b077494a9879",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "310bc0fc-79c5-46d0-9c15-0ca1477d43ad"
        },
        "item": {
          "id": "77d8bd21-ccb4-430a-80c2-19b4e1ccea5d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bd2bcfdf-17b0-4395-8433-5c545f6523f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f63cbb-baed-4501-9e0d-4cf6049412e3",
        "cursor": {
          "ref": "b35a5260-0d37-4a60-9abc-a577d62be394",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "61b07e60-aa37-404c-832c-4afcedc3834e"
        },
        "item": {
          "id": "28f63cbb-baed-4501-9e0d-4cf6049412e3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9805ec6e-f4f9-4677-95c1-6914afb8d0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f530a26e-406f-4b09-ad81-1aeeb391bfb4",
        "cursor": {
          "ref": "bc67f1a4-6936-4e2f-bfd1-26a953dc47e8",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "81861660-1d09-404a-b53e-d922fcd52521"
        },
        "item": {
          "id": "f530a26e-406f-4b09-ad81-1aeeb391bfb4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f2010d45-2a2b-43d3-93c7-3294cc789fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8343638c-2696-4d25-bdba-58a54800c901",
        "cursor": {
          "ref": "1fbf7eab-85cb-4bdb-958d-b91fc76c5f72",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a0f17029-9df5-4097-a2e0-7d9f3d428fb2"
        },
        "item": {
          "id": "8343638c-2696-4d25-bdba-58a54800c901",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "94efe563-2202-45e5-a9fe-44bf3b29a6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900abd1c-af49-4cd6-99ca-d4a70baebf88",
        "cursor": {
          "ref": "347a668e-840e-4666-8353-68ac86376259",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e9c19817-8517-4a8a-9c25-d417ab9cc692"
        },
        "item": {
          "id": "900abd1c-af49-4cd6-99ca-d4a70baebf88",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "927bf073-4ef7-44e8-9313-b46c18a58071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db007fd2-d721-4731-89af-040e3f23551d",
        "cursor": {
          "ref": "c452b21a-fa3f-4aa1-9727-c28cdc373ff1",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "640b744c-9a80-49f4-89b4-682ec7878b8a"
        },
        "item": {
          "id": "db007fd2-d721-4731-89af-040e3f23551d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4d1736a0-258a-4c4c-9b5b-a6c41f60cd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41958040-7642-432a-b34c-fd636750863e",
        "cursor": {
          "ref": "23eb81e7-425b-4c29-9e2b-17ac3f6c6595",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "12d55c30-bf63-4f1b-b0bd-e182daeba0e5"
        },
        "item": {
          "id": "41958040-7642-432a-b34c-fd636750863e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c8f22c5b-85f9-43da-8078-9957dbb9beb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94ad7d4-2d09-4943-b44f-82007fa4722a",
        "cursor": {
          "ref": "ce4c5ec7-acfd-4594-ae16-413c24e2c27e",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b34deb7e-2aa0-45f7-84ae-3e781539557f"
        },
        "item": {
          "id": "b94ad7d4-2d09-4943-b44f-82007fa4722a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3c8df06c-287b-45df-a65d-20d3b021bd72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374f4faa-7dc7-4365-9a67-e2b290c4e5c8",
        "cursor": {
          "ref": "3c5ffd88-d159-4ab7-a163-04378a85ff72",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f33c03d7-d769-4119-bc6c-354a1fc2fd78"
        },
        "item": {
          "id": "374f4faa-7dc7-4365-9a67-e2b290c4e5c8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "59aa5e9b-53e2-4f70-81c7-4e3de9b45c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78bcdd2b-281a-4d21-949d-9625707c2261",
        "cursor": {
          "ref": "b83f2085-3f18-4b2c-ad3c-45780e3af9d5",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "28c5c765-7dbe-4be5-8753-b4b25d1d2197"
        },
        "item": {
          "id": "78bcdd2b-281a-4d21-949d-9625707c2261",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c79db02a-b1e3-400d-bccd-c89889ee647d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b182c6-17f7-4c15-bcbe-0c3ac504f913",
        "cursor": {
          "ref": "16f8d1e2-78f1-46bc-85ee-d200d2e25f03",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b70e25d2-277b-472f-aff6-cabda030763f"
        },
        "item": {
          "id": "f9b182c6-17f7-4c15-bcbe-0c3ac504f913",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "40931881-ab9a-478c-9e97-3b0d1e43ce39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac22b10a-5c8a-4bc0-9238-5cd59f8d71e2",
        "cursor": {
          "ref": "3e977593-6ef7-4294-bf95-718230246656",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8a0c5770-5e22-4935-bf57-02488aaad45d"
        },
        "item": {
          "id": "ac22b10a-5c8a-4bc0-9238-5cd59f8d71e2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e386f610-c491-40e8-9526-c4fcf2d98353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8612f47b-d418-4fee-85b8-36d97fc836c7",
        "cursor": {
          "ref": "b6cd7a3f-8896-4a30-bbce-3ca20ed422d5",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bc5cddfa-d08e-48b0-91c5-d1ae39d1ef44"
        },
        "item": {
          "id": "8612f47b-d418-4fee-85b8-36d97fc836c7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dd245541-feed-4e11-8e54-88ffadb093c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754167a0-2e3f-4ada-afb0-8bab1712f6ec",
        "cursor": {
          "ref": "b1ea1915-d8bc-457d-9a1c-5909f7a4a85e",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "01b151ad-f6e2-414b-90e5-0406342c1047"
        },
        "item": {
          "id": "754167a0-2e3f-4ada-afb0-8bab1712f6ec",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "97c23c35-9095-40d3-ae47-ca8ca5340563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2da98b-a3da-4d58-89f3-8f0f29882d77",
        "cursor": {
          "ref": "c4cb912c-e702-4b6a-b4f3-6cda12ec76fa",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "863fbe51-92b2-4ffb-affe-f43bda6336e9"
        },
        "item": {
          "id": "8a2da98b-a3da-4d58-89f3-8f0f29882d77",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c4915d32-3c39-40a4-8d66-c2e0c61a2e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e08209-2784-4c33-884c-2b890bbf570f",
        "cursor": {
          "ref": "201b229b-c392-43b6-8d45-4d077ad9df8a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c331cf78-ac53-4bcf-9eb6-8d66a69f0ac9"
        },
        "item": {
          "id": "93e08209-2784-4c33-884c-2b890bbf570f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ce1511e6-2638-4deb-8537-bdc623b72cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f9b505-63b6-44d4-8dd5-771ea259a68e",
        "cursor": {
          "ref": "1e95f50f-9155-4b3a-9b56-414e9abead08",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "96909cde-4096-44f4-87ad-dc0b8709752e"
        },
        "item": {
          "id": "c4f9b505-63b6-44d4-8dd5-771ea259a68e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "87216abc-ab41-4116-856c-1a89ded4e730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa510c6-84e0-4a26-9802-e187ee47cb00",
        "cursor": {
          "ref": "ed7b5e93-cb94-4f14-99ae-530c925fa4e8",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f7f4ba08-19d6-4fc7-8307-2b8dbc84e0b5"
        },
        "item": {
          "id": "aaa510c6-84e0-4a26-9802-e187ee47cb00",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6f251deb-5e16-4d7d-a818-5787c13c2adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4c7db5-06f0-4443-89b0-2891b74bfa65",
        "cursor": {
          "ref": "11b5db7c-3896-4838-a44f-756019a47ea5",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "151099a0-a9d6-4663-9e14-940eb993522a"
        },
        "item": {
          "id": "cc4c7db5-06f0-4443-89b0-2891b74bfa65",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "74e29acd-a39a-4c55-84b1-9619535a7ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992ef8e8-207a-445d-8aac-3b3d4e35796b",
        "cursor": {
          "ref": "d0e99d2b-a9f7-4694-8b62-80cd70f77b24",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ade63c2d-fa90-4b3e-a998-e9615889e669"
        },
        "item": {
          "id": "992ef8e8-207a-445d-8aac-3b3d4e35796b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ff3685d2-45e6-482f-9e92-ef41c697ac0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63739c44-d27a-478c-bf1b-a3a0a53f7780",
        "cursor": {
          "ref": "311178fd-b7f6-4beb-b6d2-7fcc25cace75",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "08e80d06-3c31-4442-8ab5-7a521989fca3"
        },
        "item": {
          "id": "63739c44-d27a-478c-bf1b-a3a0a53f7780",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f1f2febf-6b68-4759-b275-776bd2a875dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012cf360-521b-494d-a6be-78ee4a1f5ed7",
        "cursor": {
          "ref": "94b1da63-5ce5-4c30-b51a-f5ded3fca667",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "debc06a4-9a39-4314-aef7-88cbcc969523"
        },
        "item": {
          "id": "012cf360-521b-494d-a6be-78ee4a1f5ed7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9c22f884-c52e-498f-97b9-5d6e3478752e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68fae80-3aac-43bf-9ecd-7ffa3878a6a1",
        "cursor": {
          "ref": "18e1ce7d-75e3-414f-a409-56078b656220",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "253d2e86-a754-443d-999b-8ba4a0d0d9ab"
        },
        "item": {
          "id": "c68fae80-3aac-43bf-9ecd-7ffa3878a6a1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "32e79e3f-3f2e-419c-aac9-1a33e86d5ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe121c7d-f067-4a38-b352-61f3e96e58de",
        "cursor": {
          "ref": "d89662c3-93b0-40f5-a129-812e0ac55762",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0b51911b-ab0d-4a53-9c2e-91e04df97167"
        },
        "item": {
          "id": "fe121c7d-f067-4a38-b352-61f3e96e58de",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6cbc3c8e-308e-43a8-8101-1b443e8f8934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb846d8-4fdd-49a7-b8fc-7128ad926df5",
        "cursor": {
          "ref": "cbbe522f-1519-4cda-aac5-fc311197de70",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "85d64346-6983-4758-937f-45a84a488970"
        },
        "item": {
          "id": "6cb846d8-4fdd-49a7-b8fc-7128ad926df5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "36c0243b-8cce-432e-889d-f7dab38d4498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153363c3-78c4-4f04-9ce7-d26296c3a38d",
        "cursor": {
          "ref": "839d36ee-f792-4545-93a5-e0233b9d840c",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1cdb0bc9-209a-4595-9ee8-ed531888e70d"
        },
        "item": {
          "id": "153363c3-78c4-4f04-9ce7-d26296c3a38d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "409ee8de-3b27-40e8-bcbe-dd1fec58c83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a893b02b-b31c-40c2-b98c-1a767cbbd9d6",
        "cursor": {
          "ref": "a911ebdc-b46a-4bf5-a50e-4d111e2e22c9",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "be4dbd49-33a0-466f-a6a2-5882aa1d4d71"
        },
        "item": {
          "id": "a893b02b-b31c-40c2-b98c-1a767cbbd9d6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "633cbf77-4cb4-4426-a33f-fe375d51e854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8873556-6bad-4ad7-9e01-41e497d6960f",
        "cursor": {
          "ref": "fd9b54c0-3826-4382-84ee-b3c884803df1",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2c83187a-1434-4054-a662-e38741bba815"
        },
        "item": {
          "id": "c8873556-6bad-4ad7-9e01-41e497d6960f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "60394631-0563-43a4-82d1-b3057b664a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5546b792-3400-4650-8945-7104875d1315",
        "cursor": {
          "ref": "5d3ab5ac-62cb-4b01-b966-4424b307df01",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8a950109-0256-487c-a17a-2a7f6b9d0d8f"
        },
        "item": {
          "id": "5546b792-3400-4650-8945-7104875d1315",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6298ca77-9b56-4900-99a2-ec417d7bd5e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15563e84-1091-4160-ac46-af7463c2bb51",
        "cursor": {
          "ref": "e4aacc19-4959-4f23-b0b1-efed1f7c36af",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "55076ba4-7a56-45bb-b5c7-cc58f831f84d"
        },
        "item": {
          "id": "15563e84-1091-4160-ac46-af7463c2bb51",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c1a111cc-b775-4431-8d9c-8591f5929e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30055c18-6afd-4e22-b884-97d3dbc99d5f",
        "cursor": {
          "ref": "40915842-81e2-46e5-b3d1-fafda97fa54b",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8b64080d-8242-46d5-bf21-caf2e33fb662"
        },
        "item": {
          "id": "30055c18-6afd-4e22-b884-97d3dbc99d5f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ef9e0161-3deb-4515-b46d-407b87fdcd3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605d4cbd-f057-496f-a431-6218524c91b5",
        "cursor": {
          "ref": "b826d872-8f1f-485f-9a44-637c340d1776",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d23eed76-9f72-4127-91d6-cbb4cd4c9f76"
        },
        "item": {
          "id": "605d4cbd-f057-496f-a431-6218524c91b5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9cac9649-fa1c-4eda-a92b-b66da1751769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed88667-2298-45f4-a42a-25ef0ffb0540",
        "cursor": {
          "ref": "ff81024b-4977-4cfe-b1de-58df67f67967",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "09e25482-fe65-4a06-88e7-97a75796dcec"
        },
        "item": {
          "id": "8ed88667-2298-45f4-a42a-25ef0ffb0540",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "846566ef-3898-4111-8c76-43a578f5b7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f159b184-f7d3-4a0b-bfcd-62fd185467e8",
        "cursor": {
          "ref": "f14e60ec-fd0b-4a60-be33-8296797823bd",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f991d152-41de-49ef-bc66-c7fd3102fac9"
        },
        "item": {
          "id": "f159b184-f7d3-4a0b-bfcd-62fd185467e8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7c4a5c02-8077-4a8b-b736-9d9ded77065c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed9a83d-0ed2-4b80-8e44-4b0119b0dbf6",
        "cursor": {
          "ref": "4834f9ea-9991-4a98-acbf-31855eaf0912",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6c559bf5-61b5-46c2-b266-1c155819b610"
        },
        "item": {
          "id": "5ed9a83d-0ed2-4b80-8e44-4b0119b0dbf6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cf4312f7-0164-4e66-b966-c29759c30511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0bbc1b-54a3-4348-b5a8-8c05f04ef214",
        "cursor": {
          "ref": "ffc087ab-03e3-4834-80cd-36c92943d2f1",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5d2f4c16-409f-4eca-a191-49b1593384ff"
        },
        "item": {
          "id": "bb0bbc1b-54a3-4348-b5a8-8c05f04ef214",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c307aec0-3846-4cf2-befa-04523d6bf3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8be860-a150-4e1e-9775-8860a92a5468",
        "cursor": {
          "ref": "f5011d4a-50be-44db-8ca7-5605fbe971f2",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f13181ce-6d44-4c6d-a632-ba653c088157"
        },
        "item": {
          "id": "4b8be860-a150-4e1e-9775-8860a92a5468",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8876fbc1-d790-452c-b12c-b78f8d4c8353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fe695e-27a8-459b-86ec-c44f38115df9",
        "cursor": {
          "ref": "d061d5ad-08f9-43f4-9e36-8e687eb34427",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "aee55591-0047-466f-aa8f-09f84f033d3f"
        },
        "item": {
          "id": "25fe695e-27a8-459b-86ec-c44f38115df9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f7a74598-c42e-44b8-87e2-8b97284007c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24afe35-23b2-4bbf-b483-9a6a7c53207f",
        "cursor": {
          "ref": "7afb1978-fe76-4b6b-bc0f-fdf2f8e88507",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a1b5025f-3f24-44c4-8d41-5f54c912421d"
        },
        "item": {
          "id": "f24afe35-23b2-4bbf-b483-9a6a7c53207f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8a8d1091-a520-4f3f-8a7c-369f0d8a46e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ded33b7-b627-4f33-94a4-7450ef1748d1",
        "cursor": {
          "ref": "0883313d-628d-48a7-bf06-c850426a2bac",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "108be424-c1a7-48af-b4a6-bbb3285f132b"
        },
        "item": {
          "id": "3ded33b7-b627-4f33-94a4-7450ef1748d1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "da640160-9e5d-491a-b287-d6d4b724076b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5da324e-43c5-4fbf-85dd-dbc0c0e4ccca",
        "cursor": {
          "ref": "31a9a7ef-70ba-4a76-931e-79d29edd2589",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4b5361ac-7e29-4f04-a743-23ee2b55142b"
        },
        "item": {
          "id": "d5da324e-43c5-4fbf-85dd-dbc0c0e4ccca",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9d715968-3ea7-4871-8801-10e740463e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891a3fd9-7045-4ce7-b9ea-8ef36c2dda15",
        "cursor": {
          "ref": "6f4f672c-76bb-42a3-8974-4537bcdda7b0",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8ab73eaa-03e0-4159-a511-2cbaf4ba74d1"
        },
        "item": {
          "id": "891a3fd9-7045-4ce7-b9ea-8ef36c2dda15",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "13f3d735-2488-4306-a6a8-78324a36f656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318b08ff-a3f0-4183-9040-2aae53d6ac91",
        "cursor": {
          "ref": "7e52e3f6-5f3e-4b22-a6a1-2dd375318f29",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "29dd9b49-83ab-444f-bc09-2f8fa6bfe8cf"
        },
        "item": {
          "id": "318b08ff-a3f0-4183-9040-2aae53d6ac91",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "80026f49-edaa-412f-8475-863da8d31731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f3eddc-959d-42b5-ab02-79cb9a36720d",
        "cursor": {
          "ref": "ba8579b8-556f-40f3-8311-350e4bf61bf0",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a1afafb3-aba1-46d6-8b9a-af0693c729b5"
        },
        "item": {
          "id": "56f3eddc-959d-42b5-ab02-79cb9a36720d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5f9d975e-c016-4010-9e1f-3c82d43cd932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2a0713-aac3-4a14-9498-a5309760b161",
        "cursor": {
          "ref": "6d9509ee-2a76-4d6a-a899-8f5023f88f98",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "efb11550-7b41-48e4-b96d-a889eeaa38d0"
        },
        "item": {
          "id": "4e2a0713-aac3-4a14-9498-a5309760b161",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e21f6e6e-7d39-4b89-ab7e-35d7614cb388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a3237c-5c2e-4810-a8c6-5b96043a74a2",
        "cursor": {
          "ref": "0c9bea30-cd39-4542-b59f-53599b1f52e3",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2371ba97-54ec-4cec-8608-cf7b1a3a68c0"
        },
        "item": {
          "id": "75a3237c-5c2e-4810-a8c6-5b96043a74a2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2f00a637-dc8b-4b50-a472-d3fff03e5228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee28c099-705b-4f84-81f6-659f7581bde1",
        "cursor": {
          "ref": "71bbb2cc-297a-4e5a-afae-90f67ee14307",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ab9e498d-00f6-4fd1-964f-6fe79ca1670c"
        },
        "item": {
          "id": "ee28c099-705b-4f84-81f6-659f7581bde1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a25cddac-08ec-4924-8faa-9522f54b0241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e28e67-d728-4e3c-ad9f-570a25780e63",
        "cursor": {
          "ref": "3e01870c-3f38-4b32-90f7-826894e00ba0",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "24b5b409-e14f-4c29-a849-96878f63cc1f"
        },
        "item": {
          "id": "47e28e67-d728-4e3c-ad9f-570a25780e63",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5435f274-a3e5-487e-a101-d8c29c964d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1484f1-0b16-4dfc-9ec2-6c23ee168521",
        "cursor": {
          "ref": "af6dbec0-3008-4863-a2fc-21f256dd1bba",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "67e056a6-f924-4375-b008-5b26d9aa6d4b"
        },
        "item": {
          "id": "4c1484f1-0b16-4dfc-9ec2-6c23ee168521",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "48d5d21b-7416-43ad-86c2-dfce89260845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badd17ce-b54d-4a52-8a9f-e52066b66761",
        "cursor": {
          "ref": "1aa5df4e-c981-40c7-8ff7-e337cfe9bc9b",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3467d982-b128-4c3b-a185-08c49fc043fb"
        },
        "item": {
          "id": "badd17ce-b54d-4a52-8a9f-e52066b66761",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3c7a923e-0239-4a11-9c41-08ffdea14577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b29bfd-f9b6-4723-8a12-d06606f1556a",
        "cursor": {
          "ref": "f5e2382d-5603-46c2-bea7-f0ee3fb80fed",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b596bffc-2292-4eaf-9cb8-c9a9f9d9d08e"
        },
        "item": {
          "id": "19b29bfd-f9b6-4723-8a12-d06606f1556a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "807a3d09-2305-43ec-9aa3-126dfcfd3247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cede59a3-1997-46b1-8171-ebd8bf4b8505",
        "cursor": {
          "ref": "2b5e2907-7ee1-40c2-8532-7ab61e710baa",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "21f014c3-758a-4aa3-9666-050316278077"
        },
        "item": {
          "id": "cede59a3-1997-46b1-8171-ebd8bf4b8505",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "16d79f02-c572-4d6b-95de-981526048a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16beb3c9-954b-4f69-b480-d390be5a7ac4",
        "cursor": {
          "ref": "2860ad16-9f9d-4a3e-8c75-380cdc3b7966",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6913a726-5fa7-44e7-b582-7027def8f4ea"
        },
        "item": {
          "id": "16beb3c9-954b-4f69-b480-d390be5a7ac4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "aeb22d29-77d9-460b-9a33-6a2e59ab939e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de9dc7e-9bab-4e0d-a5cb-970d3a2b1bf9",
        "cursor": {
          "ref": "615eea20-fdd9-4c9b-945b-5c08860a14dd",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "93ddbcd3-3720-46bc-8eea-4ee414b428b1"
        },
        "item": {
          "id": "9de9dc7e-9bab-4e0d-a5cb-970d3a2b1bf9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "33a67ab4-cf45-4003-953c-4a1e3c387b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbc0698-4ec6-463b-8272-3e9562ab4ff4",
        "cursor": {
          "ref": "f0c937d0-3804-467e-89dc-296c684c6f90",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0debf31e-3b46-48e1-bb69-d6bdc0ec6174"
        },
        "item": {
          "id": "2bbc0698-4ec6-463b-8272-3e9562ab4ff4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f86de632-d3b3-4443-9947-493f0bd05547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c427bd3-ed8d-45e1-a06e-a06c99b57079",
        "cursor": {
          "ref": "7a6bf69e-da8c-4fa0-a3fb-6a1f54734266",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8a3d9561-2460-4e7b-aaa0-e0a0db33423d"
        },
        "item": {
          "id": "4c427bd3-ed8d-45e1-a06e-a06c99b57079",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "595be2b1-18a8-426c-8e59-9c2f85b2f441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af62fab-ec52-49d6-a463-c6e25b5b84bd",
        "cursor": {
          "ref": "81d48aa0-0724-4819-b8ea-b8884cc0101b",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8cdd7173-6ccb-498a-a60b-faf28a71bf60"
        },
        "item": {
          "id": "5af62fab-ec52-49d6-a463-c6e25b5b84bd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7fc6f202-57c4-42db-92f1-f0f5980b157d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed4b4b4-92cc-403d-9390-c6543d330a15",
        "cursor": {
          "ref": "e78f185e-7792-4595-976f-a721588924c6",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fc3b589a-f9fc-4e08-ab78-e651d3685b31"
        },
        "item": {
          "id": "8ed4b4b4-92cc-403d-9390-c6543d330a15",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d7b24cce-0645-4716-a6d2-15a9de8aaddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b204f097-3395-4ad2-9fa1-1c483eb1a496",
        "cursor": {
          "ref": "2de1fb9d-282c-4c8d-af52-b9d7fc3e2e87",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ddf4bfd8-bc7a-459f-aefb-4b60f194a8e3"
        },
        "item": {
          "id": "b204f097-3395-4ad2-9fa1-1c483eb1a496",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dafb39bb-01a9-4f00-8795-9e86f75e04bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cce06d-51eb-47f5-b9f2-d0359eaf6f84",
        "cursor": {
          "ref": "5f70b7c8-b5dd-4e95-91f3-a67bfb5eef3e",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c831f5e6-d212-4fda-8283-a2f57f3f08df"
        },
        "item": {
          "id": "54cce06d-51eb-47f5-b9f2-d0359eaf6f84",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a545c857-6a3a-40d0-a00f-d9794b766551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae7b71b-8fa0-4ff0-b192-09643c872f04",
        "cursor": {
          "ref": "8e65ffaf-dd62-4cae-a11b-bd2d91339840",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5c8a1812-2ff5-45ad-8e3e-6463a2eadd9a"
        },
        "item": {
          "id": "1ae7b71b-8fa0-4ff0-b192-09643c872f04",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "eace2d35-f21b-403e-a9b3-da5a13270886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbb80d5-8c7f-42ac-9246-3e8b1519eb12",
        "cursor": {
          "ref": "26acbbf5-ffe9-4d62-9c84-aedb32d42b51",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "36fd0700-977c-4c11-9b45-8ce5924ebd22"
        },
        "item": {
          "id": "3fbb80d5-8c7f-42ac-9246-3e8b1519eb12",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9c8a783b-1b43-4d02-a88e-cdb204bfa8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545a0b78-8d3d-4ce8-af2f-237bc525dec5",
        "cursor": {
          "ref": "f394d3f2-64ba-4157-9cd5-806c07afa2e0",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6a597885-f9e5-4f01-903e-f7972e55ec16"
        },
        "item": {
          "id": "545a0b78-8d3d-4ce8-af2f-237bc525dec5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ad8a0915-d890-4d92-95b7-877007431b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84581d14-21a0-4b9b-97d1-e53233e2d586",
        "cursor": {
          "ref": "d0c69f40-1f2f-4bc8-bd4a-8ceb8f945cae",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f0729ba6-662d-422e-aa68-f66a7b63842f"
        },
        "item": {
          "id": "84581d14-21a0-4b9b-97d1-e53233e2d586",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "020d82ce-44f4-4182-a1cd-b96b2f8fe5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6061ef-e66b-4fdc-aec9-31905436f73e",
        "cursor": {
          "ref": "0afb5750-8fcc-4ddb-b8fa-bac5e0195c03",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "75dd91a1-2dd2-4942-b45c-bb616f32721f"
        },
        "item": {
          "id": "9b6061ef-e66b-4fdc-aec9-31905436f73e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fef3a49a-9db3-422b-acb2-637b8a2e1c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b8bd9a-5524-4c78-93ea-67dbd3e15025",
        "cursor": {
          "ref": "8db2668c-1cf6-4ddb-8741-976028fec1cf",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f0a21c3a-1fbf-405a-9aa7-7c9c845c4676"
        },
        "item": {
          "id": "b4b8bd9a-5524-4c78-93ea-67dbd3e15025",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d43975fb-b1d2-4d6d-9681-df7999f3a248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7f8af4-e807-4013-aff8-eabf344c40cf",
        "cursor": {
          "ref": "cdcce1b7-aead-4b86-96e9-dd2c32520677",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b46f3df0-87a8-460f-b0f5-6754983ffbf0"
        },
        "item": {
          "id": "5a7f8af4-e807-4013-aff8-eabf344c40cf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "13e4adbc-d5ac-4485-875c-ace20775a254",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5ab9ef1f-70cf-4d02-8d83-ed4bcb4b0476",
        "cursor": {
          "ref": "4971b8b8-cc99-48fa-81fe-ec178fce93c2",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "313956e7-5c7e-4008-bdd1-71335f802e98"
        },
        "item": {
          "id": "5ab9ef1f-70cf-4d02-8d83-ed4bcb4b0476",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "fcf80f17-a20d-4c6d-b8a5-74e314cc4dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c1763b83-ce8a-43b9-90f9-28b1c5399efc",
        "cursor": {
          "ref": "5266406a-f60b-4272-a776-23f2aad7562f",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3d1ec0d4-141d-430e-b292-5dae25a409ee"
        },
        "item": {
          "id": "c1763b83-ce8a-43b9-90f9-28b1c5399efc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "39d401d8-03a6-481c-9d88-f0153020ecb3",
          "status": "OK",
          "code": 200,
          "responseTime": 294,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a436f1-7905-43f5-8ea5-2d5ce5644e37",
        "cursor": {
          "ref": "a2aea1a9-b3b9-45e1-98fd-566263b9072b",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b6c1ce2e-f90a-4452-8134-3c8e494cf48b"
        },
        "item": {
          "id": "d7a436f1-7905-43f5-8ea5-2d5ce5644e37",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6e071a3a-4987-4896-8ccc-109dc3b0c712",
          "status": "OK",
          "code": 200,
          "responseTime": 2406,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a319142-4c43-4838-97a2-92c911858e7e",
        "cursor": {
          "ref": "a27fd4e9-9441-4365-8f7c-f28fec406653",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7e736418-9325-4134-a647-dceaf406c856"
        },
        "item": {
          "id": "0a319142-4c43-4838-97a2-92c911858e7e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ccca6f10-0037-4974-9ca5-d11b60be5d2d",
          "status": "OK",
          "code": 200,
          "responseTime": 3377,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8350825-bfe6-4f8f-9a79-d824e188cc41",
        "cursor": {
          "ref": "d9d5f4ba-635a-4fc5-98f9-9d2b91eb6731",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "81567025-f81d-4958-bfb9-77cbf2b780d7"
        },
        "item": {
          "id": "c8350825-bfe6-4f8f-9a79-d824e188cc41",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "12d5984d-d746-40c3-ae42-5466fba5ac56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c8350825-bfe6-4f8f-9a79-d824e188cc41",
        "cursor": {
          "ref": "d9d5f4ba-635a-4fc5-98f9-9d2b91eb6731",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "81567025-f81d-4958-bfb9-77cbf2b780d7"
        },
        "item": {
          "id": "c8350825-bfe6-4f8f-9a79-d824e188cc41",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "12d5984d-d746-40c3-ae42-5466fba5ac56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c8350825-bfe6-4f8f-9a79-d824e188cc41",
        "cursor": {
          "ref": "d9d5f4ba-635a-4fc5-98f9-9d2b91eb6731",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "81567025-f81d-4958-bfb9-77cbf2b780d7"
        },
        "item": {
          "id": "c8350825-bfe6-4f8f-9a79-d824e188cc41",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "12d5984d-d746-40c3-ae42-5466fba5ac56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "23a1ff24-3c3b-46b4-ba08-5da4f52e007a",
        "cursor": {
          "ref": "93596d0f-1974-4712-99d0-3401d4572025",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "800a25df-d71c-4dcd-855d-f00033a339f2"
        },
        "item": {
          "id": "23a1ff24-3c3b-46b4-ba08-5da4f52e007a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4c34a497-c782-422f-b874-a70b0c65e5cb",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "88dbaff3-b678-46fa-a106-c69f49065641",
        "cursor": {
          "ref": "3d7e6bc8-5582-44f0-97eb-2051bf2d85b2",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6a9e2711-e907-49af-ba9f-e693890c8b51"
        },
        "item": {
          "id": "88dbaff3-b678-46fa-a106-c69f49065641",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "862f5c68-03d6-4429-8461-973837335f0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "88dbaff3-b678-46fa-a106-c69f49065641",
        "cursor": {
          "ref": "3d7e6bc8-5582-44f0-97eb-2051bf2d85b2",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6a9e2711-e907-49af-ba9f-e693890c8b51"
        },
        "item": {
          "id": "88dbaff3-b678-46fa-a106-c69f49065641",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "862f5c68-03d6-4429-8461-973837335f0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "480e8a3c-c9aa-4417-8ebf-25de39749190",
        "cursor": {
          "ref": "11bcdbb1-0035-4626-a6e8-39c484083d1f",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "74ac4274-1332-45bb-9376-53b8ba3cbc55"
        },
        "item": {
          "id": "480e8a3c-c9aa-4417-8ebf-25de39749190",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e26cdcbe-a9d4-46ff-be87-26ed1237f604",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2927266d-51de-4296-a46c-3235baf85c5e",
        "cursor": {
          "ref": "595c78a9-c1d4-4b0f-b300-bed49c743af0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ea01d220-fe5f-4fcf-a092-80fe400ed3f3"
        },
        "item": {
          "id": "2927266d-51de-4296-a46c-3235baf85c5e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "313e529d-01a4-4b90-a787-5e8f6f1453d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2927266d-51de-4296-a46c-3235baf85c5e",
        "cursor": {
          "ref": "595c78a9-c1d4-4b0f-b300-bed49c743af0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ea01d220-fe5f-4fcf-a092-80fe400ed3f3"
        },
        "item": {
          "id": "2927266d-51de-4296-a46c-3235baf85c5e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "313e529d-01a4-4b90-a787-5e8f6f1453d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9cdb8b62-1cb5-48bc-b74d-e0a33bb2ce0c",
        "cursor": {
          "ref": "9ffcd61e-627b-42af-b714-c0e136e60aa7",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7b295194-e5ba-428c-8bd0-368227ba3fd2"
        },
        "item": {
          "id": "9cdb8b62-1cb5-48bc-b74d-e0a33bb2ce0c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "e4dac82e-e352-4540-9d5e-427162e6c2a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 136,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}