{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "564d9565-d811-415c-824b-4b4df21a488c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fe68fc9e-a8a0-46ec-b7f8-6f943cd0862d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "013c7265-78d0-440b-8b43-951094c7f1b0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e21f477d-1d46-4d1f-9d5b-648f65fad274"
                }
              }
            ]
          },
          {
            "id": "42ee1ccb-d85a-4602-bf76-ed7df6e25c13",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "85ef5d85-bda3-47e1-b05b-0192112dc3b7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8c959603-3065-47c5-b25f-2527c056a2f7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "73b497aa-3dcb-46af-94b7-36446ac8b82c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8c5708ed-0e2c-4a2c-a647-73e038aac4a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f2f0be8e-771b-4046-b508-35f1a885bf22",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4f0aa32-29a2-4064-a691-547954987baf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97faca12-9c88-4995-816c-d9d726c2a095"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9512e3a7-a582-4617-aba2-97c885be23da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "54275f7d-a5ac-4268-b59e-4125f9be5135"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4bf13c6e-7e90-4c2f-b07a-2a219d56e36d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a39c223f-a064-4eb9-bbaf-58bf88b7334b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81104c3a-5a62-42f0-9a6d-4d04ad248c75",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f58628e9-5231-433e-b9c3-203af3ce9dde"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e73691b-298f-449b-8e15-56a35d1c0919",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "765d07c2-2024-438b-8b4c-51294eab6db9"
            }
          }
        ]
      },
      {
        "id": "8393d6fa-e084-4f2c-b494-1cc330531455",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c6ea03cd-5131-4b85-9c33-80d2dee19073",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e6fe6a9-c1f6-4a7c-a114-a26a4c4da0d9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6cff300f-141d-457e-bfff-c0531adccbbf",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21ae62c-c64a-4cd1-9598-4100998babc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b65e0730-d853-447c-93c4-19eb282b9173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0fead8-e764-44a4-99fd-49f5e5a6318e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a39fb7-2a73-4e9d-80a2-4ea0b75153b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "053327cf-0f07-4465-a789-00748bddce79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27920783-323b-4497-a739-a6fc7d4b81a7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5d2fb1-8e4c-4066-8857-53bc5e4fc441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cab32bc-073e-4090-bb8e-d8c58b88070e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "732ebd67-1f26-4f1a-b829-cd2c295e4896",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "586ea884-728e-4cdc-9c74-51427853250d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea0b3e3-ced0-448a-ada1-ae7cf1cbd9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "747e7c20-3d83-4e5a-a8b0-6a938a9a5e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1777bc2b-5410-480b-87ad-18aa4cb7b3f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd4ad13-c57b-4f98-9670-ebe2abb15f5a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cf4c97cf-0f20-4185-9e65-05634c2a3f6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "53e97677-aedf-45e4-a2bf-9be127b6fafe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b22e5814-899e-4c49-9998-421f468deb90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5ea45499-d7fc-4ce4-a936-8ea3b7218b74"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0e7d98f-912a-47fe-8f10-7160a1ca13f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2ac2b75f-980d-4d3e-a302-5687cf5bf525"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e2b61cc-a935-43c4-a770-08ba8df293ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aadd7958-f5e0-4f54-86d6-f8629fdf1abf"
            }
          }
        ]
      },
      {
        "id": "f867a052-4c11-4c9e-a6f2-5478fb011a47",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1edefde7-eb3c-4cd7-a6bc-1758a54b4e59",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84d652cf-c3ce-4558-8186-0bde4f87239c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f606123d-5a9b-45a1-954b-8050338e2486",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8631f906-98e3-49a3-9920-44bbf7e15e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f232853-7e59-456a-9ac1-3ec7d023f748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f6ca4d-b6d6-4c5a-8f75-ac3708eb06c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fdb334c-1756-49e3-a9c1-a3a2e4a479c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65f8cab-d88e-4904-85b6-8413e9ffc540",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb5417e-525f-4c49-a28b-b20e4520f8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ed42e4-a410-4c47-9f4e-eb899bd946d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9082400-1438-434e-b129-d606550dfee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6501e6f2-38db-46a3-baf7-3c6aa356aef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4f6341-1329-4a06-ab5b-f7339b5057a0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9763208f-a731-4d38-a25b-f92bacb9ee8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e13ce0-bed4-4c36-98c8-b7f91181e524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ab6712-1f78-4c4b-a389-51f90a5ea657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "778155c7-3ebe-4ecd-9128-91f725df6a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22dc942d-d8a3-48e9-8f35-1e805f526a41",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9107c0b1-d4d1-4d97-b55c-e0bc12dd8b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621f3023-26e3-4754-b983-d2aadbde5b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20674916-fd3c-4e2a-afd1-03e99af91d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09dcf510-fd96-47c3-8670-775ceb2bdca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017c8cde-ef70-4cca-8fe2-e4deda0cfe26",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f9deb3-df5a-4e41-aa48-68099673bcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b798381c-f20e-4b6d-a0d7-347b94ec8c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868b3bba-85e8-45f7-ba8b-d24918dc3b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c097257c-e324-4d42-a55b-f4b7ecaa6ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da7258a-f153-4583-9fc9-669b8c714347",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73cd10c-5b5c-4347-8111-0898fb3cf4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63cb9169-9301-49d5-840d-359e82ab3b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ba5ec2-c120-40b0-992b-817a7f9b7f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "373197f1-1655-43d0-acc6-c1efdd7b616d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d87733a-9db0-4165-ba1a-9c915a1d6b3d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba0fa3e-c4a6-49fb-8b4e-80b219b82770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b024f9-5c75-4cea-ad88-e3f94ed0ef08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d680eb-cafc-405e-b9f3-99757db3cd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ae630b5-089b-44c5-ada6-c5d5350cc7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d315754-2830-429c-98d0-8c071a98a510",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1064da4e-33bd-496c-95d0-13a59ece6af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cdf4660-0df9-4005-8b80-98b8fee165bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b5b4b4-4191-4b60-913d-d396c2956f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6fc4b02-d3b7-4840-bd10-2c1d21cb6c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd47a9b-ca00-49cc-8aa8-942442e4b4d2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202baa4b-4f18-4f35-8f6d-a7271babc768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8b2401-1fa9-4258-93eb-97c1b7bff156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45679a9f-5fe6-416e-b77c-b033cb1e090f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "839fa0f4-0fa1-4fdc-8ef5-5663a76bfb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca752f5f-e50c-4d5f-a89e-09f4560aef46",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc4d8cc-d32f-4551-82bf-7151cf07f05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d904a05-7491-4392-8600-c1cc5e335f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35dae70-de5d-4860-a021-c95372524dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "523176a3-5da1-46c9-8c13-420b1247c058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea44438-abeb-42d3-876e-040342b0e370",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566a84ab-a915-4d0b-b52e-6eee4308398a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05dadfb2-fa4b-42f1-8bd4-0c03d2880482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e0b931-2834-42c4-8521-f00310187930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb923723-8d75-4d14-9c6e-4ba4c93300a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadec4ff-ee0a-4609-a5db-49e1c33908c0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aca154b-a9bd-4852-bf1a-d94468102672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09385a5e-be07-4058-88e9-6203b2aef6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58b7ea9-e8e1-444b-8baf-431c7b277018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f603b68f-2a2a-4fb4-b886-9d0dbc6a8fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f840f0fa-ddc0-4dc9-9449-7fd8c755226c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a2aa52-71e9-44a3-9130-fe938bcfe4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18323160-f019-426c-b061-d865276c90e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b450d4d3-6e91-412a-9cb5-1c0e3ae2d964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d33ae5ba-e3d0-4f31-b139-37d3aca07769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42d57c6-7507-4c5e-828c-da5c1d8ca51f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd9b3e0-d5d1-4a2c-af71-f6e2b11506d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3baa4b-42ed-4000-ae72-eae9fd07ea54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90f4a3f-5ded-4ed7-8a1f-63d13c0a9c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84b25807-eca0-4445-af02-fa922352bd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1324f2-68b4-4d68-9357-4d79ddd7a760",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fda9205-54bf-4703-8d44-507e2c862dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c68580-f436-4ad7-a5fb-a36d068c02c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217c9a98-04d9-4f87-9549-85becb1fc335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd8d566a-aa08-475e-96fa-c8ab3d173bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01486ba-3228-4c65-9530-72b621678777",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcb502d-16d2-487b-8006-116de4293721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fca22d1-6d03-4c7b-aed7-b2908a3fb40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc914abc-207d-460b-a058-5827fa96846b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20e216f0-277e-445a-a108-0256afb4713a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f137e8-e101-4df0-9fc8-a4b7f09e5f5b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05139570-83c0-4451-b09e-bd401e9d33a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "affbf910-f96f-467b-948f-a256cd72b903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3206a370-e611-4ef3-b714-0ecec515bdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "321c5866-dad6-40f3-b0c6-339fc482512a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c732629-1e38-47ce-badf-2e627aa1a3ef",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a64f33-80bf-47df-8f0d-20ae38be6bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3307043b-bb6c-4c74-9bb3-3e7576e11b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a831fac-d4fe-4f64-80d6-f6fe9bcbb5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1be4e0-8b66-47c9-a342-d1a4f3ecd70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b258610-d7fa-458b-95e4-55ef2f3bbe8c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5daf8ddc-f785-49e1-b395-c13510d86ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f2cc68-78ee-4bbc-92f2-4f798f096aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e3c827-5ecf-4752-8cb9-31f2a69a588b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "395f6a18-83d0-4b39-906a-00ab09c90d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039098fb-1eff-43cc-ab8d-0a295bdb74e1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd92147-f04f-4b24-b560-4458e74992cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4410c674-c99b-489c-b619-e33dbdbfefb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6ea807-fc32-482f-9899-6687e2509f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47d2a799-9cca-44d3-98c9-231824992ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1d43b9-f9d4-41ee-9219-d1fe3b736876",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73eba567-6d09-4922-9aa8-2d444b08ec39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dea8254-6613-4bab-a6dc-9baadc0d5e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1c7e48-9703-4dc3-9e70-1f000fd37f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b59c130-2af1-4d09-9fd2-d05fc8664523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8933d4c-54f2-484b-859b-4a027e0c032e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe6ccb6-f89d-4b22-9aea-73fcd36f13da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9893f3d-abfe-457c-9a62-af0e9283e8a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890cdc4e-a31e-47cd-b048-0b792793190a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db7a2271-a2fd-4aaf-a6b9-f08df19c3133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1558888-fadf-42ea-be6c-db2b6a0f6c05",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e25f115-cf9c-4db6-91b0-fffb4b695f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc511095-26bb-45fc-a620-16b7a27d9f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8b7edc-60bf-44a7-b069-e366f377b99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3b154d-1f8d-4f7d-9a1d-798abb8228d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60be8e1c-bac1-432d-b792-30f8f9260fd1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab5cec7-add0-4df9-9b5a-d4607e53aff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd95b7bd-9b06-44a0-bea2-19be716f5881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf8fa1a-0d89-413e-8278-e69c7180a3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "593d5915-d92b-4e4a-af74-e5b1452eb0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a684a3c-ec16-4302-8c87-9f22e0288009",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58213eb8-d880-4191-889b-cd25b1177aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7888d56e-8c3f-4544-8d85-9aca3f2126b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a8732c-7fd0-45a1-ac53-8caa0da3a361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "068eaae0-75a2-476a-9862-96c4673ede0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b221a978-593b-4b2c-a4f7-0e0f25006a4b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bcf418-4a37-424a-91f8-bb08426a73ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80b823d-553c-4877-8eb8-d388ef8602de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2797fb6d-4b26-4739-9275-4ce0b13dc6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ab5825-edd6-42ae-aae9-0d5217b0a237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa78e6f-fa94-42c8-9f0a-886097ddd686",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9c1889-faef-4d3c-8b6b-6f787af1e769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710ae02e-388c-4933-94a6-f175caae0cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3e72e4-bf7f-481f-b5f5-267902d8ced5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4d655e-759c-40af-8fab-d81d11cfde3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c821aa-fbab-41aa-9693-3da573670f16",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e0fec2-a7f2-4c4f-94d0-a872e817854c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b231ffd5-e8b6-4441-bb0f-7432f5123bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ff6b76-ab43-45ce-9a74-6178d12bf3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af2fd964-0768-450d-b0f2-36093729f50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa62e720-2527-4046-9d24-92fdd9087246",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada562ea-ee2d-4ee3-be84-bc6b965fb9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2be6f7-289b-4a1d-88e5-173698ed7ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7737d4dc-1ce7-4832-be43-209536968d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3305b7b4-0745-42bb-aa79-5d01990db63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf3307e-3571-4d73-b1e5-166463f04b26",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a398bdbf-6d06-4738-8c25-210a4158c9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40da548b-a635-4487-ab1d-fa4b7506f006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea93f615-6c2b-4d2d-953e-35081eefc06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "83ecaa2b-bfab-4ed9-b678-45410cd7a8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d8cc8c-03fa-4b78-b1eb-2033715479b0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867057a8-01a3-47d0-84f4-8667a88bd4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44829fdc-35bd-4a9e-a66b-c7a9f3ba3031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a82f7e-f9cd-41cd-a4e9-712cbfb9d527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d57c3633-c5f2-45f2-9707-43b3e054dbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ddaab3-4858-4855-982f-fbda1b49e016",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2137f9f2-296a-4e52-a04e-795329f2383c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d8bfdf-33c8-43d8-ad0c-51329f6f7066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5711f5-8bf1-43e1-9ad7-b45a8de327f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a93736cf-54d3-48cc-a23f-a519a9fa1d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2640bdb-c17d-4633-af50-6f78b9d7df3e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1d2129-18e2-4afe-95d2-671151d97f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71fe759-8ebf-4c49-afd7-9929189d91fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48bd1de5-79a6-4624-8e35-d904da7cb762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86bc0031-fa9d-4194-8095-c7308de0f7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265b4b02-f3f2-41a2-9ce8-a9e07bc60ba1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40704acd-048d-4c43-89a5-b1f828373ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61faac3-4057-4188-9d2d-e0c6746c26d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912001f2-f96b-4bf4-b3af-c6c40f681826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f08b152b-53dd-44f7-97d5-6231d1ba224a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548274ad-04f6-4f54-b902-8c3804043d76",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4da63cf-7c87-4b72-9fd7-eab18b7464fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea8b43b-088d-4fc4-a75b-18bbf03f9420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f50dd4-4d84-430c-b13b-c7dc12fc9f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc742fe-bd52-41c3-919d-05929a65cfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a092148-76b7-4f2e-b2d5-8798fdd42386",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809ec5c0-ee9e-4e50-b9a4-1063cff550b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "721e0bca-5a5f-4499-add5-c3a9dcc0dcef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f700d976-560b-4953-a369-30d146b8d1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe22346-9f78-4061-ad6d-d3f4e39b4b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41e9ee9-5dda-4f40-9400-3fd071492f5c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8fde62-5cad-46d6-b603-08a71b37abd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41dac4f5-1b0c-4cac-9a32-5e53cf437579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e035310e-17d1-4c47-ac0f-e0aab59c5157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1de4d7-fb94-420a-8c63-3a7f8fb0f929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07b3e7c-bb8a-466c-991f-ed63d4f9b2cf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb86929-2e81-4152-a72e-d0e756abca92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3616dd26-9097-4fd3-adab-937c55ec42a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa46abf-fef3-4a57-82dc-59b5010a2424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "35a1a145-a34e-4f96-8f2d-94fa37e0e059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6e3553-4b9c-4342-a44f-7e009e647ec8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64821bc1-035f-4aeb-be6b-3f1f1534242a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d17899f-3519-4e9b-9f8c-e47109fd68a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31775c2d-1972-4296-8c4e-fbcbd593f7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1e1e45-83b5-463f-9b20-318e13159228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15853f61-c437-4023-880e-d64eee43c6e0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84503c9a-bfc7-43f5-932b-42887aff7fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334d0596-600b-4d95-8780-c87eb98e6bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf09819-3607-47f5-8af5-779f12ab5535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7313cd6-d842-4822-b895-73c1d84b869f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470fcd52-3b83-4a67-8c79-04d8a94450f5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9438db6-984d-44a4-855f-59d5f575be08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e05980b-f8f4-4034-95d1-79a860276f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbfa79e-e83b-4fdc-a550-61c246a9b918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "77667768-0fa1-4315-900a-85c09916b975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d456e8-0a36-402f-9556-74772c49c44d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fe1b1e-2014-4fa0-9e91-f8664ca7e58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9bcc8c-58d4-46d0-adfb-4b05a4608562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da8a389-bfe0-4270-a75f-440b0137cd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7a98330d-e5e2-4ecd-89bb-0a5ce343376f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010ee268-6071-4d42-95ab-7c8b976e4b60",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ec1cd1-90e8-4b80-b201-c02478546f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ab8c74-d9d4-4c57-850c-83d092b925d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb24cdf-4c7e-42a3-976c-e7e9f62e2ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "62641036-aed3-4438-9f94-745e683c8ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d0e241-1bfd-4925-bee9-969ced2d75dd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed846e0-9add-42f2-ad0d-1d04d0658899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f254ca-23c8-49dc-9190-c39a8f11fe82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0852f385-1752-40b4-b087-d44984db0c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "224021d7-38f5-4a76-9ad0-9b4edc779a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7977784c-91cd-4fa1-9da4-74e9fe6cfe6a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26166a35-b568-4474-b8d9-851786efc93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390c7946-d9a6-497b-841d-2349d9228cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bfee607-d5d1-44a9-b8f9-23b33f6856e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffad4170-7cd9-467d-a49a-04966c093db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd567e3-7267-4d38-9a46-59f704d81bbf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e2a29f-6d90-46c2-9803-86e1de7d44b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d0b7a4-6238-40ae-8aa1-2f3e7d95506a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49adbce-de75-4159-95cf-8f6789c26417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b14f493-29c9-42a7-a68c-90e0dc8e456f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727497db-2e4a-4cb9-9ac5-a21204e81694",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9367757f-533a-40f7-9d5a-b48babb62efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d0bfe91-0168-446e-9a07-9880a060b83f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b533fbb8-3b6a-4dea-a4a0-df2bf138dee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15f01d3f-3d67-4ed6-9872-859c9d55b05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31082074-9ecf-4912-a267-ab1da6274ecc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867ce235-61cd-40ea-a590-298ca72ce48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ea1dc3-bc10-4b14-9fb9-eede9d31b960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f15761-ca8b-49d6-9a68-dd7d0cf0b401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3bbb48-43a3-47df-95aa-5dac40df7764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f698de-e944-476d-a8d6-7009956711cd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13864a7c-63a5-4c05-b13e-69aa025a60c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b627db3c-408d-4e63-bb47-b5d28c5af36a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be595638-3d27-4b18-8bf6-00a9c554a63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4eca5d79-8473-4811-94a7-3e15a7bcad35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a8b8b6-c3e8-4b13-893d-b59d3e0b92f5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf085022-2bb5-41bd-b09b-c7b850c460c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d24db1-3046-4846-9486-3b8b96a38e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b948ffab-dbf8-46c5-bd77-83928057dafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88934a17-7e6b-4706-96a4-1e04e55f7050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2179418a-6927-4606-82b0-dbc31f12c477",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65adea5-d444-430b-aff9-1bf718797a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ef8470-f418-4f07-b960-68ba99fb7e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cdf359-1855-4c08-ad5e-207018ab4fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "afcfb7c3-bbfb-4af7-bc75-f484d324751b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7440e40-b32f-4b9e-867a-6738efbb0f53",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d90e1a8-464b-430d-9bd5-54aceaa44c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5642c3b2-efb4-4483-94dd-d08203344a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2ba68c-ba5c-430f-b908-09aaf26dec95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dcfdf32-5779-4e13-a3e1-8194053f9091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2585ed-7ba8-492b-9c27-ce86f4ca1a7e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bea5a7-5f8e-43c0-b1bd-4f322b742c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5babe496-9e75-4830-9ee6-fe1b00d49ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10e7139-e992-48f7-86d8-3fcac6a72bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b2f487-9045-4277-9981-6f7e0a7093bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf32f331-cc51-4dbd-b050-767382345ea3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848f1786-fb83-46bb-a0f1-2697c2d7220a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4136aac4-94b2-460f-a918-6ea1ed0a41c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35e48c3-6c66-4c22-83d9-21ed888b8a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "250382fc-56a7-4e58-b0af-5d26cfe26eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc2fdb4-6adb-47eb-a984-2239c6b8671a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d200cf65-f4a9-4b41-9f5d-09e52f6f2372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b3a5c6-8ff9-4f0c-a53d-00209e285c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae9e677-ddab-493a-8156-f39bce45788a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac62e6e1-a537-49c7-9fdb-24a91020f51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47843185-59d5-4f83-9b72-e6e53968ea33",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7620863-e8ad-4f25-b720-4182384835e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd55ec4-69ca-4ff5-8818-5028b5c01153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bccbb8-4602-439f-8944-549d6b378783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6371c335-5ed5-45d3-937d-cc4cb718427c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497880fd-b302-4fe1-a3c4-3cbafb8f2993",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdde70df-5510-4a1e-b97e-481610c3a530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83977aa8-a410-496c-8cd7-47b5a3ffb7b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6348aca5-be07-414a-a149-4b04211721c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b56297-5414-4303-8c5f-49ba84ec83e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466aec4c-c5d4-4f5e-905e-610cdddf5d90",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c5bd2d-57d9-497e-8a34-7108cb7abdfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9672bd68-5102-4e88-bca4-87a50626d713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8962a036-12ba-4218-b041-d2eb27a6e691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd53d6ac-e2db-42ed-8919-53a3305366ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a555e7af-955e-44ef-8cf8-1c51f52f99b8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c96234-7792-450e-abc8-70713ad34349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f0344e-bf2f-4f50-99e7-8f32e792839e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78185ca-7678-4cfa-bcad-7de2715d5e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d3de74-a048-4b5a-88ba-e481efbf5845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c792d1-f276-40a9-8621-949f9701f501",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1ab708-5d1a-4c80-b6a3-56b3e5932153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0e4bba-93fa-47ca-ab5f-3ceecbdb5436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48a81ec-c4ba-4d0c-b54f-7a0f796e754e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "58df7a2d-eda5-484e-afa1-8c153c25405c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cea600b-1a31-4ec1-9398-4e1f80169178",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18053937-eb8d-424c-996a-5c6790806544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a0cec76-ee06-4540-a357-5773b647e8ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dec631-2cbe-43ed-9b41-ce7a31fd6823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef577307-1d67-4f98-8e5f-a92c133d968e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2986da85-1bd4-40e5-a06d-d8571cb2db93",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e559d13b-01c0-4c1b-93b3-5466dc22f1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a260a170-e804-4d31-8380-de7994d1e35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ae50b4-b69f-49b7-8a5b-fe91aeafd6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c503120-360d-4ccc-86eb-711a5a7e0901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d17ce9-4964-4fc4-852c-91bbecefe1a0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d44769-60d6-4da7-8e4d-d8f3c0c1274a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a82ad41-8e96-4cb2-8d40-c7c27fceab6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72721fd-c41d-4926-8c17-b01c6ccd33e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "75c2492e-f0b9-4338-b3d9-26b1e6e3ccf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56557d23-93d3-4abb-ab3a-bed4753155dc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189cddc2-64df-4729-8b2f-036978963722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00875db8-042d-40e0-83bf-8e4b63227892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b56e7c2-d5cb-436f-b4f5-180478d1843c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a99aa99-953f-462d-9e83-f83cde33542f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2c3566-c930-4164-9917-102660f17a86",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d62641-1125-4bb7-b670-4b46655856e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ff1c9f-2861-4d07-86c4-d4dfcba1859e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a497de-ff89-4c5e-b7db-3fde2d61afda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b54fda55-816c-4ff1-b440-05c0110c8493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6c51be-9a35-450b-90ae-fa2ecfda914b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf49f24-fb45-4864-8f73-321e3f9fc0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983bff32-9992-461b-9919-18c7732e72d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40e4b7d-b540-4aa4-b74e-fa185560cbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a366d629-c8ba-4627-b9c4-bb174ba31747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddcc8663-3dcd-4a21-b6aa-f50242b68254",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90e234a-253a-44b4-a8d0-ea08c47b7c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420fd267-422d-47f9-8a4c-37f510f1b335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e475766-eb12-4592-b8af-ca76a6e24b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f289b78-1351-4256-9bc7-4c41a5e7a003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3108288-5de8-4023-937e-aec80a4cb50f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4e5e0e-6667-4a1c-b8f0-fa5dbedda5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46ba2bf-6913-4a6d-acb2-c2019bca0338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812869cb-e4b5-4315-b723-f1bc11d7cd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd467038-4248-4d53-b765-3d6f28801ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7102bab4-79f2-44f3-b976-391be8a960aa",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf08389-23fd-4575-8d28-85c6bc91c2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05217ca-940d-4f3b-b4a1-175e79a6a1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e4ab69-1836-439b-a452-13de68f102da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f50d42-d3cc-45db-ad16-7a1533e3a2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfcf528-e86b-47d7-ac0b-0ea67c6101d5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9993ac10-a2ad-43c6-aa02-bcdceea19066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e84e220-d4a0-4256-8c81-54d91037ef0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d75c44-3ebc-4f06-be0c-bd6e1f165773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15781d35-344f-4bb0-a60a-b741539e324f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff82185-3298-4815-b821-cd5a272ad6cd",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3b50c0-1ce7-4954-a875-a701484008d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3744ecaf-8a9b-4489-a7d1-a3ef911a34ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fceafba7-bc69-4c2f-9216-d3df2ea8782f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eab5008-42bf-4533-89f1-22410f87f65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4705b712-cc54-4b8f-8a27-ac0297ba8fc8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f05d77-0c29-4d11-b1fd-af364d631f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07ef0a4-461a-4e5a-b8eb-98249a91031c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b041e719-06c9-4c7f-b928-98e9264bc753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2527df7-1fe0-43c1-913a-19ba3550776f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a515370-ad3a-43b9-b876-d8c76490b84e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30a3db6-c926-46fc-960d-b7c493a96494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bae912b-7c95-42b8-b4f9-3caf7ea635fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6c849b-c6aa-4694-8045-0ce16b00938b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "149a8df7-0587-42e4-a113-c000d36009f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927481b6-55c9-4c54-9ffe-75365dd031e8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d579e2-4388-42e5-a1ba-2f665160e13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5466c5ca-7239-4f44-ad30-6ce49e24b3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c621962-2870-4ba7-a439-8d680f6409ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54765e28-e3d3-4381-a9ea-b6c04c0ea053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69c29be-15ee-4de3-a63f-4837301be4d6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cfc349-aa8b-4bda-a1ba-e3b1112cd774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93574a6c-6818-46f1-93a0-cd45cc86e1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7e0af5-6b44-4340-bdac-075de9622746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "26ec4379-d590-4109-b7f2-cf6c583b578e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4d2d9d-0182-457f-8f3a-30dbe2674935",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0451cc0-b02d-4795-8008-cf54ac898e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e19be2-46a5-4cae-87a1-01a30549b3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86083b4-26b1-4487-af2e-12c66e634a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61705381-d8da-4bbc-9005-01b58a37aefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04dca87-8ecd-4498-978d-52242a855676",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8279c02-2954-4b65-bc05-4254d3906e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdfa9ce7-30b6-40c5-805c-77c02c6d1668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e490fb-66e7-405c-9c92-7ec7afa0bea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df966785-444a-4e3c-a7dc-35bea6b93375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3357245e-922c-4407-a5ae-c31d057a71b0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d088b7-13d7-4887-8540-c55d6d539905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b40965f-a0cc-4bd0-8bf9-98d63218b195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c0aaef-2f81-417b-897c-d6a658454107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81670285-380f-4417-bcaf-608637a7931c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87422fd-6a0a-453e-8796-a9b4d105cf95",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f73b18-c58b-48b2-b8cd-132e3ac7534e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c10f84-35d7-45de-b91f-0d2a884dd0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a003230-9fea-42d8-ac02-005a9c17ab85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4874328d-1cc6-43ef-9303-1c2513b35845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19199dbc-2d46-402e-ad92-bfbd6e74adda",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72117762-3b3b-4ed4-b85f-26af05c22a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a5cea5-f19b-4308-b67b-33346223b33d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4925ff-a8c9-4d73-a472-a19c91b3286f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cccea2b4-511f-4cd7-acf5-588ceae96a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098ca4c7-c1e2-4e8c-a15b-bdd1e093c9ec",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7aefb1-974c-4c61-bdcd-f13f86545645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c4dd5f-6419-431b-8510-cc5da137e85c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcb4bdf-43a2-4f81-8698-4c88ec97199e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98bea15a-5348-41ec-bdb0-e4bbc5adc564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396611e7-198b-440e-8af3-78478b2ff686",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d26c4f-818c-434c-b8aa-87a88893ab1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00941730-fa26-4b6d-a779-2b805f7e9457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5bb500-268a-4d61-9dd6-061ff37eb20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "340439ef-c3db-48e7-854b-ff2399eae5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe604c9-dffb-4ffb-80b3-59b317b13887",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f16611-65b6-4a3e-b60f-96e045224a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a7f82f-ad3e-499f-9f90-bd1fa5377d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af915283-38c0-4ce1-8e96-ca66e0464826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de6fa32d-ecd9-42e1-b856-e16fb283214f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea582e80-ce8e-4efb-b8b5-181f67410726",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1fc3d7-6f34-41ec-9f72-3e68b5c3196f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a92d03d-801f-4f62-aa4a-9b1848f4d33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfe1b98-1f03-428e-84fd-35ee86c65941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c87c2ea6-cb9f-4140-8c04-febb3c225bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af39af4-be91-41f6-b5b2-54e027409d52",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9815175e-0952-4158-997d-78430b5bb634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1cbb08-71ff-461b-bfed-d67553fc8dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995b8554-140e-4118-81f3-85bc4ef63243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b813f6c-dc91-4bd4-92f0-8640667b1e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e263e5-7e00-4cd4-98cf-9f0993d68ca9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23215d8-1f79-4301-beba-61b9a8c5c175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d1dfb2-6a9d-4e03-ba8a-04f3e22d34d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166c2710-9d8d-4a91-a586-215957e3c9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c14fa43-53f4-4c85-87b3-4462266e75aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa07d468-c334-4cce-8b30-9109e444d7b5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859fd21a-6f94-4697-b840-37fe1e5a24e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5df305d-638b-4d05-8aed-e535e414cc57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631ebebc-bc5d-4418-a98b-b492a0b4117e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "af4dde09-3f34-4d52-9250-988225fc84a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500270ca-cacc-4dfe-90d0-5d720f0cdc3f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d9866e-743f-459b-93e2-293d7fc1d6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e939e2-0420-42ee-ba0b-619fe2d7df1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fce775-ac3e-4c57-b4c5-e8fb26bfb758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "38f0869a-0907-49af-8823-4ceca82c988d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf82c91-6396-4edb-964c-7c1e4bae9d2e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb8f214-c519-4e06-aeea-53d5602faedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daee4c6a-2ea5-42d9-b238-c2b4c8ea99c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb63c4dd-4477-4e0a-a9ae-c3a92d856bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "19b323fa-8ec0-48e9-a201-6e0bc1ac2ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8453966e-88fa-43f5-a17f-34f5bd5e9c37",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5294ce92-4262-4477-9895-27c3477a08ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80bc6365-6c71-4121-aa1b-a6fcf7611764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f1ac91-90b2-4a8e-9c27-5f64d963c957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "53598e99-fb61-408f-864c-ddb73d547c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c25508-a8ce-4d23-bd5a-5d2e9fbc950d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd7b8cb-705b-4575-9937-ba278474e892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b04b9e7-8b8d-4179-8fdd-e2f08ab1c658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c3b612-b8fc-49b8-918a-e5f165a6694f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9da8578c-d1f5-44f1-8266-dfdccc015a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853e3a31-f8d3-4b51-bb18-cd6efbf2af05",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a3f5d1-1109-40a8-80b3-ab9ae0e816d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cf513945-1f43-4a03-b7a3-538d8dda97a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cad6ef-ce17-4e9c-96bd-eee5f0691bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9adba665-dced-4c16-8546-d3b8c904d092"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "60cab2b5-2a1c-4302-bd3f-feb9e0e1b4cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c6cc8dc-5c57-46c5-9997-3f029d7ee8b4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9431b84-cec8-45fc-b25d-83656c535839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cda940c-7eba-4ff0-a157-ab2cfa3a569e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19920ec8-647e-416f-8394-b827978ee08b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9b8af0f-a333-47d6-add0-210356a6bce3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "139a7267-fefa-46c6-b18a-438778cb6ebb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab5ffeb6-f0e9-496a-a1a6-e6313d37a1d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "802ede7d-ac50-4bfc-95f0-d29607052b72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57542fe7-965f-4ed4-a21c-b6e814009194"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bdccae23-5dc6-4f84-9cd0-a8a7bd065f3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7c0baf1-a4bb-4da7-b8d1-15bc7bca2b91"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a0b5066c-6fa5-4d59-90d0-9ad189e16c6d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d551c82-01d1-4843-ac66-b2a4d2594ee8"
                }
              }
            ]
          },
          {
            "id": "d9792b2d-3ee3-4f6b-a6e3-d91e04b4479c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "196e3efb-f1a4-4a24-814c-bddc185d7adc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "30e9ebd3-6fe1-42fd-97e6-e7b427030c96",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a3eb09-d679-4f7f-9e3d-d4cef3b8aea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "be1e4914-b3bf-41a5-8320-0cbe07575136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fef4da8-7b07-4398-90cd-26563e0ac709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c61fca-43d5-4570-9c45-4129e13184af"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "455f2b6b-1d8f-41d5-91ef-942ffa7c49ad",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c8fc2fe-db40-4a3d-b34c-071d206b321a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac4d50eb-901d-43ba-b46d-c038fe0aa916"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cc0222f-e38d-44eb-8a9c-2da5cb46b00f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5bcbbd85-7ebd-4c59-8015-5b0f08c1942b"
                    }
                  }
                ]
              },
              {
                "id": "6b162a74-d9c5-4a81-bdbe-aa74154095c0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a00023b-36d1-4b96-870b-dccf6b7a5325",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8599db9b-12cb-400f-a11a-d62691ce5800"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6bb4650-0478-4b28-8477-647b2a539917",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "652b1d90-987b-436f-9233-f1e1425c592b"
                    }
                  }
                ]
              },
              {
                "id": "b2da8404-8371-457a-b339-a9d297d565bb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25802195-ced3-467a-a43d-87890d0a7276",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bed4ecc7-73eb-40df-bae9-e05302425c52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "177e4b38-8f3e-4d46-a3cb-ead1e6907818",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7cabe3f9-6b50-4dc7-8d5e-f30a51ae6460"
                    }
                  }
                ]
              },
              {
                "id": "dfb98c25-9135-4c08-b108-24135829b786",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bee28c96-175f-4b9d-8d17-ff41ee7703b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "79b149a6-3d5a-4324-9604-ef8ed7e0122a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d027ba7-6bd5-49ae-aee2-21024f3a0baf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9a209db4-2e4f-4b81-8b9c-7c347ccb7835"
                    }
                  }
                ]
              },
              {
                "id": "9b658770-4d67-47f9-aa4e-c0530cbaea87",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4aba9ffd-b9b9-434e-862a-fc3e65a68af4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67a39366-2561-4d71-800f-459a3f7f3756"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "088395d7-b904-4713-89f1-fed58647daf6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f2b63aca-dd9c-4724-962b-f757c18c0f84"
                    }
                  }
                ]
              },
              {
                "id": "8771dbf5-d612-4cc2-8f31-d73a3d596b8b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba0ca721-e7ec-413b-955f-d5262faf72f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "428f1b9d-6721-4498-9389-c1b4ebd0811e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfaa05fc-4858-44b6-bb8c-20146b840ab3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "07a29be4-5b14-435e-8724-2e00218fa0ac"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b2b7dad2-d4d0-41bd-bccf-71548ba10b6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b407637d-38bc-4d69-a669-dda09150fb74"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "31de96d4-145d-4d68-a5f9-3b552c93935f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "258f3651-23b3-4527-8bed-42f6cc6b6d93"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "368b8c1a-6b14-4670-81b8-2b2cd6b90751",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "522a63b1-a990-4e45-8ebd-fcc2f2b1cc0c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "688d18f5-0567-4b54-93e5-b68d8dd5ab48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "660ef9c6-19fd-4e04-834f-45b4975851fb"
            }
          }
        ]
      },
      {
        "id": "f1e1bbc6-536a-4e65-a2eb-28c472ec4829",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "efa7554e-6def-4512-8898-5969cd5711f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c6fce404-db37-43d1-a489-70d0f9e93771",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "99a340e8-caa8-49bd-a1c4-9c124456038a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ff304f-fd73-47dd-a980-ff3c144b8f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff960f52-3a35-4cac-84fe-8672569e0fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68644c55-c258-438a-a0e3-b9bb45d163fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "974a91b6-b579-4cc8-86a1-1e3a379dd9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3797f50-de7d-47d3-8d05-063603e4157a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fffdd17-707e-45fd-ad4a-d7cc2e9c5bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b836cc40-a718-478f-81cb-51138105352f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a18f4f-820e-4ab9-b6f1-fa8e6e3a4876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "776cadae-0e53-4f32-9ad1-5c409c516005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa69465-cf18-44b2-a0b2-b495f00ddfbb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f463f4b0-895d-486e-98d7-18fbdf74776e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8db6a6-f4b1-41c0-a143-54651163e929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476e55b5-8ed4-4219-bb72-0d75203ad9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c603c19c-27ea-46e4-b23a-32f52072f6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dec5918-5ce9-4ba7-b07c-2a0ef2a436af",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50a5117-b336-4fa1-b902-8de8b09c0848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7831ebe-4ed4-41af-87ad-8665794c7726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa780a7-af63-4418-9286-6aaf5d5a7a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee18992a-84de-4d6b-b0d8-dcc6bb632f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8e52d1-ec54-4033-88a2-f5b4b2688092",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4067d8a9-b18d-4513-b42a-391824660ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc004b3-003b-4578-b3d5-1de469a6e1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d350f42f-e681-4245-8269-25a344b25d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25652b5f-bd4e-4f07-8850-49d7837c3221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4dc09ee-4eac-4e3c-8e86-fbff3f5e3daf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670d75cb-9647-41e6-8f0b-81c0c0a1f9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbd9986-c1e8-44f7-aa72-1359817b4603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095ab3f3-5da8-4bcc-a4b9-ac21a123a3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60c3c1f8-07eb-4e26-b0e9-e92c6f65596e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3201b43f-f2b7-4c54-9224-950e8f678f09",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04e4eb4-8d5b-4261-b83e-c057082ecb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c817437-fe64-465e-ab9d-a65799c7c066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecaa683-db21-49ac-bffb-89e0333ed1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "42553e27-4ec1-405f-98fc-001b535b12ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefa87c8-803b-4fd4-b021-c6151817b11b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953c2685-a769-4d0c-a218-5ff4bb46edf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc72f8fa-13a9-484a-b246-d258a58f6608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e455ba-516f-4b59-b71b-a399e4c74fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "317faecf-653a-4c2b-8814-24019c96eeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31ca524-296e-4d0f-8b65-80e795ab544f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c062167-7742-4966-8232-a73dbb8290d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a3a30c-4407-4dd7-a4d8-e92d3573361a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78807a1b-a3e6-48a8-9173-0bf15aee344d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "955a36f8-f229-4cc4-b743-a1af4825bd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a47be0-fdd1-4bd9-8ac4-4e9f776f2db0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc3874d-7cec-4a80-8561-e23ce8aaf53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8783f436-2f0e-4078-a4a7-d42490da196f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00ba450-97d2-4741-8dc8-99cb79819613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "410e1f5a-8f74-44ea-b67d-ce01a66d5e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525f81c2-b0b9-49a5-95b3-71d1d74b87a8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892f4350-ff75-454c-a9e8-ce603de9cea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9183fbc6-caa1-44f5-9d36-d6aee5a04436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e15e549-5a6e-4e83-84d7-67ba40074725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "22fb03ce-fbf5-4c66-9c34-ab33371d105b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59880ccb-2936-491f-be75-df06da7bc981",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a26c3ce-2c14-4764-838f-5e79906c359c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9101ecca-c4ba-4504-9988-c02b1dcd5428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc1109b-1557-4f42-b89d-0a811b2a9194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2de209ea-885c-482a-850f-93dd4117d095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732f69ed-784a-47fe-b691-30e486a17c4f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a654d9b-921f-484a-8b99-b45d59b97fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72302704-5c34-4f86-9b30-e4505668f7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4ce48a-fc41-4b87-8206-05158e14f324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "954d3aba-5461-4b3e-85ce-47b02f734e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84eb902-92fc-4be0-9c9f-19287b9ee774",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3067e2c0-6ebf-4590-a744-f1f885ba535c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa14e5b-a602-4436-a361-3da61a6f1203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3335d9c1-c9b8-4be6-b8d9-77715440b5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "980c0d16-8a69-4f43-a766-ed1728f3fc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cfc38b-488c-43d7-8b47-1aba8cc75454",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e8568c-9a25-4b37-99d5-9a1a4510f0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af9c6bd-d01d-4739-8c78-3b650f9f9459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b0494f-76b1-4340-b476-e44357ab796d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "23c24264-b85d-4b8b-b6db-894f311d15f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0124ade8-e705-4e07-8261-47a1caf41595",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cce4cbf-f657-47bd-b5aa-1ec62450177e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a32ae0-c1bd-4fce-9e02-6ee65a6a7102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a39442-d0c8-4d43-b8d9-31697dbe96d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e1d4bb-426e-4d64-9b14-ff00e93661de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae6df3a-129c-4a20-a1f4-aec6936e75dc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7b003e-07df-4bf2-9193-ec9cbed0707c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf40a991-4ee0-4988-b970-086c5c451bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030a44a4-c052-40e8-8faf-c6d5b47a6721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e83fac1-719c-4dd4-b594-e7317bc71d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c5fe95-047b-4ee9-8382-75e58d4d0d43",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff8dbcf-98db-4da5-918c-4018d4751528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af97d562-3bb3-4478-a116-02df74ce05b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065f6f8b-9939-403b-8293-f6c0c6f5da29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "81d83a64-8c87-409f-ab76-0d2e6cb65cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f58abe-8646-49e5-a133-19842c2ac138",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b29caf-6209-4493-9a53-227737ecde5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4917571-b7c0-4dea-ae06-38de881809dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32b3283-8ea7-4989-b04a-f52012c9902a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fa2632-e575-46af-8fc0-000bd5004c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1801b417-c4ea-4503-9672-6c2727a618d8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea901e2-7a2b-4dba-ba33-5fefd7dbe66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90874592-885e-4882-96b5-f89c8f6b9361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36c28a1-dc7f-47f8-847d-61f360472cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0138d378-9ab8-4967-bc18-cdd160becc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5067fc79-c9e7-4744-a4c6-eeb2d9e6664a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf72cc32-15c3-4f51-956e-1a599521ea91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8609875b-4a17-45c6-b9dc-607af2c1b804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bd9b64-a30c-495e-b4de-4f44aeb7c5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c44682-00ba-4ce1-812c-30f042bcb0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3295065-a7df-4529-93cb-9a2f4f3b906d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76271ed9-1848-4ff3-9328-03203ca902bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b288853c-7117-45a3-949f-0fe8e6bf00fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e03acc9-390f-42b9-9c28-6054eb987f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2035457b-841a-46f0-97b0-8372d00f690a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7072e7ec-180e-4b61-9b66-5c1e4f2d8c19",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b55e6c-9ea1-4a5c-8945-8d4a5d8718dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6bc935-214e-482e-aacd-2e8e9f110284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069bb785-9163-4573-9bdb-a70f61da342c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "431bf948-3051-43a3-8fa3-3207c2d68152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d259b67e-b45c-4b8b-bd2b-3906480e55c8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93728b75-b2ec-43c4-8d72-61f4940c047d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369dd973-2064-4b51-a425-f638bb5e4ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f388339-876b-4fa6-8cc1-312c5584c82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9434ab65-d5af-4de0-a7b4-51f0bc914788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881051f1-199a-4310-bd9d-506b1a08cdc0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e88dbed-9518-4cef-ba5f-ce1e8168e065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c421522-ddf1-49b0-a268-f25752fb7803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95acda9-316e-48db-9441-9faabf7f2611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af733ed1-2d30-440e-9b5a-7e9cefa9539b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8342df9-5ec5-42b7-a15b-b4b89a6ee660",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd36f804-481c-4654-942f-631acd7d0c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74fb02d-e59b-46c8-bf26-d907baa6dbf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411e889e-ca0d-4ebd-94bd-fd1922087ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd379946-a605-458d-ba58-c7b4badaf875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1245e765-b051-4242-9563-b84684799b22",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70eedc90-209c-489a-b5c8-6716b95e4174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c9c958-038f-4a8b-9927-4d5f78b2419d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e02dd3e-3fe8-4bbb-8752-7529203d4c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8728c5-7a22-4804-810d-d8cb9870ac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c64bba9-9f57-4ca0-b6be-94da4f1d7903",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c24d226-62f7-4306-b325-42a2fd2bb3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc14bcf-ac27-4f4f-a2f7-37ec70d526f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b9aa80-8868-4951-b0b7-7d824ff0ce7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18a6b277-39ed-4a31-9be6-b1f7c5ab03cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0486e2df-e1ac-42fa-aa0c-52f8348b891f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e373e970-4442-43b5-8b41-823e0ad0b3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b63379-adce-43eb-87f8-af2a6aae3ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41489171-f8bd-4657-a37b-cd26e37f33f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdae72d7-b983-42c3-b799-cebb898b360b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4754b6ab-d6fe-422b-81f6-2cb3b47a636b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64a6382-02a9-431b-a905-3b5d6f1088bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75405591-abd4-45bf-8860-d752e0ebb244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be02dae-d49d-4972-aa32-5642265c69e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3ac94c-6467-4e1e-aa6d-a7d66836b410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f4641a-1c37-4020-93ca-7152501044b3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6431a8d8-0607-4dea-af05-d3448894515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ea4b3c-a9c1-4e31-bbcb-9ae94251b31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec490804-f47f-4cc0-a8be-7fc779adef76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a28ee45-ac26-4f13-ac3e-20dce6ef458f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15e4b33-168b-4c3d-846e-e907df137810",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4423fb11-4f34-44f4-bcd0-8d998e4d6f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09581671-484a-481f-9e30-6e43eda9da85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62945f01-5cfc-4b12-b1e5-2245e1695601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c0ec93c-8923-4eea-9218-2ef2c26ef9ec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ab41db1e-6c71-42aa-99d0-6f9748b74a6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fe5e445-5860-4658-9f88-d83c0494d660",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05a777e-f8ed-46a6-97f0-8a1cda8ae2ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "800b7a95-3d41-48d6-af7c-65e99ccfd0c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf79495-2a7d-4424-adea-7de5a8680dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b5ebe46-5688-4832-ab5f-9db5db728fde"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a64e1d4d-33df-431b-9cff-cf766ed63a0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "162ab524-0f28-40ae-a6db-8ea4799f6179"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d0cb51f-7086-43a9-ae2c-e65ee2d1986a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b61f38c-8bf0-4f37-a58d-1aac8f3ac5a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4fed344-01db-471c-81cc-734d1cb6662e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dc576293-7ec7-491a-8c3f-8c5da5683b82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0116505-d529-4d95-a41b-8dd9bc244487",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f175f5e-3a33-439e-b3a4-1060e896bcf3"
            }
          }
        ]
      },
      {
        "id": "780873d8-8c55-4639-879d-cb7fd004f1ee",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "98fd9b58-fa54-485b-b5bb-e335685c0eb4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b86457b8-76d5-462b-be00-669274bad61c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a98911e6-258d-4562-a74b-48f5151f3247",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fa38a9-fc50-4674-8c3b-fa514673b533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b18001f-189e-41d6-ba40-ae62b232acc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d9b151-576a-4eaf-9756-da7892c85eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee4e99de-5e3a-4c6c-bd21-60ebe3b0df75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b5c977-b8fd-4dfd-910a-aeda87d55864",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f986ebb9-7663-4604-b803-fa21f0284917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73378415-7721-413b-b7cb-cc0ea24d8c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2309dd-4087-4425-ba4c-2ea201a901af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "47ed15a0-31cb-465a-a3e0-279b69d0317b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9db0d6d-882a-4fc2-b79e-5dfa90252bef",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f911a6-6307-441b-abfd-203c050840e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "867c6b0a-2eb1-42c5-a6e9-d979645cf07e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e68abc-f7bb-4008-8b1b-f61b524a5f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c51d9076-1d67-481b-bac1-9930f9c92174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25953a20-d941-4742-a458-eb3789a69fee",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b60aa83-84ae-433e-beab-62d1807eb7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a08d68a-ec02-47c3-9750-cde736fbd85c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a26653-ba21-4f1f-b93b-e7e6e1721469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7af7712-5454-447b-9690-99f3f93f8bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02f98b7-9647-4d92-bc66-b5cd7ff10c9d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaecd639-168d-413d-a107-efad086963b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "affe9788-3a8a-4574-9251-8cc146455aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b4721b-7edf-4eb9-b7d5-cf5cddaad9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5828e9-fc48-4432-aa2b-38a8d8e6ce96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e074b45-c234-4bfd-b0f8-729e13670b11",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1d2b2c-933f-4496-adb3-8762da26fbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c67b90b4-c134-464e-8ca2-0cb8e52310df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be712592-fedd-4c87-8c55-1ceec8bde315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb4f46a-2ee8-4749-9383-4ec2ccb3910e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495c8ad2-ca6f-45c1-bcf1-18a066b4b834",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b53d4f8-f02e-4348-961c-a8632160c311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c69847-a617-46f6-8b6b-0295a326cca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3261b0-a19c-4978-b1a0-8ee1396d732f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "03f177c5-cecb-48cc-82e1-515e9e902a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43c292d-78b3-4b93-a609-e5c5203d5792",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd591c2-4933-4aa6-9e20-487b1c175c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad45dbae-3ae7-4c56-82f8-42466e251626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c16e67-f129-4b9f-8a60-b9abb0318777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ddda0a0-de8e-42c3-8fa6-3de42d04b3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe5ac3a-525d-4eeb-9ef6-cea2a6ff49f9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d725eb58-db90-484b-9dd1-8a6fd3904a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45683427-f470-415b-9234-e61277f0e496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebc03e6-1ed7-436e-99ae-51c000a66fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "432069bf-55af-4651-ae15-27425f24dd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b999f9c-9e65-484b-b0e2-fe08473fe5ba",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a08835-5451-4657-a5e1-efb66ebfe042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "689344af-5222-48ec-befa-90b96abf7908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15746ecb-37ac-48ea-9c31-8213d2d51923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63befb9c-75c7-4448-bb74-11cd01954bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6afa766-dae2-429c-9db6-014d1a1b3dc9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c2b79a-570d-4cc6-be9f-ee4a8c1e4c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8e06b6-44ac-40df-aa4e-b70954300879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cdde4e-414e-4536-adfc-05d9ffdfe229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1b029d-a6cf-4a79-8c3a-09bcec158c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5944d787-58e1-4955-9d75-7ca021b1160e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5443bbff-a3a2-4d4f-8d50-8762f09cc632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db875256-b7c1-4578-b45f-4f2b6966370f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45254a3-9c5d-45cb-81cb-79780b3d337e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa45d1cb-3be2-45d5-83a8-7925578d8d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c3e45a-446d-4fea-aadf-b48f61e8e3ca",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a93b9e-68ff-4d4e-8cdf-deda7b78998e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f680f72b-047d-4491-acdc-ee3aa691c90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7927f874-868a-4640-8909-63960db819eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff31f6e3-3fa8-4b6e-9275-604abdf63872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6f083d-a679-4e8b-bf6e-60af93c949c2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35388c7b-f95b-44e5-aac3-ecca3f455fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9657f218-dd88-4589-b17d-cfcf8ee17c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cccd347-2ff4-4ec9-be04-0f95ddf7b0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e807ee5c-651a-46b4-ad76-97fed0ab9896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b71b33d-8f0e-4ee7-8608-09ba6cfa28ec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7226ae96-b7d6-4571-adbe-4aee12056eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a81be127-0873-432f-b847-ee012a062efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b140b85-9cdf-480a-8e63-386cca1b8b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e594019b-e1cc-4017-a21c-4e90b323b0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2afa023-929e-4b92-9002-281a2823bfe5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae04491b-1e6f-49d7-8166-3868e8b1af6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd669c3d-b2ec-4e13-b915-603648940957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ece9725-8756-4195-936e-3ee9faadd7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6824b69-80f8-4c8d-899b-3d57b73e079c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e814ad6-70b3-4b06-8d07-91ef7dd9030f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52202051-c7e5-41d4-806f-d5e6645bfb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28b034a-3613-49cd-b6b9-7a1e9b5d2bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a5f74b-170e-4496-a6b4-4da7afce155d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0449dc63-a7ab-4bbf-94a8-6cf4d7433a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193656a2-0e63-49e1-bb5b-60b1841d7d57",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81a240f-f24a-4d0c-9aa3-7018c37de355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2a57e6-caab-4810-a1ce-89ee2f13ec1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c801f2c-31b8-4795-94b4-e7d2a3e82561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5e3048-91a3-4d92-8355-42995f2a4594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cae3f59-d3be-40fe-b271-64418a507100",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ae9d92-a4e3-4b82-8320-35b4e6942e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6174e7f-c72d-468b-9d11-3b37b600ef23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69935a29-b4ef-45b7-bc4b-8ff9f4e80662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f2511a7-cef5-426b-9bab-78b27f18a887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17cfdde-b2a0-48ef-a2bd-cce8822b9694",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6160c698-c6c4-48ea-8def-246fcf2410e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f44fb0c-4e65-4632-8acb-3bbded4067c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519c83e5-e08c-42b4-aa5e-0b00cf8d0b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2deb359-2d41-410b-9ea9-91b10a40bf2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b767640-524f-4aa3-bd6f-79eb5505919d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2833fd54-1c0c-409a-82fc-fe6fe644e2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d773d35-a442-4efe-b151-98c417b14526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93679072-01f6-405d-bde5-a71edcbe03e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2e1b6f-7b20-4a83-aaea-49c239fb49e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9a77ae-6e68-4b11-9dd2-c6564617d115",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4136b013-ec90-4701-aee6-e01166549f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454e19c1-9fac-4bf0-b2ad-0035ad7d2232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b87cf5c-9240-4e1c-bb8d-9d5e2e11dafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87655763-44d1-41b4-880f-3752b35bd6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596d43e8-71f1-408a-9399-f77b0713c8d9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4837f595-9bb8-4588-a62c-bf426ef5f96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c887b74-f602-4b63-851f-7874c295dbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b901d70a-664f-4c43-8697-a54cfdaa62c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fee45cc-c1d6-4ed1-9e32-f59da5344f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90247faf-359a-4196-b3ef-c5b6e7018e3e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b11248-b701-4c05-8cae-02bd2f3b257c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ab0a8a-026c-4a8f-9e66-3c445f7fea6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9d8ec5-f2a8-47f2-856a-467ee4aabafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e2b837-4d58-409d-be4d-5eea70d4188f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed476959-01ab-4f63-b496-2aaeda5fb9c3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b7afc3-0f0c-49be-a4e7-63b4944d65a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03188526-ffa4-4a13-a432-6223eec8992d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c2a084-ed77-49eb-9868-f8f8d44607c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90a77faa-f322-448a-9509-3dbce9cb8370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd1516a-145b-488f-8596-4d9d566fb985",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422fdebe-bf49-4850-b423-4680cd4e8b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441f2e07-78a0-4cd9-b171-dc5542b8b288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e778383-ff31-4d75-9e6d-7003fbf760f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb3e857-8ff0-4eab-9b0f-292214d942e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b0d685-0232-47c5-af8b-5e74a1c56622",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930b3bf2-c488-4ec1-b368-01bcfa3c4eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473be95a-ca93-4e55-b802-1b17a019933b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c173d6-4604-4140-a1ee-67fab3279bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28b9467e-7db2-44f5-b72a-465bd473f8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5efade-644b-455f-89a4-860ccaece219",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce1ef1c-0db0-4190-8948-5289e9f9c7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101a3417-9e2e-4261-9ad2-eecbae335392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b1eeea-40c6-4a26-970c-2456c3abe4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "889b9849-a4d6-442e-8bf5-9c7f5e881a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619c2602-eea6-495b-b341-eef4f6e9ae7f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9b1fa3-41e7-4073-ab4c-0a4a4888e548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b3a1c8-5205-4094-b137-c365592bce08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00526d91-efe5-4b9e-839e-71a188dd9398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56728466-2aa0-4ba5-a0de-5d11230fda32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323ac2c0-da94-4657-b31e-38887d48494b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08287566-7e0a-49ae-985a-a10f394bc924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda708a0-6d84-4d80-8e6d-db3fb76e2947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d091778-a240-4a03-b579-4b84ccda3694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6157a499-865d-4a4c-ae49-aa420fb69531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec12053-0949-4a25-95b7-56569f52c2bc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96d63a0-b55d-4d3d-8307-df99c3b10736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcbce585-f3bd-481d-909c-0c3bd948e011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee77ebe-8c0a-4853-b6d3-9fe90c9ee1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c9140bc-94b1-4dd4-bd93-212d0a359b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1a7b76-6c19-4aae-a327-4ef50bda4924",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bafc58-2e15-4f4c-bbac-eaa06a19d3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8661769a-3e85-4884-bc0f-ac712620a5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0c574d-d67e-4fe1-a773-9b6d01a5228d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d2294f-a26c-4217-9570-df53e30c4b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb4e1cc-ef14-4ea0-a4ab-de4bbef37034",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0004a2c-ce4e-486c-8fcb-5806d464b08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9974ee3b-e1fd-4143-8c57-c264e5743743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455b0b8e-1f91-4f1a-bcee-df65ea25d9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2958e6aa-7dc7-4179-a017-d0b746fe76c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76337ef-8e67-481a-9d1e-c2258c046aa6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dabba6-0f3c-42da-bd14-ef1baf837f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8812a2b-d173-4554-aec7-d396c5f34f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5aacca-53f6-47db-839b-0b7ac26381df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8ad191-22a1-47fc-9585-61fa9f6a74f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe346be-2910-49af-b0a4-b04a63745523",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d414dd-3ba7-47ab-a441-53e826707cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657ef006-adb4-4300-af6f-6263816359f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0f9199-0368-4d28-9d1b-16fde90d6a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c934ec2-2c6e-4c01-a3e7-25392bdb64ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c371350a-bbcc-49ff-a672-c7e0eaea093a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c35ce0-c8c3-44ed-86a9-f506d9a63cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa524e82-71f9-46cb-b273-4f48fe97ecc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120ea542-43ad-4c3d-8c01-6d0f35f84706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd052454-c07f-44d7-b2b1-ff032fec35bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b2a1e1-1fc5-4235-b529-2f294d82ef66",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55f14fc-7834-4dac-b0b7-8b599419fc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66251c7d-8ad0-4b95-92d9-7ef2e7a2855a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf910cb-84c9-4005-b1b2-699288288a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de8b1675-1b55-4ff8-8c67-59e3b0229852"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b96f475a-c664-4440-8251-0a706d41d707",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a90fbb48-abbc-465e-a58a-8208c30b63a8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cafaa6-70d2-4ed4-acfe-8801ef153328",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a275fdf1-e772-4938-934d-a8dfd32c59a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab4fd0c-127e-4114-a09d-189be891bf34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "688b1af5-4c13-4ddb-8906-c972e05d7a10"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6ede422-1cf5-43d4-b3b4-e47324c54085",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59381538-e73e-463e-b17b-f603737dfe5e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a1e1145-052f-4c3b-8872-70259cde16fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1ffc4b5-fd17-4d15-a52c-0acf8d838531"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52271881-bfa0-4735-bfd7-1abb179d1372",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "51260ddb-2096-4c22-83ce-130f154e0b22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2a8e989-dd3c-4b90-a46a-6a348a723e32",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87257d8a-04b8-4850-8413-54d31fdace95"
            }
          }
        ]
      },
      {
        "id": "1fdbdf5f-3211-4c54-b256-baf24aa53cff",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c74d4693-9e86-410c-b8e9-3c2d970f29db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a33fe608-45fe-4c9a-90d1-7607b897ad4b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "da1c3296-96ba-40ce-99fe-24240ca4a932",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a7395b-98c2-4408-9856-01ddd1a78b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded6e606-a497-4824-9448-89dbc0b48a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c212cdc-459b-48f7-85f2-60c2fac340ac",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f313c6-0c2b-4159-aa80-a5e6dbdf595b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07742ae4-c93a-4ab8-a4a9-39b0be509166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c464a789-6807-43ae-823f-ed11720333f4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8275b7d9-46c9-488b-915f-9c9460b30b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5e4da7-9452-4c24-a2be-2425890f7307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7819ed11-97ca-4100-9317-d1c055e90128",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9820cc23-ea49-45ce-aaab-534c173b3ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99541364-9ed0-4f65-aa39-424433592ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e327d6c-c737-4c18-904c-e9ee898b6139",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3cdd5b-efda-4fb7-83db-b8a64469f5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac1603a-5601-4848-87bb-d44abf67e314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfc2326-f6f9-44ef-bc30-c0f6656cdc6e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfb7264-fa52-484d-bd79-259e5c81d86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4af90d8-33f2-4c0c-ae61-ee0365b2e9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faab664-9d4c-41a1-a4cc-f0b7e5ee471c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e5ec55-09e8-47b8-b78d-720d7ba10dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4655780b-7816-4bbb-ba60-a19644bce6b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daba7613-d8df-4af5-a47d-052e9840b6b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829d71ba-da52-41b1-a629-a2d23721f1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d4b26f-85c9-4e52-a994-2ff7c9d4e688",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c482de-3c45-416c-8e3d-c9ba9d1e4c47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "976f81eb-5a78-4f9b-9356-a2f7bee0c6da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be2cac3-fe16-4aa7-9ee2-e453a3b3ef17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ab8e66-d8d3-4278-a4c8-cf38aacc0f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5f3822-d3f9-4509-b6d8-0e302b363663",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33def26e-6445-46f5-b003-e4dd37832662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d8c9ff1-5e9c-440b-803f-fe31dd447ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8200bb0-3889-4e36-a52d-65f3276401d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc4db53-ed71-4f3c-985a-ab0e24d1c4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c6e16d-1f24-4cbd-b045-87b8352aabe9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dee023b-0ce4-487f-be6b-754c30905152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a9e337b-9972-4e6c-b8df-9743e2230d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b02a3e0-f67e-4401-bb1a-8f19e139a1e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd2cccc-c253-4d9c-8941-23182d1a3b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09028bce-2e91-4766-b06f-0f440656ed74",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffefb6f-6147-4f2e-bd8f-51379faad92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74898481-5369-4cf0-8f85-7c2d79b1408a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291f15be-219c-43cd-9b25-9720f475f770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab718b85-3097-4927-8f6a-3d7c4920dc6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192a42e0-65d1-4015-b33e-e43ee17b3a7c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfba0257-96b1-4efa-b525-e1ce44b5e420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab216d24-e27f-4051-9d41-dc36b9042f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3882255-fec5-4e11-be71-fa24a1b8c22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b8d227-5f87-472c-ad14-271111d561e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c42f9a-8aea-422d-b9b2-e2a6ead3f177",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97802cf6-a46f-452d-93a9-7e32bd2a2671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5657f9b-5441-40ff-ac7b-33ab61980f2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760dc01f-dd3b-45aa-87ac-176e0f1ca6e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8398d593-0014-4125-9dba-98fccff2d010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230f5116-b4c6-4aef-a60a-65aa986b44ad",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d96261c-e73b-4864-ad32-d674f8a962e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2da5f847-4cf5-427b-922a-a10d6a6b890c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b13dd6a-46d1-435f-9f2a-84511144a793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86597760-1fc4-41b2-93d8-a06201eb8fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a264fa69-a5a0-42a1-8a04-3f5fe959fd4a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77729d52-ce0a-47e5-8b91-4292c4923b35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29bb4eb-a9c8-4732-bbb0-0dd1e5cd68e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca32d58-35b6-4436-94ad-74cce2b19285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1654a7d3-affa-4e55-97f9-4b239b259ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6f8ced-d8cd-4b2b-8c2e-6ab8c87a8d37",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d62780-ce2b-4ef8-a55e-e861099bc9de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0804a875-43c9-4217-8bb3-4402911b7127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca466ba7-6e8c-4c07-b668-07dd8cd0a86b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a826ef6e-ed33-4694-ba84-a4dc3c54e1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0e191e-ad39-4487-a711-ded7fcd69396",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28e2eca-69b3-49d7-9039-e5e16ee5480e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83bed770-6003-4c02-9e27-faa094829a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9573a980-6ba3-4e6f-b33e-a1797caf9887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad47ace1-99b9-4606-8c16-cd86f5bf13a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a284e747-4785-4ee4-a182-ae8fdfef4722",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a748ffe-0f5a-40e0-ad01-0bdf72338941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c0b02c-83e8-40c5-92f8-26bc188d7cfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc68c519-0521-4eb4-8444-29b228b38124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2bb6bc-7f73-4bbf-8c80-4abec08b1c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdc1344-0cae-44c4-9c85-2e606fbe2c7e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19b4a94-b6fc-46bc-9483-9e7ef2caa789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddde3fc-9701-4d76-acfe-36a923738c99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ec3f21-58db-4ebe-ae00-c5e478d54f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e0c893-4fd2-4116-afc9-a906611098b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e98c9a-325a-4c89-8570-b93770180f94",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1403a24-cf82-473a-aad9-6c36485c4475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927e9ea3-9b34-4ff0-8549-c0d80f0c0fa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1f1436-12a7-49a4-ab6a-c5138b2432d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e935b50-2002-49ad-bc8a-24eb42609f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fe4c24-ac4e-4805-99d8-06febf4250f2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1b3d7c-94e5-4471-8c31-5fc706c24045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ff226d-2512-4aa6-88cb-121adc7ec18a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae800352-4319-4e67-91ba-7dabf172a34c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffecc7d5-71dc-49e0-b583-ab265f33b94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fda057-0271-4596-abc5-8da6b67a8a4f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc0dcee-faeb-402f-9a79-ff90bc8c8870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814a3c54-1db9-4379-90c2-6d42acd5134c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acfe694-0aaf-430d-ac78-ccc46106abc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee7aa04-e6d7-4e13-9a7b-90f88f6a2461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a0f81e-1d07-434f-bdfc-adf9d5c7a723",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e547188e-be34-474e-b03d-e65fee59f2b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d436fcd-b65a-4ac0-bf9e-38f6426a04f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194bf2e2-655b-472a-92ab-386fda667f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a38ee441-771c-406e-ba86-053ca8fa54d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebd71a4-ba85-4a81-a6d6-b6e9ed4c11d0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b5b492-dbae-4e65-b2d7-17db5810c164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e6fc272-c51c-4759-9c91-2c809b97f445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "762df31e-f79c-4bd5-8cee-92aa3416add1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321f5a3b-adf6-48fc-89b2-493623f79b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e517b30f-97b5-42c3-8de4-9dbfd130c72b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c219e257-dd25-41e3-b85e-7f04ec4bd167",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4213618a-a160-4dfa-a2d7-8fe71752ed2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36956f37-46fb-4324-9d7e-8dd1a37b28f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48800009-7404-4f1f-8cda-1eaa00038915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d933a6-d45c-40fb-9833-c3af5a5b3299",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889c410a-fa4a-4437-b73d-daa0d87a6086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a29a09b6-75f5-4413-a2a4-ca8fc0e585d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76831da0-9018-4dbc-b8bb-e5d8745c3698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265fa47a-34ab-4b91-a015-f371b37eeb31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3459ac6b-b946-42a0-a4fc-f67c00099e11",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325c637a-92df-43e2-bbc2-4c0280f634ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a9a496e-d1d3-4090-9220-4a62afd7351a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e8ef5b-3d20-4ef9-a058-7818f12d31ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c50799e-34e8-4fc2-bd25-f0efc61dc044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bec535-180f-4df6-8798-15306a80d693",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913ec328-ae7b-4f76-859e-a0859cecd276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a0a70b-38b4-404a-a5bf-68155b74cd5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5e00c0-801d-47eb-83a6-dc8d60d78904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5690f2b1-6cbe-4139-9ae0-eaf4a3f91d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc35bf80-ebb4-435c-b1fb-4c86f7e7e909",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c829261e-14d8-4e87-be9b-af4ee6d6dc1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5d330b2-8e2c-4794-9dc5-2aab10f82f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af1b3c7-a5c7-44f0-bb27-618db8b0e476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07ca57e-9d1a-4c8a-9821-fb4d665e0aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c369c5a-c522-453a-b156-538165b93cf0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a4427c-0a15-4796-be7a-f6575177bf29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ca6971b-35ca-446a-af14-f656772524b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f659497e-c353-4f1e-9695-13c3082bfe38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea57e04b-5dd6-4b8e-af72-3930ecc32a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38515722-6b07-4cf1-b504-d9bec03438d7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a15755a-9791-4d68-8c4b-96e07495cca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b39ac375-2359-4774-8262-c70b07d35205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00ebc2f-77f2-4018-ae02-29bd363d7128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0953ecf4-8aa5-4749-bf2a-49d01522aeae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15d8f2a-8c1f-460b-9ebb-d001672d0520",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf97cb02-ef4b-421a-900b-3bb5898ce5d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dea1b86b-87e9-42fe-be66-95b2f3f7da40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd6176d-c012-4b43-898d-fa55752eaefa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782bbd67-9682-4293-afb6-3f7b1bf95ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f366624-a1ac-4b64-a5f5-109ea0b5a9e3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c12170b-01d1-4574-b6cc-c2bdce5c7c41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81d383e3-abc5-420e-80ef-4b94dc7f52b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdf1ffd-e744-45c4-baf1-74a051e2ef54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f163a38-0b97-4c46-af54-5b1771191cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3806224-801d-4db6-ad43-9d3332c42d89",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5313adcf-660a-4eb7-b878-ab7c93842175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb6bf88-4bad-4bd5-9875-6b4894b3630e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9dfe55-8de2-4958-b716-59cd4c602cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a889ad-df70-4035-b0f2-5419e94fb5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5b2596-da61-4971-9c38-5e2723a0d878",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5248b9d6-b72e-4bed-90e3-912610429720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c251dd8-0b0f-43e2-a2d7-8b3dc596f6b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "561fec91-16d6-42bf-9d99-215502615bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ba25ce-0f68-4e42-a219-d4a489b3f3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c47683-2ce0-4652-91e9-746cf576efde",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e86bb97-6690-4c20-8148-fbc88ce9a578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bebb7001-ded4-4637-a5f8-a5eb9f78028a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c498666-3462-4c4c-97a2-8f9165f9d669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63e533b-4cee-4955-b3b3-c0feed87384a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7f39f8-4848-431d-9044-50ea2c643bff",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6904bd-4fee-43cf-8529-059d94ff9fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6849f3c6-d2fa-47b3-994d-b3efddf90c56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c659c8da-2bb8-4ae5-84f6-d4d20154566c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdbd7ba7-273a-4433-86bd-d08fd3bbf279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851cab76-cbdd-4c58-9f5d-3b3351c7facb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ba783c-f20e-4550-b8cf-f549040bbeed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50b08e2-c53b-46b0-ae5c-280ffe550336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27e0682-c830-4231-ae03-1270417e13fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5aeab8a-f26b-4a65-9b18-49293a73e096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f355c03-b0ee-4cce-bed1-464adb4c0130",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d98b9d9-f780-45ca-a160-12e08ac861f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bfc514d-6f19-45e4-85df-6eb3ac2a6d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7915904-0e5f-4171-8bd3-8cfc706dda4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45c1048-004f-4259-a19e-4d5010d8f799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4078a230-4058-4232-9e78-917297cc5ac6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b480f4e-1997-483a-8a00-2b234fbe120f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0908bd-4c9d-4cc6-9e84-4a14f11c44c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cea06f-3f85-4994-a71c-f9987ff024d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05176b9-355b-4339-9214-7f6efba8d6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c3432a-7dc8-4f70-bd64-0d796ab1fa25",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433ed460-3185-44f8-b5dd-0d05e7fa0454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcc1981-ef88-48ac-88eb-7883493fc729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d69a10-30ae-4a99-bd45-887cb3cb6c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc403038-5f21-4308-ab5d-fc19a8ebd826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e9db28-42fc-4a75-9562-5e37d7141bcd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbca0b9-e113-4fcc-80a2-afd416ddee50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73889393-6b21-4bfa-975e-05a467a8227e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32534475-4207-4af9-865f-a77e76865df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a261b576-68d3-43a1-8504-f2648add3f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be44fa7-6978-448d-a4b3-6cf94fbd21f5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0754f0-7b19-4423-b656-237c40dd20af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72a50e1-11c6-43fd-ad37-3a08d37f6e56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb1a473-53b0-4ab5-8665-829e438f4c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e109c2d7-9721-4a02-bfb5-48f636ca657a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd358bc8-55b0-40ac-a361-ac34f439d7a8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f6d78f-a3a6-4f9e-a8b3-d296f4244f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c464ad-476b-40f4-9ca4-4563b1c1d6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2038f833-de89-4b52-8d95-94962d488abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb8c6eb-73c1-4ca3-b98b-59fea2dd9272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e69544-5526-4003-a1b0-7757977860e1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1671650-d536-4df9-9f0b-87894a62d3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922e4a5e-004f-47ee-aa6d-9b5f9ed5e421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5338448e-3adb-4ecf-80de-92b0526610c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85709090-4cca-44a3-929b-f95288a0c35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8c0341-e319-4d29-ac3e-cf4d2ef14f45",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841049a7-b078-48eb-b626-4993455b8a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa077a6f-02d7-4aaf-bfcc-e81cc63bd744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c8c3b0-58a0-4219-8aee-2150b6fc0457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf5d1ec-2e2d-4544-b383-6f9f4076507c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6aabe0e-5fd3-4e36-bbe8-409c15096bb8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d81002-fbd5-46f6-a7de-12f00bac155d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede0cf0c-c961-4b8e-a4a2-dca3a2c5b535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28399ae7-d433-43fc-84a8-64b455e3d5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ffb6e8-b61f-4f5f-ab59-a8cfec55c2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54efdbd0-af5e-4748-a279-a014498b677f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e58f9dc-9064-4b9e-9881-4005de281740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29cc6b6-980c-4985-8e08-6c7568a18e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4dfb2b-bffd-44e6-8e4a-34b3acc9ce30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67955805-7bf2-4fcf-b903-d48d254700d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8428173c-789a-43a9-92cb-fddb53a86c10",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132a03ee-bfa5-49d5-b9c8-a9c2df48dd82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d73f93-94b6-4cf8-9f1c-7ff6c7f501e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3291eea9-c928-4e42-b0fc-fc6a2b245ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59462a2c-3b70-450c-b98f-e22583ed0abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd3d17a-4364-40ff-94bf-965f05e8ed0f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac16cd5a-df2c-4273-9089-9af58de03ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5e0b11-22d2-43b7-a40e-980a51e9987e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aacf8af-ec60-4ecb-b9b7-25e43e5337eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b245f2d5-a586-4a9e-badf-7cf18c63dc2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73253a85-2427-44fd-bf56-7a303eef9f97",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d0b7d3-115a-4776-997c-6deae4f06df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55085394-9584-4214-b93b-2bf119e9c79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1070f940-f723-458e-9b00-847facee2b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea5d21f-6917-408e-a10a-d62b6d1af7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34dbf222-8016-446c-9cb6-0869fccba87a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edd0982-dffd-4904-a2bf-42975bfeece5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b11413-6afe-4190-9d99-f89682967d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffd0f7c-7d25-4aac-ac2e-64d22e08138d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ddbbca0-6cf1-4045-a1c2-51d4aadc26bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5969fee5-d48a-4cec-9be2-0bd6f43bc35b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c0de40-119c-448e-b9bb-de11206698a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef3aa10-477b-43c6-92b0-7af3019ebd6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb2c5c6-da8b-4d03-951b-b9585e24e019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21466f4a-e1b1-4c81-ba8f-44a467907038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f5927a-5a58-4bf0-a682-81e80d51ebc4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c1a3e2-7629-45b6-9049-eb5a8bc0a94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bf8435-8974-435d-b7c8-dc5b5b77dd37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b8f87c-4c00-4511-ad91-77b79a138fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03e2067-f45a-4b36-980f-697193ee505a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e9a9c8-b182-4c9f-b22e-b2445a00d7e5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeafbf9f-0c77-4dd4-8086-7c2366dd11b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469ba68c-5872-4447-ae5e-001fe29b9900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5fbeb2-1f43-4272-a283-f5c326344f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebbe8b1-dfc5-4627-b0dc-bf38bcfa2ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88e186f-a359-4576-b56d-195ee5459498",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64abec0-70e5-43cc-a784-9997152a54fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79ef5df-080b-44ca-90cb-043da145b6c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d89277-4f7c-458e-abb1-bfb4809c8c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1a1830-ee5b-490b-abc7-2b92704e066f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7729344-0ee3-4bc9-918a-ed6eb91ceeac",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ce5852-9bb8-4a9e-825d-06e43a38c253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52174a9b-8d8d-4608-a1f9-f392edbaf728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f6dc7a-a365-4d46-8917-f71e16748632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd86bd36-b94b-4913-a6bd-daed37d0389d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd0728c-6d67-4d1f-9d9d-25318b90ba32",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61763e3-31d7-49f8-ab28-87afd9263f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e76a66a-fa6a-4b49-8b49-3f0f3fb13168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c3ae2f-86bf-4ce1-ae86-d0219f8474fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197967b1-e94b-44d6-b007-e7d876e55d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002a4099-3ad5-45d0-8b0b-293bd8cd060e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67afd72f-438b-4854-aeac-0d91682e779d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a72c5a-fac8-4e8e-8495-eea2a5ab753e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba97aca0-7842-4c1b-a483-ed00bdd9bf61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c7b2292-4175-4e54-a7ae-e2f4e63388f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e7c197-6867-4ec9-8ae8-f93e1190ba29",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a4ac89-4141-4dfa-882c-e6b5f6bdf674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e1909b-61dc-42d8-95a6-e4ffd777846c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fa99d6-eae2-4456-9290-96bb35de20e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d4891e-f72f-4f5b-9794-56879e31d705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6579fb-bf8f-43ec-9174-fdeea9eb381c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42599a42-e449-44a3-ba21-a8a92843ca70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c68c3c-c215-4f5f-8447-b49f7b87992b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e6095a-8aea-42e8-948f-79cfb0c1860e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589113b1-29bc-40fc-9075-f34f811eb833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b9dae1-a924-497f-8b92-861d3b099142",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e728e750-a006-4b17-a8fe-9eb960c9dbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a86db0-924c-46f1-9aea-1f77535673de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81a458c-d6a1-464e-93b0-5224910db702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c69104-4885-4c0f-be09-be4700fb09d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c629d50-39c3-412f-af81-1286265f1939",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16aa93b1-e197-4138-a280-4998af990f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8ead0c-4ede-4530-951b-a4fcb51ce91d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c53d5c-4acc-4c1e-81a3-e314d251d807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ad5b7b-d26d-4efd-81f2-965a89965ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4cb6b1-b842-446f-a559-5cf70c3a5408",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aac1726-2388-47ae-a2a1-dce96b812205",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb560acf-0253-41b4-8790-9041bf63be5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e111d1-a951-4d25-936d-95a39dfb5f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877c91d2-fa0c-4323-afda-c93a40bc0b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f4fc14-8ee9-4029-8912-8fd02252d0f2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44ad572-8490-46c5-84d2-7a6cba4fd7da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80b069ae-7e94-4c94-8569-e091aea8f853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f136a326-e25d-42d2-829c-1776f94ee661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e15d45-8451-4f67-908c-18e4a1d922fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d17525f-5ee7-4d0c-a31e-fd04f91af138",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29d7d80-ba15-44b8-980f-aaa7e0e47274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0be43952-6c26-46dc-8c42-ef65605f0dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24093942-86c9-42d1-b020-8acef71e05f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0ddb22-1045-4ff1-83bc-01176d06ed62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78ca3d8-a368-4d25-a410-c7b572de553b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7434ad33-bbe9-41b4-a655-74715c7481ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96aeec68-59e0-4fe0-ad5d-31393934efb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f3b905-0bc5-4568-8072-ffde21ac2eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11bf625-e412-4fc8-9fef-9426dcb64bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791f6745-2c8c-4668-8155-15c04b352bde",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b355b982-ca28-4bfd-8141-42f2ddb44b3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dba0831b-51ab-4171-a724-0d486113d58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f136f5-6bb8-4ae9-9a36-0c19a9bb2cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd768fe-1ea4-49af-90a6-7d22648437a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7242f46f-c1af-4ca9-ad14-d31a8f39d419",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c6a4e2-13ef-4277-bf85-04768fd5f8ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef36760-f288-4702-a6c4-4a3bc81c46c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3833b775-afd4-4e74-b23b-58ec89af68ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4d6b3b-a416-4ffb-a669-11df6daf370e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099706b9-102e-4982-b6a4-fb328b36ad62",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6083d7-1b2f-48e5-a73a-3b6c0427cb47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4687dc2c-698b-4f12-ad4b-d7cbf6fcbe9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a814b92-c846-4f40-94d3-00fc50277697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e942316-aeaf-4cfc-b602-dc32868c0556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd4d12d-a8c5-4889-839a-2d3b1abfbfc0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a81abc-f321-4542-8b50-db43237d7bfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5b30118-0d39-407d-ad6e-419ddbaf325f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6b3c19-b798-4ea1-9a37-9ad05365ffde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3bfa13-fd00-49f5-9aaa-5f04bc1400fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571e70d3-fc01-4c95-9d2a-401fd4d04adc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b632de-56f2-4dca-9e2e-990e2d325872",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53e0c179-10ea-4774-8e9b-27bc2abc4313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ba5378-2de9-45b4-bddf-04fee613d72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f883e42-0536-47a2-ae98-a2ab099f63bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6084ea1c-b245-4bf9-ba59-b75c9b7552f8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669a0eb2-4573-497e-8cbe-8f182e9774f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09e04785-65da-4d50-998f-c5602e3cad3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b49944f-8639-498d-afe0-22ebbcb3a39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512844ac-7dfd-49f0-ac70-a2923bab249d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e9d654-ce8e-480c-9aa2-3985063281db",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71d6fb8-dd5c-43de-af9c-996175ccbb0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "167c2c91-87bb-4938-ba4b-61616c00d70e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0025b00e-0fd7-43f1-a1b3-212950d815ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd3b19f-a737-4574-ac8e-d8bf2659fd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d290a1b0-e729-4739-85d8-536e082e3f31",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dadd78e-7930-4e81-856d-52396fb42d86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e803fb-ccbd-42c3-a02b-21aeb5559e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4969ae77-eb3f-4522-9eb0-d5194a37dc44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36abe996-9c78-4059-b38b-577f70028ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bd1053-693d-4030-9f90-223966db996d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c895d528-1761-4ff1-a539-62d26d9f7526",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f1fae64-e749-4dbb-a64c-eb8f0bb975a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d862c1-84be-4aad-b408-9ff7e8a3258d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e087b882-1425-48a5-9f12-80988fe8efa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6b6fa9-2161-4495-b17b-8fb252efe064",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7481421b-f468-4a57-9780-88fc5d5b887c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7a4368d-85dd-4b3b-86ea-42b87cd68ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83875acf-188c-4440-beb4-75539846049e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92659c25-66a5-4613-b8cf-df9b2fedcc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a877028-d89c-412a-bda8-a883e0e337b5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99648650-0eb9-42e0-b053-e4aa9025899c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f7e823d-dd81-4a12-9521-94dc0161b164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1baadc-6e9a-4ee2-a302-ad5f5a950ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27532565-df3a-437a-ab64-e955c5d4ea38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f496af1f-bae3-4081-93dc-22184fcf8a0d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450c22e6-c0b2-4208-97c5-30adced8e835",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b60551-47ea-40e4-97a4-f81de93c4c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcde395c-c60f-4bc1-89ce-af2c74a285a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c49d3e-8584-49e1-9b09-07b6383cefb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c1a13b-12f9-4be1-b630-204bc5e5ddbc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357f20c5-a6f5-4c70-b60a-4f85d9d06c71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e63209e1-8948-4879-a74b-cca8dd5c1118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "668062c2-1bc8-496d-85a0-26ee2c9f46ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de22665-c378-4cf2-8af8-e1d566e1f8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a2d3ed-38d0-439c-baff-7b8f23185bc7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea07018f-d2cb-4723-8a05-63369c8d192b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03f3202a-2eaa-48a4-889f-27463052ed03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad54499-d8e5-45d4-a051-8ef8a90ffcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1ea33d-045e-47c7-af2f-c7eec7731fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00e27ed-9966-4271-adf7-a015446dacee",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf42e960-1607-4b8d-a367-128784737514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa9dd6a8-675a-432b-820c-b9b6fcfb9863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94338c8a-8147-4a32-be06-0d4cc3e893aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0bff44-0126-42b7-b60e-96f1806602c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a75e62-ea68-4d55-9452-4513cde9f254",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113c9280-d408-4e5f-bb61-8258c99d7588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d50803bc-30dd-4a17-9106-d02844f77857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c07641-85f6-44fc-9af9-bf349681907a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e85615-920a-4a7c-a5d1-4b426c86d1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e270d71d-2a60-4199-91a2-47eada83d501",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d678affc-7375-4cf2-9fdc-b7e26e7b894b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc252bd5-99de-474e-8dd6-9cf78a70077a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0a934b-e1c7-4443-aa31-47aa4cbb9ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb34f9b-81db-450e-aeb9-12211f207c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048f4342-7ee1-49f1-b7fd-c65423c809bc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4859d53-2a6c-4c7e-851d-077490433f67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffae5b00-70d5-4a69-950d-78172261bf3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da4f57f-f848-4542-872f-9a082b3b2b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0563fc1-0a74-4931-ba39-b77ba0907505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e053d0-edcb-43c5-a5c4-8af0b7e7fa9b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181f8536-757a-447c-964b-17e50c1724f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad985ee2-849f-4554-ab8d-a378cb46f097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58dca83-39ac-4b55-b4b7-9d126959bb3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbcf28f-9a9f-4ea6-abb4-8c6f5a85ee29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9710e458-6bd1-4d76-9c2e-238f9b82ff26",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515cbe12-44f8-471e-9d9a-09b526a4be48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535b94bc-c5a5-4740-a692-139ae9411729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a661b2b-0762-4347-bc66-39d086d8867a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a460881e-e48e-4fe1-8231-54e6460cf00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d941fa-3eeb-4a42-aef5-113592c90ee9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24082d06-238d-4688-a9dc-d0abfdb8a806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36a48b80-18bb-4f77-a7a0-17e311b74640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be75d5a-77b3-4d14-8821-c04b77e2c28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "951cef39-d247-4cae-8e0b-54025cf982e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49e449f-4c12-413a-80f1-9a8fbea997b5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4676cd5d-815f-4b76-a910-e9e829e13704",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7165a3f-a494-40a0-b08d-042691f4c09e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2fbb75-f777-4324-81d5-e4ad38b288b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9f451d-a73a-4fba-a9fb-4450f72786d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3c6428-bd5c-43cd-94d7-b3026f862188",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9658d95b-c52a-4305-b503-893e3fcb4021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67661f03-dedc-4838-a566-cd04ea4759f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f0052a-2737-48cf-8d5f-8e7a88f347ab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becc027c-1689-470f-b3fe-073a0d2fb8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15e3b01-5904-4511-a287-2e6f0423d959",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0d0f9c-c74b-4459-b4f3-fe7daa302857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a2cc0ef-ddce-49a5-a76d-3de9d128f6b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65932cb2-17f5-4549-907c-1597d7e52fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc05d02-3cbd-4e17-83c2-da050a974467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66531b91-0591-4ca7-8978-ca662e15caa9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44a8086-53fe-44e2-b97f-e96dd79ba070",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab88581e-6bac-4559-adfc-3ffb223ce6f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918841cc-374c-47c3-a60d-1b5638d65d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3b956f-9e9e-4de1-a851-c14f9c8d6a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fb9da8-ebfb-45e5-b42f-78999be2d03a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fedcaea3-6500-4a6c-9fd9-2d940c6cf6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7899139d-7c6a-4177-a15c-5c0e75cbfe2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab355342-4d60-48f0-89a3-a74cf341b0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc7b28c-5bf5-45db-ad4d-6a2b1669160a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4f505f-db0e-4e10-925d-823f5eb56457",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b9446d-e078-4296-860d-2bf140243f29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36460317-7169-49c6-81a1-f48b57438c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28227295-5b26-439b-98ad-514602dd7bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c555b55-2d15-49d3-9df5-7620ba2ae862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bc2f68-9edc-44fe-8760-29a0bc4ec421",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8721bcd1-4faa-4d48-a0a2-c305c1a5b76b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a04eb20-86f7-48ea-b8fc-65330b5e9b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f98d16-0913-4aa1-bb13-919bbd37d05c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf82ef2-bd53-48b2-a792-543d2490a868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493e53fd-277a-40a2-9373-f573a729c91b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28150a61-1e2c-46c1-8447-b42877a7cc0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbd3cdb9-f42a-49cc-8a69-d7f750ecff6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574cb4e2-1d94-44e0-869e-3cc9512d0b00",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e358cd29-caaa-4c4b-ae7f-79e2550856ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16163a89-f7dd-44dc-93cf-10d3de97bb9c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038f5aa7-5f41-4443-9306-b4b420d15a3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0d099d6-cf2f-4743-8822-12cfc96fa15e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b128ec2-542e-4f62-873a-93fce34c1acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d84da8-8793-4278-bdcc-9c5f8f0f84ff"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d5f4a34-d376-4906-9d4a-f1723e5f415e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd39a8c5-77ca-4f8a-a2a3-f986a20c9b5b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c048431f-e5f2-4114-80d2-c5a3e3cfbeb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7af9429d-6fce-451a-bb83-81ecaaaa3167"
                    }
                  }
                ]
              },
              {
                "id": "6575ee5d-6672-4d1a-8c4e-e6fa1a9653b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c3a359f-29cc-4c60-a908-06f3fae06058",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a18497-1dc5-4ebe-b0a0-89d1e6b567b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5d1dc552-8005-46fb-bc3c-168734edf8d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2663377f-da8a-41fc-9b46-e94a5089b538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8da4b78-13e0-4072-8919-537cd21400cd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45360b0c-d4f0-48b7-8049-3d4496c3776f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88d440f2-9b90-4377-90bd-93a04ea5d216"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d25cbf6-a8e6-46d2-890d-67e0f53ee340",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef9dfbd1-dfdb-4ba8-9e5b-4a011e60cf2b"
                    }
                  }
                ]
              },
              {
                "id": "09a7869e-e3fc-4ecc-b5c1-fbd2b75709ea",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b1efeed8-a7d6-4dd0-8962-3a26ef2f19ac",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7af250-c502-4baf-bed5-c93d8ab3a67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d4497f51-3d06-47d4-8194-8862b42b8fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbae94a-bf56-45dd-adea-09f45f8e2677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af3efab-b6c0-4c55-a748-518da9ad83e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "79ea77a5-b1e5-4ecd-9f92-01b27c4997fd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d09dd06d-4f28-418e-aa62-47cf155a6dd1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26ead626-f4c9-486d-ac4e-25fc0688b0b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "da7a79a9-1e82-43c7-806c-8fda8b80a5bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25d39dcc-437b-461b-abf1-1da75b5f3c19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "619dbcd2-f206-4b6d-aee7-7e51d56e2a8d"
                    }
                  }
                ]
              },
              {
                "id": "39cf7b81-e4b9-4a11-88a6-4556ff2254f2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "756da08e-c20f-4585-b19b-6851c027f244",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f83dc268-02a6-4e78-8d7e-cdaf5b1b786b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e8a084b-5a86-4abc-aade-9262a0038573",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74f13538-a193-4fc5-9f7f-7ec3e4d1f330"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8dc056a-c0a5-4ca2-b0ae-06649e3fcd24",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "35ea3b2e-e96a-4ff9-a4e9-dda823c2a538"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2247c087-919d-480f-9dbf-b061c1802da2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc4ee54b-02a5-4820-95cd-267f84c11d5d"
            }
          }
        ]
      },
      {
        "id": "7d95f3ad-c5a7-45f4-87ec-b8674ac9dc15",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2c7d6944-d18a-4251-afa3-199f24dc2490",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a50e41b4-5807-4e33-8443-80292ffdf807",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00742166-3d5e-4783-a5db-6f2c3f471fbc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d10415-5035-4ed7-9401-6a1288a255ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "092d20d0-6c94-4121-a75b-25df3315a2f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "951eee3f-54fd-4bf4-b645-e3e4c8e25af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48e52113-f47a-4840-a2ec-942ddc87a667"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27dd5567-b93c-4217-b5f3-5aa914bf7561",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df37602a-bcbf-4b6a-817b-b00ea0abafa6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb6cc5ed-ec0a-4029-95bc-241aae2b4bc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6eeb006c-5c85-4468-8f16-68e4cc6edde1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07eec6a9-50bc-4a52-b457-0f9d5e11a57f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b1707e19-7cdc-46bb-8d77-326d25deb987"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "768af949-445f-4bae-9026-2224a91c80ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "236112fc-18a1-46c2-9c23-f9b639d36386"
            }
          }
        ]
      },
      {
        "id": "51f9089a-eb24-4f96-a590-c5a3ef94f6d8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d3132cf4-9aaa-4118-82d0-cd8b1bac0f9d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0462746-a17f-4fd0-bb98-4023ceb85a90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ac25141-8303-45fa-9181-7cbc4e506b4d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2cff7d-ebcf-4e5a-98b5-bdebc8833e05",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5fb1718-c818-42c4-a59b-bb58f0614eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f35f2d3-0a08-4d09-97e4-ecf25dd36ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43fdfac5-9bb8-4cad-a45e-3ffedd2101d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff0cb88a-ed4a-4042-9960-029d50410cf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b55cf009-90f8-4114-b39a-3d5cd01a6164"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "144d9244-b30f-426a-9153-ddc3280e51c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90702a8c-4668-409d-b33e-a94f83bde95d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f91a51c-2851-4dd2-97c4-061f80eac07d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c6cc018e-67d4-49c0-861e-f7176a86fbbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0854e7e7-63f2-4d80-976e-96d633fc0530",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be9ddefb-d118-4e30-8c47-4f4a3c4e69fd"
            }
          }
        ]
      },
      {
        "id": "bebd5fad-ccce-40a1-b771-dcde60e3708a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3fc4b999-6710-419f-9224-eed60d61ff95",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85446502-e5c6-4fc2-b29e-60afe9ea37f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d982048-ca8f-4f01-aac1-eaaf38d397c4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239cffa3-d39c-45a4-8336-5ead3e88319c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d82f18f9-4dc3-4385-9e36-4fef5cbd70d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bca9b06-a516-46eb-9468-7c05a75bdea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f872b341-9ed6-46b5-b528-24bc10f0a6f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f65bc599-c388-4850-a2b7-6a783b2c3ce4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18547368-7b40-4cef-abe3-7922476e2fac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3ccce16-b0de-4eb0-b552-1b58223cbf4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "785fbbf8-d968-4f5e-b059-f76e0f7acec0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d759cad-29db-4040-b2ff-0672a3cc34ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a080c4c3-4ae2-4c20-abb6-efa7d8cf29e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "794f474e-59a7-454d-bf93-873dab6cd632",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b284b375-d746-41ee-9bd9-4f54b6952c31"
            }
          }
        ]
      },
      {
        "id": "3eb5a3aa-fea0-4c61-a747-43cc2470b9bd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec04c582-8111-4592-8f91-c8dde132ab80",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36bd11d5-1df0-495f-a53d-54ec1cc1274c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d6bec113-087c-4b1e-8efb-b4381f3858a8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5a2252d-ce0f-4d62-842f-97d9b8d5042e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f9d5f3b-9416-45d0-a8d5-fcb5b91b3841",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 84.44912280701756,
      "responseMin": 19,
      "responseMax": 526,
      "responseSd": 62.03198134637373,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699922069767,
      "completed": 1699922105868
    },
    "executions": [
      {
        "id": "fe68fc9e-a8a0-46ec-b7f8-6f943cd0862d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0e8e8347-5b00-4ded-a942-d76d4c59daee",
          "httpRequestId": "765e9487-af7e-430b-9847-2be3fa757e64"
        },
        "item": {
          "id": "fe68fc9e-a8a0-46ec-b7f8-6f943cd0862d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "520de2ec-f31f-4718-b305-2615cf558e71",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 0
        }
      },
      {
        "id": "42ee1ccb-d85a-4602-bf76-ed7df6e25c13",
        "cursor": {
          "ref": "70a4bdb2-ebe5-4b58-b289-1f63b7b7d7f1",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "70822542-67f3-467c-a32e-a80054b1c491"
        },
        "item": {
          "id": "42ee1ccb-d85a-4602-bf76-ed7df6e25c13",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5036589f-a2d4-4b52-977f-64e95d974278",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "f2f0be8e-771b-4046-b508-35f1a885bf22",
        "cursor": {
          "ref": "9d35f1dd-bd11-459e-85aa-693755216750",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b32b352a-de97-4df3-b8ae-e7d1c3cf208d"
        },
        "item": {
          "id": "f2f0be8e-771b-4046-b508-35f1a885bf22",
          "name": "did_json"
        },
        "response": {
          "id": "119a6b3e-d876-49cf-9bd5-dff9683a0865",
          "status": "OK",
          "code": 200,
          "responseTime": 301,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cff300f-141d-457e-bfff-c0531adccbbf",
        "cursor": {
          "ref": "408ce357-3c26-4d38-92f5-61175ce7ba4d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b247aedb-9165-4aca-9807-f5a74fb5f182"
        },
        "item": {
          "id": "6cff300f-141d-457e-bfff-c0531adccbbf",
          "name": "did:invalid"
        },
        "response": {
          "id": "b2b5ccc5-aeaa-4ef6-bef7-129bd1fff304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cff300f-141d-457e-bfff-c0531adccbbf",
        "cursor": {
          "ref": "408ce357-3c26-4d38-92f5-61175ce7ba4d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b247aedb-9165-4aca-9807-f5a74fb5f182"
        },
        "item": {
          "id": "6cff300f-141d-457e-bfff-c0531adccbbf",
          "name": "did:invalid"
        },
        "response": {
          "id": "b2b5ccc5-aeaa-4ef6-bef7-129bd1fff304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0fead8-e764-44a4-99fd-49f5e5a6318e",
        "cursor": {
          "ref": "7322eb4c-3bc3-4676-b268-6e880ec74ed7",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cc031fd2-1cdf-44fc-88a9-9c436ceee30c"
        },
        "item": {
          "id": "fb0fead8-e764-44a4-99fd-49f5e5a6318e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "888aaafb-98bc-4d93-b81e-e5516dbfc9b9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 132,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27920783-323b-4497-a739-a6fc7d4b81a7",
        "cursor": {
          "ref": "ccb5a0ab-269e-40d6-ac1b-41258dc66dd3",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "651e9898-cefc-4d6c-97f2-8959199faa78"
        },
        "item": {
          "id": "27920783-323b-4497-a739-a6fc7d4b81a7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1f26ba31-0785-4cc5-90d9-573bcbc99bdd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586ea884-728e-4cdc-9c74-51427853250d",
        "cursor": {
          "ref": "09e33971-6d89-45df-8573-d7b99e6ab468",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "28755939-924f-4ceb-8a6e-514bce4c619e"
        },
        "item": {
          "id": "586ea884-728e-4cdc-9c74-51427853250d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7ac83604-33ec-4e09-9b6a-514e1c43fe5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e97677-aedf-45e4-a2bf-9be127b6fafe",
        "cursor": {
          "ref": "5886d139-7a56-449a-aae2-86e189be3030",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "851f541e-8f4a-40a3-a06b-fa3ecad66502"
        },
        "item": {
          "id": "53e97677-aedf-45e4-a2bf-9be127b6fafe",
          "name": "identifiers"
        },
        "response": {
          "id": "d2cc3796-f825-4f98-a5ed-52955b602e81",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f606123d-5a9b-45a1-954b-8050338e2486",
        "cursor": {
          "ref": "05b8778d-0295-4a94-8cd1-c13408deee77",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0aab985c-aae5-4cd7-b22b-d79bb9c7b2a2"
        },
        "item": {
          "id": "f606123d-5a9b-45a1-954b-8050338e2486",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "70a2b592-1847-4c91-9814-74792933597f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65f8cab-d88e-4904-85b6-8413e9ffc540",
        "cursor": {
          "ref": "9c7de884-eb52-4527-b178-0411b0354995",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "26edc111-c3a3-4df5-bf4b-acb93881cd2e"
        },
        "item": {
          "id": "a65f8cab-d88e-4904-85b6-8413e9ffc540",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b4ba65c5-02a7-4b5d-af18-4f6d36507087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4f6341-1329-4a06-ab5b-f7339b5057a0",
        "cursor": {
          "ref": "f5ec0fc3-e239-4c31-8aa0-5feb23d88278",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "81ab72fa-691d-478e-9873-fe455e5f6dd3"
        },
        "item": {
          "id": "9f4f6341-1329-4a06-ab5b-f7339b5057a0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2f0c06be-9300-4b3d-b602-3c37d80a0cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22dc942d-d8a3-48e9-8f35-1e805f526a41",
        "cursor": {
          "ref": "486b4e58-f721-4071-9fe6-d420b81a690c",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "748727ec-7bc7-4447-b1ba-89c9c0bfaece"
        },
        "item": {
          "id": "22dc942d-d8a3-48e9-8f35-1e805f526a41",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ebfae45f-ff1e-44d7-a45e-8dd539443ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017c8cde-ef70-4cca-8fe2-e4deda0cfe26",
        "cursor": {
          "ref": "2f760dc1-df7e-41b7-b6ae-86e458f4eb88",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ddd99d74-3dd9-4bba-8b92-879c8a19aad2"
        },
        "item": {
          "id": "017c8cde-ef70-4cca-8fe2-e4deda0cfe26",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e0f60cea-53dd-4a72-bec4-9a1f74a5120e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da7258a-f153-4583-9fc9-669b8c714347",
        "cursor": {
          "ref": "80ca4ecc-c8d9-4935-93bb-ef19aad4b2d2",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "625032fb-c0c0-4840-bff6-09af55153b10"
        },
        "item": {
          "id": "5da7258a-f153-4583-9fc9-669b8c714347",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "80a48188-acf1-48ce-972b-d948143cd1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d87733a-9db0-4165-ba1a-9c915a1d6b3d",
        "cursor": {
          "ref": "45858903-0756-4e18-8451-404a14a3b6ff",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "156e78a0-4880-4077-972a-320a3152e275"
        },
        "item": {
          "id": "3d87733a-9db0-4165-ba1a-9c915a1d6b3d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9260010a-4e70-4b0c-9f25-d84ff9acc34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d315754-2830-429c-98d0-8c071a98a510",
        "cursor": {
          "ref": "4e8dbab4-a452-4c7b-8a60-3e8bdd146cbb",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cc174787-c934-4736-b8f8-67906b8e2dec"
        },
        "item": {
          "id": "3d315754-2830-429c-98d0-8c071a98a510",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "81da1c1e-2db2-49c3-b227-b0e5b9031bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd47a9b-ca00-49cc-8aa8-942442e4b4d2",
        "cursor": {
          "ref": "bde51e06-ee77-4045-b33f-255d91f39f71",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "343621ed-905c-40b9-ad66-b303892bc0fb"
        },
        "item": {
          "id": "7fd47a9b-ca00-49cc-8aa8-942442e4b4d2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1ec89a90-95d9-4fae-9309-537ea639f813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca752f5f-e50c-4d5f-a89e-09f4560aef46",
        "cursor": {
          "ref": "ab8edfb9-c261-45d8-9edb-94bc8be30a2a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "625060cb-d9a0-4af9-ad50-17edea984c8f"
        },
        "item": {
          "id": "ca752f5f-e50c-4d5f-a89e-09f4560aef46",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ea282a2e-9faf-4605-a154-36cc96315537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea44438-abeb-42d3-876e-040342b0e370",
        "cursor": {
          "ref": "e25cbc63-7001-4850-b655-db2ebc900a24",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c8cd261d-ce72-473a-a3b8-f3fb0c3ed6bc"
        },
        "item": {
          "id": "6ea44438-abeb-42d3-876e-040342b0e370",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fba4c0e2-9dc1-4a65-bf72-e57b8aeda72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadec4ff-ee0a-4609-a5db-49e1c33908c0",
        "cursor": {
          "ref": "60d8bc2a-2ea1-4f7a-a866-31d641b2f39d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "14ae3826-addb-4109-ad9a-ad787b084bbf"
        },
        "item": {
          "id": "fadec4ff-ee0a-4609-a5db-49e1c33908c0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d58dc2fe-6b9a-4516-904c-9617fe497cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f840f0fa-ddc0-4dc9-9449-7fd8c755226c",
        "cursor": {
          "ref": "cdfd7a20-85c1-48e1-b26d-bb9977a2614b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1f72485c-9dfd-4fa9-9dd2-c20ca37022c4"
        },
        "item": {
          "id": "f840f0fa-ddc0-4dc9-9449-7fd8c755226c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a8b81817-f942-49d0-9207-7f56ea6d9e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42d57c6-7507-4c5e-828c-da5c1d8ca51f",
        "cursor": {
          "ref": "680c1ec6-af76-48c6-99b4-5e4ab2beab54",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dfc95cb4-2e2a-48fe-86bb-ee001fac5127"
        },
        "item": {
          "id": "a42d57c6-7507-4c5e-828c-da5c1d8ca51f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "24a38715-32da-4e97-bf91-90e610d6d37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1324f2-68b4-4d68-9357-4d79ddd7a760",
        "cursor": {
          "ref": "a962f8bb-646b-4805-befd-c88076b2c5ed",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "60f44e05-6045-4e0c-9b1c-7611563fb2dc"
        },
        "item": {
          "id": "7f1324f2-68b4-4d68-9357-4d79ddd7a760",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f0059cc6-1184-4392-b589-297bf89f44c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01486ba-3228-4c65-9530-72b621678777",
        "cursor": {
          "ref": "9f71afad-f65a-4d04-adcb-a5d84b9ff0ba",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d9caa5fb-ad3a-4bee-8c1d-24ff1a64b763"
        },
        "item": {
          "id": "c01486ba-3228-4c65-9530-72b621678777",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "83c4b555-d3b9-4e75-b1dd-c188aa110072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f137e8-e101-4df0-9fc8-a4b7f09e5f5b",
        "cursor": {
          "ref": "66f08d83-93ba-4614-abe2-0930e7b577c4",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "351691f3-5f97-4e2b-9660-f10c5a682400"
        },
        "item": {
          "id": "d6f137e8-e101-4df0-9fc8-a4b7f09e5f5b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7abc0b79-eefb-47c1-ab86-c26fd3384f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c732629-1e38-47ce-badf-2e627aa1a3ef",
        "cursor": {
          "ref": "ea3ee5f3-8cef-4468-8e04-c5fd8043d118",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "510aa517-ceb2-4dd9-bdc5-2528edb16152"
        },
        "item": {
          "id": "7c732629-1e38-47ce-badf-2e627aa1a3ef",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4176fedc-43cf-4f92-b697-b8e35e164753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b258610-d7fa-458b-95e4-55ef2f3bbe8c",
        "cursor": {
          "ref": "2536442a-bb8a-4569-865a-95d7015d60b9",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2ce31932-b2b4-435e-b198-3d7f9a3da603"
        },
        "item": {
          "id": "2b258610-d7fa-458b-95e4-55ef2f3bbe8c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7d6758d1-723c-4fc6-b859-a5205f129d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039098fb-1eff-43cc-ab8d-0a295bdb74e1",
        "cursor": {
          "ref": "7d6e8e6d-00af-46cb-83d3-9baa3fbbe751",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "01304912-b147-45d3-b20a-c498a3fa8804"
        },
        "item": {
          "id": "039098fb-1eff-43cc-ab8d-0a295bdb74e1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "96d79bf3-ec9c-4acd-bf86-0842c9cae0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1d43b9-f9d4-41ee-9219-d1fe3b736876",
        "cursor": {
          "ref": "df6f9731-6595-4e00-b1ae-fef6e80a4ee2",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7c4484c7-8b89-4a16-aca9-bfae78a2f218"
        },
        "item": {
          "id": "aa1d43b9-f9d4-41ee-9219-d1fe3b736876",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8e560a4c-7d93-41e6-9c41-7ead72bc0dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8933d4c-54f2-484b-859b-4a027e0c032e",
        "cursor": {
          "ref": "08b4df78-02f2-404c-a02d-0b804f761774",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7b544878-d19d-4ab1-9ef9-e6cd5e831eed"
        },
        "item": {
          "id": "f8933d4c-54f2-484b-859b-4a027e0c032e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "79dc65d9-0c8a-40e7-80a3-2bfc5eeebb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1558888-fadf-42ea-be6c-db2b6a0f6c05",
        "cursor": {
          "ref": "4c390f7a-6787-4a1e-a317-939e15190fc5",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "74cf99d8-3338-4b96-ab56-0bf7a77eb36c"
        },
        "item": {
          "id": "d1558888-fadf-42ea-be6c-db2b6a0f6c05",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4e52404f-7379-40af-92f5-a9cad6dd16ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60be8e1c-bac1-432d-b792-30f8f9260fd1",
        "cursor": {
          "ref": "33e32a15-f091-4b52-935f-78c07d8637b2",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6ce50e95-a3f8-4200-a3d8-c4bee86bf8ae"
        },
        "item": {
          "id": "60be8e1c-bac1-432d-b792-30f8f9260fd1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7eca7189-2a74-40f6-b44f-20013b01d919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a684a3c-ec16-4302-8c87-9f22e0288009",
        "cursor": {
          "ref": "6ce64fcd-c97b-4b2f-a001-47cf434faa16",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dcdf4b32-683d-4d52-a954-83e0cbac9129"
        },
        "item": {
          "id": "8a684a3c-ec16-4302-8c87-9f22e0288009",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d7a66479-d042-4ed4-915a-c4e8d34867ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b221a978-593b-4b2c-a4f7-0e0f25006a4b",
        "cursor": {
          "ref": "7f79f8f5-c836-4402-88a0-2aef8a16c91e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "44abda43-1953-4d23-9d39-98ed8dd7ab19"
        },
        "item": {
          "id": "b221a978-593b-4b2c-a4f7-0e0f25006a4b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7ba72a81-d298-4a23-8dc4-ce7738562f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa78e6f-fa94-42c8-9f0a-886097ddd686",
        "cursor": {
          "ref": "eaa83ef6-28a0-435a-a4a2-02ed462aa961",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "31ade9d5-571d-4e83-918f-73ee4a7df539"
        },
        "item": {
          "id": "2fa78e6f-fa94-42c8-9f0a-886097ddd686",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a26971dc-fccd-41f2-a904-4dfa6f2648e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c821aa-fbab-41aa-9693-3da573670f16",
        "cursor": {
          "ref": "7edc6bb9-0184-4568-81b3-d0d1846b3545",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1f3012ee-ac4a-4b7c-8564-b30d455f13b0"
        },
        "item": {
          "id": "37c821aa-fbab-41aa-9693-3da573670f16",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "212172db-1c90-42bd-94ab-15676bc129ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa62e720-2527-4046-9d24-92fdd9087246",
        "cursor": {
          "ref": "5215e4d6-0e00-4f6a-8a2d-a3451b502048",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5b417091-5d15-4312-9e6d-581c5d39692e"
        },
        "item": {
          "id": "aa62e720-2527-4046-9d24-92fdd9087246",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f6394863-73dd-49ab-a93f-a69b4a005cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf3307e-3571-4d73-b1e5-166463f04b26",
        "cursor": {
          "ref": "2cddca10-86dc-4195-ab12-942f9639ddcb",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d7ad8fc5-ba59-40ad-b7f5-9e2e240e7f71"
        },
        "item": {
          "id": "8cf3307e-3571-4d73-b1e5-166463f04b26",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "05bdfe36-74de-4786-97ae-585211447272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d8cc8c-03fa-4b78-b1eb-2033715479b0",
        "cursor": {
          "ref": "d067fd58-0955-451c-83e1-2cb30b7d2c7f",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a8abf1e6-4dba-4a32-b882-5bcd86794359"
        },
        "item": {
          "id": "e5d8cc8c-03fa-4b78-b1eb-2033715479b0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b92bf540-c4fd-4fde-89f7-c134d26573be",
          "status": "Created",
          "code": 201,
          "responseTime": 526,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "51ddaab3-4858-4855-982f-fbda1b49e016",
        "cursor": {
          "ref": "15bb521a-f5f5-41df-9f43-68c5dc862ee6",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6f42d841-701b-430c-9dd7-b71720fe6abf"
        },
        "item": {
          "id": "51ddaab3-4858-4855-982f-fbda1b49e016",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4816d53d-2c09-4188-a871-3b058a28b7cf",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a2640bdb-c17d-4633-af50-6f78b9d7df3e",
        "cursor": {
          "ref": "f40c7943-c7f6-42e7-a2ed-cf8f7b339fd9",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "34f7cf21-726a-4da9-a8f7-952d6d02f111"
        },
        "item": {
          "id": "a2640bdb-c17d-4633-af50-6f78b9d7df3e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "106d0604-5bf3-40d3-a585-512184f5e572",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "265b4b02-f3f2-41a2-9ce8-a9e07bc60ba1",
        "cursor": {
          "ref": "347ca4b3-22a7-4fd5-803b-8caa5227a567",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b693fc3a-8a6f-4b88-9c16-318dac0dbf7e"
        },
        "item": {
          "id": "265b4b02-f3f2-41a2-9ce8-a9e07bc60ba1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2d65a858-122d-497a-875f-e33947aeaf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548274ad-04f6-4f54-b902-8c3804043d76",
        "cursor": {
          "ref": "379b8d29-c6a5-420b-9a5d-e3904be1e31b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6f02d550-1bed-4b0d-9530-82e31fb8026d"
        },
        "item": {
          "id": "548274ad-04f6-4f54-b902-8c3804043d76",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4d5bcd52-0151-409c-be27-de3eb10f43c5",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "4a092148-76b7-4f2e-b2d5-8798fdd42386",
        "cursor": {
          "ref": "1c870ca5-4a29-4d83-9966-0e81cbe033b5",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f3ec8506-0ab0-416f-ac27-0110bf4f4704"
        },
        "item": {
          "id": "4a092148-76b7-4f2e-b2d5-8798fdd42386",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2063910d-b905-4da1-b0cd-ff825f461d2c",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b41e9ee9-5dda-4f40-9400-3fd071492f5c",
        "cursor": {
          "ref": "29514c85-a1b5-485b-a336-0a3c6a2f63f6",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9fb8d720-b5f4-495e-99a7-9d1c4493c627"
        },
        "item": {
          "id": "b41e9ee9-5dda-4f40-9400-3fd071492f5c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "602634b8-3e1b-425c-b32c-5a133c2c047a",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d07b3e7c-bb8a-466c-991f-ed63d4f9b2cf",
        "cursor": {
          "ref": "e84710c4-e883-4526-8d65-13f9cc1c5b1b",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "68da9346-475e-4b9e-a2a1-ba542e3b2394"
        },
        "item": {
          "id": "d07b3e7c-bb8a-466c-991f-ed63d4f9b2cf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "72ff14df-9f4a-4a77-84e5-be626dd0450f",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9e6e3553-4b9c-4342-a44f-7e009e647ec8",
        "cursor": {
          "ref": "64de29fe-2442-4b20-a957-0708002194b6",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "be4c1b27-70be-4c90-9714-c96d024113ac"
        },
        "item": {
          "id": "9e6e3553-4b9c-4342-a44f-7e009e647ec8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6311f9e9-7f99-4ccc-9c37-debc745db7be",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "15853f61-c437-4023-880e-d64eee43c6e0",
        "cursor": {
          "ref": "6f59664a-a67f-44c6-b5e0-acbc4fa835b5",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5b11221b-7ed6-4394-97bf-5f0487e7a82c"
        },
        "item": {
          "id": "15853f61-c437-4023-880e-d64eee43c6e0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e304aa10-f716-4d14-b004-d5d41ef6998d",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "470fcd52-3b83-4a67-8c79-04d8a94450f5",
        "cursor": {
          "ref": "e13c9d18-f853-40f0-b8a6-1427771b15d7",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f874a754-7084-4dd8-8476-02d97df215bf"
        },
        "item": {
          "id": "470fcd52-3b83-4a67-8c79-04d8a94450f5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a0eb4bc3-b1b8-46fe-aeba-4db39e0b0d2a",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c2d456e8-0a36-402f-9556-74772c49c44d",
        "cursor": {
          "ref": "6d0a75b1-dfa5-48db-b165-9c5f3dee611d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e9ced01c-6bb1-46c8-bd3d-afd0e2e728ee"
        },
        "item": {
          "id": "c2d456e8-0a36-402f-9556-74772c49c44d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "688326a1-14f4-4125-a90b-5c9c04a74d78",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "010ee268-6071-4d42-95ab-7c8b976e4b60",
        "cursor": {
          "ref": "efa80392-152a-47fc-963e-a5e233e48bcc",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9211864e-6523-4523-9a3e-a79f63f41166"
        },
        "item": {
          "id": "010ee268-6071-4d42-95ab-7c8b976e4b60",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1a711ef0-73dd-4969-ac78-b9c169a7b94f",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "72d0e241-1bfd-4925-bee9-969ced2d75dd",
        "cursor": {
          "ref": "6e9eb766-11c8-410f-8621-0c577d691411",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cbb69954-5fcf-41aa-977d-eeed1bd27970"
        },
        "item": {
          "id": "72d0e241-1bfd-4925-bee9-969ced2d75dd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c68a209b-5264-4631-b304-198bd8a76877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7977784c-91cd-4fa1-9da4-74e9fe6cfe6a",
        "cursor": {
          "ref": "cf12d85b-8b44-491a-92cf-4dcbfac76a23",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "28ff6d9d-210f-4071-930c-f2fb6baef5ed"
        },
        "item": {
          "id": "7977784c-91cd-4fa1-9da4-74e9fe6cfe6a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bd6bde16-b409-4adb-8dc6-d3685b9439bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd567e3-7267-4d38-9a46-59f704d81bbf",
        "cursor": {
          "ref": "6afa04bc-0e5f-4908-88d2-52d137ea989b",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2bd98c89-aaf0-4d82-a654-5c2878f7b27a"
        },
        "item": {
          "id": "1dd567e3-7267-4d38-9a46-59f704d81bbf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9bddbf5f-87c7-4d50-b172-34240f98545a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727497db-2e4a-4cb9-9ac5-a21204e81694",
        "cursor": {
          "ref": "533e8834-d97a-4b7a-8b76-c3d809d0c3da",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "aa4cc9bd-645a-4798-b169-d27a00dec3a4"
        },
        "item": {
          "id": "727497db-2e4a-4cb9-9ac5-a21204e81694",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9f7c65c2-ef1d-42a5-b185-6992cb750f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31082074-9ecf-4912-a267-ab1da6274ecc",
        "cursor": {
          "ref": "b49d5d97-3293-4f9d-aa92-84d6e151fd48",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "af7a58a4-2358-4238-af1d-19a2c69849ba"
        },
        "item": {
          "id": "31082074-9ecf-4912-a267-ab1da6274ecc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f80fbc3a-2fcf-4631-86bb-a6eb60c67227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f698de-e944-476d-a8d6-7009956711cd",
        "cursor": {
          "ref": "94ee2d49-adaa-4498-8ed4-fcef0ad472e0",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "15efa447-24a8-4239-bc9e-3c2fd3fe8bb9"
        },
        "item": {
          "id": "62f698de-e944-476d-a8d6-7009956711cd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cba14ff9-f200-4d9b-8e91-406b87223f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a8b8b6-c3e8-4b13-893d-b59d3e0b92f5",
        "cursor": {
          "ref": "a317cbb3-cbd9-4045-88ea-5019d002b0da",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "946c057a-e6f7-4836-a62c-64c5bf2e5faf"
        },
        "item": {
          "id": "93a8b8b6-c3e8-4b13-893d-b59d3e0b92f5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d3737b61-871d-4523-8ff3-db0df695732d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2179418a-6927-4606-82b0-dbc31f12c477",
        "cursor": {
          "ref": "fcff257f-e503-4e9f-839a-805adff7190c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "dca90f43-b1c2-491a-9720-055ab69ec4f9"
        },
        "item": {
          "id": "2179418a-6927-4606-82b0-dbc31f12c477",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "48ebaf0f-305a-462d-84c4-bcb08635cc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7440e40-b32f-4b9e-867a-6738efbb0f53",
        "cursor": {
          "ref": "0c0ec3ad-b6c9-4f4c-a219-258ad4b66174",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "354e467e-bd27-4011-83f0-7241150a7744"
        },
        "item": {
          "id": "d7440e40-b32f-4b9e-867a-6738efbb0f53",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "96ef65dd-a912-46aa-bab9-3fe6cd98c1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2585ed-7ba8-492b-9c27-ce86f4ca1a7e",
        "cursor": {
          "ref": "3b2bc333-9345-4205-8e0f-3f586bc5bad3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a097f8fa-1076-4a8c-b7fb-39b1a0b503e9"
        },
        "item": {
          "id": "4a2585ed-7ba8-492b-9c27-ce86f4ca1a7e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "adda8354-cf6b-4346-931c-3752fbfa379f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf32f331-cc51-4dbd-b050-767382345ea3",
        "cursor": {
          "ref": "0ba75053-859a-4432-8fd1-d0aa9228333a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9e715305-e3a5-4e1b-bfed-efd96dcc0d19"
        },
        "item": {
          "id": "bf32f331-cc51-4dbd-b050-767382345ea3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2d760ae1-e79e-4f97-94a3-9e56f7741d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc2fdb4-6adb-47eb-a984-2239c6b8671a",
        "cursor": {
          "ref": "25937eea-b4bd-43e4-a628-7e9c0fa13f4b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2b23f4ac-dd80-4ce9-841f-42f4442e2499"
        },
        "item": {
          "id": "2dc2fdb4-6adb-47eb-a984-2239c6b8671a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c17263e7-e75d-4333-b738-58679a5ce4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47843185-59d5-4f83-9b72-e6e53968ea33",
        "cursor": {
          "ref": "a3071a09-9e8b-4890-b956-2d1e44fc7705",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bbe1b56b-affb-417c-b673-3aa442854edd"
        },
        "item": {
          "id": "47843185-59d5-4f83-9b72-e6e53968ea33",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1798a30e-5f5f-4a49-93f0-b06557f8ad01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497880fd-b302-4fe1-a3c4-3cbafb8f2993",
        "cursor": {
          "ref": "1abc5ae0-b6c2-4d54-b0df-b5ab13aecde8",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "836f4fda-06e3-4ac8-9060-19aeed054ec4"
        },
        "item": {
          "id": "497880fd-b302-4fe1-a3c4-3cbafb8f2993",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7f6ceaac-2199-4ea6-8d04-c76b5c0e2472",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "466aec4c-c5d4-4f5e-905e-610cdddf5d90",
        "cursor": {
          "ref": "aa10120d-b620-4375-b61b-b61318febcdf",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a70e9ec8-1e9b-4e13-8ee6-92fead0f9f04"
        },
        "item": {
          "id": "466aec4c-c5d4-4f5e-905e-610cdddf5d90",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d00e4ac3-d98f-4d08-bafd-89dd58cd6358",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a555e7af-955e-44ef-8cf8-1c51f52f99b8",
        "cursor": {
          "ref": "c5074918-6454-4114-948d-2e3359a45035",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "72d20728-ea5a-4cbc-abe8-336506c9d7db"
        },
        "item": {
          "id": "a555e7af-955e-44ef-8cf8-1c51f52f99b8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1ae3af36-0e5a-43f4-b2a5-170bf8ff0c5d",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "44c792d1-f276-40a9-8621-949f9701f501",
        "cursor": {
          "ref": "aeca8681-6115-40cb-9d9c-461fe5b83c9f",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8893597c-913d-4580-bd26-ec933e6a387f"
        },
        "item": {
          "id": "44c792d1-f276-40a9-8621-949f9701f501",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "601e9807-b263-435e-9c3a-173018d63eb0",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2cea600b-1a31-4ec1-9398-4e1f80169178",
        "cursor": {
          "ref": "7d0e0c7c-f95f-46f4-a08c-182646f21f37",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "97b43818-3d2d-4640-9278-3be5a6c44286"
        },
        "item": {
          "id": "2cea600b-1a31-4ec1-9398-4e1f80169178",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f03e390f-47cf-4741-9b68-a8e249efe4fe",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2986da85-1bd4-40e5-a06d-d8571cb2db93",
        "cursor": {
          "ref": "31ea9675-1023-4efb-a063-eb0056ce849a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b6d960a6-6276-4c2f-91f3-05cc6450231b"
        },
        "item": {
          "id": "2986da85-1bd4-40e5-a06d-d8571cb2db93",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "461ccaa4-2e9e-4ac9-998c-1bf474e129db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d17ce9-4964-4fc4-852c-91bbecefe1a0",
        "cursor": {
          "ref": "5ba7611e-073f-40b4-b998-d0a9d2771600",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "18147c0d-1dc5-445a-85d3-3e8f74501181"
        },
        "item": {
          "id": "58d17ce9-4964-4fc4-852c-91bbecefe1a0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0becd48b-f702-4436-8e62-60406e977c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56557d23-93d3-4abb-ab3a-bed4753155dc",
        "cursor": {
          "ref": "c0a525d4-d447-4851-b5c6-33310e1f5efe",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c97b9137-3a1b-43db-865b-9e732f7afab0"
        },
        "item": {
          "id": "56557d23-93d3-4abb-ab3a-bed4753155dc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5e6c4f5c-998b-48a2-90a3-37737279a29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2c3566-c930-4164-9917-102660f17a86",
        "cursor": {
          "ref": "95893fb1-2e67-4c8e-b18c-44dfc0de677d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bd624185-2c55-486b-8a87-b42a87b263a5"
        },
        "item": {
          "id": "dc2c3566-c930-4164-9917-102660f17a86",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7552fdfc-07d0-4282-9375-23e29f544176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6c51be-9a35-450b-90ae-fa2ecfda914b",
        "cursor": {
          "ref": "34a345ba-9f69-43e1-97c3-877bf983cc5d",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "017cc51e-6537-4846-8392-ac309dcd9bb3"
        },
        "item": {
          "id": "9b6c51be-9a35-450b-90ae-fa2ecfda914b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "332d250e-5a73-474c-bf9b-5408a49d859f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddcc8663-3dcd-4a21-b6aa-f50242b68254",
        "cursor": {
          "ref": "5bb246e1-ca1c-4916-a339-1e9d8af221bf",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8ad5f0bf-11c7-42be-9ca9-08c194842f8e"
        },
        "item": {
          "id": "ddcc8663-3dcd-4a21-b6aa-f50242b68254",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "787af845-9bac-47a5-88f6-6330e185e3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3108288-5de8-4023-937e-aec80a4cb50f",
        "cursor": {
          "ref": "3be3ce96-c8a1-415d-a819-245bd2cf1f82",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "216e796c-1920-409c-8b72-0226f3c2209f"
        },
        "item": {
          "id": "f3108288-5de8-4023-937e-aec80a4cb50f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8723620f-9f99-4250-aab5-be159dfe2d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7102bab4-79f2-44f3-b976-391be8a960aa",
        "cursor": {
          "ref": "26989f53-d357-4db0-870f-e3682fb15af3",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bcf1d98e-4cb2-4674-bc58-961c8dafaae3"
        },
        "item": {
          "id": "7102bab4-79f2-44f3-b976-391be8a960aa",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0494d9f9-a1fd-4046-a3ba-cb1e6b39f405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfcf528-e86b-47d7-ac0b-0ea67c6101d5",
        "cursor": {
          "ref": "c02a8710-2043-42ca-b619-4b2a0c937a1a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "15cb58d8-7f92-4405-af97-2f4f3a4a2748"
        },
        "item": {
          "id": "ecfcf528-e86b-47d7-ac0b-0ea67c6101d5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d926d247-d5ea-4ead-be75-59c0d71f03d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff82185-3298-4815-b821-cd5a272ad6cd",
        "cursor": {
          "ref": "4bbf5bda-65dd-4954-afaf-34040cd43988",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "046b30d2-2ad6-4378-82f4-820594dc2091"
        },
        "item": {
          "id": "aff82185-3298-4815-b821-cd5a272ad6cd",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7ab1ed26-d2a9-4014-a409-1b785b9a941a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4705b712-cc54-4b8f-8a27-ac0297ba8fc8",
        "cursor": {
          "ref": "e5d74b8f-1c60-4991-a0cc-fd25e7adf3fe",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "05ae413b-1513-48b5-802d-e2d88869379b"
        },
        "item": {
          "id": "4705b712-cc54-4b8f-8a27-ac0297ba8fc8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "49c6cdc7-bf1c-4fd7-83aa-8564df3ea019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a515370-ad3a-43b9-b876-d8c76490b84e",
        "cursor": {
          "ref": "8889cc6f-7bb5-4501-9ecf-51dce0766d11",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5a7b6fc4-0623-4f63-a473-8aac0771bcea"
        },
        "item": {
          "id": "6a515370-ad3a-43b9-b876-d8c76490b84e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ef591b42-2f67-4c30-a67f-0e2cfc0b9722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927481b6-55c9-4c54-9ffe-75365dd031e8",
        "cursor": {
          "ref": "fd2af451-dbd5-4cd4-b9f1-1efbf44de37c",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a6589b6d-1b93-419c-8e0a-a5a74ac92789"
        },
        "item": {
          "id": "927481b6-55c9-4c54-9ffe-75365dd031e8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e748e96f-47df-4353-ad16-42467fbd4ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69c29be-15ee-4de3-a63f-4837301be4d6",
        "cursor": {
          "ref": "db0a3967-bcc9-4067-bcbf-2b761735ce3a",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "558164a9-6433-42ee-b951-9e8c56ea1d22"
        },
        "item": {
          "id": "b69c29be-15ee-4de3-a63f-4837301be4d6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "158bb37a-d74a-4754-bea8-7ae49e421904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4d2d9d-0182-457f-8f3a-30dbe2674935",
        "cursor": {
          "ref": "a8763c20-b372-4430-8aad-9654e75c1979",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "25e156c5-86d4-4a43-934a-218e813f17eb"
        },
        "item": {
          "id": "be4d2d9d-0182-457f-8f3a-30dbe2674935",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "591650e8-f344-4cff-98cc-e5a36ead7a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04dca87-8ecd-4498-978d-52242a855676",
        "cursor": {
          "ref": "4ee297be-1b0d-414e-8d3f-767e2302cb7b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d4843c6b-49f2-4679-96b9-77844ba513ac"
        },
        "item": {
          "id": "b04dca87-8ecd-4498-978d-52242a855676",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ae8a577c-a707-4212-b48e-3a75346b3e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3357245e-922c-4407-a5ae-c31d057a71b0",
        "cursor": {
          "ref": "b14f58f9-d656-46f0-b3a3-e04853a9877e",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "99024fe3-56ea-48c8-b803-be32faea560a"
        },
        "item": {
          "id": "3357245e-922c-4407-a5ae-c31d057a71b0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f82072af-c0de-4e83-bf82-3a1f8b04e64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87422fd-6a0a-453e-8796-a9b4d105cf95",
        "cursor": {
          "ref": "b9b7f8a3-84ca-440c-8e4d-a3d5eaa93f08",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6aa22927-b680-493f-a5d9-f19d96f181c2"
        },
        "item": {
          "id": "b87422fd-6a0a-453e-8796-a9b4d105cf95",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "91514512-7530-407c-9a52-e7cb242bf1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19199dbc-2d46-402e-ad92-bfbd6e74adda",
        "cursor": {
          "ref": "c0a7d4c0-810b-453c-9c80-b5842fd9bbd1",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4a6d61c3-dafc-4045-b2b9-19d5115cc8e0"
        },
        "item": {
          "id": "19199dbc-2d46-402e-ad92-bfbd6e74adda",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "44fc5afc-7909-4e78-9f9e-deec9bb3a901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098ca4c7-c1e2-4e8c-a15b-bdd1e093c9ec",
        "cursor": {
          "ref": "25b45080-3c00-4ada-bc42-c8d9b0460747",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "aba406dc-6b03-4968-9b95-3863fa7b13bc"
        },
        "item": {
          "id": "098ca4c7-c1e2-4e8c-a15b-bdd1e093c9ec",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "efc8810e-4c1f-4785-9b3a-b37af50fddad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396611e7-198b-440e-8af3-78478b2ff686",
        "cursor": {
          "ref": "e347ecfc-b149-4533-9d19-0f1334a42fbe",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7e569c86-7dfd-4341-b53b-886f8f58e9d0"
        },
        "item": {
          "id": "396611e7-198b-440e-8af3-78478b2ff686",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b5ba4c05-1637-4d8a-8085-c4d51aeef48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe604c9-dffb-4ffb-80b3-59b317b13887",
        "cursor": {
          "ref": "74b63325-e3ba-4da0-9849-5c64dd0db05e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "70a33eb2-8393-4d65-9d12-57806e6c91e3"
        },
        "item": {
          "id": "bfe604c9-dffb-4ffb-80b3-59b317b13887",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "87e58535-a55c-40b2-b714-7c6311f63cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea582e80-ce8e-4efb-b8b5-181f67410726",
        "cursor": {
          "ref": "02a02a66-32dc-479c-a4a9-30101ff3f792",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c4ae1f0d-25dd-490b-ab37-feb06a459b25"
        },
        "item": {
          "id": "ea582e80-ce8e-4efb-b8b5-181f67410726",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f6696dcc-a620-4d61-8fe6-c56139b634b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af39af4-be91-41f6-b5b2-54e027409d52",
        "cursor": {
          "ref": "bc59f0a0-e0a9-4991-813e-97cea3cec1c7",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "caa68944-f10e-4df6-b219-f1ce72fa129c"
        },
        "item": {
          "id": "5af39af4-be91-41f6-b5b2-54e027409d52",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fcd8e861-0532-4da6-aecf-8ef5cc73fef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e263e5-7e00-4cd4-98cf-9f0993d68ca9",
        "cursor": {
          "ref": "0e0bc863-a388-425c-9657-735ed3eba033",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "37da9aa8-4b3d-4ea1-87ba-54c02a69d0b1"
        },
        "item": {
          "id": "c5e263e5-7e00-4cd4-98cf-9f0993d68ca9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e15d23bb-7c40-48f0-983c-b7176b34dd91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa07d468-c334-4cce-8b30-9109e444d7b5",
        "cursor": {
          "ref": "475a9c01-3e13-486d-bb05-73f49f7b7d0d",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "41eacfd9-d339-448f-90df-b6e09ef545c9"
        },
        "item": {
          "id": "aa07d468-c334-4cce-8b30-9109e444d7b5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "02532064-bb85-4f3c-8961-9c3e73d442b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500270ca-cacc-4dfe-90d0-5d720f0cdc3f",
        "cursor": {
          "ref": "dfc1c4c3-dc6f-483b-9705-775932aa3a10",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "54424909-9b6c-475d-ae38-76524031cb46"
        },
        "item": {
          "id": "500270ca-cacc-4dfe-90d0-5d720f0cdc3f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d73ba724-e6ae-4423-8a7e-170f545e0dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf82c91-6396-4edb-964c-7c1e4bae9d2e",
        "cursor": {
          "ref": "74a5cf64-b60c-4aae-a0fb-f9e08e751866",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ab443686-a02a-42f7-bc05-db1503d18540"
        },
        "item": {
          "id": "0bf82c91-6396-4edb-964c-7c1e4bae9d2e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "82ac86fc-8d25-4560-bd26-831900897df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8453966e-88fa-43f5-a17f-34f5bd5e9c37",
        "cursor": {
          "ref": "2df22052-9738-4c11-9af1-0071a1e99476",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1f851519-75ca-4062-93ec-cb95703e2502"
        },
        "item": {
          "id": "8453966e-88fa-43f5-a17f-34f5bd5e9c37",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a61fbe7a-368e-4a6e-9c25-feff2d540e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c25508-a8ce-4d23-bd5a-5d2e9fbc950d",
        "cursor": {
          "ref": "c4c9dbb4-356b-4db3-9d81-eb1aaa27f93f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fe7595da-6db0-46fa-9b46-e30c78b3d51e"
        },
        "item": {
          "id": "12c25508-a8ce-4d23-bd5a-5d2e9fbc950d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "83d46699-4f6a-4334-af70-428e716f5b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853e3a31-f8d3-4b51-bb18-cd6efbf2af05",
        "cursor": {
          "ref": "342277f3-ae1e-4365-8063-1e9179c99b18",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5af8f0ca-d7f9-4488-a38e-778198924321"
        },
        "item": {
          "id": "853e3a31-f8d3-4b51-bb18-cd6efbf2af05",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9c34b0a4-b941-42c8-957e-e615d3e636d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6cc8dc-5c57-46c5-9997-3f029d7ee8b4",
        "cursor": {
          "ref": "6ad34f52-1fd9-439b-b5a0-427bca48b697",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0c7ea0b3-c3a3-4099-af1b-551d66a3dd05"
        },
        "item": {
          "id": "4c6cc8dc-5c57-46c5-9997-3f029d7ee8b4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "552d3526-8671-4cc9-8828-40bef2e98a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e9ebd3-6fe1-42fd-97e6-e7b427030c96",
        "cursor": {
          "ref": "1dcac67d-167d-40f6-b038-adf586e7c63d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1b2d9aa6-1267-44d0-b94c-df25c3591ccb"
        },
        "item": {
          "id": "30e9ebd3-6fe1-42fd-97e6-e7b427030c96",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "291d7875-f198-42b7-a96a-057c28c5d84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "455f2b6b-1d8f-41d5-91ef-942ffa7c49ad",
        "cursor": {
          "ref": "c553ecc5-4742-42e0-a775-ddad60c6fbc8",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "27fd0693-3e76-4029-9626-291d26220a94"
        },
        "item": {
          "id": "455f2b6b-1d8f-41d5-91ef-942ffa7c49ad",
          "name": "credentials_issue"
        },
        "response": {
          "id": "57f1c23c-9427-4c33-825c-26754562b936",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b162a74-d9c5-4a81-bdbe-aa74154095c0",
        "cursor": {
          "ref": "9baf3acd-4c0f-42ce-838d-ae9444f6136d",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c30a9a7d-7425-4f6c-b3b4-c4186784ba07"
        },
        "item": {
          "id": "6b162a74-d9c5-4a81-bdbe-aa74154095c0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4cd42ac1-a607-4b6b-9ce5-8fe55a1401a0",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2da8404-8371-457a-b339-a9d297d565bb",
        "cursor": {
          "ref": "af3cc60e-c40a-45df-9b7a-a983a19016c4",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "78cb395f-7d04-42ce-addd-c5d2d9857efd"
        },
        "item": {
          "id": "b2da8404-8371-457a-b339-a9d297d565bb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0c5d24ec-07a6-4360-8151-4edc77c37698",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb98c25-9135-4c08-b108-24135829b786",
        "cursor": {
          "ref": "1c8b6632-fa4e-4048-92c4-f6acf81f146e",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "38ab607e-2a17-4405-a239-2fdc876b22f8"
        },
        "item": {
          "id": "dfb98c25-9135-4c08-b108-24135829b786",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0424b1fd-28b8-4ace-a4fc-aa01601d1e8f",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b658770-4d67-47f9-aa4e-c0530cbaea87",
        "cursor": {
          "ref": "31d023bc-67f9-4bc3-912d-ab30697d576e",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9845cd63-9c30-4887-8269-3220d13bd5b8"
        },
        "item": {
          "id": "9b658770-4d67-47f9-aa4e-c0530cbaea87",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a1680f8b-51c3-4e51-af18-1f1e1391ca6a",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-14T00:34:46.444Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-14T00:34:46.444Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8771dbf5-d612-4cc2-8f31-d73a3d596b8b",
        "cursor": {
          "ref": "9af76f01-7158-4bd5-86f9-2400cde89271",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "569e204a-89fa-47fb-b480-067c2e010f18"
        },
        "item": {
          "id": "8771dbf5-d612-4cc2-8f31-d73a3d596b8b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f9e7e088-fac5-42ad-ab26-5897172776a3",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a340e8-caa8-49bd-a1c4-9c124456038a",
        "cursor": {
          "ref": "4621dc04-905b-4137-8538-8eaf9b23d8f7",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "78b5d278-4fd0-4ef4-a891-0f1568fb3700"
        },
        "item": {
          "id": "99a340e8-caa8-49bd-a1c4-9c124456038a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "884a4c7d-abff-4d1a-bfed-f83ca40c49fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3797f50-de7d-47d3-8d05-063603e4157a",
        "cursor": {
          "ref": "22098737-f6c7-4cbf-831f-ca56ed7f84d5",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4cc0b6ca-b8bd-49bc-b2a2-cd17a0e02c89"
        },
        "item": {
          "id": "c3797f50-de7d-47d3-8d05-063603e4157a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5d34de05-4fc7-42c7-973d-43ebf85da21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa69465-cf18-44b2-a0b2-b495f00ddfbb",
        "cursor": {
          "ref": "f854e946-75f3-4ea7-a5a5-ffb3c8ab89c6",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "20819695-edbe-4f45-b11f-9056aded6400"
        },
        "item": {
          "id": "daa69465-cf18-44b2-a0b2-b495f00ddfbb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "50ca4a66-58b6-44c6-ac2e-9e03becf741d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dec5918-5ce9-4ba7-b07c-2a0ef2a436af",
        "cursor": {
          "ref": "1120b25a-8556-4b4b-826f-65405fba7fed",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "30c54211-c808-4ef9-bfa6-973e759d841b"
        },
        "item": {
          "id": "0dec5918-5ce9-4ba7-b07c-2a0ef2a436af",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c7a71f0f-c99f-4a65-9f3a-82c666de5479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8e52d1-ec54-4033-88a2-f5b4b2688092",
        "cursor": {
          "ref": "35d981e0-b6b1-4c76-be6f-714d3666dee2",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fc411585-010c-4c03-9114-2df5bd4be660"
        },
        "item": {
          "id": "6e8e52d1-ec54-4033-88a2-f5b4b2688092",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a8d3aa94-4b53-45da-aa57-bf4b7419c17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4dc09ee-4eac-4e3c-8e86-fbff3f5e3daf",
        "cursor": {
          "ref": "bec7d862-fb72-47a8-93c0-7b64396a546c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "30455857-1549-4e77-a9ed-9fdb423fdd62"
        },
        "item": {
          "id": "b4dc09ee-4eac-4e3c-8e86-fbff3f5e3daf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "37e0c157-8a37-448a-80a8-f713a57c9f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3201b43f-f2b7-4c54-9224-950e8f678f09",
        "cursor": {
          "ref": "f4afddc0-5e5c-4ec1-8455-2972beb84281",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bff0a23a-bec9-4e25-8578-34fef61f7d53"
        },
        "item": {
          "id": "3201b43f-f2b7-4c54-9224-950e8f678f09",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e2509a19-1425-42f8-a36a-ed22f80855b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefa87c8-803b-4fd4-b021-c6151817b11b",
        "cursor": {
          "ref": "cdd98ddb-fe93-4f31-bfe6-502ae24af5b3",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ce62ea1f-f4be-48ff-a358-fdf5bc1d6bc4"
        },
        "item": {
          "id": "fefa87c8-803b-4fd4-b021-c6151817b11b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4a1955dc-6375-4440-8ce6-66bcf8cca72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31ca524-296e-4d0f-8b65-80e795ab544f",
        "cursor": {
          "ref": "aeb4e613-ef1e-41e2-82a1-a3b278f22496",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "cbac797d-9f28-4665-a945-bc2bed419366"
        },
        "item": {
          "id": "a31ca524-296e-4d0f-8b65-80e795ab544f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7330b447-279d-4822-b109-6482bad9f1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a47be0-fdd1-4bd9-8ac4-4e9f776f2db0",
        "cursor": {
          "ref": "57c9a299-87c8-4085-9928-82c5656589ae",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "39114091-ea1e-4888-a131-e7ce891e492a"
        },
        "item": {
          "id": "e9a47be0-fdd1-4bd9-8ac4-4e9f776f2db0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "53a5b697-e899-42c4-875b-47eae6bf3680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525f81c2-b0b9-49a5-95b3-71d1d74b87a8",
        "cursor": {
          "ref": "c4882c7f-702d-4e9d-8099-d8c030b3ebda",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "61c8fe3f-7a63-43d1-9ca9-29877cde7d61"
        },
        "item": {
          "id": "525f81c2-b0b9-49a5-95b3-71d1d74b87a8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4bc5c5eb-2238-4680-ae62-f25a9a272610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59880ccb-2936-491f-be75-df06da7bc981",
        "cursor": {
          "ref": "5b44e44b-e528-4eb6-9218-489236480840",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f0908052-1a5c-4c0f-8584-2e2c6515b186"
        },
        "item": {
          "id": "59880ccb-2936-491f-be75-df06da7bc981",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f9184ea5-e07b-44cf-a35e-d6e921d2cdd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732f69ed-784a-47fe-b691-30e486a17c4f",
        "cursor": {
          "ref": "9efec0ef-d9bd-4646-b32f-9042f73743b9",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "813dba8b-59ef-4df9-b82c-901756bb12e8"
        },
        "item": {
          "id": "732f69ed-784a-47fe-b691-30e486a17c4f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f0ea30b2-2bca-4a9d-a3ac-8b515163881a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84eb902-92fc-4be0-9c9f-19287b9ee774",
        "cursor": {
          "ref": "dbfec007-8c22-4a69-9aee-2380be43fa61",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "57c32050-b3ca-43e0-aad1-77b526ed3533"
        },
        "item": {
          "id": "d84eb902-92fc-4be0-9c9f-19287b9ee774",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "932364b2-bf40-4aac-ba5d-eaae74e17bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cfc38b-488c-43d7-8b47-1aba8cc75454",
        "cursor": {
          "ref": "3ff09e9d-2b23-4d83-ae7b-90e0588489ec",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "70152df5-1dc8-46a3-96a6-15984ed93ac6"
        },
        "item": {
          "id": "29cfc38b-488c-43d7-8b47-1aba8cc75454",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8bfaf4ec-7a7d-47db-870d-358c81c583c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0124ade8-e705-4e07-8261-47a1caf41595",
        "cursor": {
          "ref": "637def2f-067c-4ea7-b67d-a7c819166526",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4c7e1227-2b55-43f1-a1a8-e60f394001a1"
        },
        "item": {
          "id": "0124ade8-e705-4e07-8261-47a1caf41595",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2ddda689-196f-46b3-b971-25bc31c0bed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae6df3a-129c-4a20-a1f4-aec6936e75dc",
        "cursor": {
          "ref": "506a22e5-8feb-4b99-adc6-e334162aba8e",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9529be11-eb52-47cb-9039-03660b16583d"
        },
        "item": {
          "id": "dae6df3a-129c-4a20-a1f4-aec6936e75dc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c551f4f2-89df-4f41-b3c7-ad27ab4aed65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c5fe95-047b-4ee9-8382-75e58d4d0d43",
        "cursor": {
          "ref": "a458f707-1af9-42ec-8c24-0c48bf40a5b3",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0482aead-343a-4217-b547-ef7a115bf620"
        },
        "item": {
          "id": "33c5fe95-047b-4ee9-8382-75e58d4d0d43",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c540a1d0-b2ea-446a-9257-0d20543709f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f58abe-8646-49e5-a133-19842c2ac138",
        "cursor": {
          "ref": "bb286d5b-9a42-47ab-bfeb-b3feb1f61ae5",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0670ddc5-5046-473c-bc8c-079c6327dd81"
        },
        "item": {
          "id": "94f58abe-8646-49e5-a133-19842c2ac138",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4f2ddb4a-230b-4f74-a0f6-de644d2f0d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1801b417-c4ea-4503-9672-6c2727a618d8",
        "cursor": {
          "ref": "5ac18b7d-e962-4ca4-bd73-14ee9680fa9e",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e87023b2-d310-4d83-818f-1ddb277586f5"
        },
        "item": {
          "id": "1801b417-c4ea-4503-9672-6c2727a618d8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d8b540af-4595-4438-91cd-daf45b321ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5067fc79-c9e7-4744-a4c6-eeb2d9e6664a",
        "cursor": {
          "ref": "f7093b28-3bb7-48fd-bbd5-b968b15d4c02",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "dbcce90f-e825-4b28-bcf4-d58b68168446"
        },
        "item": {
          "id": "5067fc79-c9e7-4744-a4c6-eeb2d9e6664a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8d699e8d-1ca4-4420-b745-2f60c03d4751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3295065-a7df-4529-93cb-9a2f4f3b906d",
        "cursor": {
          "ref": "2d833f7f-02bd-4ca8-8abf-4406b688237e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e4b753f4-33d0-426a-b5bd-502910692592"
        },
        "item": {
          "id": "f3295065-a7df-4529-93cb-9a2f4f3b906d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cb39d1a8-69e6-4c4b-8b7f-be3b1270ef37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7072e7ec-180e-4b61-9b66-5c1e4f2d8c19",
        "cursor": {
          "ref": "30da4830-8950-43d9-8a2d-f239c443c135",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "268cfb1a-bcfb-4634-a3d1-4eba65045624"
        },
        "item": {
          "id": "7072e7ec-180e-4b61-9b66-5c1e4f2d8c19",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d043af1b-abba-4122-8243-7031046744a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d259b67e-b45c-4b8b-bd2b-3906480e55c8",
        "cursor": {
          "ref": "46cb365c-735b-48e0-bf19-d1a3eaa718b3",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "04d5fbb6-d097-4ace-a45d-ce736046f8ad"
        },
        "item": {
          "id": "d259b67e-b45c-4b8b-bd2b-3906480e55c8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "df9ff54d-ed4d-4740-83a3-adfdc9f2db5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881051f1-199a-4310-bd9d-506b1a08cdc0",
        "cursor": {
          "ref": "26e6ba00-6670-4a20-93cc-d5df7c06a6d0",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ead21fbc-b961-4b6d-b229-9e9e630cbc32"
        },
        "item": {
          "id": "881051f1-199a-4310-bd9d-506b1a08cdc0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ffd41a7c-be64-48f7-ba07-6f26a254699a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8342df9-5ec5-42b7-a15b-b4b89a6ee660",
        "cursor": {
          "ref": "b5c90181-d7cf-4fe0-a227-4fbd11cfe531",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cbe87361-71cd-4394-872f-b1d076068519"
        },
        "item": {
          "id": "f8342df9-5ec5-42b7-a15b-b4b89a6ee660",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "508cf89f-4e8a-4097-af81-33f443a830bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1245e765-b051-4242-9563-b84684799b22",
        "cursor": {
          "ref": "ca154fe9-56c1-4ea1-962c-2f535f3edc58",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ce3c9c53-7009-48a3-8792-a39b37860222"
        },
        "item": {
          "id": "1245e765-b051-4242-9563-b84684799b22",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "faa8285c-fae5-4c5b-8644-f301953c0b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c64bba9-9f57-4ca0-b6be-94da4f1d7903",
        "cursor": {
          "ref": "1832d566-b43c-4e26-b1bb-5f8aa9f60208",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4f482521-cdea-465e-be11-049fef29599a"
        },
        "item": {
          "id": "0c64bba9-9f57-4ca0-b6be-94da4f1d7903",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4ef9d18e-30f7-443a-848f-fb51bf733f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0486e2df-e1ac-42fa-aa0c-52f8348b891f",
        "cursor": {
          "ref": "4a3d1e3c-33ff-4ed8-98d8-5ff085df5aff",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "059e6f5c-bce5-4319-9488-5462b08d75c7"
        },
        "item": {
          "id": "0486e2df-e1ac-42fa-aa0c-52f8348b891f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d2e705b8-d600-4bb2-85bb-5d1673b288eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4754b6ab-d6fe-422b-81f6-2cb3b47a636b",
        "cursor": {
          "ref": "47e1709c-c3df-40b4-964e-9f93d0747972",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1ce2858c-7990-4f54-8426-6de1d6b949fb"
        },
        "item": {
          "id": "4754b6ab-d6fe-422b-81f6-2cb3b47a636b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6d9de285-1d0b-4c33-a1a4-ef87bf1dea4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f4641a-1c37-4020-93ca-7152501044b3",
        "cursor": {
          "ref": "83d07c35-05ed-4942-ab2c-cb6da70f4123",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8db4fdf4-bbeb-4f73-96c1-2ca45ef0659c"
        },
        "item": {
          "id": "34f4641a-1c37-4020-93ca-7152501044b3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5406b0fa-6e29-4d23-965a-4fdfc34d23dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15e4b33-168b-4c3d-846e-e907df137810",
        "cursor": {
          "ref": "2334d551-7795-4dc3-8425-241003857410",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5178b789-2c6d-49ac-9db3-34a8b57c0ba6"
        },
        "item": {
          "id": "e15e4b33-168b-4c3d-846e-e907df137810",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8b08bd34-ea95-4127-bdbf-e4c809acc3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe5e445-5860-4658-9f88-d83c0494d660",
        "cursor": {
          "ref": "c0654b68-808e-434f-a092-65cbef51d313",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a3581736-7888-4f28-9b28-895165125848"
        },
        "item": {
          "id": "9fe5e445-5860-4658-9f88-d83c0494d660",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "64180f25-34f7-4443-bde6-832a392453b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98911e6-258d-4562-a74b-48f5151f3247",
        "cursor": {
          "ref": "1d77b77b-5bd5-4aea-a27c-1f9b0999c244",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "aa0d88e0-1521-4d2a-9774-8a41a42f0f85"
        },
        "item": {
          "id": "a98911e6-258d-4562-a74b-48f5151f3247",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "838f2308-04d9-42c5-8530-5067dbf29293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b5c977-b8fd-4dfd-910a-aeda87d55864",
        "cursor": {
          "ref": "da1ce786-a88a-4a8a-bb61-f91f9ebd2fc2",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "34b3f9e4-9c8c-42d8-a128-3995a741c677"
        },
        "item": {
          "id": "b4b5c977-b8fd-4dfd-910a-aeda87d55864",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "91267be3-297c-4b2c-bca1-b4dd8d91a9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9db0d6d-882a-4fc2-b79e-5dfa90252bef",
        "cursor": {
          "ref": "9251dcdb-85e4-4576-961e-c32c6ffe0455",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ab845946-fabd-40f1-93b4-96bb8c331953"
        },
        "item": {
          "id": "d9db0d6d-882a-4fc2-b79e-5dfa90252bef",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e4f86182-6e39-44aa-a944-0b8ce9d6a0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25953a20-d941-4742-a458-eb3789a69fee",
        "cursor": {
          "ref": "bd8bbd53-e584-43e5-addd-efc90f589713",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "903ef463-80c2-495d-82d8-262243a4e6ee"
        },
        "item": {
          "id": "25953a20-d941-4742-a458-eb3789a69fee",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a9fc7439-9a9d-4694-9b26-4efba30243c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02f98b7-9647-4d92-bc66-b5cd7ff10c9d",
        "cursor": {
          "ref": "a22e75ee-a594-496f-ba83-c8b6cecc3bd3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3e26e67c-292d-43af-bffc-1facb66824f2"
        },
        "item": {
          "id": "d02f98b7-9647-4d92-bc66-b5cd7ff10c9d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6e52200e-5afb-4078-8896-35d9a256ce51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e074b45-c234-4bfd-b0f8-729e13670b11",
        "cursor": {
          "ref": "d973d39a-4da4-4cbd-aa9e-309532316fad",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "33e22ea3-7579-47e8-8299-526ddaeb5c62"
        },
        "item": {
          "id": "1e074b45-c234-4bfd-b0f8-729e13670b11",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d26b9f89-c325-4ad0-950e-3204b8ab320d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495c8ad2-ca6f-45c1-bcf1-18a066b4b834",
        "cursor": {
          "ref": "c9f9041a-46c7-4e23-99a8-c86e235672dc",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "37751984-fb2c-4f58-ade3-e34201788d7b"
        },
        "item": {
          "id": "495c8ad2-ca6f-45c1-bcf1-18a066b4b834",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dea66b0e-19f3-440f-bb44-59bb86b453a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43c292d-78b3-4b93-a609-e5c5203d5792",
        "cursor": {
          "ref": "cf04acfb-e663-45e6-8c2f-9b4da0378fb0",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5f4dd810-f35f-48ab-9727-f921e19a4349"
        },
        "item": {
          "id": "d43c292d-78b3-4b93-a609-e5c5203d5792",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fed60c4a-ff05-4361-8602-1bcbd776ba72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe5ac3a-525d-4eeb-9ef6-cea2a6ff49f9",
        "cursor": {
          "ref": "0ed5537b-fb23-4118-9c4a-a429668d5e24",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "18df950a-b402-4f8a-9dc2-5c45b6fa3a90"
        },
        "item": {
          "id": "2fe5ac3a-525d-4eeb-9ef6-cea2a6ff49f9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fba9db08-9c71-4872-91f6-fbf033a3a40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b999f9c-9e65-484b-b0e2-fe08473fe5ba",
        "cursor": {
          "ref": "3bad9c07-a776-49f2-a854-ea29dcf520bd",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "02868347-cc48-472b-9d22-af46e6eca883"
        },
        "item": {
          "id": "9b999f9c-9e65-484b-b0e2-fe08473fe5ba",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e6ff33aa-0085-4b5d-a89b-f4fb8536c8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6afa766-dae2-429c-9db6-014d1a1b3dc9",
        "cursor": {
          "ref": "d53c2209-90fc-4ee6-9cf7-e88677ddfb03",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "202e3ed4-b284-4184-85b0-2f0b47fc63f1"
        },
        "item": {
          "id": "a6afa766-dae2-429c-9db6-014d1a1b3dc9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a5966fec-70a3-4e15-8638-70bef7f517e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5944d787-58e1-4955-9d75-7ca021b1160e",
        "cursor": {
          "ref": "bc911652-2527-465d-b322-7e921808602c",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a5a45f83-9b3d-4dc7-bcb2-fa36ed82fd35"
        },
        "item": {
          "id": "5944d787-58e1-4955-9d75-7ca021b1160e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a7a5b39e-9b53-4ff2-9ca1-2adc50cf7e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c3e45a-446d-4fea-aadf-b48f61e8e3ca",
        "cursor": {
          "ref": "df7632f7-4609-4dde-a253-16c4f736f0ad",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "96cafb88-4dd0-4660-816a-4a3f88448dd8"
        },
        "item": {
          "id": "c2c3e45a-446d-4fea-aadf-b48f61e8e3ca",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "01fe49df-3b4b-42cf-b486-34f15f343648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6f083d-a679-4e8b-bf6e-60af93c949c2",
        "cursor": {
          "ref": "73a67535-a90f-4903-9b91-21f5787e3920",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d810c3a0-53ed-42ad-ace5-704aae880059"
        },
        "item": {
          "id": "0c6f083d-a679-4e8b-bf6e-60af93c949c2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e8a49925-c778-462b-9aa6-f491434f8989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b71b33d-8f0e-4ee7-8608-09ba6cfa28ec",
        "cursor": {
          "ref": "bf523e53-8669-4373-a39d-208d8bbdd684",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "04beb997-df28-4133-b89b-a6dc23695982"
        },
        "item": {
          "id": "8b71b33d-8f0e-4ee7-8608-09ba6cfa28ec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1825d7df-84a8-4e15-90ef-2a9310f41bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2afa023-929e-4b92-9002-281a2823bfe5",
        "cursor": {
          "ref": "5d8ece96-371b-4086-a4f9-c514901fe005",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "beb1f842-8bca-47f9-b247-8bc37ba96336"
        },
        "item": {
          "id": "c2afa023-929e-4b92-9002-281a2823bfe5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3160e81b-a8e9-404d-9aa4-e2955fb7b93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e814ad6-70b3-4b06-8d07-91ef7dd9030f",
        "cursor": {
          "ref": "6d1851db-7d36-40ea-8906-715a192b0166",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "98cf8ce4-caf0-4796-91a3-cc918e301759"
        },
        "item": {
          "id": "0e814ad6-70b3-4b06-8d07-91ef7dd9030f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "56770648-4e69-4d75-86c3-9a15d4e27fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193656a2-0e63-49e1-bb5b-60b1841d7d57",
        "cursor": {
          "ref": "41f8893f-a903-4154-8fb9-41aef4b265ad",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e874f863-913f-4f79-9fea-2c4c356eedaa"
        },
        "item": {
          "id": "193656a2-0e63-49e1-bb5b-60b1841d7d57",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4578a203-9c70-4b35-994e-0248a7e3877d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cae3f59-d3be-40fe-b271-64418a507100",
        "cursor": {
          "ref": "ec7f52cf-b031-4bb9-b211-5c83dc9499e2",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "47a31748-d171-4786-a57f-c6d564aaa78d"
        },
        "item": {
          "id": "7cae3f59-d3be-40fe-b271-64418a507100",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a2e3641d-946d-408c-897f-83f988b70db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17cfdde-b2a0-48ef-a2bd-cce8822b9694",
        "cursor": {
          "ref": "d8c8ea16-e0ad-45ac-bece-5d1bacf62080",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7d7aaac0-eb54-49f5-b6eb-4b210cdd0ae4"
        },
        "item": {
          "id": "d17cfdde-b2a0-48ef-a2bd-cce8822b9694",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1ca9b60f-f034-429c-ae0a-d16fe648f42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b767640-524f-4aa3-bd6f-79eb5505919d",
        "cursor": {
          "ref": "b694c356-eb07-429b-8714-a7d7b4f834eb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "000ad360-54ba-481c-b8db-00b132909750"
        },
        "item": {
          "id": "5b767640-524f-4aa3-bd6f-79eb5505919d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3c2406e0-d0ec-4f61-af83-696acbd27b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a9a77ae-6e68-4b11-9dd2-c6564617d115",
        "cursor": {
          "ref": "69125eb4-5c88-46e8-bae9-4355b0d2508b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "70786234-32fa-4e24-aa91-7f446646e9d2"
        },
        "item": {
          "id": "4a9a77ae-6e68-4b11-9dd2-c6564617d115",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bc47480b-ebb2-47ea-b247-539d3b5a1d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596d43e8-71f1-408a-9399-f77b0713c8d9",
        "cursor": {
          "ref": "8b91696d-5296-4a0c-aa41-c078d8415c7a",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c90efe19-4e46-4504-b958-82b324d8624b"
        },
        "item": {
          "id": "596d43e8-71f1-408a-9399-f77b0713c8d9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5ec8ea12-70dd-44ae-a108-7aeda2a5c87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90247faf-359a-4196-b3ef-c5b6e7018e3e",
        "cursor": {
          "ref": "f3c15467-f6a6-4878-89c3-b1323f05386c",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "171c23ba-d154-4b77-9ca7-9ebf7d1975fc"
        },
        "item": {
          "id": "90247faf-359a-4196-b3ef-c5b6e7018e3e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f4ea08ac-7d36-470e-b4e2-9b0d53a9f9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed476959-01ab-4f63-b496-2aaeda5fb9c3",
        "cursor": {
          "ref": "9f143600-9fa7-4a91-8eef-6daf964634e4",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "49fc0e83-58f7-492c-9a10-df4970ea1d58"
        },
        "item": {
          "id": "ed476959-01ab-4f63-b496-2aaeda5fb9c3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0ade53cf-175e-44eb-b465-c6cbca2424d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd1516a-145b-488f-8596-4d9d566fb985",
        "cursor": {
          "ref": "4814541c-1a2c-4ef4-934e-e34f3ab9ad04",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "774d993f-ede2-4bfd-a826-1cdfa84efd82"
        },
        "item": {
          "id": "bcd1516a-145b-488f-8596-4d9d566fb985",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "354d1dd2-e0b2-463d-a869-f937b3208672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b0d685-0232-47c5-af8b-5e74a1c56622",
        "cursor": {
          "ref": "3071c30c-69e0-456e-984f-df7bc80e5ed6",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "543452dc-d97d-4358-8140-d1ffb38b1e54"
        },
        "item": {
          "id": "01b0d685-0232-47c5-af8b-5e74a1c56622",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e359faa4-8be8-4271-ba49-d307c479f18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5efade-644b-455f-89a4-860ccaece219",
        "cursor": {
          "ref": "f1e5f0d2-0da2-4f69-928a-a3316158b769",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7259d3ad-92eb-445c-822f-50da629c1e50"
        },
        "item": {
          "id": "be5efade-644b-455f-89a4-860ccaece219",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e221f7e0-e1eb-40f8-ae59-b183c8c85edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619c2602-eea6-495b-b341-eef4f6e9ae7f",
        "cursor": {
          "ref": "8cedc910-4c00-4a25-805e-f6a651185000",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1b9ce5e3-b8ba-4827-873b-d46e8c0efbf9"
        },
        "item": {
          "id": "619c2602-eea6-495b-b341-eef4f6e9ae7f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a973fb86-6ae4-4716-8539-7d2ce6016d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323ac2c0-da94-4657-b31e-38887d48494b",
        "cursor": {
          "ref": "b8667416-2b96-463c-914d-d6eb451e71c5",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "df726b36-3207-400e-b3f7-9965e36d1a9f"
        },
        "item": {
          "id": "323ac2c0-da94-4657-b31e-38887d48494b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bea3b7dd-c20b-4488-97aa-b1f81866aaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec12053-0949-4a25-95b7-56569f52c2bc",
        "cursor": {
          "ref": "3025bafa-19d9-44d3-800b-93db3459b50b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "665d70c2-8be3-4276-8da5-1cb64a406930"
        },
        "item": {
          "id": "bec12053-0949-4a25-95b7-56569f52c2bc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e1a91e7a-8e47-4a58-9ad1-4d6a19d25b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1a7b76-6c19-4aae-a327-4ef50bda4924",
        "cursor": {
          "ref": "cd861e95-51b7-4dc3-bc12-0cd9229bdcc9",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f76f0071-2a06-45e3-8c0d-9aec6e24c6c9"
        },
        "item": {
          "id": "2e1a7b76-6c19-4aae-a327-4ef50bda4924",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d4819d1e-337c-49ad-a7ba-71fccff0fa56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb4e1cc-ef14-4ea0-a4ab-de4bbef37034",
        "cursor": {
          "ref": "82de8870-9ad8-4ea4-8d74-1e55b0acc7ce",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6c3b587b-4d8a-449c-b3bf-03d0b4913439"
        },
        "item": {
          "id": "ebb4e1cc-ef14-4ea0-a4ab-de4bbef37034",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a44f0b08-4514-4ce8-9ebc-4ca288bac8c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76337ef-8e67-481a-9d1e-c2258c046aa6",
        "cursor": {
          "ref": "bf1a8a80-6520-4c58-b432-d06d948ba62a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4185a094-69d8-4f2b-8adf-2a8faa896cf4"
        },
        "item": {
          "id": "f76337ef-8e67-481a-9d1e-c2258c046aa6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7895acc6-74af-47c4-979a-35c5899ebe55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe346be-2910-49af-b0a4-b04a63745523",
        "cursor": {
          "ref": "327dea37-6b22-4125-bb05-4c4911118772",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8a5ec4b4-8d88-454e-9e01-821c20c5979f"
        },
        "item": {
          "id": "4fe346be-2910-49af-b0a4-b04a63745523",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d4766435-3682-4f87-b7a7-efc09c37add7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c371350a-bbcc-49ff-a672-c7e0eaea093a",
        "cursor": {
          "ref": "08a392cc-4ec1-4858-bf8d-dbb58b9638fd",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f5477d1c-c464-47fb-9d1f-7f2aeb44af4a"
        },
        "item": {
          "id": "c371350a-bbcc-49ff-a672-c7e0eaea093a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "87b5a05a-40db-45dc-b82b-f10f77cca39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b2a1e1-1fc5-4235-b529-2f294d82ef66",
        "cursor": {
          "ref": "8cc5369a-6b87-4939-98cc-5b074dc76278",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2a7cae68-59e8-427f-9eb5-8d15c8f846f7"
        },
        "item": {
          "id": "a1b2a1e1-1fc5-4235-b529-2f294d82ef66",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f731830b-d0f0-4e41-a10d-544cd6a29838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90fbb48-abbc-465e-a58a-8208c30b63a8",
        "cursor": {
          "ref": "e73ae171-0e88-43bc-a8d3-375b8b8c5002",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2193223e-f1ea-4b5d-99d6-7d00e2185379"
        },
        "item": {
          "id": "a90fbb48-abbc-465e-a58a-8208c30b63a8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cad3b3aa-5a9c-4826-91a6-bd526b424009",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1c3296-96ba-40ce-99fe-24240ca4a932",
        "cursor": {
          "ref": "63200430-eb0e-4439-a7bd-b06982804ea4",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1d9bc30d-4829-4c7e-8cda-71444c200bce"
        },
        "item": {
          "id": "da1c3296-96ba-40ce-99fe-24240ca4a932",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e82eecfd-126c-42b6-a6b8-6532b49ed033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c212cdc-459b-48f7-85f2-60c2fac340ac",
        "cursor": {
          "ref": "e8fd9fe3-d0eb-4316-ab33-36bb139103ba",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e23c8aa5-b0ad-40ef-b0d7-7b40a58d6114"
        },
        "item": {
          "id": "7c212cdc-459b-48f7-85f2-60c2fac340ac",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "932f7612-c959-4e66-981e-38343e38a0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c464a789-6807-43ae-823f-ed11720333f4",
        "cursor": {
          "ref": "eeb69264-3f2c-4ffb-9711-678a5b9199e2",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f395b4c8-87e1-40c7-9d4d-231ebc1ac65e"
        },
        "item": {
          "id": "c464a789-6807-43ae-823f-ed11720333f4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "dce43ee4-e91d-4d21-bc43-31eaa5a2b461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7819ed11-97ca-4100-9317-d1c055e90128",
        "cursor": {
          "ref": "696df351-16be-4d89-9e96-a103678b9145",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f489bd83-99a0-4325-b532-5788375101eb"
        },
        "item": {
          "id": "7819ed11-97ca-4100-9317-d1c055e90128",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "62048379-10eb-4944-911b-f66f596b157d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e327d6c-c737-4c18-904c-e9ee898b6139",
        "cursor": {
          "ref": "c8bf32ef-6392-44b7-ad66-5c42797a953d",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ceb5c331-2ec9-4aeb-bc8e-2188afc96d5e"
        },
        "item": {
          "id": "3e327d6c-c737-4c18-904c-e9ee898b6139",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0e716a8d-211b-47b1-ba1a-76a38e88b57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfc2326-f6f9-44ef-bc30-c0f6656cdc6e",
        "cursor": {
          "ref": "2189452b-cd3f-4484-b35c-294d230bdb3f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e1f47014-780d-4c72-9123-cfe3f23370b0"
        },
        "item": {
          "id": "cbfc2326-f6f9-44ef-bc30-c0f6656cdc6e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c56ce77a-db9f-430e-af6a-b1ba6f9c7247",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "7faab664-9d4c-41a1-a4cc-f0b7e5ee471c",
        "cursor": {
          "ref": "05ca06d2-9c1e-405a-86e7-bc0a533f8abb",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d8973a23-4171-4460-bd03-1648ff91f769"
        },
        "item": {
          "id": "7faab664-9d4c-41a1-a4cc-f0b7e5ee471c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c8aa7742-f12e-46fe-ae9f-27cbcea9707e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d4b26f-85c9-4e52-a994-2ff7c9d4e688",
        "cursor": {
          "ref": "47a0832f-b52f-4304-b9e2-6cb8e800b8af",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "679efdf0-2d5a-4a19-97c2-a580655db0a8"
        },
        "item": {
          "id": "10d4b26f-85c9-4e52-a994-2ff7c9d4e688",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d30e57f1-bed6-4771-94e0-eec8736094ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5f3822-d3f9-4509-b6d8-0e302b363663",
        "cursor": {
          "ref": "25bcee4e-05bc-4b25-9026-c2573a39cc80",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8e1857f1-01e3-4965-9bf6-077c6d868047"
        },
        "item": {
          "id": "7b5f3822-d3f9-4509-b6d8-0e302b363663",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "02c2f7f0-f23a-4caa-80d2-efe28991101a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c6e16d-1f24-4cbd-b045-87b8352aabe9",
        "cursor": {
          "ref": "984e0bec-a1e9-49b8-bea1-3b3797d7381d",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6c0338ab-79a0-49fb-939a-93629659f9c4"
        },
        "item": {
          "id": "b9c6e16d-1f24-4cbd-b045-87b8352aabe9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9b5ac998-7612-49d5-b31e-3d564874d7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09028bce-2e91-4766-b06f-0f440656ed74",
        "cursor": {
          "ref": "d688b9f3-5e0d-47c5-8a6d-648af0a3663f",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "60f0d25d-85bc-480e-8302-5995aaad973d"
        },
        "item": {
          "id": "09028bce-2e91-4766-b06f-0f440656ed74",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "aaed6444-378c-447a-a246-a44da5e85fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192a42e0-65d1-4015-b33e-e43ee17b3a7c",
        "cursor": {
          "ref": "83d0cc43-f949-4c6c-bdc7-eb28e33fef5a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b174d7ff-995b-4040-833c-9e1803dc08ee"
        },
        "item": {
          "id": "192a42e0-65d1-4015-b33e-e43ee17b3a7c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "73709c74-94f9-4a66-9005-7e775cb14af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c42f9a-8aea-422d-b9b2-e2a6ead3f177",
        "cursor": {
          "ref": "951548ae-bc63-4711-ab51-e3c68e05cc4c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0510069b-3518-4ff1-afd3-8f0bc560c692"
        },
        "item": {
          "id": "d4c42f9a-8aea-422d-b9b2-e2a6ead3f177",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c37ca1d6-5588-43e4-bc4d-b406de4f476b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230f5116-b4c6-4aef-a60a-65aa986b44ad",
        "cursor": {
          "ref": "14a6b394-3ee4-403d-810a-36641b8ca74c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9cb264aa-6554-40f9-b458-f0fcf48fce18"
        },
        "item": {
          "id": "230f5116-b4c6-4aef-a60a-65aa986b44ad",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3673292a-1736-4386-b608-b592d710a00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a264fa69-a5a0-42a1-8a04-3f5fe959fd4a",
        "cursor": {
          "ref": "8fe3c2cd-7989-4271-a531-9df7c08d7419",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9386c294-5fa9-439d-af2f-b9de74193502"
        },
        "item": {
          "id": "a264fa69-a5a0-42a1-8a04-3f5fe959fd4a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "68438883-5a8b-4a1a-9e5b-764a0061abc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6f8ced-d8cd-4b2b-8c2e-6ab8c87a8d37",
        "cursor": {
          "ref": "d36a5142-8f27-4cbe-b059-a1cde60c893a",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "25b9c277-bc10-459f-9341-01faf598e53b"
        },
        "item": {
          "id": "ca6f8ced-d8cd-4b2b-8c2e-6ab8c87a8d37",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c1a7587c-9b07-4a38-8b3d-7bd185598bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0e191e-ad39-4487-a711-ded7fcd69396",
        "cursor": {
          "ref": "9adc61bb-1ed8-4391-b3e2-32dc62e35ef1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "eb672add-569e-4ee7-87d0-8053c3168a89"
        },
        "item": {
          "id": "6d0e191e-ad39-4487-a711-ded7fcd69396",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c64a1ce2-d3d5-4bed-977a-4e15af700a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a284e747-4785-4ee4-a182-ae8fdfef4722",
        "cursor": {
          "ref": "c7d206cd-84cb-45cf-9e6f-07014121024d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8f922e51-df92-4116-aa2f-1c480da8d92a"
        },
        "item": {
          "id": "a284e747-4785-4ee4-a182-ae8fdfef4722",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2e5be921-4518-4945-ad14-3b976cdecd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdc1344-0cae-44c4-9c85-2e606fbe2c7e",
        "cursor": {
          "ref": "6081199e-c328-48a8-a579-f8c296af2467",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7e4d6b4b-b373-41a0-8337-47afd9ea56c7"
        },
        "item": {
          "id": "1fdc1344-0cae-44c4-9c85-2e606fbe2c7e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6aea9ccd-1181-4abe-911e-56ff3a3a062e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e98c9a-325a-4c89-8570-b93770180f94",
        "cursor": {
          "ref": "00e7dd0f-8539-419c-9f78-b6b1f56ff09b",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8738989e-4033-4983-945b-b185e240a088"
        },
        "item": {
          "id": "88e98c9a-325a-4c89-8570-b93770180f94",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a8cc373c-8469-4ae6-97fa-5630b122ef55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5fe4c24-ac4e-4805-99d8-06febf4250f2",
        "cursor": {
          "ref": "da867d83-ade7-49c2-b44a-dd7591702ec1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c9fc6045-6f96-4ef7-a79f-e7164dd02a11"
        },
        "item": {
          "id": "a5fe4c24-ac4e-4805-99d8-06febf4250f2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fb5f75c1-424c-4077-9b18-1d4bbc3d1ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fda057-0271-4596-abc5-8da6b67a8a4f",
        "cursor": {
          "ref": "28403332-4bed-4b94-ad80-a3afecaf3cef",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "53857964-44bb-4989-829d-5db532528824"
        },
        "item": {
          "id": "f5fda057-0271-4596-abc5-8da6b67a8a4f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d15287c7-adbe-4f7a-87dd-6b641f1855e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a0f81e-1d07-434f-bdfc-adf9d5c7a723",
        "cursor": {
          "ref": "14b12032-577e-4969-96a4-a8278490d50e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1089ca8d-1f8a-4c0f-b992-211dd796302a"
        },
        "item": {
          "id": "78a0f81e-1d07-434f-bdfc-adf9d5c7a723",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "67fa2e06-b27d-4d88-b840-db6cd1333d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebd71a4-ba85-4a81-a6d6-b6e9ed4c11d0",
        "cursor": {
          "ref": "f5605448-6b19-4386-bad3-8fa8e1b7adc0",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4047954f-0e7c-4392-9d51-27ccc4a51f67"
        },
        "item": {
          "id": "7ebd71a4-ba85-4a81-a6d6-b6e9ed4c11d0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d1d48190-27b3-470b-9ea6-c5307f5b17a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e517b30f-97b5-42c3-8de4-9dbfd130c72b",
        "cursor": {
          "ref": "3e1f843d-807b-4534-aada-2b53e50a50bc",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "92440953-866b-4158-82ff-6ba50fa245b2"
        },
        "item": {
          "id": "e517b30f-97b5-42c3-8de4-9dbfd130c72b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7fa03930-c895-4b51-96cb-fac221ce5de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d933a6-d45c-40fb-9833-c3af5a5b3299",
        "cursor": {
          "ref": "53690a3c-1d48-4247-80f5-a1df1ea438fd",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0c65d48a-f221-4ef3-bd00-31bb65f477df"
        },
        "item": {
          "id": "43d933a6-d45c-40fb-9833-c3af5a5b3299",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "56e9f7ce-e578-41f8-b978-e83b13d8150c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3459ac6b-b946-42a0-a4fc-f67c00099e11",
        "cursor": {
          "ref": "dc3c16f6-538a-4cc7-a680-adc33d1d6c28",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d7fc2112-ff95-4fa3-8857-977e1e355932"
        },
        "item": {
          "id": "3459ac6b-b946-42a0-a4fc-f67c00099e11",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "77ba23ac-b4c0-43be-a3ec-589cefa4789d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bec535-180f-4df6-8798-15306a80d693",
        "cursor": {
          "ref": "1cfd77a5-0731-498b-9cca-317edd4b2c75",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "35f477cc-3ca0-4bc2-9201-133ed6b78a89"
        },
        "item": {
          "id": "09bec535-180f-4df6-8798-15306a80d693",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "31d2cde4-15f8-4a07-9628-fb65ede6d1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc35bf80-ebb4-435c-b1fb-4c86f7e7e909",
        "cursor": {
          "ref": "552bde0b-e7d7-47bc-b129-7ca5cba9ff06",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "639e0558-63a2-46e6-bed4-dcb482d7deff"
        },
        "item": {
          "id": "bc35bf80-ebb4-435c-b1fb-4c86f7e7e909",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a48816c1-e0b3-4355-938a-a7b92f92e8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c369c5a-c522-453a-b156-538165b93cf0",
        "cursor": {
          "ref": "bddddb38-41ac-4def-be22-0923c16505f7",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8854182f-79fa-45c0-8671-cd04466023f2"
        },
        "item": {
          "id": "9c369c5a-c522-453a-b156-538165b93cf0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e3198a40-18d5-467c-bdcb-5f8cbd235d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38515722-6b07-4cf1-b504-d9bec03438d7",
        "cursor": {
          "ref": "efe8a751-ae84-4016-91d5-2ff5330366b2",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e322900d-9993-4061-aba8-0424b09550ab"
        },
        "item": {
          "id": "38515722-6b07-4cf1-b504-d9bec03438d7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "dd69b93a-ea17-4ea3-934d-0707aaf3f51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15d8f2a-8c1f-460b-9ebb-d001672d0520",
        "cursor": {
          "ref": "59b46268-717d-4982-bfc8-545e3336c576",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cf95fb2f-5860-4176-be93-2e2a0720884b"
        },
        "item": {
          "id": "d15d8f2a-8c1f-460b-9ebb-d001672d0520",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "32bea596-9582-4e2b-9b63-7f4d7f50fd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f366624-a1ac-4b64-a5f5-109ea0b5a9e3",
        "cursor": {
          "ref": "a394a923-dd3f-4a7c-96ff-b8992547787b",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "adcbc729-96ee-4c3f-b13b-f30b2c394fbe"
        },
        "item": {
          "id": "5f366624-a1ac-4b64-a5f5-109ea0b5a9e3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d95a1bba-7420-463a-987f-e13aeaa18bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3806224-801d-4db6-ad43-9d3332c42d89",
        "cursor": {
          "ref": "938b0377-78c2-4649-ac56-40b9574e6f5e",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "db82b3aa-ed8c-4b23-9ddd-d39a4367778b"
        },
        "item": {
          "id": "a3806224-801d-4db6-ad43-9d3332c42d89",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7d63a939-e88d-42c7-99cb-9e8f8077c6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5b2596-da61-4971-9c38-5e2723a0d878",
        "cursor": {
          "ref": "b33a5c3c-5c5f-48ff-aab1-11fca3a5eaaa",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b88d1495-09d3-4309-aee0-9b6599f91f51"
        },
        "item": {
          "id": "4b5b2596-da61-4971-9c38-5e2723a0d878",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "69658697-5004-49aa-b362-3510c900ab2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c47683-2ce0-4652-91e9-746cf576efde",
        "cursor": {
          "ref": "526a3c92-b007-46e5-a0b6-0064663ff073",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e2c46151-ab0a-4a21-af43-773f918068d5"
        },
        "item": {
          "id": "82c47683-2ce0-4652-91e9-746cf576efde",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "88a81c3f-62d7-43a8-a5c8-b09ab8e7e6f5",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9f7f39f8-4848-431d-9044-50ea2c643bff",
        "cursor": {
          "ref": "e7657457-50a3-45f1-97a4-edc7696e635b",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e517a658-19cd-4402-a98f-462c967cc0b5"
        },
        "item": {
          "id": "9f7f39f8-4848-431d-9044-50ea2c643bff",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5ffef72a-a722-4bba-8d59-1f58cfb80f63",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "851cab76-cbdd-4c58-9f5d-3b3351c7facb",
        "cursor": {
          "ref": "a37bf9b8-ea3c-4af5-9ba8-d19e6dce6e63",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2c6107ed-3087-4f73-b199-c4febe074b71"
        },
        "item": {
          "id": "851cab76-cbdd-4c58-9f5d-3b3351c7facb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3028f252-9551-46e8-b646-767470744554",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1f355c03-b0ee-4cce-bed1-464adb4c0130",
        "cursor": {
          "ref": "1aba519e-96ef-49c9-b9d6-31d79f9df549",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "de509d75-4c82-4097-bfe2-9acce5ac6155"
        },
        "item": {
          "id": "1f355c03-b0ee-4cce-bed1-464adb4c0130",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a9a9f2b3-f85d-4e8b-919c-335b1fda6f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4078a230-4058-4232-9e78-917297cc5ac6",
        "cursor": {
          "ref": "7111196a-722c-4b7f-8448-cce7556b026f",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b030b498-f42e-47d6-8eec-d6012b82e2db"
        },
        "item": {
          "id": "4078a230-4058-4232-9e78-917297cc5ac6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1b491bd5-003f-4693-a52f-a28778cabe42",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "16c3432a-7dc8-4f70-bd64-0d796ab1fa25",
        "cursor": {
          "ref": "9237dd4c-f12a-4dca-ae25-62bae7dec1a0",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2569a1ac-4c6c-460b-8914-bef3f8f81a0b"
        },
        "item": {
          "id": "16c3432a-7dc8-4f70-bd64-0d796ab1fa25",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "19a88c0c-6f5b-40e4-8ef6-d9cd2ac2cb95",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "89e9db28-42fc-4a75-9562-5e37d7141bcd",
        "cursor": {
          "ref": "1163b82c-2489-46bf-b91b-f3b16356a968",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1793e2b9-f43c-4d5a-ae3a-61124618c48d"
        },
        "item": {
          "id": "89e9db28-42fc-4a75-9562-5e37d7141bcd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a543d062-d54e-4085-b546-52f324d62fae",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1be44fa7-6978-448d-a4b3-6cf94fbd21f5",
        "cursor": {
          "ref": "0d5786cb-ed70-46ed-ae8f-3e3c322a82c4",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "95e1deb4-98ce-4f41-91a6-57bc00fc9547"
        },
        "item": {
          "id": "1be44fa7-6978-448d-a4b3-6cf94fbd21f5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "66853306-6ff4-4f5a-914b-34d6cabd0767",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "fd358bc8-55b0-40ac-a361-ac34f439d7a8",
        "cursor": {
          "ref": "b93e0c46-f109-41da-9875-36e391c2a514",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "25b5718b-8ab6-4cd1-b5b0-8bbcaeba8154"
        },
        "item": {
          "id": "fd358bc8-55b0-40ac-a361-ac34f439d7a8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa44fd7f-383f-43b4-8bd1-1efc08e64c6a",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "22e69544-5526-4003-a1b0-7757977860e1",
        "cursor": {
          "ref": "ffa4ff83-f4c2-49fd-811a-f652ff76fa20",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e6fafffd-a587-4b92-a58e-a9558908d4fd"
        },
        "item": {
          "id": "22e69544-5526-4003-a1b0-7757977860e1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "868962e6-b296-446e-816e-7ae29a1cfd72",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5e8c0341-e319-4d29-ac3e-cf4d2ef14f45",
        "cursor": {
          "ref": "fe244c7f-7c95-4019-ba4d-fc0d6571c7c4",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "612a3cba-40cc-4528-89db-51af33b5f92c"
        },
        "item": {
          "id": "5e8c0341-e319-4d29-ac3e-cf4d2ef14f45",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1a0e25fc-c01a-4bb8-9e32-b678bb8dd181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6aabe0e-5fd3-4e36-bbe8-409c15096bb8",
        "cursor": {
          "ref": "bff5c1c0-fc03-4d99-9091-0015a0f02f65",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e9ae5316-6c5d-4d6f-943f-9d9b1a1193bc"
        },
        "item": {
          "id": "d6aabe0e-5fd3-4e36-bbe8-409c15096bb8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d124f3d1-3b3a-448d-a333-b5bca415c4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54efdbd0-af5e-4748-a279-a014498b677f",
        "cursor": {
          "ref": "4699b002-e2a4-47ae-96e1-32a3b8f8c796",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "28f9a576-1461-4366-a229-f3b25854e23e"
        },
        "item": {
          "id": "54efdbd0-af5e-4748-a279-a014498b677f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a3d30e97-651a-41a0-8a7c-43b2aea0dabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8428173c-789a-43a9-92cb-fddb53a86c10",
        "cursor": {
          "ref": "3b495353-c628-4734-a1b3-914a2cf01ab0",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1be80265-269d-4277-a8d1-7eed62e3b4e8"
        },
        "item": {
          "id": "8428173c-789a-43a9-92cb-fddb53a86c10",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ae00ea56-e221-4841-9aae-6bd947592010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd3d17a-4364-40ff-94bf-965f05e8ed0f",
        "cursor": {
          "ref": "de17a9fd-55cb-4384-bb28-cbaed2ffc0db",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4ffa30d2-8347-4a80-9226-61e8da1b81d8"
        },
        "item": {
          "id": "9cd3d17a-4364-40ff-94bf-965f05e8ed0f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ec060c30-7e8f-4ece-b248-54a74c7beb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73253a85-2427-44fd-bf56-7a303eef9f97",
        "cursor": {
          "ref": "336ef4c7-3a30-486f-8495-e2fabe4d18e2",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ca329f0c-9d62-402b-ae75-a53252c48753"
        },
        "item": {
          "id": "73253a85-2427-44fd-bf56-7a303eef9f97",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "403f0a12-89f8-428c-b7ec-809d68fb1f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34dbf222-8016-446c-9cb6-0869fccba87a",
        "cursor": {
          "ref": "468c45e7-58b7-4fc0-937b-677735137475",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "eb51e072-2301-4ab3-b7c5-bbad6a25a9d5"
        },
        "item": {
          "id": "34dbf222-8016-446c-9cb6-0869fccba87a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2aad6b1a-84ae-4b5d-bbc1-808f087860bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5969fee5-d48a-4cec-9be2-0bd6f43bc35b",
        "cursor": {
          "ref": "a76d63f3-dcf5-4d88-85e7-c9b0fa8327fa",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "efea9279-8353-435c-af6c-01ef40552966"
        },
        "item": {
          "id": "5969fee5-d48a-4cec-9be2-0bd6f43bc35b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4068d9ee-a03f-4e14-90ac-0df2a6002c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f5927a-5a58-4bf0-a682-81e80d51ebc4",
        "cursor": {
          "ref": "6ffddddc-2730-4430-8114-a5a93fc5b382",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "178d69a0-831d-4cf0-ace6-5695bccb59af"
        },
        "item": {
          "id": "45f5927a-5a58-4bf0-a682-81e80d51ebc4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2041e05e-7fb1-4174-a0e2-9c49b72329d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e9a9c8-b182-4c9f-b22e-b2445a00d7e5",
        "cursor": {
          "ref": "e5215aaf-5da7-440b-a554-5a2bd39aa38d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c1e7e0ec-4665-4be0-832f-f9925f23318c"
        },
        "item": {
          "id": "72e9a9c8-b182-4c9f-b22e-b2445a00d7e5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "180001b5-5823-46f9-b931-0e35f943aac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88e186f-a359-4576-b56d-195ee5459498",
        "cursor": {
          "ref": "29e2afed-994d-40c3-b646-3348474ba577",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b248dfbc-e30c-4ac7-9601-c1b94ab5095f"
        },
        "item": {
          "id": "e88e186f-a359-4576-b56d-195ee5459498",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a4eb0a88-9d0e-4d3d-b9c3-95955bea9d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7729344-0ee3-4bc9-918a-ed6eb91ceeac",
        "cursor": {
          "ref": "1a9ab215-773e-4ba4-8049-e517702b6d9c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ef4d0759-db2d-4397-ae01-8d558c748519"
        },
        "item": {
          "id": "a7729344-0ee3-4bc9-918a-ed6eb91ceeac",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d53f8673-268a-4391-868b-60116ff339d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd0728c-6d67-4d1f-9d9d-25318b90ba32",
        "cursor": {
          "ref": "c6c6e4c1-fb25-400b-a048-085e293e563c",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1bbdfca6-0af6-4351-b559-0f000e4b15b1"
        },
        "item": {
          "id": "4bd0728c-6d67-4d1f-9d9d-25318b90ba32",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "20101b99-7077-4af6-b433-7a2a170c1c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002a4099-3ad5-45d0-8b0b-293bd8cd060e",
        "cursor": {
          "ref": "9bfe4783-089c-42d6-a96e-80655457a41b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0ef06cc1-5436-4931-9c4e-0f4e62f8c43b"
        },
        "item": {
          "id": "002a4099-3ad5-45d0-8b0b-293bd8cd060e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "71fdea08-1248-4cf2-8f20-3474125072c5",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "43e7c197-6867-4ec9-8ae8-f93e1190ba29",
        "cursor": {
          "ref": "5083140a-4e59-444c-abfd-29fd4c8a524b",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dfe931ad-c8f9-4f53-9a57-7ee901d478f8"
        },
        "item": {
          "id": "43e7c197-6867-4ec9-8ae8-f93e1190ba29",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2c4a5229-98fb-4c44-920e-df331d0c817c",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "aa6579fb-bf8f-43ec-9174-fdeea9eb381c",
        "cursor": {
          "ref": "51bfb9e8-a453-4c1c-9f39-c043ca3a47b6",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "873e7de2-a04f-496c-873a-a90cc276d58c"
        },
        "item": {
          "id": "aa6579fb-bf8f-43ec-9174-fdeea9eb381c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "dfc63e26-2a04-47ac-89b9-e2d68f5112c2",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a0b9dae1-a924-497f-8b92-861d3b099142",
        "cursor": {
          "ref": "1294004a-5f6e-4774-9699-b2f71778d008",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ad5a83f3-1fe1-4a34-b4fc-0aa1e8115c91"
        },
        "item": {
          "id": "a0b9dae1-a924-497f-8b92-861d3b099142",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d873c1b0-e886-4f29-af2b-237e96c58d2a",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0c629d50-39c3-412f-af81-1286265f1939",
        "cursor": {
          "ref": "28484a3f-42c3-4461-8763-e5b40ad7ed9f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5d5c8cc7-edde-4bf7-8f2b-e217fde63f83"
        },
        "item": {
          "id": "0c629d50-39c3-412f-af81-1286265f1939",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ca2e5269-296b-4b0b-836b-daa54dac0742",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8a4cb6b1-b842-446f-a559-5cf70c3a5408",
        "cursor": {
          "ref": "c8709d67-625a-4198-8294-6262877e626d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9bee4376-b34f-43ba-bfe1-97531e3ea32d"
        },
        "item": {
          "id": "8a4cb6b1-b842-446f-a559-5cf70c3a5408",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2775c5ce-9537-47a7-bc08-4f45ba52617e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f4fc14-8ee9-4029-8912-8fd02252d0f2",
        "cursor": {
          "ref": "4ee0f472-e930-46de-a5ee-512e5abde861",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3e26b31a-108f-4b9a-8e34-2e1be9bd1c9d"
        },
        "item": {
          "id": "88f4fc14-8ee9-4029-8912-8fd02252d0f2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fdece2ad-4cdd-4a76-9fb1-1719cf04877f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d17525f-5ee7-4d0c-a31e-fd04f91af138",
        "cursor": {
          "ref": "f19e1ae1-ff77-4be1-949c-d8761f385f3d",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2635617e-29fc-45f9-bee4-92d444fb25ea"
        },
        "item": {
          "id": "9d17525f-5ee7-4d0c-a31e-fd04f91af138",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3c4ca009-9945-4edb-a14a-9933ed5fb143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78ca3d8-a368-4d25-a410-c7b572de553b",
        "cursor": {
          "ref": "5e161d54-94e5-4173-b077-8f7a5a7b1362",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d2ab383c-7837-45ce-b618-77807fbebb8a"
        },
        "item": {
          "id": "c78ca3d8-a368-4d25-a410-c7b572de553b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9a62767e-95b4-4a9c-9a6f-982d6a59891c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791f6745-2c8c-4668-8155-15c04b352bde",
        "cursor": {
          "ref": "3e168a64-8205-4b55-85b8-801fc3007903",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "97b4aa1e-d4ed-436f-ac0c-d8bfc02bc987"
        },
        "item": {
          "id": "791f6745-2c8c-4668-8155-15c04b352bde",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "09d4ff9f-b6e7-4cb2-a2e0-7c715d098b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7242f46f-c1af-4ca9-ad14-d31a8f39d419",
        "cursor": {
          "ref": "c0b0c3fd-5e25-479e-a056-9dd03dec0933",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "534d79c3-76c1-49aa-9600-f45cb4edae8d"
        },
        "item": {
          "id": "7242f46f-c1af-4ca9-ad14-d31a8f39d419",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "effd1de4-8f70-4594-9389-adcb318a91b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099706b9-102e-4982-b6a4-fb328b36ad62",
        "cursor": {
          "ref": "d38e5314-b8ea-4b03-85a0-80c30bc4a53f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "38ae43b2-c287-4f6f-8afe-23f8f5de2e61"
        },
        "item": {
          "id": "099706b9-102e-4982-b6a4-fb328b36ad62",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d83c3971-8529-4dbb-b99f-cb861e2f833f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd4d12d-a8c5-4889-839a-2d3b1abfbfc0",
        "cursor": {
          "ref": "49caecba-1e91-46f8-b1e7-1a7a57537abe",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "72934a55-d5dd-43f2-9359-0fccfb8c6a2d"
        },
        "item": {
          "id": "efd4d12d-a8c5-4889-839a-2d3b1abfbfc0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bb20e853-aa46-405c-98ce-037308af304b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571e70d3-fc01-4c95-9d2a-401fd4d04adc",
        "cursor": {
          "ref": "ece9c443-f7c6-4ab4-9ac5-58f6e5d66d25",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "676717f8-5cc2-422a-8285-e63b367d2af2"
        },
        "item": {
          "id": "571e70d3-fc01-4c95-9d2a-401fd4d04adc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "620998fb-dcaf-406b-8270-baa44f0cf65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6084ea1c-b245-4bf9-ba59-b75c9b7552f8",
        "cursor": {
          "ref": "440bf600-f1c5-4b2f-9ac3-7a9a8cab48b7",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ae5caef0-fc8b-410f-b1db-8da6200fa78b"
        },
        "item": {
          "id": "6084ea1c-b245-4bf9-ba59-b75c9b7552f8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6846c968-0b57-49d7-a6ea-6793c8008a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e9d654-ce8e-480c-9aa2-3985063281db",
        "cursor": {
          "ref": "f8318a0c-caf0-4317-9b8d-0183e418abe0",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0ec7b7c9-f38f-45be-a524-88bbe446fc81"
        },
        "item": {
          "id": "c3e9d654-ce8e-480c-9aa2-3985063281db",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cfbcedea-9102-4a27-ace2-50cd91292476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d290a1b0-e729-4739-85d8-536e082e3f31",
        "cursor": {
          "ref": "7f0f4261-ab97-4292-89bc-19deb14291bf",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3ae896d4-e4d3-4fae-aebb-7ab7ccc7c856"
        },
        "item": {
          "id": "d290a1b0-e729-4739-85d8-536e082e3f31",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b299cb9a-65f6-4d3e-871d-3d5648080e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bd1053-693d-4030-9f90-223966db996d",
        "cursor": {
          "ref": "917aaf09-f306-4c85-a5c2-6b415be0f7e9",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "aa20af7e-92f5-461d-aa1d-b00a7aa7ea6a"
        },
        "item": {
          "id": "c2bd1053-693d-4030-9f90-223966db996d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "735a4cee-4c82-4f70-b733-42248c9297ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6b6fa9-2161-4495-b17b-8fb252efe064",
        "cursor": {
          "ref": "ea80172e-2c78-4426-bfa2-dabda5df75ad",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8fc512f0-6b53-47b5-b455-4892bdc7ae7c"
        },
        "item": {
          "id": "2f6b6fa9-2161-4495-b17b-8fb252efe064",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "80134373-35ac-4a4c-a742-8095052ca23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a877028-d89c-412a-bda8-a883e0e337b5",
        "cursor": {
          "ref": "05b9a6fe-c683-42fd-884a-e4465891790d",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9cfcc13c-9ac6-46a2-83e3-2d34839c6b95"
        },
        "item": {
          "id": "6a877028-d89c-412a-bda8-a883e0e337b5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "63b6b858-d360-4421-ac76-d0b9d05d5740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f496af1f-bae3-4081-93dc-22184fcf8a0d",
        "cursor": {
          "ref": "99785b3e-0401-47e3-a682-4f2764bfcd60",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "6db44327-9c24-41ab-96d8-84af7df211e1"
        },
        "item": {
          "id": "f496af1f-bae3-4081-93dc-22184fcf8a0d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8a007b27-8e01-4d74-8745-b3be5cb532e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c1a13b-12f9-4be1-b630-204bc5e5ddbc",
        "cursor": {
          "ref": "d34b0149-884a-48f7-8513-649638c7341f",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d0006bf8-8ad6-4dc2-94dc-61a94ab5182d"
        },
        "item": {
          "id": "d7c1a13b-12f9-4be1-b630-204bc5e5ddbc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fd154fdc-0e0b-483f-a218-c29877741b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a2d3ed-38d0-439c-baff-7b8f23185bc7",
        "cursor": {
          "ref": "3ced81b8-6e4f-44fd-8340-387c7d76e886",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "1c68f897-d60c-498b-8d90-6f60b12a4321"
        },
        "item": {
          "id": "51a2d3ed-38d0-439c-baff-7b8f23185bc7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e3474380-cb70-4cf7-9eec-ba6f1b5a882f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00e27ed-9966-4271-adf7-a015446dacee",
        "cursor": {
          "ref": "83c93324-62cf-4232-b0b2-028452ff416d",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f6f94a6f-cbeb-434e-b895-381d99cfde54"
        },
        "item": {
          "id": "c00e27ed-9966-4271-adf7-a015446dacee",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f64fe4bf-cf74-41ac-8b18-00a8b04cc72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a75e62-ea68-4d55-9452-4513cde9f254",
        "cursor": {
          "ref": "914cea48-7c19-484f-85b3-b224051236c6",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "a9873454-4b1d-4fe3-b930-4d6514f85dc4"
        },
        "item": {
          "id": "15a75e62-ea68-4d55-9452-4513cde9f254",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "71dd46d2-c9ee-4e72-8090-cf239ff8373e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e270d71d-2a60-4199-91a2-47eada83d501",
        "cursor": {
          "ref": "0b37c698-a362-4016-9748-2b1c1f359f55",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6eddd1f4-3534-49c7-bc71-b3aba0638677"
        },
        "item": {
          "id": "e270d71d-2a60-4199-91a2-47eada83d501",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "faace46a-2d65-4df2-b242-aebf98e675a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048f4342-7ee1-49f1-b7fd-c65423c809bc",
        "cursor": {
          "ref": "f64ed6df-1fa6-48bc-8871-14ccb55d81c1",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "00926ede-665f-4118-a613-97ed8932130c"
        },
        "item": {
          "id": "048f4342-7ee1-49f1-b7fd-c65423c809bc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4a51f737-f856-4530-8a5c-8f9bc7add28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e053d0-edcb-43c5-a5c4-8af0b7e7fa9b",
        "cursor": {
          "ref": "efc2434a-a945-46c2-8076-1d5a6330cb6a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3e9a5941-cf96-4323-a886-b6247e0a0dc9"
        },
        "item": {
          "id": "61e053d0-edcb-43c5-a5c4-8af0b7e7fa9b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3b5d722c-ecca-487c-818e-cff597d80e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9710e458-6bd1-4d76-9c2e-238f9b82ff26",
        "cursor": {
          "ref": "bdd42142-d26c-4d40-a8a6-5434bbf4524b",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9b4f0f76-8379-4e01-aadd-5d5d0425da31"
        },
        "item": {
          "id": "9710e458-6bd1-4d76-9c2e-238f9b82ff26",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4536bbc0-3ad0-47be-b421-d2fc695168d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d941fa-3eeb-4a42-aef5-113592c90ee9",
        "cursor": {
          "ref": "598a2c86-c32c-4163-a247-f9ab9ddcf1b3",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "5620909c-bf68-403f-ad5e-2ae005801784"
        },
        "item": {
          "id": "d6d941fa-3eeb-4a42-aef5-113592c90ee9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "62563838-7bbb-4987-b3c3-b0342dbc00f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49e449f-4c12-413a-80f1-9a8fbea997b5",
        "cursor": {
          "ref": "929f6e0a-5f26-4390-8466-d68fc4a2127b",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "154041e1-55d3-447b-b68c-747f809d63b0"
        },
        "item": {
          "id": "d49e449f-4c12-413a-80f1-9a8fbea997b5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d53a821a-3cfb-4d4e-98a0-89aa7ccdb5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3c6428-bd5c-43cd-94d7-b3026f862188",
        "cursor": {
          "ref": "3556fc90-0e59-4ab4-a050-e76b91bb4b84",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6907f045-b9fb-429b-b4ef-11427b5733e5"
        },
        "item": {
          "id": "fe3c6428-bd5c-43cd-94d7-b3026f862188",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f34da7ca-4124-478b-8f98-7250af9d5a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15e3b01-5904-4511-a287-2e6f0423d959",
        "cursor": {
          "ref": "d4a80592-5ed5-44fa-aa66-31367ceb00af",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "da3d36e6-dac7-4ee3-8b75-73944832ddfa"
        },
        "item": {
          "id": "d15e3b01-5904-4511-a287-2e6f0423d959",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "945bf5be-3c55-4fcb-897c-5dea8f1088f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66531b91-0591-4ca7-8978-ca662e15caa9",
        "cursor": {
          "ref": "35b31eca-99e1-41af-8804-8495304c3418",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7cf0094c-dc50-442b-aaec-803232f9a7b1"
        },
        "item": {
          "id": "66531b91-0591-4ca7-8978-ca662e15caa9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "239b945f-eb79-49f9-96eb-16f2f0296c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fb9da8-ebfb-45e5-b42f-78999be2d03a",
        "cursor": {
          "ref": "a112523b-dba1-4571-8f70-f0b96d94b5c2",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ddd46f44-8ea9-47af-b457-dadebe69ca44"
        },
        "item": {
          "id": "98fb9da8-ebfb-45e5-b42f-78999be2d03a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "22104b64-43a4-4994-9c1b-58a3d1855d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4f505f-db0e-4e10-925d-823f5eb56457",
        "cursor": {
          "ref": "cd3fbcc8-a663-4d0d-bda6-73dddcccc9e9",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b2f9fbf3-6b03-4f49-9868-cf0b59dca6fa"
        },
        "item": {
          "id": "bd4f505f-db0e-4e10-925d-823f5eb56457",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9bad26c2-72b1-4ceb-9670-026a11e620bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bc2f68-9edc-44fe-8760-29a0bc4ec421",
        "cursor": {
          "ref": "630c35aa-658c-42f6-86c5-2e20b20b0294",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "0d9ee3d1-d984-4736-a98e-7c0c95cf5135"
        },
        "item": {
          "id": "f1bc2f68-9edc-44fe-8760-29a0bc4ec421",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1ce93ab7-74f6-4355-970d-7d1b53351bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493e53fd-277a-40a2-9373-f573a729c91b",
        "cursor": {
          "ref": "04b0f897-cfcf-43de-bfe1-9facb93cc3c1",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "3d10fd14-d97a-4d45-83ae-a557839941a9"
        },
        "item": {
          "id": "493e53fd-277a-40a2-9373-f573a729c91b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "aed18fa0-8b13-466d-b4b3-c8e548934648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16163a89-f7dd-44dc-93cf-10d3de97bb9c",
        "cursor": {
          "ref": "112af650-4868-45b8-86ea-3922389ce039",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "35eb4bef-c528-4762-9f63-5c6163cb4229"
        },
        "item": {
          "id": "16163a89-f7dd-44dc-93cf-10d3de97bb9c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d30d4262-a2d8-4c69-9231-a2f50ba22fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3a359f-29cc-4c60-a908-06f3fae06058",
        "cursor": {
          "ref": "c3352830-6985-4e8a-a75c-63ca7d23b7c0",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "882a22ca-117c-4302-ad19-36249f84e808"
        },
        "item": {
          "id": "7c3a359f-29cc-4c60-a908-06f3fae06058",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3a87538a-46b9-41a3-9f89-23086f9e65ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1efeed8-a7d6-4dd0-8962-3a26ef2f19ac",
        "cursor": {
          "ref": "37252f4a-44aa-4991-bffd-a3f7e2de4e68",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1616046e-6309-44c3-87fb-466ba2727cea"
        },
        "item": {
          "id": "b1efeed8-a7d6-4dd0-8962-3a26ef2f19ac",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "60742720-54b7-4580-9c44-59ca660019c5",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d09dd06d-4f28-418e-aa62-47cf155a6dd1",
        "cursor": {
          "ref": "5dbf2962-ea6f-4c04-aa6b-beb01a27b462",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "9e8d6af8-66f5-4c62-abac-1b43520901fc"
        },
        "item": {
          "id": "d09dd06d-4f28-418e-aa62-47cf155a6dd1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ac9cca19-852d-42f3-a7f5-67c25325454f",
          "status": "OK",
          "code": 200,
          "responseTime": 191,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cf7b81-e4b9-4a11-88a6-4556ff2254f2",
        "cursor": {
          "ref": "1ad2d246-df18-4cd5-b6ed-caf5fde7cfc5",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0a7b4146-3c9e-4b3a-b40c-670b5ee3a04d"
        },
        "item": {
          "id": "39cf7b81-e4b9-4a11-88a6-4556ff2254f2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2184c7c2-da53-48fa-8ec3-4ec689529b93",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "00742166-3d5e-4783-a5db-6f2c3f471fbc",
        "cursor": {
          "ref": "003ca63d-9976-4386-b00a-94eb923030b5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "bf65aaa3-919f-4a69-b426-69e8c1bcdd20"
        },
        "item": {
          "id": "00742166-3d5e-4783-a5db-6f2c3f471fbc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "98908a59-8a34-42b2-90d5-5edfceb93d44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00742166-3d5e-4783-a5db-6f2c3f471fbc",
        "cursor": {
          "ref": "003ca63d-9976-4386-b00a-94eb923030b5",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "bf65aaa3-919f-4a69-b426-69e8c1bcdd20"
        },
        "item": {
          "id": "00742166-3d5e-4783-a5db-6f2c3f471fbc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "98908a59-8a34-42b2-90d5-5edfceb93d44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac25141-8303-45fa-9181-7cbc4e506b4d",
        "cursor": {
          "ref": "8266735b-665d-4a91-af49-f18a88b0c2fd",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "766a739b-51cf-4485-94d2-e02c6e1685b3"
        },
        "item": {
          "id": "6ac25141-8303-45fa-9181-7cbc4e506b4d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "aff90ccc-b371-4b1b-b9c7-977464695afd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d982048-ca8f-4f01-aac1-eaaf38d397c4",
        "cursor": {
          "ref": "e792140f-bbeb-4337-a4f8-c19887f83924",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "0bed3cad-6e54-4b4b-858e-3fc61f0c4e45"
        },
        "item": {
          "id": "6d982048-ca8f-4f01-aac1-eaaf38d397c4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "744fc871-82f5-4842-876d-b2cf37292a02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}