{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5051810f-ecab-430a-8f8b-48df54c9ed55",
        "name": "Clear Cache",
        "item": [
          {
            "id": "891bddc4-56b1-4afc-8778-a698f717673a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67f356db-038f-4eae-8257-c37e75173870",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5002f22b-9624-410c-a8ae-7f2ae8cdad9c"
                }
              }
            ]
          },
          {
            "id": "7a28e700-e8a6-43db-852d-8a84726d15cc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "17368940-fabf-4ab2-a014-61a981b56e41",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b051d471-f72a-4a48-8734-ade7f1d2c2fc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "900a1f38-8f2f-4a1a-9383-05b47e83d3ca",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "db0b9bc5-9404-46eb-9e45-1a55ac64ce94",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1026e519-1559-4d92-8380-8d957b992412",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4eb3a8d3-aa18-4ee2-82ca-25876d9cb9fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e40e2b81-44b3-47bd-a5b6-8ef1f5d1f3c1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23fd4e7d-f75c-471e-ae08-194253ab94ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b0777aa2-8a53-456c-927a-c6f68c561a11"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "93086619-9072-4034-9197-e2bb0cd753ff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "54ecfe88-d828-4668-ac49-676020b8b7ea"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13929ed0-0159-4179-ab93-4448ed593071",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0051045e-4604-445e-979d-f5bf193738ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e36ccf11-9c24-46de-90d9-a5397b90931e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0847434-ccd7-474e-9d0c-5b9375d7d8f6"
            }
          }
        ]
      },
      {
        "id": "c0a85a03-e8ed-4bdf-9fb6-302b2a66b4d9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "977078b7-c11c-4082-86d4-ef95f3f9bbce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9ecaa1d-9082-4b59-9420-612fbd5f2780",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cf0d56e7-6c65-4d15-a2df-86d7620b79dc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c135eb-cb0f-42da-af16-434630b9a2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "887d01de-262c-4b61-9f32-1e78b861618e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcbf322-c172-4299-b63f-201f46fcef46",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d491bbfe-fc67-4bbe-afb9-54409958ab06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff6bef53-e5b8-44a6-8f25-c5b8f2957afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55862ca8-f837-495a-992f-3f813e2218c0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bea81aa-c5ea-4d46-a048-fce816005053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5aba3ef7-62e4-4563-9db2-8a0643891cfb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc4795dd-c658-4991-a106-2d02813a55a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c1a7dd7-397b-4f4c-8060-fc9cfdb46eb9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912fe581-878c-4696-a010-e4131a817a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbc085e5-ab41-4c20-8bbc-0f45bb280990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172f0eea-2289-4817-b88e-e05b867683cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9091f887-1072-45a7-82b2-625f31f78896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17610f24-2c1a-4edb-9a32-8708d56f61e4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "becd3c67-d541-4695-b7c9-7bc0f311e2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7611884b-054f-45d8-a034-49bae9dd19ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22b6a87-7e86-4ff1-8f1b-202d057883b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "6ff0ad31-10b9-43ae-973e-ecec7f2f2f8f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eb6979bd-0ffd-4b2f-8564-fbbfddb6276e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91ab8337-d46a-48e1-8aa2-39bdbeabd051",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e21c0eae-0bb6-4a16-8253-e5345ce978f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2628eec0-a271-42a6-906d-2dcb28b05a76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f18e2e63-027d-44bf-bc1f-d2891b310461",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ea3a429d-5430-46fb-91de-8fe5347fc769"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd52c4c2-2ef8-481c-84a9-1afc7337d9e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "353a4e74-1186-42b2-8640-4fe71a81b1f7"
            }
          }
        ]
      },
      {
        "id": "226c3ead-3efa-4bd6-a8f4-a9270bb5bbe0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "131dbb9b-0b05-4c6f-a2f7-cdd9d2f46bc2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b71569ae-5810-41a5-8ad2-3318fb1941af",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ad446786-d1bb-44e2-8fb3-e5f59ec98cdd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80496d3e-3eaf-42d8-a317-3c347154c45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0ff34c-d8ab-467d-abf7-f9325d80509c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afc9fbe-f7fb-47c5-b2f5-8eb6c35756fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f36de4b-b64c-4ce0-ba94-397d602c3837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb6fad0-67c0-46a7-8776-e61b9193d824",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6316d18b-ef61-4b65-ba45-7e14784c5a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563edc94-0bc4-4a1e-a2a6-98554dc9d4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83723861-4d0b-4ade-b8f2-88a63b46956b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9f06b19-121e-4b18-be15-297df37015b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2002ed5-553e-4fb5-8d20-716b2e83efcd",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657af7a7-4b00-443a-9c19-6ecb7448ce41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19becc65-44e8-4fda-8c39-093f674dd624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a310a08-354d-44aa-8d18-fc2320bd5331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "137a7065-f19f-40c3-8bd8-11b35d4c5fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e301cf07-2dac-4f34-9edf-8a936ed048bc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fface96-b393-4767-979b-d037c441ba2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66cd230-5338-438e-a14a-6b314bd85fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50013d87-be56-4030-a7a0-a551d9b23a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "726912cf-aa1e-4d04-962f-c433b72014fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7679a0b1-9b49-4ad0-b8fc-483740a51139",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433b0805-83e0-4ce3-9632-e31a5985c7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076c3b03-2d64-4ae4-99ca-1845ade9d06f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4dfcd7-49ce-4c09-8fb6-f97a50dd172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f965df9a-3234-468e-a436-906609866985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec9666f-ac58-432b-b344-93b408c03a23",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25e52d7-2f65-4314-8bcb-74b820281f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63df1b6e-4ecd-456b-97ed-f9267bbe8092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157661e8-fbcd-4a23-b408-82fc4ec6f7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb9b20e5-dafb-4f6d-90b8-91f85a005e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b16bed8-683f-426a-a335-7d4182fc27d8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971ad9d5-ac2c-4e72-922a-263e34aa2882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ec5a48-0919-4f05-b801-e7f38208d9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc122d67-fd3e-46b8-8ecb-d20b7534e0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3659ce7a-62e5-4852-8b62-b956900afefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b21f85-a61f-430a-8910-0def16116373",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615170cc-df6b-4ad9-b99b-03b179adbec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6fcd30-678a-48ac-aee3-10405c3acf08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09970be-cd06-4899-a701-4c82c4b79748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e71ff8f-5214-4a70-a255-42bc01dbe271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb0d288-98dc-4df2-b5de-8d02c40df9b2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7631e5d-7989-4d97-af9f-9cedb9111ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c85bc6-b095-4381-a74d-03a12400159d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69655f17-5300-473d-9884-504c513beef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "101b4c73-9c8a-479e-b538-0e201270dd18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7d2299-072c-419c-9393-4084c2130215",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba02eaa-048e-42c7-aeed-c9491a03e8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e773bc-5a8d-4bdc-a44f-876de796f017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3e2041-d4ca-4a97-939b-9cb802356035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc5d1797-d103-4074-a2b1-f8fb91712160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c55e915-361d-48bf-8f31-abdf7e3290dd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf4e0bf-48fc-491e-87cf-1a57ffc81049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fa122c-dcdb-4497-8b66-ec5b0d35a000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ecd0f9-3299-465f-8031-2f376a55375b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee33081c-da97-4830-a659-cccad6e7881f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09be76f-6b11-4a82-bda9-ba67f6d01511",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af98764-8f13-40fa-929f-815bef5c5411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e2c621-fe4f-4333-95eb-524521ca9e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3912bc6b-8be5-4d60-927c-656a1e7a10a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1602451-b718-419f-a2aa-3e0f283a281d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3743a182-2407-45b6-a5e3-46f6012903a6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f444193c-34d9-477e-8c1f-0d52b303da4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165da394-9ae9-4e68-9ffa-911a915b41cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff71032-214c-431e-a0bf-b4b79791f8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ba7dceb-adbb-47c8-b514-339b2c84f353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba859731-84aa-40de-b8c3-09f31764c665",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3add86f8-532b-4221-b1b6-3b4dc98f0b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2d97b1-b3e2-413f-b992-9400010f3227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1857fa8a-407b-4161-bc6b-af0387754241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b80201e-17d2-4bc9-b05c-cf2c4952b6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497ac664-b7a3-4929-82cc-0cff395fc687",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f072102-2407-4ed3-9f7c-e3c4e8c9c3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0f912e-78c8-42be-bc38-ceee4f90e274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86a1c7c-fab6-4a61-8ad1-a41db37d79ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70b11e3d-f8c9-4986-8015-6718bad9cd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52546d54-2c8d-4480-81df-b486a02f8905",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b57dd6f-c4bb-4652-a9e2-e1ed611b3591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd63bca-fa4a-4ede-8372-21751b2e4ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82882bda-ff0b-46c4-841c-37b97c8105ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ee15394-49e4-4af3-b604-461075fb4a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410d71d6-24e4-4196-9566-5113971bca88",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7284ae87-0fd0-4249-9e5b-38575a026966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be27774-6c19-4854-bbfe-2e8ff94e610c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7806d03a-9928-413d-a3c5-cddfaf3f603f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e0a70fd-64c8-4d77-9fed-af0e48cb13d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ab535c-cdfe-462c-a43a-4b4c0ec29bad",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ef88f6-2f94-4c39-ae58-a55822650266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8d81ef-708b-4264-be77-b9a7c5c36858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5f74d5-3495-43b0-826c-dff29353ec18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6751c57d-26c5-4d69-8ae3-f074d4d89f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ad4162-b2d0-467d-a31a-6a2e83f7a241",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7398f891-6467-4e27-b979-0a87e21387f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e277e9cb-4a9a-431d-9443-92146cb9452c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f18ada-da4a-4e3d-970b-d7bbd26e46d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3336dfdb-e698-4074-a82f-2d02a930ed17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcb9668-bb28-45f2-856d-2b13a03bb327",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a45161-76df-40d4-951f-55ffa4bef23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fd7ff7-3729-44b3-b338-de0d9bbd9526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3d7b72-bcee-47bd-9073-315a747416a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35211594-3090-4357-98bb-032601393201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb452ac-b16c-422b-afd3-8b4b2f97656e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ec7dec-e26f-412f-b0c5-174062e423dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aca96b4-6e8e-4c42-b5fa-ce03bed76386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef0e937-e180-4cfa-a501-ea02bd34c0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17937c33-8193-4a84-beae-fa9f87ef3ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfeb90e-bd76-41c0-aff5-6107ebbad824",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a586fc76-8e32-4760-86d7-b0aa0d47c118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb35c52-d508-4287-8d91-c013f63bb9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af589ed-1ee7-44b1-b8f7-421b36b146d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7cadf71-a0cb-496c-b73e-fa5ad9885399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae53309-fba4-4f2e-b732-72a6e91d5cbf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7843db-5bc5-4b26-adb9-27e576d19f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa7fa80-c305-4995-805b-766dbe7e0733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad510d6a-48ed-42f5-b6d2-4a40ba3d2513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83bb7015-b372-4779-9814-99f0671b0035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7157cbd-934b-4074-a53c-d5358fd8e9e2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f3be88-3fba-41d6-86f9-b67c0b19d8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a916fd8-2970-48a7-861a-c4a45e1d8da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c3c1cf-162f-45ad-93ca-b1c9e5566919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbed9747-45e7-4388-abb2-c46b840fb2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460ecdfa-d39c-470f-b260-ae24e4e50c4a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584b23cd-2d85-4e66-92b6-a8696df0c1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd3919e-b33d-4a16-813b-9d43bda74754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fc098d-1440-468e-b409-6b45e3177034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32393c69-2852-4cdf-84f1-671e71436ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67c409a-f270-4bfc-b4b3-10846891e0bb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613a7f8a-0539-4ee0-a224-5b09997f0702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35aaf524-11a9-4358-a1fe-34abc130172e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59c8750-b1a1-4470-a4bd-a9f26d8ccec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "20627fc7-b409-4db4-bd37-5c36a098e92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f73498e-fd13-4265-91c5-e69082381c9b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcf6a49-b743-4710-a1ef-ddc0a79be705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4859ef-2e00-43b4-8b83-0ff75cc3e60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75977adc-17e6-477d-a7be-12e93614edc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "009a8593-67ca-43d7-a095-4d6b90aefcd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf898c51-22f3-4134-9859-17ad9787018f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09157a8a-7d13-4194-810e-7bfba1877ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16a4adc-0412-4842-9c49-93f04110a513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0effda77-3923-47a2-8026-b33be301a63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a526936-f74f-45be-b994-88c947467164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3929e4e0-e9ce-4435-86d8-ba069f8b3443",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1482b3-4dc0-4d74-ba5f-99e565954a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b0314d-81ad-4513-8e91-9dbc1233c3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dec17f0-9920-4c75-b489-b4905d1a4a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22060fe0-3aaf-402c-a6d9-f2d3c23bec35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b59d15-e287-42dd-b556-463aeaf15706",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5c1615-d7e9-451c-8f79-6b9eea429416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ff4784-f2a4-4716-b47d-d73559bcf82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c8c28a-0a21-4d5c-bc9d-423ad8233099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdd5c6c-433f-407e-8b00-12c2eb0f3053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9cd75cf-40cf-4082-a939-13dfbd443d93",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b89c29-5863-4225-bc72-8c6629f1bb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbabd05-9195-43d3-82a0-3a9d51ee0090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29e9726-42a0-4e19-853c-ceaef13a6a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fffa1645-285f-4c9f-bdcf-fdb53d536c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5faeb44-af80-426b-9147-f0f8ed2cb755",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad97fa45-5f99-418a-a3f0-31c90217cc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c13c58-3b60-47d9-a147-5050b00d8f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145a533f-0930-426f-8444-509a382f9cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6377ae32-9844-4c9e-9d0c-543cf3257a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed8b97b-9b7b-48db-9652-9bf8f8a27116",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a545df-64e9-4ac8-a980-407c2fe94e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c783da5-97aa-4226-b7f8-9d34bd6d062d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1086bd6f-94f1-443f-8428-47c836270830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd7624e7-8ac0-455b-89fd-41ab5a7232bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b528e72-2600-4a65-a237-f32b17b6f2b4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2005ad-26aa-45a6-b6dc-69bc879f0543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94959583-dab2-4d5f-9b82-a9e1700a22c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b7088a-8711-40e4-bc17-99cfaae77ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83a74f43-4614-48f5-971d-c8d3145fb765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ad591d-5844-4c01-9c89-d3d210b337ec",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55db9be4-a905-4cf1-9dd1-3c1317285118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c53679-a823-49e9-8fbc-824f0cd8aec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5221e9-609b-4633-924f-e0a67a70c1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a1f339-c8b4-49e7-afaa-0ebab85c74bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ef3cae-35e4-40fb-a94d-56adeea47701",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7278a751-0b58-447c-aac5-9db12a145eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f577ca92-3c26-4b52-ac7c-585014ae33ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cb2a4f-1fb5-4a69-acd9-5a8f78f80c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "564abe85-25bc-4ef5-9432-4817bf4a79fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8ff282-5f5d-4d6c-9200-ef1735d57e08",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5843370c-def1-410b-a7bd-a9b297ef3ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a140b62-c856-447a-9e35-32406f729ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ff4fa9-c83e-4c53-878b-bb3f5cab989d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed86b48c-a098-41ff-9a2e-d104e1e50dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f39b266-7b09-470d-94d7-81aa4c4835e1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871286dc-af4b-4e6b-bc2b-fe568e597912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a8579f-ad0e-42fd-860d-722db3ce6142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ac7860-98b0-431c-bc0f-ce8b63497312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "017e68dc-aca0-4981-b9a2-03b492a38330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757f2c99-cebf-4fe2-8eef-77d030be3acb",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de0487b-1b06-4e6a-b93f-674709a340d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38b2ea7-9d40-431f-b693-f4e63c6a2f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5fbaed-7cbc-4b74-95e1-f8256237998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "378e3f8b-53b6-4771-86e4-4646a35bb9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23ffc0b-ddaa-4a47-b04a-5117c6dd085f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b46a63-1d55-49ee-a387-bf75972c8210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ea787a-dfb6-4d75-8477-ce1581cc43b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d915e60-33a0-4012-a23a-d43eefe1c7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d602017-6297-43ca-a0d4-b57d3a61eff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b60492-0095-48cd-bb1f-8fde309543ff",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84442ca8-34dc-45bf-97bb-736c5a51860b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e68c28-c4c4-47c3-b949-724570c79ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a54185c-72e3-4b0a-acf7-fdc74f689f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "02d9ba86-3bb6-4840-9544-c3afc5bdd1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4339ce-1f15-4fd8-8d7c-9f7dc8a187c9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2306f73-ac92-441a-a57c-3ba74efeb1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ff3c50-bb16-4684-9092-9832fddb9883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0b82dc-3d8d-4140-ad19-ab5677666556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "586218e2-6be1-4562-baf2-fc90797ffb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51465c33-7540-451d-9955-1882182bb9e1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6104da06-1602-4191-95be-93e84582c3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f241a4ec-cb1f-4bed-b88e-ee9235ad8b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be73f94d-7791-4c69-8f46-5147075ca9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a85497-f191-423c-b1b9-2ee98c897b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186d16c0-eade-4a1a-a578-7ecf8a94304a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d955d2c-08be-413f-889b-67808c0c2ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a64195e-9822-4bb3-96b4-3327ffd6f11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a007f1-c629-48ab-80e7-8c6217b1b3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a37d477b-4331-4989-8e73-8c595b4546c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577f06c6-4a6d-47a2-8fd3-9e8462a556b2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91525855-87cb-4fed-b30b-f5f9800f0589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868ed498-ff37-4690-877a-b3c0262f15b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a92c230-047a-4add-b3b0-443be46168b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b59a9acc-f3a4-4e90-ba29-4b85a69509e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ffe8a5-f564-43b3-97c3-68e7cd46ffba",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0955323c-0b64-4b97-96e9-d0183cd246d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1061cb68-7471-4a65-b12d-a888eed94fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc59f87-1988-43ca-87f3-22c470feae51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "162f5d50-eebf-4ee8-bcdd-1309e0e4b88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ab697f-682a-4c9d-a018-2a84b854d193",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7d54a6-14c0-4f3f-b032-61201fd4dd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483ca2c1-e9a8-4234-99dd-a89e163d6bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd53173-acc0-4b09-9b2f-007473fda869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a98807-75a0-4a62-8a99-74c3d91aa57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d35c0a5-dc55-47c7-9841-2a24b26c1f1e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5317410a-0cfd-4058-8087-941e67c03d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9ea3b4-77f6-45c2-b32c-bc330efb7360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac62dfb3-bbd8-467a-bf39-696bffeeba1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f80065c-2461-4af3-80b5-fd08612d3d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff030be0-146e-4050-a360-b85bfb8b4eb8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77aed550-2f5e-4998-ad24-4bc488d48d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fed3576-fb03-45eb-8462-bd7b5bc6de0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c6f1d3-8399-4b14-a0af-5b29eb6656ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48864d90-9157-497d-802d-a59b4d6f73dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d5b399-03db-4a5b-8b1c-65e667cd8aa1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0296da-a7a7-42d0-9a22-e08863ce8c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f345463-8c9b-41e5-9b20-e2237c81afbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7279a1f8-011c-4420-b532-442d8897d2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d78ad1d-73ac-461f-99c2-3330d1230e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a242df2-082a-48a7-b5e7-a5edcd8e561e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4211aa6-cc5b-4af7-b539-b321112cd864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de1c55b-5e8d-4381-8c17-b18338391018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed61de87-2746-4ec4-9dc0-c5d822c28c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "935768b8-fc66-44ed-b59f-1e4ed7a5fc65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a09cde-6fc9-417b-aaea-2a2b5c8fea34",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e118996b-71a8-4f25-ac39-c2debce52663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6366fdf2-b05e-4cb3-bc8a-cadd049355ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271b8bd6-e822-4fe1-9119-2f007c4ef5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "23555558-1bdb-4435-bf2e-d83f5724eea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6345421f-cd7e-4591-8d1f-42e33c56dd57",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b513c7d8-c353-4806-91e6-b21725ed29dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9fe267-c6f2-43a1-a3bd-c99d959a230e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3d97be-e573-446a-afbb-6561936d386b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "466fedf3-83c2-4a07-8ab9-7ed49536991e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd70b56-92bc-4b2a-bd69-efce8cae8090",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3792e86-ec17-43d8-bc58-feb9d894afde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb0587e-9196-40ba-852f-22025905fd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b973e442-673f-4b46-af4d-c82d0e103ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6efe607f-105d-456c-86dc-fb0d533de68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21bcca5-98e0-424e-bfbc-7440b67d1368",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ec9e5a-bb07-479d-9fde-30483ecec29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1a1a9c-064a-4c9e-829f-66a08bd4dc2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e93e57c-dff3-4e11-91a7-f1741a339268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f492bd3b-462f-4cf3-ba8b-47189f26b297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c9a536-1e64-47a1-bb40-3472abddab8e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca2276e-31f5-4494-ba20-4af07f1df0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5590465a-789a-4e8b-b2d1-60f2d178c894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82f3ff1-8122-4af7-aa55-538116972ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "905f10ca-9449-4c0e-a1d8-c8eac22d1eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1397c07-822c-4086-be4e-d4c734ccad9f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c4520a-57ee-427d-aaea-17b23e12d3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb807fe-7a75-4561-a554-af9143d4bfb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c20ca1-e7c7-43f6-a8a4-643a7ac3fd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7c9609-cea8-4734-98df-c82d05d9a526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9144a6c-1077-465a-8e8a-f473bf5c25c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbca5e13-3ada-4461-933a-6431364a8e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ceba17f-b840-40bf-a4a5-166c816cc78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db5fd64-5a36-4f7c-bab0-d7d524911d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c87e442d-6647-45f1-a1c4-ecc55ed26cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7aef89f-54f2-46d5-9bdb-83cdf35f171f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfa7d51-31b2-49a6-a0d0-1b6d24b18e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03175692-d4fd-4a50-af7c-a1bd40f10ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650e91c3-fdd8-4192-9daa-ad4a108ecc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2563020-c469-40ee-8797-68edc3965f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256db28b-6269-4e43-9f9c-21980e2da277",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41815501-36f7-4d12-a810-e41c93e900b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e3e7196-12f7-4718-a74a-c890984dc91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b000e3-cc6c-41d3-876c-c726b0aed644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd4891e-1885-4c7b-b2a3-e595cc6929b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fc5c3a-53cb-4952-af27-8274a5bacb74",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffbf095-6495-4061-9175-30e9f43fd21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43534eb4-0d93-4d2c-8024-9aa9074750a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a238e9-00c5-4535-99d5-8c1a782e08af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d61b3a8-4afd-4fef-b06d-d7e1865c8eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca4093a-868c-4535-8fc6-82d55eac1533",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe713f8-23ea-400b-8d05-06181b5eb995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab7acb0-669c-4f8f-95fd-372ddb3a3b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e83a8a-7215-4202-82f1-7cd51b105425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2ac36c-a405-4d46-b9db-487928cae087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eab03ee-730c-4e63-93e0-a17197491a1e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb457e3-fadc-43fa-840a-ea2c13ee3967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf341bb-f31a-4707-be86-bf73272be0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345720ac-7dd4-4c52-b5f0-c19a0aec176f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfcf1972-363e-48f1-8761-a1b3a4c033bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd74c45-5f47-469e-ac2b-ecd7ea738bf6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183f5743-5898-4444-a2c7-92c4529e2ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a0adf5-82fc-458d-8030-1dd31652ab53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10f185f-b21c-40b0-8637-cbe1088aba0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9fd69c-465c-40e3-b304-74465b2876be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797af363-7399-492d-a928-462afc44a2dd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed67a207-8c30-4d38-b5ea-686e4c617bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c5bdbc-b203-4f9e-bf11-2a24d857c477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fae8a7-c354-419b-9b62-3c229dd3b2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6479a0b6-604b-4aa1-b9f2-80055e9232c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9410115-de2f-4aeb-9bb4-87b45cc0ac45",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668a1fdb-9054-4323-b583-bad8a3792b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f722f05-4fa3-471d-9e7f-c28060624877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73542e9f-fcc3-4685-91dd-a3254f805df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fbba6ba-a54e-4d75-805f-afe2be1adc38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ca8065-f28c-40c3-a5cf-3593c4c7877c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77dcba92-bb72-4666-8689-d63ffece1849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c44fd33-7daa-4352-ab0d-edb7b42c14ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b756827-4fe9-4c6f-9be8-9dcb4d3a540c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db8b14eb-f57a-430a-8b19-370954f7ffe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451baece-bb78-4cc7-901b-14fc9c3c4f36",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab99b1d5-394a-4972-bbe8-c0940056eff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877161a2-46ae-4e70-adc2-07323fe377bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68176e95-c3fc-4711-a79d-4a4825022f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd52b1fd-a124-4dd5-a9f8-0181168c811f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758833df-d2f6-45aa-a915-b14faefb56f3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767e838e-edba-4a96-bb2d-26ebcbb31cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80217a63-70ba-4322-b740-9471d64f9c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac0d747-8c51-4653-8dc5-abffe2dbbf78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa0a408-93ec-43e6-bc47-e82aff1cba84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2e5fd3-2ee4-4659-b26a-dd892aa96fc0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ed7005-517a-414c-86fb-3c1a8f19b666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a64f32-556b-4a4a-8230-507367db9dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd9bb55-12bf-4190-9823-c9cc6b049e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7ee2d9-6953-48ef-811d-44c9fbef5094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8582cbb0-ad15-476c-bf79-41e28b3a9f00",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3f1fdb-14a2-4ae0-8321-13998d032465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66183028-cdf0-4d07-8703-927c3839b39b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65271a26-b724-4aa5-bcbe-abb7cf62c14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00a3cf7d-8aaa-477f-9030-82e6d61fe28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80779ae-ca8b-4916-8d25-c9b58984adab",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2c40da-b568-47d7-9349-290156537897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644159ee-c3d2-44d9-89ad-fa6b2c73c4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc07b2bc-b614-4f02-8a79-9a4759a3a6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0163ae-96ce-4473-8b77-78464245ef51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c55b46-e98a-4acc-9d83-f11bc22c1ad2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25365fa1-e9e8-4190-bd12-32d1cd583416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e515f9-c14d-4ddc-b05e-47eb5fe8538f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b284ee-2289-445f-8498-f4f49be359d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8712fbea-632d-4d9b-aa90-19adcff803cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbc9009-3eb2-4d98-a04b-b1c626453b46",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7549cb9c-2fe3-4c85-98c7-bf5e34400d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23339923-fd5b-49f8-a5d8-8b7447c64a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b009054d-9f6a-44ff-92c4-083569a932f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d463a31-1bf3-45d0-86ee-d410514933d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3022f442-a0ae-455f-be2d-4b1ef232110b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3838f8-1e7c-4418-8b13-a537bfb54dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91bc45a-b68e-4a02-b899-190409c61837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bb290c-8b87-4eef-9b2a-3305c7ba6f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "617b0c51-160b-43ee-8c4b-8a0b223e4ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530c50ce-2870-466a-b7d5-08134a5e4060",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0453423-a9c4-402f-8468-f45a05c0bf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d652f62-0a8e-4363-a8f7-357643265981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d255a04e-bcb5-48e4-9a22-4d24fbc0bab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4590f40d-9b4c-4dc8-932e-58c09051a17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7b145a-7ccc-407c-88d3-a454fd14cfe5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdfc208-d128-4ef7-9050-8b5892030389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0cac41-c46d-469a-b982-572ea619707e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7a0f75-5c84-4b2e-830a-ddd22bbae629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "346ced9c-cdb2-4991-b00d-a5955b183503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d9e609-fa1c-4b8b-a272-368b872fb5b4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "102a2b82-0bc6-41af-b266-de1c42f24988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bddd1261-65d4-4bf1-b099-b3eb02fcd366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28201429-47f4-4e4b-886a-fbbf700afb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b91a92b7-863e-4c14-ae23-a06e707b7b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbee523b-9df6-4e59-a2dc-b710a3565d14",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6ab572-488c-41cf-a1ea-c2838ca6e27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf90fcf4-0692-426c-8ce0-365f4df87cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de971b0-e0a8-400d-88df-5e1072afdf69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1918c0bf-c976-44e8-af5d-7d1343d3e147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ac5fb3-872a-4d88-8c6f-ddb72cf7a986",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1ba654-cef9-47bf-b1be-92b4bf388841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a7b3b9-b762-455d-8502-186fbe8b1d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eadd1d2-0cc1-4b3a-a0d0-ff58580e2392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "681d0c66-0fd2-4f7d-b08a-5d1bf33228dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aee64ca-7a88-4259-80f8-95c7a9d17ba3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d64b5df-8a2f-468d-b2fc-2e4203d6fca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623c269f-e383-4e8d-b5a6-1e6fc4c3ddd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42f804f-90eb-4556-8d9f-8fbfdbb9daff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdc4d1c2-a1bd-4167-a8ad-4196198bc437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfacf941-a4b9-4134-8372-bb709a5571ef",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ea408b-2ad2-40da-820b-d1c6badefffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4d9e88-fed4-4dcf-9a48-83584773e4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953e9177-2f62-43d1-8ef3-79ee6b189484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32b24c7a-6311-4e51-aabb-747da4c2e5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9160f016-c509-4abe-9cdb-41723d5728a0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba92a1a8-c636-4fbc-a61b-4415e948c5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eed7c80-8235-4d29-bfc1-d7188c848885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cf5fb1-a11a-4f96-85a0-c4ec2e0575bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e248366e-cc67-4d98-9685-f3b2c9e22846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bcfc30-53b3-49ea-b892-20324cdaff0c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffa819b-4af2-4d5f-8640-7e759ca99328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58221e3-9659-42f7-bc75-03f3ea85a12e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755017ee-763f-4896-9efb-9c186daf6cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2408999-156d-4612-ae67-f16c27910aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e7af5f-787a-48ff-a448-56b92958010c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c80ddf-0842-453c-a237-10d420b4f1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b360a60-b050-4e66-90ac-ae78b4248f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71948316-23a7-431b-8713-71c76e52c339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "acf89d0f-4557-4d6c-a34a-9c58a712d24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb24fb06-1b0d-4b37-8f0d-ce9770a074cb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ae2acf-f47c-4ce8-8b53-67dcbca451fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1551415-abf6-4296-9571-4e1878091203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc6406a-e057-4c30-81e6-3039626e1457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "abb0cab4-fa43-473e-95d7-f31d7a72b00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9e287e-60d7-42e2-a88a-e8f84f4599d2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724ba8b0-bd09-46db-8345-4e28c3179d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2fe0fb-ae07-47fb-9913-d486d720db04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e380b683-e496-4a60-8bf0-c8f13e973772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b258607a-2e75-4a8c-b150-5d94c45a52ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831a0a18-83c6-4f2f-b577-a4f44180d6b4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e7a526-05fc-4a6d-86c8-03932a7e82fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd25baa-24fa-4a8a-9a3a-131fd0a0a607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc3b4d2-71fc-4513-b01c-97969be49f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5315e8a-442e-4e11-a9db-1a95a21c4a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b996d2-35ab-4c8d-8ba5-2700aa019119",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230873a7-8f74-4e47-b91d-07e2b056d0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ca8ea7-c9d6-468c-9992-9fe47305ab46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3744f75-762e-42b0-9abe-fdc523786488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ede13f9-a79c-4cc6-846b-9cc5a7c9c6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fb19ff-3fea-47e9-834f-5e8c55ebf1cf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54be048c-7706-4d1a-8ec2-3e4a7789a839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61d27f2-6a66-41e7-a742-65dc48faf559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8b6287-2aae-4cdd-9fb7-1aebd0c47675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9873a9-5d87-4450-a16b-fb0705aa74ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f281e03-e21f-48fb-99d1-f287400b5dce",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488a3deb-1668-4587-a5e9-5b5de0d342ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4647272-1d64-4cdd-ba97-4a9f453caafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bef408e-363c-4b47-aa82-a8fb7d91b6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab82376f-932f-45f3-a8ea-962d51b49661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35feedde-8a66-4f6f-ad49-7c7a317ea4fd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4d0475-32d7-4ae3-8b11-0d467c0623c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c46cdaf1-6ef5-49bc-8310-7e4ea468cc53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7746513-858f-49d9-9c6a-1c7ca301d4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0166790-2b9e-462d-a501-63b3788a9256"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de82ac59-5757-473a-908c-4fb8266b1c0b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b639b23-07e1-4cd4-a766-9a1d900dae7a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4d784e-7de3-4cb5-ae69-4079605ad1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41843355-d85e-4344-aad8-114795b556af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef30e310-12c4-4905-bd8c-b456a8d0af2e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee30ee5c-be23-4a34-a75e-6a5ff06f0dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97212db0-a8da-4467-8977-cc81c17fca3f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda0f620-ec44-46b4-8959-51b0bbdb3794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b61790f4-e111-4aa0-baad-eeb0d01bf6ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb0bd30-2179-4a67-8c56-0426c744414b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca163dd6-74a3-402e-99b4-d8cf707ede1a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8fcfa14-5778-415d-992e-b605a05eb859",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab46518c-0c57-4c49-9576-d5f14d02e9a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bce3ce6-7e1a-46ba-98a4-bbd926d9a791",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dc7d8d1-6186-48ab-87e7-025cb16b867f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26af069f-94bc-47c1-99f5-13d99d31ddba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3334d461-e09b-42f0-8f41-0096928897e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9ed3ece4-b0c8-4c2f-aa43-ffe13c530b5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "403642c1-6038-42c2-bc88-154c51a06496"
                }
              }
            ]
          },
          {
            "id": "a3490215-6c4c-448f-904a-3607c0cae623",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aead1edd-e23b-4548-a60c-93515fdaf0df",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f7eb624-4d16-4811-8617-4b2868b98fa0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30107f4f-077d-4baf-8ef5-1954ce305d25"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dc873fb-6c50-4764-ac7f-edd5690e60b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "46fc5340-a948-410e-922f-462e02825e87"
                    }
                  }
                ]
              },
              {
                "id": "2f7b00b8-b558-4098-a6a0-16291b7e331d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26406096-91c3-416b-b113-974d65940b61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43319af3-1662-4e01-83b4-63ef985d88f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cea07de7-695f-4e29-9077-21f0c311bd1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bb1744fb-e416-4d46-b473-5ae2a8289fd4"
                    }
                  }
                ]
              },
              {
                "id": "7e244a00-14c7-4e45-afef-5642a29eb82c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc5c5551-0fc4-4c9e-8e45-e49af655a8bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a04cf83-b456-451e-b1f5-7ada2c5134ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aad7e439-2d26-4a62-8aa0-b096b26aecfa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b3d4b8b-6240-431f-a924-485a21e54f90"
                    }
                  }
                ]
              },
              {
                "id": "63719297-eedb-4756-93b1-4a87a1c1a489",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac8924c8-98b9-44b5-817e-75b199df9023",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1fb3afc-9ce6-4fcf-b92a-e8c95a973263"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f1c3d9c-57a7-4620-8dda-a3867438b062",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d84f276e-1959-4de6-b968-9e4bfd443232"
                    }
                  }
                ]
              },
              {
                "id": "e8d0e7b0-feb6-4295-ada2-ddabab7e3ebe",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70511ec3-5401-42e2-a280-5c0215a6e278",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1bd1639-8f5d-4737-b046-abeb9e508bf5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63d83a64-4479-4075-affe-d955e731c195",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "dad882d1-7677-4406-8e3a-5daf961324bf"
                    }
                  }
                ]
              },
              {
                "id": "56995c76-3f1f-428d-8faa-a4f8e4445829",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de558a66-86c4-4dd0-bf30-571a88cc386f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8177416a-e181-4f59-8681-f75f8c880823"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6391e980-45ca-4187-a100-b87a2b09227f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cb81c81a-57b7-4e3e-8553-43796390710e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39f84777-70ff-424f-8e4d-861ed1d5cdc8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29fe4eb3-0175-486c-83f6-c832179c759a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c095a638-27e1-4385-b378-8240d63f7e47",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d5a8c82f-1bd5-40a1-a3c4-b53e8081ec8f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "100eb0ee-f73e-4fb9-b6b7-d8fd6e9204e2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "33a42016-2644-40be-a837-a1bd0705fd52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e0b66b1-ca58-4cc4-8c53-df405982c0e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4571150-a208-4143-9f4d-aa853a4ff0ac"
            }
          }
        ]
      },
      {
        "id": "1fc4673a-3bf9-4e8d-a14b-7e083f224f01",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "020bc276-30eb-4eed-9322-1fb8a4d318e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a338586-fba9-4c69-9dac-22396e58c4a3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4c600542-3362-4f55-8c0f-9f0a52af6e90",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22abc4c4-3c7e-46c5-af66-2046fc899fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ed8c44-a909-452f-8c41-9a5f57f66076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfb55fb-7951-4265-972b-3fb2af11cf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "88a00db7-06e3-47a4-ba12-04cf07419734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd23cdb-c142-4dc0-ab18-062ea21d024f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f82b9a0-8ea6-4141-8540-a9d505a22db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8883405d-8717-4201-b114-d60640284b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4c8b71-24ac-4880-8fd0-2f5f734b6d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb8e794-70e7-47af-935c-2c850da97572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae4bcd2-c5ca-429e-be26-a4e0720d31e1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b4937e-1093-4f63-b010-fd4b30f425dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9994b370-0e51-48c2-8e68-2794914d9885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe329ee-8d61-43c2-bac2-5809f35aa583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da64e004-b84b-4b2b-a172-ef03324392b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df4b887-2b63-4c38-b60c-ef8375b52075",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a030db-b8f9-476a-a557-05a2d43c3f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8569f1fc-aae3-4772-84a1-a36ee520f652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c572869-bc57-4bf6-a35b-862947fd2b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40ef7311-5971-42d4-9e06-211b78ac3b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05aaa65a-9ff7-4282-81e6-894f43b8c1c7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ee959e-ef27-4e90-ae35-f6e0f87dbafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477c8c7c-9e77-410f-abce-af61ea7df704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d6d08f-76fa-4291-acfe-c8a4311a3728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5577fab4-3905-489a-86e3-bf9ef2c7352a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8928e1ab-9560-4e01-98f1-d96dc5f7dd90",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944f7435-d7da-4ca6-a33d-79abbce774ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2552eac-8c9f-46af-be73-0699b06a24ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb1804a-c870-42d6-b8c6-fe812116f7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "72df8d32-916d-43c1-aa12-eacbf36c2e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f378a8-b199-4902-86ae-5a7de5a80482",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125ee5f9-0119-4401-b1c6-2323fbfd73f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde87aeb-9ac8-4854-a334-b05707055854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340ce987-7355-4095-8ed8-344c72afc340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "96db70cc-39ee-462c-b969-5f1797964079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19db943a-96d3-4a28-8551-1ac78669f529",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa8a1ad-d274-4ec4-981e-58d6cd56481c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ed73c9-a8c0-491a-b2fe-638a07be3eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f4f5d9-f5be-4a19-bca0-a1455192b953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e041a2-b47b-4ca6-8c41-336d02b38719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf69d34-7629-4354-8671-75eae7c8e706",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c307df-4177-4a38-95e7-2ffc9e04a377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2972268-fcb3-4466-93e9-d8a9ebd42319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c408ff-8694-4111-b687-511431b78d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "853aa905-d280-4fdb-9d4e-06f5824cff3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af21d1f4-3f6d-4dd5-9529-958334e41a5d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad8ecc7-44c5-48ce-9bc4-44bd8baf83ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de590107-b562-4279-af55-372a1cd8b209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12a5f23-db89-472c-be03-b3ebf3c7b6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80f52d7f-3666-478b-b2f9-9aef2f364db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbf7318-453a-4889-8f5b-3dc5f6b23d5e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b929af0-5ce4-4013-bcc6-74e33c946f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bd2592-8ce6-4136-8422-93ba5f2c255f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7f0f6a-1aa0-45a3-9470-11603359ef2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "eb2413dd-2331-47cd-8bf7-99e0ab626c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ab6164-1c83-422a-8180-18880fc6ec55",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe6978e-cfe7-4be7-954f-f6aa19925bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afea8a1b-f138-4444-9d97-060e66bffcec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462a83d1-ca31-4316-ae49-c4d52c95ba49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4641d985-26f9-4abc-b964-1d5f8aa7ccd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c392cdc4-3bbb-4041-88e7-6deb9493e34a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9f43d8-2ce8-4cbc-976d-c68775bb5098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557cebf2-8f94-460a-8c7a-ff9bba72b4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06df36e8-ea34-42d3-adda-5f9a07ea08c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e778e4-dad7-4549-a5bc-f3d7742e30f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce2fc93-12ee-4223-9697-6aa80e57ce6f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb82ebd-16e9-4afe-ad34-d01fbc2a54db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e511417e-0410-43ee-be0c-de1b7f9b4103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11190043-b8b1-49e2-8fda-407966ca653b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4df28a4e-e22e-45a6-9ebe-5101c2e795f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90252ddb-46a5-4c45-a807-6f119254007f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e9be22-5e1f-4e71-86d5-7089ba6db6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693217d4-37d9-496a-a585-f3fdafccac9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65c2d1f-6231-41c5-b04e-045e1a9dd86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2f234d-6989-4e0c-86f4-00b6f0b30b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ff80ec-cef7-4d9a-bed1-ca1af13eef3a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0086b34-6362-4b1c-95ec-c3b810c14ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ff9bbb-09ba-4f90-87b8-8cf767a1b7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae858b6-2f02-4eb7-83a2-acf0a49ca20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7414fe9e-ed4e-4b08-8abb-5e476bb42ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3f781a-4cf7-4858-8173-c795b7314095",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fcb44e-de86-46d8-a653-aac5d3282396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4312b217-e122-4f35-b964-e1ec49458dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2242bb-439f-461b-8ffd-b085f8dd00e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c17bbce2-daab-4140-9bce-c1b95a62ec10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d25027-2269-44eb-8c4e-c3651b7d3225",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924c2c62-e41e-4379-bf30-370b1c4cfa60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d20734-9bda-4341-bfd4-48afe1b11670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e98cf51-9ca9-4c55-9988-04621104b438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f585dd2f-c2d9-452d-be64-9d85d79a6560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa887d2c-d2a5-42eb-b8f4-9a365a84fe1d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97263e9-93c2-4e81-ad94-96fa3f8f1223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347cc841-21fe-4ffd-ae9e-84477fe62fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa05821-0131-4314-8c6f-ea23e5e02315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99486da6-19b1-499e-b9b2-faf31316d1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ee9b9c-1664-4581-b2f0-9147187be225",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69429fdb-cd1d-45d9-ae23-728ca8e8e644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c09f6f-3f73-4e6d-8e23-bd771e0113c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac12c782-0305-47f4-b1e6-4b691c6ec65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f683a3-e0a7-434e-a1b9-7bce90f57cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66f34da-5974-4344-8135-ad2758fb228d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44da857-3116-4381-bcd7-33fa78668e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95815a22-b63f-46ea-83ae-1e00568f9864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29650b4a-7d34-4392-8dca-37bac493e452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cedbb855-7313-4539-b8a4-328a7e15465f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6176f670-fab1-4880-a737-352ff9d2f895",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c75d43-d507-4539-b847-5ae99ab96dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61ea45a-5971-4b40-be0b-663776f2e6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f974fc48-685d-423d-a6ec-b9a54e198f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01160e0d-c807-4f1c-a505-fb586b1629c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001aa128-8dea-4723-b728-309ae182914e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46435f4-ae98-47e0-9a4f-388bf5e9857c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53015789-682b-41a6-a0cd-4b3c195e7076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa841c7-839f-491a-a8cd-d9232be95670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1577c9-7888-4659-aca0-7284eefeea1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbe0a6e-70f9-43c4-9aab-1e62839a9042",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2613d2-cf04-454a-b7f8-f1c01077d7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394bd5c0-f04e-439c-8fde-25bfcaf0696a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22215054-0341-40b0-b5dc-12be230bd15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e022b1fe-8564-4c76-9f0c-a21277e51684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6533f481-8a24-4a6d-9fb7-01515ea30041",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cee73f-140d-410d-8d78-b09b95e10e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08bc3a1f-a7d1-47e8-a1c2-e3038a083002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020b4228-ebe9-4159-8438-af8a3bc5fd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf8bf4e-b4a2-4429-8261-bdd8bac95355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3d5ccb-59eb-46ab-b794-5fa896dcbb81",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a3969d-db2a-4f69-ad08-febe2003ead8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41bbbf6-75b5-4985-969c-8badb8b5c5f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f2b3bf-c49a-47bc-9d56-de2522d2f37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a37165b-80c1-4ca5-ad6d-31055d2e5759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0dfb79-38d4-4974-851f-9386158306cf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80369b9c-472a-48d6-b005-04bd1fac06d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cf44cc-8b41-470a-adce-5043163b6f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca710b7-61e2-419a-a26b-b121b76ae99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a02fad39-4d3a-4ee4-b3bc-a1320fe8d610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adea02d-69d4-4137-93cb-200808589e61",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275cddac-c69f-4247-b522-e2031f1cd829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbeae4e-11d7-4468-ad15-1a0c5c3a810e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3f4a43-c2dd-4085-a027-732a1c97b679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae24797b-c9a7-4a66-bad6-d947af610bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066f0701-2c2e-4f6c-a020-68398d8595c1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f50acc-bbba-4545-8e62-e30e7d74b332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60874892-e2c0-437f-83a5-e32f3158e9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cde7bca-2e88-43f4-a720-2f9028704d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b3d54f-f761-4e86-9978-ae909e76fafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9939e951-b199-41d4-abda-36bae9e068f1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb06e3fa-7ae9-4f47-8115-027e6c2a30ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13e2195-70a2-43cf-a64b-3401c3ef6b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a4c62b-505c-43df-92e9-093587757188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "190714dc-b7ad-4f4e-bcc0-427e5388a373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3febdb4-099c-47f7-93d3-7055a42a307d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7de38d4-c749-4cc5-9e40-21a5f706f109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb002544-7ca3-4a2b-8b1f-8a737be2cbbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f33818-f3fb-4252-91d0-13763ba162f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "738e4620-906b-46b6-a502-9795c21a5038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2c9d10-7c75-41b8-95de-c6f0f226d4be",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29830f1a-c4d1-4e65-85c3-e41162bb9083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b58dd16-8194-4754-92f7-8dce69ce879d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d3c5a4-8076-44de-85f9-fbbf0c270a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc72009-f601-44f0-a1c3-44f6d844e31d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "19faf910-b0c7-4f11-a704-41fa11dd93d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e447efd6-d60f-4e3f-b013-3805a86080a2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb99886-d393-4541-885a-3dcd764ba47f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "072ce6e5-11b6-4ea3-b372-28baec726e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bed44ce-51cb-4964-972a-87ad17c6c779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66a78b94-d42b-425b-bb24-fa872897d768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a4b65b-07b5-4aba-8db0-a4bd3ba11a02",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52cf8531-5114-4f61-b0b1-ea1f2969da75",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "511eda5a-8150-435e-b6cf-e0ccdd262231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "995cf529-2c30-462a-a0f6-59718c5a807b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "157c4e7c-b5a2-41df-9104-af5e42458684"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f82e8c0-56d1-4009-b231-66810c0c67ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "643631dc-0898-44e4-9f9f-b8147a520097"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f93cbdd0-0bb3-450f-b5a1-87ac6b445320",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc26fbc2-fb26-4f68-93d0-e26bb74e492e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be313e6c-ffbe-4a2b-ba34-becf4abef9db",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c3304de5-33fe-42d2-beeb-e178a36aec0c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2b8d61f-c3b6-43e8-8944-996265cf3dc5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b76858d-eb88-420b-a707-ceaa5410f6e7"
            }
          }
        ]
      },
      {
        "id": "5eed56a2-afa5-4f98-a9ae-0c9e7d3d82a9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8a280d85-10da-4bd0-9595-cae5de3b771a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5b7b703-433d-439f-926c-125710a2a882",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1012c8d6-9f0b-4dcd-8f99-4d9ba83f9bde",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4ce239-6d7c-458a-8034-f1b440e26feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aea1003-2db4-4db6-a15d-73cb59d4666f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068b13fa-2e18-4b73-8792-b739728e37ab",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85406bb8-57d4-4a0a-9744-1b2c66726a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ab7cdd-32ac-4548-8ca7-7cd59458d8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755ab589-342d-4e00-a75c-6753ea41a300",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476d931c-da0f-4ce8-b166-57fa61cd0eef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c1bf5e-f191-4cc7-a5c5-264d4c55cef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b255328-76d6-4c84-ac22-65b86e538082",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbf9a43-38e2-40d8-abf9-0fb8fe191549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a648a43-c4dc-4330-82df-bba0619a378b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9e69d4-3247-47ed-adad-298979f60e92",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92198b4-9b1f-421c-9f2b-15a1d27e2f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54481e62-e742-4fcf-b6b0-a0dbf7f3524e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b98651-fc91-40b1-b3b4-aab1beb332af",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fa3b07-1d56-47db-86ce-cd1a8d4bd2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b05090-7a42-4559-bf14-0f9fe2fdb8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af5942a-f90a-4d8a-9285-1426678eb087",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68a0f77-884e-44ed-8246-d5e605d66844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e8f994-899c-4071-a9ab-f6f3209d3c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1de4915-792d-483a-9a9d-a546721d67dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba7a75f-550d-4f28-80a2-2e7da7ebe21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf502682-befe-4f37-8739-e96bcffb5ae9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64337a86-4a2a-4844-9952-ea8f2a1dccc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73541a69-2f60-4b13-a4fa-05cfc052ec6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5633451-ee08-418b-9a0c-293b471a14f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687d0680-157b-4feb-8b83-73045bf2b243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044c4768-ebb0-4c41-89ff-18aaf0dc54a8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf886d6-a6c1-47c9-9def-4554ff40ac26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3383e86e-c70c-4816-a2e5-42aa0b7b4190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90408ab2-1468-41b5-9e07-d11798cd5999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d11dfc-cf7e-447d-9e3c-35c07ffd5b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4315176-16bd-4cbf-bda1-7dd5ff3f8591",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603fb597-cd6e-4182-8363-16f80c08f350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89a03a1a-945a-4f98-a160-51e42d9a8869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b1b2e2-cce1-4762-82f7-9a5bd9fc54ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea84bfa-e5bf-4c30-ba71-c0923d734aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aec7fcb-507d-4031-bbe2-3be9e9eb6512",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98069ef-5231-4a04-aba9-780c0a1aebb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678aada4-ea84-4bdd-a006-10821dbe7ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d247c695-a567-4805-b072-eb808f767107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3660420-7046-48b4-b3c0-60fe4d577b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb954d8e-47ca-4c8b-b647-7ee1e40a08c8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc099c8-f71a-4c7c-9a90-28045a0a297a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1823d5b0-3dbc-465f-8152-eea1edb03b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7212cf5-17ec-4406-a026-8eb20fd7f32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c537cf53-f856-4234-9f99-dec5ab759ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4103bb-7411-42b8-b71b-cc09e8e83b31",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653fc61e-846e-493a-9602-4ce66becd417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db1563a6-1929-4be4-80d3-5b645a03dc14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8192d94-dc80-4265-a941-3902d276b95f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039b43d6-da46-4d80-a7b9-e7a9911c7810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68201c3-d748-424e-9843-adacaa446c82",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e5e76f-0659-4f54-85ff-2936d239b255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96debdf6-8ba2-4bf7-97ba-be8d5c828b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7c2649-c432-4241-b06a-1000b7cd00c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718461f3-7c9e-4f2a-8ece-1f239a442075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d04959-4a9e-4c1a-a9ab-75417d436d65",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee32b7f7-14be-4aea-90ae-f360e3e5132e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e15d48c9-51af-480c-992e-3498e242578f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "961819ea-693e-4893-a98c-2a090343e8b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c72b8e-c1bc-45d2-850f-c2accf8cc2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52860d2-486b-4e17-9052-7420dc63f2d9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e945fc4-35cb-45f9-84ac-633d3184a81c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaa85d70-2693-459e-a1ac-ccb2b5c50713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1746d5-1a01-405e-af5e-2ac4c5abf429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c4fb77-a4fe-41a4-8750-f6045a75a863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84971cb3-4cfc-426d-b04b-ba00877c85a8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573cb1c0-3ea5-4d3a-966e-6c5a6d818ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d1002d-68b9-4f30-aefc-0385e8871bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78be5228-c961-412f-bde5-f6c5de9c7e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4934e8de-87a9-4b42-8401-024a51c79163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db06df50-c0f2-442d-ae90-b4180a0ef306",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a869d2-2cf4-4a7f-88fc-d44c43bb80ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d5d7fa-84f7-4b95-982d-678f5073e3ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7e2b7f-4ddd-4497-b3b8-f3f8e10220c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a8130f-a604-46a2-8e5d-09843ceb4efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97ff30f-2ec1-403c-9344-d7b3a73a1e44",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6486f5-c58c-43fb-90d8-48fb2833d469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d86c413-509b-4abb-a290-257483e408e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e484b2-a550-4b02-ae22-b1f6a33e54ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48dfbd42-6976-4e31-822d-8023f687f029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00425557-89da-44cb-8f59-d3153d453bac",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea99ed2c-a961-4a06-ae3b-89d03412aee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db975733-c72e-4dce-b164-e649f7b52417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8961e196-e700-4889-bdcc-ad498bd9e6fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6781d16-4983-4dc6-b5d5-d064653ef114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c427eb2-b3e5-4199-849c-44147e4e94ed",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac84c66e-e21e-48c7-a59d-d61413fd3748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ebb329-bbab-4cd5-bbee-0bec6d5d3ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65d4505-9701-4263-8fba-ef7ec5502493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf873bb1-ece1-42a7-beb9-b2660c7378a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd153be-7220-4ddd-a4f7-ced7b38a395e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5553e8f9-9417-4850-ad51-893091f74cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a891ea-bcf4-4386-a367-36b5b84359e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a11115-3d13-408a-9c28-d1cc7aae38af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf26b88a-fc33-4738-9db1-19c933220a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40256f61-a4b9-49cd-a434-de6dc33bc8f4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf126d5-fb7a-4189-a266-d5b5b778e960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5464060-d8cd-4c88-9b3e-0c504380a4e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa738800-6ce6-45da-ae1b-5fd0546aa81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884e31c2-4040-4918-af2b-1d8d5db563e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccef351e-f942-42b9-a652-75ab5a67f048",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4f7ea1-8b34-4435-acc5-8cfe8e6629c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75d15b2e-4a18-4676-bb78-9261882b16c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f2f5c8-0c6a-4162-8da2-87d228dc8089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24de77d3-ab2f-4a1b-9243-b7b88181fa24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d3c6d2-f909-43d5-a140-0265fe214cb4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f1516e-9325-4ff0-a3f3-270f27f0c609",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82ebaced-31d8-40bf-ae9f-94c47e9952b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1445e4e2-23bb-4ae9-8942-6ff44b4887ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcdd9d80-b6b8-4071-a09c-2a024cd58882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e85477-8126-4a30-8408-8acdb67cb1b6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1155c90e-82b0-4e2c-b1d6-b8cc7e812b32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aaf0488-74da-4fb7-82db-ff25b3254cfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7c91ba-36f3-458a-a20c-3d21083a4d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf0233f-caa8-449c-8463-40b8ad21a038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d0d30f-423f-4e32-9555-3fa17ddc6255",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8f0fab-0f6d-4c9a-a927-ecd7f03301c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "486936e4-d338-4b2d-aa02-3b0e036d8142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f749a2d1-a657-42b3-abd6-7f65169440ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21819669-d558-47e3-850e-22dca44f5e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae13f4f9-db4f-43b2-8286-1c8c95b0e619",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a31c57b-c2fa-464b-82e9-8e7e1fcaa559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8598c824-aab8-4c4b-af98-ad3057e4ca20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4e4b29-a557-427c-9e34-2d390a1be103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3295d5e8-84d9-4604-b7a3-b56eb679ff5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d672ca-7960-4c94-9332-3c81abc87965",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258af4bf-73b4-4325-b87c-c2b19d45cfbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e26109f1-17af-406e-9f8a-3526ac2bcacf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe3fe86-31fd-46be-b957-1738cbedc6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bde55b-19bf-4d34-8a98-decbe23049be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d230d5b-f25f-4ce1-a962-aa29744e901a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647c946c-1e28-44ea-b933-92e553cdca61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8dfa163-9182-46fe-9ecd-983c09321051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90f6779-d246-4c0f-ba71-3191e6c23982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b660b3-edeb-4244-a711-ef3a7107b8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b58c34a-2180-4be6-b54e-8de6fac60905",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63cafff-69f7-4dd9-ae32-d231b9949e60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "087ab4ca-ffdc-49ae-80e6-ef545eed0531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40a12c9-5205-46dc-bda3-3d9551d59c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38096fe6-49f2-4891-9758-102bca504a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7138429d-38ea-411d-afc3-799f26dafdfc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacd890c-714f-45fa-a517-77dc0b9b52ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47eb89c1-07cd-4d2f-af24-21c925533df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d975f96-4a20-4672-9884-650adf6ec8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a845636d-a476-469e-b6e1-2190b15f361b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171dae0c-8a00-4431-ad57-346549d880bd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d63fcf-c07d-4d04-a8ac-52291d75d511",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbb5dcdb-2c65-45c2-9c9f-d9b1d58433bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5146d07b-00b8-4bbf-91c9-97cd9e0c030d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7225fc8-345c-4f2b-a9c6-524016818403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6406a5-744e-49f9-8ea9-ad5786a4b917",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d2a89b-0b3f-404b-bca6-d33bc6300c17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8757470-ba9f-4587-8e94-2901658fee82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ee593a-49db-4521-be98-48944aa04206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82ffbea-24f8-47a2-a06e-213d51f9c1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ac307a-85cb-475f-adda-cc99ea683910",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0682eb50-cc9d-4428-8d89-ddc60cb91563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f9f700-17ad-43f3-a6ca-38b36b499368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f07796b-f244-4a20-848c-1eb27ce7b96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44baa24-3c22-4650-9adf-66fa11303f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83532d2-f3a1-4f9c-97b3-79f03f9269be",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff50ad5-a43d-4a7f-92e7-1905351aa448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2e8625-93a3-467c-acb5-53a58f223183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3778493-a14b-4be4-a7eb-3a15e4c3e1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6cf3f9c-079e-488f-bdd5-9f84b7f6445a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d655d3f7-db9e-4f74-acca-f285943dec9d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b83ecf-88c8-404d-9c64-9b9562880b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00a07f6-5f0b-4533-8c4f-95818197cc4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "952f2625-0048-41fd-abb5-52336299212a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce75c7f-2bc8-4888-ad4f-c21ea9f3a5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2c0919-1667-42a1-8518-e140471eb34b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05796409-3d6e-4ad0-a9f5-44576991d422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fa0332-31b2-47c7-915a-ac37fde596bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce1e970-310a-4965-bb12-ad3c4c54e9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b0bdd5-1b5f-48a2-8c8b-ad40f8abfe19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe8c800-e87e-4f27-92bb-adfb384855d3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6855eee5-b19b-4cf5-9ad2-e66683ef5124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d037ab8d-a33f-46f6-a87e-31e29f57e791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "235aa456-29cf-4f05-9662-7e18c2437d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9ca733-f9dd-45a7-8b16-bfc92a4bdd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a656ef-5c18-4c46-854a-f448652fcb8c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c7a927-91d4-4120-a139-41600086505a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d12d3f-3d9d-478c-85cb-46db9392ec4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109c5052-833c-425a-973f-91e07fcadef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c3ae91-02e8-480d-a3a4-6ecdb3ee7b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adcb44b2-42d0-4f61-9902-05043b0e3af3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ac9ed2-d586-47e5-bfc9-8fb1abc697bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba53246-cc98-43b9-afd5-2b04d7a4bfc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c60835-c8f1-46e9-a500-ac885f02058a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e39d1e-11da-46a4-8794-0ff4c4cec121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bd0fc4-43aa-44f3-85b4-9d28c867ca07",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff94401-1131-4a84-bb03-330edb19415a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b89d78-7db6-4d6e-ab76-7f473fea5b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3bad18-a027-4132-b2c4-9ee8ed033e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487268c5-7520-43d1-ab0e-d94415b0b03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482fe501-13db-455a-bb7d-ab8b135560a7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842b7610-bfdb-40c2-9d76-5dd56ffafae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaeb0c3d-e1ba-4812-a56d-bfb655e7b781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b382df9c-5bcf-4edb-8760-ed8aad3fa926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f9c412-f85f-4197-a324-c1e84f38bdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a366b1e9-0121-49fa-bc40-a080348f9cd5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a64432-c00f-46f8-a848-28d4756e0740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56679591-5d36-438e-9c84-f322636b6c4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d429fd0-15ac-47b9-9670-b6b54f16a545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c9eab4-5eb2-4c0f-8325-a486a7749994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7deca615-503c-44e2-8fc6-bb6b78ff874c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771975fb-f943-4681-b082-c32488eecded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44864c99-21a4-4e52-adf3-676c16f6720b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "416699ce-1110-46f9-9b0d-35b16c488fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d07e21-4f97-496e-980e-f59f688673a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467e454d-0f3a-42ff-afbb-11ecf95d2b9f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5423dfd7-595f-4682-9939-81a539202f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cef87f2-7ca3-41fe-b50d-27adeddaaa61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5c8a6d-f1a8-4897-93fc-cdeb134cdfc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4898ca-6f6a-4b5a-bf7c-a2922e06b546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a048a1c-190a-4882-b663-f1e7e2c56cd9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c89138c-bd59-4fe0-a9d7-7a1102a93648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36205b18-4431-48f0-a914-6a79978ed9fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3c380c-11e8-42e0-916b-55e97c94b676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c2379b-31c9-4393-b923-edb85af17d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfbee6e-dafa-46b4-a1df-07fd1b202c41",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9601e1c3-17a9-4306-b0ca-010525cbecf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcba592d-26a0-4ae2-b8fd-9eb121ac6707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16dfc9f3-0880-470d-9569-8a25b0a10576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70bedce6-a42e-47e3-9c81-7bf4bce52cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3932598-beff-4417-bf4f-3d473dfbaa54",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff8ca7d-d240-4d2f-842f-693a8f99831b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330658ef-632c-4a89-b83c-492966f2e9ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c919ecf-e0b7-43be-98c4-4a1fd7a9f0f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3eb6e7-4754-40e8-a113-a2cf2875ca13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf000748-f587-48ae-b095-1ab563a1b792",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c351f499-2ecc-45ff-baf3-fd883151f1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9a6ccd-03fd-4d3d-8939-2cd23fe26f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f155442-e46f-4b75-8ebb-055dc3d36fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceb762c4-1884-4f77-b73b-11e4fe143003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69ce68d-8906-4d8d-ba14-e26811e7d075",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b1c55c-1494-4350-9306-01be15aed1ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96e6d9b-5c7d-4811-a9d6-dccc06f3e9d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "411bf8fc-65f0-4c5b-92b9-72e587aea789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc5b6a7-7943-4c54-b776-3ae1d59c2e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa89c38-4850-471a-9b05-a8a776b4da48",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb4358d-e4c5-4039-8894-463afda51010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a57ce4-1e5a-4afa-aa82-2f7e3bc26ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0eefb0-64c3-435c-8bd6-692a7301d698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c7387e-1778-468b-8246-9db503995feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb03138-f289-4b72-aa5c-3505df4d6d79",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91e456a-82a3-4e01-9392-a8d939d2d21f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7d6ab9-938f-4fd0-b8a7-1a16a3574375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6842b570-1ab7-4bd1-aead-7cf31e8392e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4455ddf-26b3-4224-9381-44d834a9918d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30bb1ebe-866b-42c7-99be-f81784cb1092",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10198fd7-8196-4485-8b8f-025aa97af93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b84a22-1dd3-4f27-b94c-a54f9cfe0221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8cc6bb-ae6e-467a-99d1-eb55d41140e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee315936-830b-4a2a-aba8-c30baeda7fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e70f54-3816-4e31-aa56-5b68010e9406",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd47bc9d-c694-4266-b83c-520d50f55843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5831a15-f4d1-4ed0-935f-2eac9c81acc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4651cfa-ae81-471a-a783-c572ce82d092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8a52d3-e16b-4ed0-a7a1-160f5a6462dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afb725f-1504-4ce2-853a-e52a07a18ae3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b786706-db7b-430e-abe0-01c56bccd125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44bfd024-dfea-4932-bc4b-c6070d33e35f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5058aa25-4dd0-4d92-9bc7-25db65e71e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8114ef4d-856e-4d05-8b42-a4e59686b54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0ad0eb-74e0-426a-bb3c-f6f56be36c7f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82162f29-66b0-42e8-a572-fc0427c22fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b5b7b4-2b39-45ae-9935-742bab6c1956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f53471f-fa13-44eb-b3a0-ecaa3387b25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db07ac0-84af-48bd-9945-d24518b8191d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad146f62-6560-4409-af57-8c427a471ae4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3efb8ff6-ea9e-4574-a650-d5aac71443d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf505ac-05fa-4975-bfb6-6633bb3c4aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370a252d-1738-4f76-93cb-d7ca4356a2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58597f5d-7e38-46a7-a5f5-de5f080ec069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b390e4a-3458-4bc2-bfb2-fd1e59f243df",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9612c918-449b-450c-afa5-b9443a2cc4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b614578d-a8ac-49bd-b7d3-db91d8f0959e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c5f5a6-f787-405b-badd-3460761f157e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b0bed6-fe61-48e7-8fa0-1d0c76d6cfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a200da9-2b05-48a1-930d-7587fb77fb9d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1f1d6a-a4a2-40c5-bb48-7614f28cd082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95fe2edf-a218-40ff-a387-b36ebee32fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb7e7eb-eff0-4345-a351-1f8202617311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9161bf10-1f3c-4361-ac76-4a97d48ef94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98aa03c0-54a9-49fe-9088-1d84860638a0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561efd9a-4de8-499b-9edb-c2abe1325424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a63df3-b012-4d28-b8b4-ddab7c6dbce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9d235c-e223-4afc-95c2-6d0ad7e29dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5ec68b-4aac-4f79-9c05-9633f1666c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fe3869-1aa5-455e-a79c-2543d29e4777",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3aea59-7d11-42c2-b308-35237f247c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70ee142-02ce-45da-b3f3-bdd4b521de0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa41b4a8-4366-42c3-b2c6-3ee461258d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8228d968-184d-46c1-ba0e-76963a542cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34196e35-26f1-4e81-bbf5-2e09018114c6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698b90e2-e890-45ae-81d6-164c9631331e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02934fc-0649-4de2-9f1b-e3fe29567063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7128621b-22bb-4740-b57f-e8ffcb41f5e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985c16dd-815a-4901-b046-9172ad9233b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9aad58-e90c-4adc-9d42-3ce42f79c0a1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33b404f-e589-4e27-a903-c5f6f79c4d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c7e2961-c5b4-4d88-8c0a-040b61abd42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36da727-e1ce-4563-b23d-1fa102eb5a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "527b9d85-5bdb-4f69-a663-07aa481daeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a14e01-22f0-4fd5-ba0d-3ee589f8b700",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95db727e-d1e2-45aa-a3ab-ee2df2b0d624",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6751ce5-87c3-4b36-b7de-44661a1a08f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1886a85-9e9f-4e21-8a3c-c16013d4dad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760223bf-2411-4606-94d8-708d87025a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d97802d-59a9-4ad1-a6a8-0797463bc59c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1d087a-7554-4872-bc92-ae28eac74ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75ccda43-d41b-4083-ab0f-004595b6e53e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0483f2-61ac-4b19-bb99-7be28ac5082a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888465f7-cb6b-494d-a898-0524a75d483f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f30c317-90a7-4ae4-9454-fbe5b5cf729d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cbfd78-9269-40a6-8d99-b023ffdede2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efb83e2b-4f86-4b27-bec3-2c7554308cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a38008-8b21-4ac3-883e-db6e4b7d1f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ffa200-9cd6-4d81-a095-7546b898e07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9aea24-a1cb-4eea-b7ac-09c88d81fc17",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bea9e16-fa65-4c93-922d-df383c53a556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f34788fd-06a4-4ecd-b50f-68e3157be073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "062e0f19-b8d1-43de-af9d-fca498413689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "647ef7eb-bf7f-459b-b3dd-8d0b26ef066b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6089332-8b3e-49e8-999e-9630fd4bdc21",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836dd991-2c93-4b7f-80b6-884b704cb8a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431dad5d-e67d-4849-b343-e5c02847fc9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b296695f-c0dc-4c46-95c0-4cfa25048b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c92e87e5-ee7c-43bc-a9f8-b0c8e8512b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9c245e-f121-49fb-8463-3de761b23dc6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42a67b7-0de5-4551-ad7b-43eafb4cc80f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "099dfd00-d03a-4e5e-99f1-6eed28e672da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac869b8d-ac51-439d-9dd4-f49bd0f25adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6654d008-22db-4e2d-a644-225a6e313f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38300d3-5f93-428c-95ab-8aa78a9adcb9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbfc1b5-0b3c-4640-8ba0-4237183fec49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4597f6f3-8487-42eb-85d6-aea11f267eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c96b86-37cf-4155-8468-27709cdc81c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c3dcef-08a7-4cfc-b5bc-2ed614ea3be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9154b8f8-c698-4d38-a9ff-fa10743a0177",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909646fe-c1a1-43aa-ad2a-9cfb532703e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2d3ec9a-a7e3-4dc1-b684-f1c71f5a235a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2373489e-0cc1-4739-b15e-b8e5267045bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c3c587-9aba-478b-b098-2aa2dc1360b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5db33f-38bc-432a-aa13-4bc2f3e2b440",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76d6e8c-6462-4a5f-8deb-88dab7dbac90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ac38315-b017-45cf-89db-f93eaaee2121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1598c24-f42b-4005-9108-c3243ab2788d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d801e6-9b02-4c2d-936e-1aea7eefc15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea822c5-7bb5-43f3-bb8b-c5dbd6e8f549",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56010bc5-0451-49a7-b9c4-c23df95a8ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb934f24-5292-4c2f-9130-9017dab5aef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c83edd-fd61-43be-a959-a642a033ece3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46278f01-5b4c-4ff9-a7a3-986a3036edaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9241217d-0a74-47ab-b46b-9ce0e2035273",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab69cd0c-4a2b-496f-bbfe-63d3844d1f1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "933b0d15-cdc7-426f-b189-b30fc8a3d9f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde1ae80-1188-4ca7-a6c7-c60b7b044cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3fb952-d714-495b-84c9-4917ad967792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d85990-10c1-429e-9917-697e21dad371",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0933b8e-9814-491e-93cf-d743408bd0d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "675e1f31-dfab-4ced-b4f9-084155668ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8bb8ce-a9a0-404b-ad8d-bd475830c398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93829cad-6a0a-4207-9510-38196772fbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ed3d00-1d32-4276-b977-2c4dc2f5da68",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3076ea12-80dc-442f-a0fa-bb5722ab2637",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c93b8f7f-56f5-44d8-bc74-f8a02948ee19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d348e50d-691b-46ff-a632-649a510596a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce904bcb-0737-4091-95d6-a90c657588af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3727ae8c-4bbf-4bd1-b853-42bac6e1428b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a34f96-4e87-4c31-8a6f-ceb91a8cfd4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5df7667-c784-4a40-b57b-649321613809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3d2116-2168-4598-b53e-cce20ff30a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1413591e-ff06-4438-9f6f-59b7a0033dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f22d146-1fc5-4257-8819-2c4c6508e1f5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d641c33e-ef4a-48fc-91fb-64bf08d8ff1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9360e9f8-a66f-4d8c-adcc-492c6ecf1039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "741ab5e3-2736-409b-9ff9-11aa70bb0bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ed3208-7bc2-42e8-a4bb-c8e5e22a2b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b604de6-ceaf-47b3-a62f-adc626e29065",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be02002-942b-4076-9945-f68a09066ed3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9905a44f-9fc8-430c-8f70-806ca255c992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613f2d63-f155-4d18-8da4-26fcc7625de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b4e684-7f6e-43a4-826d-91d1ff6a2b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743545b6-3267-42b6-b14d-9f6eb2579c0a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4710cc13-f97a-45aa-a134-421cf4086644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa071090-0de3-4c10-a7b0-30672b9a1d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98f4ee2-29f3-4372-b67f-dd53db84bd41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2af5f4f-085e-4832-9688-c5699e5b30d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64322ef3-d033-4205-8f2e-82b3faa72bb7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59bf3e5-b7a6-4e0d-9429-b6c8410f3c87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f11b866a-0628-489c-a091-ffe8fa839541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bcc91e-cf3f-46b8-9458-3020f5a12e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4def3e6b-9158-45c2-9ae3-59788d04f002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba341f9-30a0-40f9-af9f-d1cd80405df2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f909b3-eee7-4992-89ca-ee631686ef15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a60bcf21-225a-44de-a3a1-973b39fbc700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cd5434-9050-48c9-9372-20395f626970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1956afd0-02ef-4803-a12c-153097e8b42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58998323-0ea7-4609-95a4-ac9135d64dd8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7fdb6a-d344-448e-9ef5-369cb41a0c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ae8ea92-3f28-40d5-b98d-ca95a85c6b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e895eb7-a93e-4da3-985f-ff8f5aa4851d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5b163c-9e03-418a-9d27-f77dba5da5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7a3abd-aa29-46a8-bc18-62a3c432d459",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e1ed3f-154b-48bf-80b6-2a48a6e10110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6357933-b6df-418f-b604-0337343851cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3680d607-d359-4c0a-b281-07b05fd3b16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94112d0-8859-4ffc-bbaf-30b12b054e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb06aecb-6a26-4dbd-93fc-8001c2ed51a9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5944bb31-3d17-49f0-8304-835b9e411dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48187404-1706-40cf-b358-6fc2b3ba0d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242e232c-a7e7-4a73-9575-b9a92ec306f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e266a6c-21a9-45ec-a64b-4c6fcc18b0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995cb0b8-532c-4dba-8404-d4b1afd4db21",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499140a5-3bf2-444f-8e24-52a165bf3e12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8488e01a-02df-4e6d-beaa-0daf5d22912e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b485d4a5-1587-43e3-a29c-837e53cad578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd56164e-294c-4390-81c1-7a681ada02fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f06ef1-4abc-48dc-b4b7-bc70ffb7176b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f68401-9f37-4162-b1a6-9507573ae52f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0733363-ca75-4bf8-95eb-c699d94282fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b593a4b7-3ca7-4fba-8c00-fdc430b22d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cae457d-0ef9-457e-9f0c-cbfc9ecffc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a748b15d-2237-4fc2-9528-d3deabe444ef",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f26b57-f899-41fe-9c90-79ff78d5927f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a56910f-87df-44db-87ca-cb7eef17728e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11dfea92-ff69-4ec0-87b2-fa79b119be16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16565abb-2000-42d8-a118-fd485c02e0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60617453-c918-48f4-bb91-d90b055ae189",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6f4979-af15-4436-b9d3-09a33993dcbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7902b474-20c7-487f-b6ce-65ce8d5b866f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b64a64-b3b3-4bef-8309-ee8cb502c1ba",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32cf54b5-0350-445c-b099-8c6f48e15dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293edd0b-dd59-4af3-8066-10435f2cc2d0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ed8d0b-80d2-471d-a674-7178be3db6b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "780bba0b-5c38-4967-ad1d-664b8c28220c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5479c87-02ce-4d63-a90c-14143bdeab64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9398a857-167f-4398-b2d1-7077adaf59b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fab72a-2c7a-4217-ac44-5bace5b9d873",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd102c6a-8054-44fa-b186-283c47b8ea3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caf39a13-1d43-4cb7-96ae-b231bfa059fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ba2e8f-55e2-4ae2-9287-02bb04f815b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e920df-407c-4d03-8860-8d0907a94033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b0071d-5d8b-45b9-a133-0dad11b1da85",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61366b0-9c8d-4d73-b0f6-749678a261fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f3f9595-cd68-4a05-9fac-681d24dadf95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfaeaa2-5a4e-487d-8669-e19ace539191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2941b05-4f56-4d44-9e65-6762e79cfd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545dd410-7965-4342-91aa-e15c511b9402",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b38cb7-616c-4037-9af0-43b049419505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd4da353-585a-41f8-95f4-11f54b19eab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93bd6866-05d6-436b-b022-1173e30830dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3774a36-3ff1-4730-b2f7-ebbac7e6af00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6736af-6d59-4b20-bdee-ed96cb7a0499",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a6b617-0144-4330-bd7e-a377cc394dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdbaa39a-50c7-4c27-9b87-0606a0f908ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffd79a9-985d-4e8b-8348-27d2a6bb7c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "496e5d96-000b-4da2-b4eb-fba8e50e6602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17a6cba-526f-41fa-aa9c-485456095278",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9767974d-746b-475a-af8a-29f29f7fed4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d61e78d-3e30-4564-8e2f-aad1b65d0212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef44ebc-a246-4bdc-b90a-845d3d4ea9b4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5888e8-2fe3-44eb-a07b-0742b31fd8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e61707-da4b-4a4b-8c06-025237b54987",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5d6621-7579-463d-bbba-03e2f1144115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10d85508-6770-4f7c-beb6-9f5e86c6c5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a46818a-e815-478f-a35d-15da179cd753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce76907f-54e1-4d98-b51b-a7da62287a31"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f48ad09c-8ac7-43e5-ae39-4b0dfdd2f18a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bc5a59f-b8c1-4aa9-ba90-bf7ba9969e72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb128a59-218f-478e-85c0-5033cd5cfe1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c267bffa-aae5-4d54-b605-fd004c4a725c"
                    }
                  }
                ]
              },
              {
                "id": "8718bd38-e15b-454d-8fc0-b1e6e716cb3f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "921db1bd-5758-4ba4-a665-573fc142aa3b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50293c0-61e3-4f56-831f-e30d8b94467a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2f8423f2-9872-4c02-839f-d48568992957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45124a2c-f994-4559-ad9c-371f89897eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61e26e1b-7792-43cc-8d8a-31dc1f09f8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b38eeb5-b213-42d4-94c1-f2f62f816ba7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79004ddf-8b46-4538-a17f-0f34c358dc9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "06796d48-731e-40e1-b698-adabc31fa407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6748812-0d22-479c-a95e-a64c7681c937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09a8b841-95de-4b1f-9ec9-f42253c104d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6064955d-0cd5-4d2d-af7c-d03463b03f4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "559f5244-4744-4e7a-b166-0023be60a85f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e1e4679-637e-4543-a8a5-9f3968b91556",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7757cf86-af4d-4de5-ac19-03840d4554a3"
                    }
                  }
                ]
              },
              {
                "id": "613a7f19-3267-47f2-82bf-8068b2b7e8e1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ea4dd25b-bb35-4227-a6fa-4d88fbcab9e8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3083f4-7222-4128-98c2-19bec61b300b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "475c9540-5f6a-441f-a4b8-992d98bd5a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12078003-b55f-4fb3-bbad-e022b37ecff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db29bae-f79c-4d00-bc88-544e4a9ea1ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "80b4242d-2b3b-4b1f-b996-acbbef06c45f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8fac3062-c00c-41b8-ba6a-dfedd1c84a1f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9efa7fb6-ce5d-4e4c-8b23-b382c3badcaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e0a49b25-5820-42e0-8ccb-939de210e917"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a34a2bfe-751e-48d2-a852-f60952d22386",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13fa0acd-ec7b-48f6-8a60-a1e71b9c04ae"
                    }
                  }
                ]
              },
              {
                "id": "93e8ec26-71d4-4669-8438-26581177db62",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed2a536b-59d0-49f8-87a6-ea8f923baa9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a9edc399-5221-45ca-94a6-1270b1ab3b3e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf84f25e-67a0-43e9-add8-322696a2e0a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "779a6e4a-0303-4069-8ec1-c18aa2704d0b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "295e784b-acfe-4e0a-a706-cc78c92030f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "df83fa71-2d55-4665-9dba-1bfe7802896f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84a3c5ca-f710-4a39-b697-7e0248dd06c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc4a8a07-a5dd-4ca9-a536-0ac5f640d4ee"
            }
          }
        ]
      },
      {
        "id": "8448593c-1ba6-46ee-8aeb-7ee9c45fe2b4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cb56993f-6227-46e5-b606-c5f419fe8da0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7bac3a9-cee6-4a0b-8420-6be97176bce3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6283b88-1212-4119-9a31-87e66e92ea57",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bca2e03-3a7e-444c-8a95-3b5ebab062b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d276381c-7fdb-4f88-ba1d-2713b739a34f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "039fd237-16e9-406d-bbb8-264729fc65b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da8afe04-4bca-49d8-84ba-dd500dc900b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74bda971-d8f5-41a6-8db8-3247ca33517b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab3b250-4c30-44de-9a5b-9069f28959d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "01633b01-e4eb-4dc4-a6e6-93b8e3f3aca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8b9bb8-097d-4ae4-b67a-a23836f9b03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90dad948-468f-4d73-8c97-a6732eab3472"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2813f3d-c45f-4959-a607-b6a553a20242",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec98f20a-9290-4e54-9d63-2fa506cfb0e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0b71d7d-4102-46bf-b12d-ca51cd803b38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3b2efdb-d52b-4a4b-87ac-2bf8cd5a28df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fdbf2679-d688-4f3e-bd53-0b8d4d799395",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "32717dad-ed50-4f34-912c-a2704d652bff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54098874-9ac0-4d36-a93a-9affc6a25232",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "140f226f-3f4a-4281-ae03-2a65549e6859"
            }
          }
        ]
      },
      {
        "id": "36681d1a-d44c-42f7-bf35-0edd08580381",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1020dd45-83c6-4e6e-a1b8-afc48f316912",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77c9d350-d54b-46c7-9c5a-0cde814ef25f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef8d4d31-f3ce-41e6-b6ac-783f87e426cf",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50564cd1-fd67-4007-8a7d-f468c45db928",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f074c205-1ae5-4446-b331-f72d95be43b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6af291-fbb2-461d-ae14-89b1888ba083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f610bd1-cf0c-4dd4-bf20-9e0b28caeed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd945487-a8fe-464e-b62f-caa3598d47ee",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931bfe0a-2ebb-4556-95ec-276a1a2d4378",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b23bb219-356a-4804-8e10-b14c7600f6c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3b8425-dae9-4e04-a5df-e71eed7f7039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd8ed0e5-beca-47fe-991f-2660adcd7c9a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fc28886-02ab-43e3-9a60-1124b614144e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "102b0890-5c90-4af3-93ce-74a264976ebf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52c4e420-3a19-4431-af9c-c25d99a2aede",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "576c8b3b-9f54-4925-92e1-436ba2028d66"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64ea0949-7707-495c-8770-2c74f1f2d4f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aab9ccaa-e912-40c5-8648-71c56c7efcbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f2c399e-47ff-4b3a-8fad-6c81a6c51a76",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60d511d7-b7a7-488c-8765-8d2aca50228a"
            }
          }
        ]
      },
      {
        "id": "a60bea85-00b3-4f46-8970-411967956969",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5c3c5d23-e94d-4534-9b56-dbf0fe517aec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33fd8c54-4dfa-4b5b-89d0-e5b7a1d70cff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66f5f9f9-b9fa-42c8-a337-756b86b6d9f6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ee254e-d94e-4c41-bdf1-ee5d310174a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84c46a9e-3f06-4797-83f3-a5a5b1673c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42be3456-04ac-4d08-b0de-ca34ed227605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58a67b2c-c521-4e99-a95b-7d495e6b1ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98810c25-a151-47e9-8749-abbfdbf06fc1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90a5bee-4ae8-4df9-b294-963afe92d7d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bb17c4b3-3f54-45ed-bd4a-c923e0a61cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4134b194-850d-4b90-ad2a-c50dee415a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85451f64-ca88-48e7-be26-05bc71cd6598"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92d7ec0f-a614-45ac-801b-3237f4686b34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "885aa3d6-249e-476f-a82d-f79a0cc4e422"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78b9c6bc-d6f4-49a6-bbe8-398061cfa3ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5b2ab74-0cec-41b9-a398-55176944c7ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "349e7c57-d550-45a0-b3c8-12bfec516c26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a051df95-9c0b-432f-b931-4b237911f90b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a4b16f0-e16f-4036-82b2-d996c0140bc3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ccbd5f2-6f79-4f04-9019-87e37b149356"
            }
          }
        ]
      },
      {
        "id": "d907ec5c-caf3-4101-9617-f58fba544df0",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4a51997-c201-452a-b5d3-7f789e68761d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1551fbd8-5dfc-447c-94aa-b44c209a2c29",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "da5aa30c-f56e-45ef-85ba-25aff9be180b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7acf2ffd-93e2-41b0-b3d5-3dced3e02029",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61b1c07b-b36d-43ad-b3dd-3074f58fafd8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 244.47307692307666,
      "responseMin": 12,
      "responseMax": 8534,
      "responseSd": 804.0028626325285,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681173456157,
      "completed": 1681173531884
    },
    "executions": [
      {
        "id": "891bddc4-56b1-4afc-8778-a698f717673a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2da4688b-0727-4df5-8aeb-9e96bf430424",
          "httpRequestId": "49e550b9-03aa-4686-8886-2baf24fb4685"
        },
        "item": {
          "id": "891bddc4-56b1-4afc-8778-a698f717673a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8a786a22-b863-4e76-ac3c-fb4b78fcac6a",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 0
        }
      },
      {
        "id": "7a28e700-e8a6-43db-852d-8a84726d15cc",
        "cursor": {
          "ref": "b9a1a7b4-daa6-47f3-8706-5d607c9a05ed",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "63c101db-895a-46cc-8a91-2b05f0b54686"
        },
        "item": {
          "id": "7a28e700-e8a6-43db-852d-8a84726d15cc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "82f7d149-d9c4-421f-922b-a3e5fece9d38",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "1026e519-1559-4d92-8380-8d957b992412",
        "cursor": {
          "ref": "b0037364-22e2-4fb7-a664-d2969b3af7c4",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2a1070cd-49aa-4efa-800d-8d112e743049"
        },
        "item": {
          "id": "1026e519-1559-4d92-8380-8d957b992412",
          "name": "did_json"
        },
        "response": {
          "id": "00c68d29-6198-44f3-bc65-5b3f539d1e9a",
          "status": "OK",
          "code": 200,
          "responseTime": 591,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0d56e7-6c65-4d15-a2df-86d7620b79dc",
        "cursor": {
          "ref": "93d40690-b623-4307-854f-7755d88a42a0",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f4f767af-6f3d-4cc3-9a9d-15c4d7a7dd67"
        },
        "item": {
          "id": "cf0d56e7-6c65-4d15-a2df-86d7620b79dc",
          "name": "did:invalid"
        },
        "response": {
          "id": "989c4f8c-fd98-4d32-810b-f78578927249",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1428,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cf0d56e7-6c65-4d15-a2df-86d7620b79dc",
        "cursor": {
          "ref": "93d40690-b623-4307-854f-7755d88a42a0",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f4f767af-6f3d-4cc3-9a9d-15c4d7a7dd67"
        },
        "item": {
          "id": "cf0d56e7-6c65-4d15-a2df-86d7620b79dc",
          "name": "did:invalid"
        },
        "response": {
          "id": "989c4f8c-fd98-4d32-810b-f78578927249",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1428,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cfcbf322-c172-4299-b63f-201f46fcef46",
        "cursor": {
          "ref": "833e46a3-ec97-41ad-a1f6-b942701a4c56",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5577d2ba-b05c-4b1b-b74a-4e79db91f571"
        },
        "item": {
          "id": "cfcbf322-c172-4299-b63f-201f46fcef46",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7541d65f-d86c-4b9f-ba3a-434f03cbaf9b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 23,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55862ca8-f837-495a-992f-3f813e2218c0",
        "cursor": {
          "ref": "b138758d-1d69-4577-a1d8-99b26ba093fe",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ccd80735-3936-4ecf-ae98-0b8d450374e7"
        },
        "item": {
          "id": "55862ca8-f837-495a-992f-3f813e2218c0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4237023b-0a5a-46b2-8734-c0022277d071",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1a7dd7-397b-4f4c-8060-fc9cfdb46eb9",
        "cursor": {
          "ref": "a0267af7-db45-4497-9493-bdcbafde9bc5",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f9d86b6e-a2ab-414c-a18e-89eaca60542c"
        },
        "item": {
          "id": "7c1a7dd7-397b-4f4c-8060-fc9cfdb46eb9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "87563c70-4175-469b-aedc-538eb2a60cb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "17610f24-2c1a-4edb-9a32-8708d56f61e4",
        "cursor": {
          "ref": "cdebb577-5092-47cc-b60c-f8bf62ca8b80",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "70ed45b9-2206-4cc8-8495-857fb5fe5e13"
        },
        "item": {
          "id": "17610f24-2c1a-4edb-9a32-8708d56f61e4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "880b1989-a3cd-4bf0-a6dd-2e05e4adb68f",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "17610f24-2c1a-4edb-9a32-8708d56f61e4",
        "cursor": {
          "ref": "cdebb577-5092-47cc-b60c-f8bf62ca8b80",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "70ed45b9-2206-4cc8-8495-857fb5fe5e13"
        },
        "item": {
          "id": "17610f24-2c1a-4edb-9a32-8708d56f61e4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "880b1989-a3cd-4bf0-a6dd-2e05e4adb68f",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "91ab8337-d46a-48e1-8aa2-39bdbeabd051",
        "cursor": {
          "ref": "5514cc70-50c0-4b31-a370-dbcbf67d694b",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4524da93-4d0e-4533-b342-ce556bb39413"
        },
        "item": {
          "id": "91ab8337-d46a-48e1-8aa2-39bdbeabd051",
          "name": "identifiers"
        },
        "response": {
          "id": "e672ac5e-6f58-4545-906e-13af1f6bd4dc",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad446786-d1bb-44e2-8fb3-e5f59ec98cdd",
        "cursor": {
          "ref": "5211c8c6-deb3-4f0e-b6db-2aa9230cce8b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ca80803d-05e0-43e9-98c4-1bcaccb3258c"
        },
        "item": {
          "id": "ad446786-d1bb-44e2-8fb3-e5f59ec98cdd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "263c47c5-f7e4-4d81-9924-ecf200c3ecea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad446786-d1bb-44e2-8fb3-e5f59ec98cdd",
        "cursor": {
          "ref": "5211c8c6-deb3-4f0e-b6db-2aa9230cce8b",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ca80803d-05e0-43e9-98c4-1bcaccb3258c"
        },
        "item": {
          "id": "ad446786-d1bb-44e2-8fb3-e5f59ec98cdd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "263c47c5-f7e4-4d81-9924-ecf200c3ecea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb6fad0-67c0-46a7-8776-e61b9193d824",
        "cursor": {
          "ref": "12e90b03-4c88-4140-b030-b8b57be0b535",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "63ef9f0f-1657-44eb-9f3a-7555bb68b7ea"
        },
        "item": {
          "id": "cbb6fad0-67c0-46a7-8776-e61b9193d824",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "229248c3-a7eb-493c-9e1e-8969508ca5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2002ed5-553e-4fb5-8d20-716b2e83efcd",
        "cursor": {
          "ref": "bc747d1d-b91d-4edd-a43e-1bfce35951ea",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3d7b358f-85a8-4e2f-af77-4d17d9e04e54"
        },
        "item": {
          "id": "e2002ed5-553e-4fb5-8d20-716b2e83efcd",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9c1215d6-13c7-43df-b9ed-7ef76f487e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e301cf07-2dac-4f34-9edf-8a936ed048bc",
        "cursor": {
          "ref": "65fbea61-7a03-4474-87e5-e8aaebe53a88",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "be16f08b-0ef4-4504-a3e4-eec90b812fad"
        },
        "item": {
          "id": "e301cf07-2dac-4f34-9edf-8a936ed048bc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1db83e58-8c33-4b28-9cfa-45783afd63c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7679a0b1-9b49-4ad0-b8fc-483740a51139",
        "cursor": {
          "ref": "6e38ee93-28a3-4d98-bc4a-ec4f3f3700cf",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7cbe8656-9011-429a-9a8f-02ddd1d234ad"
        },
        "item": {
          "id": "7679a0b1-9b49-4ad0-b8fc-483740a51139",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5c27e523-d912-465f-9b17-fb7115e51d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec9666f-ac58-432b-b344-93b408c03a23",
        "cursor": {
          "ref": "29dbd39a-e7ee-4fa8-9cb6-6dc82e4b88e1",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "014c7369-d893-47bc-aed5-32cff9a1f546"
        },
        "item": {
          "id": "7ec9666f-ac58-432b-b344-93b408c03a23",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "006070b2-ed38-40f2-a25d-2cf1f5312859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b16bed8-683f-426a-a335-7d4182fc27d8",
        "cursor": {
          "ref": "19bf33a3-882f-46fa-907c-e2af733dacaf",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "936c8df3-5b84-40c6-bccb-264a4fc4b095"
        },
        "item": {
          "id": "3b16bed8-683f-426a-a335-7d4182fc27d8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "418e7083-6712-46a0-9cad-d3efdd0e727a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b21f85-a61f-430a-8910-0def16116373",
        "cursor": {
          "ref": "0d4b0eff-6615-4c18-a512-51e75a8f11e9",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "772741c5-57b3-43c5-828f-5d5d7169b191"
        },
        "item": {
          "id": "36b21f85-a61f-430a-8910-0def16116373",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8431225a-4e0e-4171-a404-38bfdd6b51d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb0d288-98dc-4df2-b5de-8d02c40df9b2",
        "cursor": {
          "ref": "53d52352-565e-4098-b75b-b35078a25fdf",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1bf4eda5-07a9-4d4b-892c-720f89361761"
        },
        "item": {
          "id": "beb0d288-98dc-4df2-b5de-8d02c40df9b2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5a75e792-8a40-4265-b572-e03b0680844c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7d2299-072c-419c-9393-4084c2130215",
        "cursor": {
          "ref": "960f9257-870a-4055-b3cd-a9f6017f847a",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3c80e8ca-a7a6-442d-ba10-eb3395e9bca0"
        },
        "item": {
          "id": "6f7d2299-072c-419c-9393-4084c2130215",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f4375fe3-08ab-4fdc-90a6-1b2c9a050798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c55e915-361d-48bf-8f31-abdf7e3290dd",
        "cursor": {
          "ref": "734fa294-ad17-4e4b-b9f0-71afd6c6767c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "98fae552-5db1-49b9-9afd-6ed26df147ad"
        },
        "item": {
          "id": "1c55e915-361d-48bf-8f31-abdf7e3290dd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "82ed9cab-b3ac-4dbf-a50d-fa295d35a81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09be76f-6b11-4a82-bda9-ba67f6d01511",
        "cursor": {
          "ref": "af3b7ba3-abea-45ae-86f1-1a6800a80d9d",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4e3d46bc-eed9-4d08-a543-30da943e7947"
        },
        "item": {
          "id": "a09be76f-6b11-4a82-bda9-ba67f6d01511",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "beacfecc-def3-4820-9ca2-1d3fedd0ff4a",
          "status": "Created",
          "code": 201,
          "responseTime": 1001,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "3743a182-2407-45b6-a5e3-46f6012903a6",
        "cursor": {
          "ref": "d1942c1e-8c7e-4e69-825b-404eddd0b561",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "95af2d63-d22d-4def-a9dc-93b294407600"
        },
        "item": {
          "id": "3743a182-2407-45b6-a5e3-46f6012903a6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8a6bed31-4945-4fd6-b4bd-c05519baabef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba859731-84aa-40de-b8c3-09f31764c665",
        "cursor": {
          "ref": "658db100-a509-4401-8077-7226b0798718",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "99fc7dfb-689b-452f-9a48-fb8a57f38e18"
        },
        "item": {
          "id": "ba859731-84aa-40de-b8c3-09f31764c665",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "070132c3-00d8-4ebf-a3c9-0410257c9837",
          "status": "Created",
          "code": 201,
          "responseTime": 8534,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "497ac664-b7a3-4929-82cc-0cff395fc687",
        "cursor": {
          "ref": "c4b4bfa0-7ffe-46df-a364-8566598c8244",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a694298b-79b6-4266-b4ae-cc8daaa81b4f"
        },
        "item": {
          "id": "497ac664-b7a3-4929-82cc-0cff395fc687",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0f51b727-fde5-42bc-8ac4-ead23093a86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52546d54-2c8d-4480-81df-b486a02f8905",
        "cursor": {
          "ref": "d01e7509-ed51-4e23-8829-a46cca4f7c12",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6a9cf796-e155-421b-8d4e-44324bb5d106"
        },
        "item": {
          "id": "52546d54-2c8d-4480-81df-b486a02f8905",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d7a99032-fb3d-4528-9ae6-c74c055e02d4",
          "status": "Created",
          "code": 201,
          "responseTime": 4709,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "410d71d6-24e4-4196-9566-5113971bca88",
        "cursor": {
          "ref": "74b31860-51c4-4c13-bc9b-899760ea955d",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5bad8f14-7a48-45bb-9f70-38d2fdb42a30"
        },
        "item": {
          "id": "410d71d6-24e4-4196-9566-5113971bca88",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7eaf926b-834e-40b3-bb0b-2f33ebb9c2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ab535c-cdfe-462c-a43a-4b4c0ec29bad",
        "cursor": {
          "ref": "fec5f36f-6212-4621-8233-f69522fbf5c2",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "39de9d1b-92d6-4cdc-a7d5-e5f8326bc459"
        },
        "item": {
          "id": "33ab535c-cdfe-462c-a43a-4b4c0ec29bad",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6e8c72ba-ee54-4ed6-8f70-de9e099030f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ad4162-b2d0-467d-a31a-6a2e83f7a241",
        "cursor": {
          "ref": "8e376774-0611-4641-af58-6ebf961c748f",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5fc1fc58-b1e6-42c7-92f5-7c18b36b118b"
        },
        "item": {
          "id": "c7ad4162-b2d0-467d-a31a-6a2e83f7a241",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "21d1cddc-e447-491f-9569-63280673c101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcb9668-bb28-45f2-856d-2b13a03bb327",
        "cursor": {
          "ref": "f2590440-0356-4a13-9ca1-0ccb6b0348cf",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6ff470b3-7958-464e-af5a-7a3b50dcd38d"
        },
        "item": {
          "id": "bbcb9668-bb28-45f2-856d-2b13a03bb327",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e2fad410-9a03-4e6e-b334-d21cef8d6a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb452ac-b16c-422b-afd3-8b4b2f97656e",
        "cursor": {
          "ref": "956ecad6-e1a8-4743-a3e2-a409bae1c276",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "28612f03-1ff5-4897-90b5-d54f07f81fd2"
        },
        "item": {
          "id": "6cb452ac-b16c-422b-afd3-8b4b2f97656e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "93d33838-bf9c-4761-a94a-f9a8ddf7be8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfeb90e-bd76-41c0-aff5-6107ebbad824",
        "cursor": {
          "ref": "38faba2e-bc84-43a3-a1d8-b382d7068710",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "eaae2875-4c55-4cbc-a74b-159cc115ba98"
        },
        "item": {
          "id": "2cfeb90e-bd76-41c0-aff5-6107ebbad824",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3b7b9858-c2b1-4b08-a56c-2b283466ad8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae53309-fba4-4f2e-b732-72a6e91d5cbf",
        "cursor": {
          "ref": "e4d0ce67-a9f6-4678-b1f0-ca6bdf40a6ff",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fee82036-b3c1-4aa9-8704-a788e02b4e7a"
        },
        "item": {
          "id": "fae53309-fba4-4f2e-b732-72a6e91d5cbf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2913fd10-22f2-46cb-9656-e5018b5ad21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7157cbd-934b-4074-a53c-d5358fd8e9e2",
        "cursor": {
          "ref": "216d40ef-60cb-494c-9bb5-ca48ae432ca3",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "df6af5d5-bfaf-4017-9fda-488d927abffa"
        },
        "item": {
          "id": "c7157cbd-934b-4074-a53c-d5358fd8e9e2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bf93f379-243a-4fcc-ba3f-1704c4185302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460ecdfa-d39c-470f-b260-ae24e4e50c4a",
        "cursor": {
          "ref": "86ff96f0-fa7b-41aa-83e6-a1547449ab4d",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "73db6ad5-a99a-46ba-ba66-4d0e4fb7f153"
        },
        "item": {
          "id": "460ecdfa-d39c-470f-b260-ae24e4e50c4a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "00c9d21b-6fe7-4323-890b-9692d026b5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67c409a-f270-4bfc-b4b3-10846891e0bb",
        "cursor": {
          "ref": "e4226ff4-499e-42bb-b453-70a47a333e06",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f230e375-a6d1-41b8-b099-8fc6460c2d30"
        },
        "item": {
          "id": "c67c409a-f270-4bfc-b4b3-10846891e0bb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "57b7157d-0e4d-4aa6-9735-ff46efe4ee9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f73498e-fd13-4265-91c5-e69082381c9b",
        "cursor": {
          "ref": "5d7475f3-8a98-4150-bc80-2e66fc5ab058",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3cd718b4-e341-43d8-977a-03b2ebd05f8c"
        },
        "item": {
          "id": "1f73498e-fd13-4265-91c5-e69082381c9b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7fe72095-b4c7-4097-8077-09563f12d49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf898c51-22f3-4134-9859-17ad9787018f",
        "cursor": {
          "ref": "ef5e12c7-e193-4d2a-850e-83eb7a300af5",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "52777e2a-b0f7-4f55-ba21-89f967bb1de2"
        },
        "item": {
          "id": "bf898c51-22f3-4134-9859-17ad9787018f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "16d13986-60ee-4dad-b369-d5c8660f0c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3929e4e0-e9ce-4435-86d8-ba069f8b3443",
        "cursor": {
          "ref": "38eff33a-4615-438e-b776-e32ad1a84c5e",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e1ed3933-0299-49d2-9f1d-c1ab7e34fafa"
        },
        "item": {
          "id": "3929e4e0-e9ce-4435-86d8-ba069f8b3443",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "03f69712-f1c1-43ce-b0bb-0ff70ca836a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b59d15-e287-42dd-b556-463aeaf15706",
        "cursor": {
          "ref": "234b9719-fc0d-4a55-a05c-077f60e7ac2e",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1535447c-bad5-4209-a01c-70cfcd10c182"
        },
        "item": {
          "id": "b5b59d15-e287-42dd-b556-463aeaf15706",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "63b7c63f-bbbf-4349-aa70-f76620d63133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9cd75cf-40cf-4082-a939-13dfbd443d93",
        "cursor": {
          "ref": "79ff4156-a0c7-4daf-99e7-cc5a416507c1",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "929cfe0f-5681-413e-882d-0369a93cd2c7"
        },
        "item": {
          "id": "f9cd75cf-40cf-4082-a939-13dfbd443d93",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "21cb3c2a-5991-4fa0-954f-b004af224a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5faeb44-af80-426b-9147-f0f8ed2cb755",
        "cursor": {
          "ref": "8f1c1cf1-9b69-4f36-8787-013cd268291f",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5635a4d2-5eea-4bf8-9ef1-98edaecea277"
        },
        "item": {
          "id": "c5faeb44-af80-426b-9147-f0f8ed2cb755",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "464edad3-3112-4bcf-a9c4-e6bc619b159c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed8b97b-9b7b-48db-9652-9bf8f8a27116",
        "cursor": {
          "ref": "741ee517-966f-40dc-8120-6a479061e203",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e7c135c3-8934-4084-b9a5-e05189269e6f"
        },
        "item": {
          "id": "5ed8b97b-9b7b-48db-9652-9bf8f8a27116",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c9cd759d-4226-4d41-8f20-64cede85c3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b528e72-2600-4a65-a237-f32b17b6f2b4",
        "cursor": {
          "ref": "b0cb5dff-134f-4f69-8e65-5be004802660",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2a73a75b-504c-4a50-a9d5-4b1bfcc3a695"
        },
        "item": {
          "id": "4b528e72-2600-4a65-a237-f32b17b6f2b4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5025878a-6504-4fbc-8425-ebb7e0e02710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ad591d-5844-4c01-9c89-d3d210b337ec",
        "cursor": {
          "ref": "0cbb0f12-9d69-4692-b4bc-74e8e212c6f4",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c8fbd2fb-2f36-494c-978e-1fa84d07f42a"
        },
        "item": {
          "id": "26ad591d-5844-4c01-9c89-d3d210b337ec",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7a3b7488-618e-411a-b491-8c99f83e7b66",
          "status": "Created",
          "code": 201,
          "responseTime": 2656,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "41ef3cae-35e4-40fb-a94d-56adeea47701",
        "cursor": {
          "ref": "1e9c555c-652a-43f0-bb87-770f13df35fd",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "10c6906f-f108-4380-92b0-7d3425017cdd"
        },
        "item": {
          "id": "41ef3cae-35e4-40fb-a94d-56adeea47701",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a5ef791e-4cb2-4027-b6b3-e3b5a3fd2292",
          "status": "Created",
          "code": 201,
          "responseTime": 2770,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2f8ff282-5f5d-4d6c-9200-ef1735d57e08",
        "cursor": {
          "ref": "ba1a6f8b-fda2-4f07-8f9e-a6e48703d418",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "15a13357-4ecb-4731-8f53-a8dbf3658e04"
        },
        "item": {
          "id": "2f8ff282-5f5d-4d6c-9200-ef1735d57e08",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c5f74776-694b-46a6-8437-4fc2c69b2f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f39b266-7b09-470d-94d7-81aa4c4835e1",
        "cursor": {
          "ref": "e62de40a-aefd-4327-b78a-a0bbaa378faa",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2fd59283-4ac8-4ff3-a69a-2a1c48e2b241"
        },
        "item": {
          "id": "4f39b266-7b09-470d-94d7-81aa4c4835e1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c08ddf37-90a7-47c3-bd3e-6f17dd4b735c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757f2c99-cebf-4fe2-8eef-77d030be3acb",
        "cursor": {
          "ref": "0aa362dc-b67f-4f56-ade2-d8bd2028949f",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2f0a3a7b-4fb7-4b6b-a92e-e05a8e1bd5ec"
        },
        "item": {
          "id": "757f2c99-cebf-4fe2-8eef-77d030be3acb",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0ce564d3-e890-4f41-aac1-f37bf1851b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23ffc0b-ddaa-4a47-b04a-5117c6dd085f",
        "cursor": {
          "ref": "1337a89c-c481-4b73-b8fe-6671ea783088",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e6bbc692-0ec5-4b79-bf28-802044edeb74"
        },
        "item": {
          "id": "a23ffc0b-ddaa-4a47-b04a-5117c6dd085f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "764189d3-bf42-474d-8f1f-688dcbbc6ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b60492-0095-48cd-bb1f-8fde309543ff",
        "cursor": {
          "ref": "78d21d40-e58a-49cf-9826-fbb7cfc0b1fb",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0fb4c3d5-6039-4d59-b0df-e91969b8e813"
        },
        "item": {
          "id": "80b60492-0095-48cd-bb1f-8fde309543ff",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e2e58016-49d5-446d-a00c-4623db9ec0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4339ce-1f15-4fd8-8d7c-9f7dc8a187c9",
        "cursor": {
          "ref": "903a0c3d-0cb5-4ae0-a17a-fdd44323ff97",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ccd5a21c-f474-4317-acb4-a63833b21684"
        },
        "item": {
          "id": "0f4339ce-1f15-4fd8-8d7c-9f7dc8a187c9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "23585b70-9707-41d8-bbff-192d6a054def",
          "status": "Created",
          "code": 201,
          "responseTime": 2307,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "51465c33-7540-451d-9955-1882182bb9e1",
        "cursor": {
          "ref": "2ba70705-4be1-4d7e-bc65-8fec9dc5514d",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f3b96f75-6bc6-4a94-bfed-07cade7c6145"
        },
        "item": {
          "id": "51465c33-7540-451d-9955-1882182bb9e1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3c3c7968-ced5-4a2b-b651-aeb69462ae6a",
          "status": "Created",
          "code": 201,
          "responseTime": 2230,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "186d16c0-eade-4a1a-a578-7ecf8a94304a",
        "cursor": {
          "ref": "3d6fdd17-95d4-4988-b6b8-3f0a974e095e",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6e358d48-61ae-4127-abae-f23c66ff7c92"
        },
        "item": {
          "id": "186d16c0-eade-4a1a-a578-7ecf8a94304a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0d4f7484-ca4a-4f5b-b5a4-f35d6543bcae",
          "status": "Created",
          "code": 201,
          "responseTime": 2299,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "577f06c6-4a6d-47a2-8fd3-9e8462a556b2",
        "cursor": {
          "ref": "4ae6b32b-65f3-4b91-9823-54d3a855890c",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9f9c84ba-32e1-4ac9-9fc9-7dc6476512e3"
        },
        "item": {
          "id": "577f06c6-4a6d-47a2-8fd3-9e8462a556b2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3d03ea0f-3634-4cf0-a09e-19e2361d81a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ffe8a5-f564-43b3-97c3-68e7cd46ffba",
        "cursor": {
          "ref": "92361ac8-88a8-4ad8-98a4-307659eaa0af",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4dc90159-0ab2-4b42-87e4-71cad05ac6dd"
        },
        "item": {
          "id": "a1ffe8a5-f564-43b3-97c3-68e7cd46ffba",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "88d83356-c33f-4c0d-a666-eb7b74c43a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ab697f-682a-4c9d-a018-2a84b854d193",
        "cursor": {
          "ref": "39760c7d-d24a-48c6-8743-3d912f63a7ca",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c9738d8a-4106-43ed-8521-1540a734717f"
        },
        "item": {
          "id": "a4ab697f-682a-4c9d-a018-2a84b854d193",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a9736c60-7de8-4110-92ab-8162496960d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d35c0a5-dc55-47c7-9841-2a24b26c1f1e",
        "cursor": {
          "ref": "ff29ffb4-e8b0-40a4-8c3c-39664eb56dc1",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2b00dffe-abb3-47ce-beed-269fb2142f94"
        },
        "item": {
          "id": "7d35c0a5-dc55-47c7-9841-2a24b26c1f1e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4b5e8413-a7e5-431a-b93c-f9383a926fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff030be0-146e-4050-a360-b85bfb8b4eb8",
        "cursor": {
          "ref": "5104ad6e-95e3-4ab8-b943-7eef66978cfd",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b3b59d50-e18a-4cd4-ad2f-d4d3054f688c"
        },
        "item": {
          "id": "ff030be0-146e-4050-a360-b85bfb8b4eb8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4f24295b-b00a-4b6e-8a85-6900d646b03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d5b399-03db-4a5b-8b1c-65e667cd8aa1",
        "cursor": {
          "ref": "f9248483-86f3-42a3-b981-966acbcb7f76",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "42326821-fe4d-428a-898e-5dec32d59444"
        },
        "item": {
          "id": "b3d5b399-03db-4a5b-8b1c-65e667cd8aa1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "34ebbd60-e1d4-4024-9b90-76091f479bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a242df2-082a-48a7-b5e7-a5edcd8e561e",
        "cursor": {
          "ref": "d3ec146d-03cc-41d4-b41a-b0fdf11d79a1",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "12cfce9b-e1f2-4a4a-8e7f-6b37effa133d"
        },
        "item": {
          "id": "6a242df2-082a-48a7-b5e7-a5edcd8e561e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "253a8607-c47c-45f7-bad1-0fe9319b58b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a09cde-6fc9-417b-aaea-2a2b5c8fea34",
        "cursor": {
          "ref": "09b32c44-9048-4aad-aa59-16308b575c4d",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4824e6bd-9fce-49e6-bb33-9aba4c291d8a"
        },
        "item": {
          "id": "d3a09cde-6fc9-417b-aaea-2a2b5c8fea34",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d2f1653b-8638-4040-b847-5941d6e5fc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6345421f-cd7e-4591-8d1f-42e33c56dd57",
        "cursor": {
          "ref": "fcd3ddfb-7b9f-4764-8fbc-593d15c850e0",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6b2152ca-b9b6-4ad2-9c43-43841f65cd70"
        },
        "item": {
          "id": "6345421f-cd7e-4591-8d1f-42e33c56dd57",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "864aaa2b-71e2-49cb-a719-3df8827d651b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd70b56-92bc-4b2a-bd69-efce8cae8090",
        "cursor": {
          "ref": "350744e5-5337-4bd3-9a30-cf74c0668717",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f9c905e9-5a5d-4db2-9a4a-b0f3d0e718c8"
        },
        "item": {
          "id": "bdd70b56-92bc-4b2a-bd69-efce8cae8090",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5d477884-1041-4d2e-8b4a-482d60c8114a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21bcca5-98e0-424e-bfbc-7440b67d1368",
        "cursor": {
          "ref": "22d86bee-14cf-4901-b74a-3c211eb5fd98",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "798151d1-9ad1-4e1d-ad44-f5a0348f14df"
        },
        "item": {
          "id": "b21bcca5-98e0-424e-bfbc-7440b67d1368",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "05fc42b4-ef5c-458a-98d8-6620f9e33ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c9a536-1e64-47a1-bb40-3472abddab8e",
        "cursor": {
          "ref": "24dc538b-376d-4558-94cc-d30a6ec28cd4",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2c101751-7ee4-4267-8a7b-de0738c4d6f8"
        },
        "item": {
          "id": "78c9a536-1e64-47a1-bb40-3472abddab8e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7c2a8a56-303f-4252-b9d5-c4569ab84d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1397c07-822c-4086-be4e-d4c734ccad9f",
        "cursor": {
          "ref": "5d195d77-37f9-49e6-8a04-a55ce0d1bfb7",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0a7cc544-48d2-47b8-b133-14ec257e1742"
        },
        "item": {
          "id": "d1397c07-822c-4086-be4e-d4c734ccad9f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7ebdc948-7af5-45f1-9ae7-5a48b6e94e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9144a6c-1077-465a-8e8a-f473bf5c25c3",
        "cursor": {
          "ref": "78d32776-1a78-479d-8f08-eb6bdbda4327",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "20d9d72f-cb80-422e-b46a-de354a02be67"
        },
        "item": {
          "id": "e9144a6c-1077-465a-8e8a-f473bf5c25c3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "53108044-9031-4f78-99dd-37fbdd22fe37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7aef89f-54f2-46d5-9bdb-83cdf35f171f",
        "cursor": {
          "ref": "327c582f-6a06-4140-9eec-813983cc58f1",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d4983fdf-8fa6-4711-a091-1f108283c800"
        },
        "item": {
          "id": "b7aef89f-54f2-46d5-9bdb-83cdf35f171f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1e3b4eb0-aeab-4eb2-83bb-f694b33c224c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256db28b-6269-4e43-9f9c-21980e2da277",
        "cursor": {
          "ref": "7be72a7d-81de-4889-9554-1f11c87b8036",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "42d7ff3c-d55a-42f7-af79-3001964b4461"
        },
        "item": {
          "id": "256db28b-6269-4e43-9f9c-21980e2da277",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2cf6ddec-0923-4fbb-8b68-a31a7c04379d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5fc5c3a-53cb-4952-af27-8274a5bacb74",
        "cursor": {
          "ref": "6353a295-b02c-4cc9-81e1-87d09915778c",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "12d2d29d-fbad-477d-853a-c6d3cbed35d2"
        },
        "item": {
          "id": "a5fc5c3a-53cb-4952-af27-8274a5bacb74",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "58355c40-a602-429e-bbac-9b0664c13c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca4093a-868c-4535-8fc6-82d55eac1533",
        "cursor": {
          "ref": "becb8c2e-c335-4fd0-bcea-82dfc335a649",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1d7c70ab-c584-4d7b-aa37-847700157666"
        },
        "item": {
          "id": "0ca4093a-868c-4535-8fc6-82d55eac1533",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "91fbb8d7-353d-406f-a8fc-58119d150e8e",
          "status": "Created",
          "code": 201,
          "responseTime": 2073,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "3eab03ee-730c-4e63-93e0-a17197491a1e",
        "cursor": {
          "ref": "8b2ef76e-5bb4-44d4-b0e6-6df436a90016",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "326c1a93-c864-4ad5-abb2-9684f6b6b48d"
        },
        "item": {
          "id": "3eab03ee-730c-4e63-93e0-a17197491a1e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d532c0d0-2418-44e7-b9c4-c7e68332fe14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd74c45-5f47-469e-ac2b-ecd7ea738bf6",
        "cursor": {
          "ref": "07b6178a-ab48-42cc-9f5b-00284d84b13f",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1b3eb7bc-a35f-40e3-8203-a89293c88591"
        },
        "item": {
          "id": "0fd74c45-5f47-469e-ac2b-ecd7ea738bf6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fbade0d5-8428-44d6-95d2-40898a820ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797af363-7399-492d-a928-462afc44a2dd",
        "cursor": {
          "ref": "74a9119a-57fc-437e-8815-09131356bda1",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "260fd688-d3ed-434f-b2df-6d7d178ecec7"
        },
        "item": {
          "id": "797af363-7399-492d-a928-462afc44a2dd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bf716bda-063b-4876-b70b-fa55e1d564b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9410115-de2f-4aeb-9bb4-87b45cc0ac45",
        "cursor": {
          "ref": "0fbfa01d-4cf0-43b9-b577-d7116de3d46b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c4aba335-00a5-4faa-a822-89fa815a68c1"
        },
        "item": {
          "id": "e9410115-de2f-4aeb-9bb4-87b45cc0ac45",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "81d13a83-dd3a-40cb-8781-59975c78ea1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ca8065-f28c-40c3-a5cf-3593c4c7877c",
        "cursor": {
          "ref": "fc7dff40-fbfd-456b-b79b-f98e4ae90874",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "edc640e6-e146-4f50-b506-ba60be705fc6"
        },
        "item": {
          "id": "90ca8065-f28c-40c3-a5cf-3593c4c7877c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "99e9435a-ae46-4bd0-8322-f72758ab0d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451baece-bb78-4cc7-901b-14fc9c3c4f36",
        "cursor": {
          "ref": "46e7e1b3-480a-4fc1-8ed9-b0b1b0ab4da1",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0b4489f7-acbc-45e7-82e3-f99922bf4bb0"
        },
        "item": {
          "id": "451baece-bb78-4cc7-901b-14fc9c3c4f36",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7734014a-64a6-4adf-bf11-43542f484890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758833df-d2f6-45aa-a915-b14faefb56f3",
        "cursor": {
          "ref": "50f4a292-d72d-4d13-9476-329ea823f56a",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "da3dda5d-622f-4f7f-a2d0-bf56468866de"
        },
        "item": {
          "id": "758833df-d2f6-45aa-a915-b14faefb56f3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "19aff942-7cc7-4981-9c6b-2fd0ba048dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2e5fd3-2ee4-4659-b26a-dd892aa96fc0",
        "cursor": {
          "ref": "99cc2d36-86a7-4877-8e84-eb4726006cb4",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f012c731-ee9a-43a8-8400-d1f59474f20f"
        },
        "item": {
          "id": "bc2e5fd3-2ee4-4659-b26a-dd892aa96fc0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "264c3c5e-745d-46fd-8fc8-bdd43f4aef4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8582cbb0-ad15-476c-bf79-41e28b3a9f00",
        "cursor": {
          "ref": "c58257dc-316d-46ae-a89f-2d12b33829ef",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "dd8490fb-e985-40bb-8ed9-811378de1dbe"
        },
        "item": {
          "id": "8582cbb0-ad15-476c-bf79-41e28b3a9f00",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3e3af307-f735-4a85-8a2b-7b271b378be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80779ae-ca8b-4916-8d25-c9b58984adab",
        "cursor": {
          "ref": "d2a35ba1-92b0-4fcb-b729-2f2ea83e9000",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a3ba392a-e1a4-42a8-ad6f-8e6887717b28"
        },
        "item": {
          "id": "b80779ae-ca8b-4916-8d25-c9b58984adab",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "96dbb0e6-4af0-4be7-96ae-df59a34e568e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c55b46-e98a-4acc-9d83-f11bc22c1ad2",
        "cursor": {
          "ref": "8be19de0-127c-4466-a47e-27de4d51aeac",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "469222aa-ea36-430a-bed4-a261137a6c7c"
        },
        "item": {
          "id": "90c55b46-e98a-4acc-9d83-f11bc22c1ad2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "64c492fb-227e-41dc-8161-15e837b926c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbc9009-3eb2-4d98-a04b-b1c626453b46",
        "cursor": {
          "ref": "f7ac10a3-04b8-40ef-97b5-02cf90f213ef",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9703df5e-035c-42b7-a0b4-f2eda69c43fb"
        },
        "item": {
          "id": "2cbc9009-3eb2-4d98-a04b-b1c626453b46",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1b0b471b-3d97-4e9e-837a-7977b3aa17f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3022f442-a0ae-455f-be2d-4b1ef232110b",
        "cursor": {
          "ref": "b371eae7-8fa0-46c9-87b2-9a9227fa69f1",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7ec33fb6-b6fd-40f6-b38f-4a565c187c7c"
        },
        "item": {
          "id": "3022f442-a0ae-455f-be2d-4b1ef232110b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5a25119a-5e18-479d-b288-f4b2659f022a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530c50ce-2870-466a-b7d5-08134a5e4060",
        "cursor": {
          "ref": "b66f4795-ef91-4b20-b99c-a14511dcfb6b",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "27a9ee80-e64d-4b89-ba3c-6be2aee230fa"
        },
        "item": {
          "id": "530c50ce-2870-466a-b7d5-08134a5e4060",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "45500349-6bf6-48f3-9949-9dfc85930ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7b145a-7ccc-407c-88d3-a454fd14cfe5",
        "cursor": {
          "ref": "56e4c3dd-8ca2-4cc3-a4b2-e17631b4590d",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cf2e04c8-2096-4b5e-979d-eb28183a9ce1"
        },
        "item": {
          "id": "db7b145a-7ccc-407c-88d3-a454fd14cfe5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3bc1aac4-4aa8-4cc2-bba1-e988b8d3003c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d9e609-fa1c-4b8b-a272-368b872fb5b4",
        "cursor": {
          "ref": "f559e6c1-d6ec-4051-8e7a-413a6452a611",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "04b12caf-d2b8-4fba-b7e8-88b8de2e270f"
        },
        "item": {
          "id": "57d9e609-fa1c-4b8b-a272-368b872fb5b4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "af539646-799f-45f8-9443-e9a6cf44914d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbee523b-9df6-4e59-a2dc-b710a3565d14",
        "cursor": {
          "ref": "a9d28aa0-7e22-4a47-8ee0-0438bcc694e5",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c876d5bc-a533-4842-a959-aa96c020936e"
        },
        "item": {
          "id": "fbee523b-9df6-4e59-a2dc-b710a3565d14",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "874a0315-273b-4813-a279-b075819b931c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ac5fb3-872a-4d88-8c6f-ddb72cf7a986",
        "cursor": {
          "ref": "cbaabb57-9d4f-49bf-be2b-7e086d95789a",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4a36eba3-e376-4fd2-b4a5-52e13a390f0d"
        },
        "item": {
          "id": "a5ac5fb3-872a-4d88-8c6f-ddb72cf7a986",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c072726d-7ee2-4427-9774-d61273e7ad6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aee64ca-7a88-4259-80f8-95c7a9d17ba3",
        "cursor": {
          "ref": "dc9a277a-f1eb-4b87-9309-0a12d298c5b6",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7c169dc3-4799-4065-805f-5acdb82ef991"
        },
        "item": {
          "id": "2aee64ca-7a88-4259-80f8-95c7a9d17ba3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "63f9626a-6a3c-47d1-8864-b186b595d7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfacf941-a4b9-4134-8372-bb709a5571ef",
        "cursor": {
          "ref": "2a16444f-6436-4127-b5e6-41408571965d",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "67c8002b-36c6-4c68-a329-4e6af5135f28"
        },
        "item": {
          "id": "cfacf941-a4b9-4134-8372-bb709a5571ef",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1af496a8-9f23-49d2-807e-69fe798fb50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9160f016-c509-4abe-9cdb-41723d5728a0",
        "cursor": {
          "ref": "3187f766-3738-4a6d-86ac-abea603b2046",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2d3753ae-265a-4f65-aa9b-a2be4a01676d"
        },
        "item": {
          "id": "9160f016-c509-4abe-9cdb-41723d5728a0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3180b002-dc7e-4512-a284-f6c4c1f1e30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86bcfc30-53b3-49ea-b892-20324cdaff0c",
        "cursor": {
          "ref": "ee0a05fe-779c-419f-95b6-851fa5a0302c",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "673cb5a8-839b-40a6-b497-fdc47c2db61d"
        },
        "item": {
          "id": "86bcfc30-53b3-49ea-b892-20324cdaff0c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "74368b45-fb56-4941-8088-5ac3736db325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e7af5f-787a-48ff-a448-56b92958010c",
        "cursor": {
          "ref": "09fd8d8a-8725-4385-b377-ee4e2d6f0ab2",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "77cd0fe2-9c83-4183-86b5-a61170c1f90f"
        },
        "item": {
          "id": "f6e7af5f-787a-48ff-a448-56b92958010c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5ae3cd58-4ac5-4b62-bfbe-e5e49acb7dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb24fb06-1b0d-4b37-8f0d-ce9770a074cb",
        "cursor": {
          "ref": "bfe844ce-5d1d-4ffb-9027-920f1afed50d",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "194f0c16-bfa1-417b-8652-4372a950c1ba"
        },
        "item": {
          "id": "cb24fb06-1b0d-4b37-8f0d-ce9770a074cb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8eac52a6-f0c6-42dd-bafa-b67ef2c942fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9e287e-60d7-42e2-a88a-e8f84f4599d2",
        "cursor": {
          "ref": "fc40451e-85a2-4c68-b0a5-dfb578bc4162",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6838557a-c0a4-4baa-94c5-cd2594f85b46"
        },
        "item": {
          "id": "3e9e287e-60d7-42e2-a88a-e8f84f4599d2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f4462d33-1059-4105-b8ba-17e610f9abff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831a0a18-83c6-4f2f-b577-a4f44180d6b4",
        "cursor": {
          "ref": "fdb7828b-3ffe-4243-9992-2362caaa32be",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "51b85458-a82c-447f-9ecf-5651960e5657"
        },
        "item": {
          "id": "831a0a18-83c6-4f2f-b577-a4f44180d6b4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d1affb15-46fb-435f-9bf7-ff5d3714d78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b996d2-35ab-4c8d-8ba5-2700aa019119",
        "cursor": {
          "ref": "fd1ae704-6731-470f-b660-c862256dcba4",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8b2a8d90-798e-4b20-a2b3-77fd038277c1"
        },
        "item": {
          "id": "b6b996d2-35ab-4c8d-8ba5-2700aa019119",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "56ddea4a-b455-4e05-a37c-137f4e36a138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fb19ff-3fea-47e9-834f-5e8c55ebf1cf",
        "cursor": {
          "ref": "f006334d-d66b-4763-8ee8-bed4ac29c627",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "05039ad0-c751-4c93-a8c2-9465914e17cb"
        },
        "item": {
          "id": "38fb19ff-3fea-47e9-834f-5e8c55ebf1cf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7863a021-f95e-4c1c-9804-dd9c435f7716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f281e03-e21f-48fb-99d1-f287400b5dce",
        "cursor": {
          "ref": "6f00b857-1f52-4d50-956b-1d609658a7d9",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "eda4cf98-3514-4973-8cfe-54f462a2c589"
        },
        "item": {
          "id": "6f281e03-e21f-48fb-99d1-f287400b5dce",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a25300d2-5aec-412a-b091-d48429f0336a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35feedde-8a66-4f6f-ad49-7c7a317ea4fd",
        "cursor": {
          "ref": "ef06686c-e4cc-4e70-9ec4-d4eb0bbe75f9",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "36584b52-4d00-4a11-9939-961c78e23f99"
        },
        "item": {
          "id": "35feedde-8a66-4f6f-ad49-7c7a317ea4fd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ff149234-4c9c-48fc-b5d2-fcd8134eb115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b639b23-07e1-4cd4-a766-9a1d900dae7a",
        "cursor": {
          "ref": "ea2f6a77-4de0-4be8-afe6-411edeccdffe",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d00d3387-d1d2-4a5d-8958-5fc75b4bb7cf"
        },
        "item": {
          "id": "2b639b23-07e1-4cd4-a766-9a1d900dae7a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "00e926c6-8d79-434e-a85c-65f2c8635b6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "97212db0-a8da-4467-8977-cc81c17fca3f",
        "cursor": {
          "ref": "44aade96-1b78-4cea-ada2-8b0911d044c2",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7057e7f1-48d3-4455-8737-5b3c624f6087"
        },
        "item": {
          "id": "97212db0-a8da-4467-8977-cc81c17fca3f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "841c8197-f9c9-416d-9c26-320c25c4d1b9",
          "status": "Created",
          "code": 201,
          "responseTime": 2087,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "aead1edd-e23b-4548-a60c-93515fdaf0df",
        "cursor": {
          "ref": "7248900f-77e5-4bd0-a981-111ea7008aee",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5b599942-76f4-4631-8107-678dee191250"
        },
        "item": {
          "id": "aead1edd-e23b-4548-a60c-93515fdaf0df",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4f4406f4-9a06-487d-aa02-f8f20c73560b",
          "status": "Created",
          "code": 201,
          "responseTime": 2303,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7b00b8-b558-4098-a6a0-16291b7e331d",
        "cursor": {
          "ref": "4c325594-2e0f-476f-a472-a3be6af4909b",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a70cca50-2a8c-4374-a854-8167cd97bea7"
        },
        "item": {
          "id": "2f7b00b8-b558-4098-a6a0-16291b7e331d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ef2849a1-322d-4173-b7de-7d1ca29a5b2d",
          "status": "Created",
          "code": 201,
          "responseTime": 2293,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e244a00-14c7-4e45-afef-5642a29eb82c",
        "cursor": {
          "ref": "78c7c0f7-5868-4585-8ee8-dde2c60ee009",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c1d21597-feef-404c-b208-baae989c93fb"
        },
        "item": {
          "id": "7e244a00-14c7-4e45-afef-5642a29eb82c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "187842a0-f295-49cd-b7bc-d4e7b033d910",
          "status": "Created",
          "code": 201,
          "responseTime": 2404,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "63719297-eedb-4756-93b1-4a87a1c1a489",
        "cursor": {
          "ref": "7b0373dc-85e8-4203-bde7-ea181300e4fa",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "088a287d-c8c2-435c-96d6-a55b38a512d9"
        },
        "item": {
          "id": "63719297-eedb-4756-93b1-4a87a1c1a489",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "aa784011-01a7-498c-887f-fd1f9c71199b",
          "status": "Created",
          "code": 201,
          "responseTime": 2136,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d0e7b0-feb6-4295-ada2-ddabab7e3ebe",
        "cursor": {
          "ref": "0b3fa2a6-0030-4427-afd2-be4c13919ad7",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "64ac95cd-2d16-4e7f-ad68-5c615f207843"
        },
        "item": {
          "id": "e8d0e7b0-feb6-4295-ada2-ddabab7e3ebe",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6344078c-dc0b-4ffb-be4a-6ae193bdd989",
          "status": "Created",
          "code": 201,
          "responseTime": 2470,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-11T00:38:30Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-11T00:38:30Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "56995c76-3f1f-428d-8faa-a4f8e4445829",
        "cursor": {
          "ref": "4254c084-de77-4c30-8dbd-0e9f15c918df",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2aa612d3-0c87-4b34-9618-de3b5f467cf1"
        },
        "item": {
          "id": "56995c76-3f1f-428d-8faa-a4f8e4445829",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "52cfda29-ae85-4f47-9f94-a82c7bfac923",
          "status": "Created",
          "code": 201,
          "responseTime": 2305,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c600542-3362-4f55-8c0f-9f0a52af6e90",
        "cursor": {
          "ref": "6361f546-b9af-40cd-9724-60308faa18ec",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1d0d5763-d65b-4128-ae75-648748b1b96d"
        },
        "item": {
          "id": "4c600542-3362-4f55-8c0f-9f0a52af6e90",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c4d99d7b-8f0b-4b04-aa90-572516f41cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c600542-3362-4f55-8c0f-9f0a52af6e90",
        "cursor": {
          "ref": "6361f546-b9af-40cd-9724-60308faa18ec",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1d0d5763-d65b-4128-ae75-648748b1b96d"
        },
        "item": {
          "id": "4c600542-3362-4f55-8c0f-9f0a52af6e90",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c4d99d7b-8f0b-4b04-aa90-572516f41cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd23cdb-c142-4dc0-ab18-062ea21d024f",
        "cursor": {
          "ref": "f01d9b6a-d625-4764-80a6-a0ef132a1872",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ecab49b2-f20d-4c33-ae7b-5c89e87935b8"
        },
        "item": {
          "id": "bfd23cdb-c142-4dc0-ab18-062ea21d024f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "88f8ca72-eb01-44bb-9b33-a880f05ca6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae4bcd2-c5ca-429e-be26-a4e0720d31e1",
        "cursor": {
          "ref": "a33bd657-902f-4c0d-ad6b-c90050e12956",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c9295a5d-a109-4ab7-bada-2b1649a682ce"
        },
        "item": {
          "id": "5ae4bcd2-c5ca-429e-be26-a4e0720d31e1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e1855571-3939-430d-ab9d-7343c1012599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df4b887-2b63-4c38-b60c-ef8375b52075",
        "cursor": {
          "ref": "b6b0f68e-1c18-4bf0-80fd-b061adb83312",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8ebbdaa1-31d8-4620-87b3-73e0b8f55d02"
        },
        "item": {
          "id": "9df4b887-2b63-4c38-b60c-ef8375b52075",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3e41bd7c-5285-40d8-b5f8-db995b274ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05aaa65a-9ff7-4282-81e6-894f43b8c1c7",
        "cursor": {
          "ref": "0de980f6-fd39-409f-abeb-5807c3f6cc4c",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "39997d02-39e6-47bf-a1f9-f23ecc5f06b0"
        },
        "item": {
          "id": "05aaa65a-9ff7-4282-81e6-894f43b8c1c7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1e46f59f-4583-431c-899f-47031e99261c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8928e1ab-9560-4e01-98f1-d96dc5f7dd90",
        "cursor": {
          "ref": "8b930e3f-e55a-4afe-bbdd-35cbbcc13e00",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "521a0fe9-0dea-4446-abe9-2ffcfc7e3ff5"
        },
        "item": {
          "id": "8928e1ab-9560-4e01-98f1-d96dc5f7dd90",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "32ae2e58-5726-4a68-906a-7b1eb89e92e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f378a8-b199-4902-86ae-5a7de5a80482",
        "cursor": {
          "ref": "30c9aa3e-0f3f-431e-9f70-1fde918690ca",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "100c4c42-3ba3-4155-890c-cd585f400286"
        },
        "item": {
          "id": "92f378a8-b199-4902-86ae-5a7de5a80482",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9349257b-0057-4f89-aa70-3c60ac52f5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19db943a-96d3-4a28-8551-1ac78669f529",
        "cursor": {
          "ref": "d4377e15-62b8-4c96-9f7c-e4eb6034884d",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d540fbdc-5852-4056-93e3-b147fecfad5e"
        },
        "item": {
          "id": "19db943a-96d3-4a28-8551-1ac78669f529",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "40500bb3-f96a-4254-9271-5d32367efa72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf69d34-7629-4354-8671-75eae7c8e706",
        "cursor": {
          "ref": "c3df1317-317b-49e6-bc28-b2f92c16bddf",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "eb56a6f3-34e6-484a-83d4-83bcafb7a2c7"
        },
        "item": {
          "id": "ddf69d34-7629-4354-8671-75eae7c8e706",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "caeb61f7-6a57-46af-805e-576006163b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af21d1f4-3f6d-4dd5-9529-958334e41a5d",
        "cursor": {
          "ref": "7258bccc-f067-4f79-897b-48ce2b228695",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0b1ecc84-04a6-494b-abfd-b937eabf1fe4"
        },
        "item": {
          "id": "af21d1f4-3f6d-4dd5-9529-958334e41a5d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "05d0804c-77cc-4bcc-9689-a2b86f88115c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbf7318-453a-4889-8f5b-3dc5f6b23d5e",
        "cursor": {
          "ref": "b2f21cdc-fa14-4761-a704-2b702d91dedf",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c07e3302-ae96-42ca-af57-8598444b9909"
        },
        "item": {
          "id": "fbbf7318-453a-4889-8f5b-3dc5f6b23d5e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "87a9fa92-e408-4c89-bf97-1ba3984ebdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ab6164-1c83-422a-8180-18880fc6ec55",
        "cursor": {
          "ref": "edd53702-d1ae-4614-921a-78c4b9b2e6b6",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "00e0e633-d25f-4200-ba88-a5903d5808f8"
        },
        "item": {
          "id": "c1ab6164-1c83-422a-8180-18880fc6ec55",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "152f4552-ac5c-4b90-98e9-884f3183f791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c392cdc4-3bbb-4041-88e7-6deb9493e34a",
        "cursor": {
          "ref": "87eff79a-8199-4f8c-ad43-d6604f4c4096",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7bd20aac-e610-440a-9d94-16fbeb42cb8f"
        },
        "item": {
          "id": "c392cdc4-3bbb-4041-88e7-6deb9493e34a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ed6ba5c3-a043-4f4f-8a81-478c79de816f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce2fc93-12ee-4223-9697-6aa80e57ce6f",
        "cursor": {
          "ref": "5d2c8384-fee5-4d72-ab92-98e856b8984a",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6f5b45a8-3c55-4103-b8e1-e81f6339b81b"
        },
        "item": {
          "id": "6ce2fc93-12ee-4223-9697-6aa80e57ce6f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4b20f80c-9328-40ca-834a-fc422de9fe73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90252ddb-46a5-4c45-a807-6f119254007f",
        "cursor": {
          "ref": "7cf8aa4f-206a-4d9d-8c28-edccad3216ae",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b0025200-6847-4b2e-8ba0-7ffc0585540e"
        },
        "item": {
          "id": "90252ddb-46a5-4c45-a807-6f119254007f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "268ec556-698a-444b-bbb6-c3ca9261c555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ff80ec-cef7-4d9a-bed1-ca1af13eef3a",
        "cursor": {
          "ref": "da4d95af-df7a-4655-bb91-66374472fd39",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "80efcfb7-de9c-4ded-9ff7-7f3b1930750c"
        },
        "item": {
          "id": "15ff80ec-cef7-4d9a-bed1-ca1af13eef3a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "56dba003-f58a-41aa-ab65-62297b96676a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3f781a-4cf7-4858-8173-c795b7314095",
        "cursor": {
          "ref": "298ede76-080a-43f1-8bfa-a56bc2bfecdb",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "894e0408-a405-49be-aee0-f33b7f9d2ecf"
        },
        "item": {
          "id": "0d3f781a-4cf7-4858-8173-c795b7314095",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0c124747-9db2-4b6f-9297-5fead1b04950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d25027-2269-44eb-8c4e-c3651b7d3225",
        "cursor": {
          "ref": "df5a376b-5c1c-4bbf-b2bf-2c450fb102c5",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1332dd39-e099-4f30-ba6c-07eaff9cd16d"
        },
        "item": {
          "id": "72d25027-2269-44eb-8c4e-c3651b7d3225",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f9b3c940-0494-42fc-91d3-0e399545453d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa887d2c-d2a5-42eb-b8f4-9a365a84fe1d",
        "cursor": {
          "ref": "35370601-db7b-4a5d-a1e0-11754f47b2d2",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2ed0ef80-1db5-445d-aa95-b606ec75d5fe"
        },
        "item": {
          "id": "fa887d2c-d2a5-42eb-b8f4-9a365a84fe1d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "eb5631c5-5fab-4754-83e8-36c25566c008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ee9b9c-1664-4581-b2f0-9147187be225",
        "cursor": {
          "ref": "f21923bd-5b13-41ef-9cd4-6ecd7766da84",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3450b032-743f-441d-b570-ecb25201928c"
        },
        "item": {
          "id": "15ee9b9c-1664-4581-b2f0-9147187be225",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ef945d0c-1758-4de5-8f79-60630e243d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66f34da-5974-4344-8135-ad2758fb228d",
        "cursor": {
          "ref": "16335e12-8c1e-4041-a973-a671e82dd007",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "10c0e309-c367-4444-9916-574b48d74586"
        },
        "item": {
          "id": "a66f34da-5974-4344-8135-ad2758fb228d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fa4d9df8-5344-4cad-8b20-7c8a58bce12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6176f670-fab1-4880-a737-352ff9d2f895",
        "cursor": {
          "ref": "4ae0163b-25b6-4313-b0ab-9e2363c70dfa",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b54b22cb-7fec-4519-b12c-a34cac41d1fc"
        },
        "item": {
          "id": "6176f670-fab1-4880-a737-352ff9d2f895",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "860f1687-8830-47ac-9f70-6603d109624f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001aa128-8dea-4723-b728-309ae182914e",
        "cursor": {
          "ref": "608be9a8-0607-4516-bf64-8d61be98a5de",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "40ccae11-4c09-488b-81e2-dbc459168ae0"
        },
        "item": {
          "id": "001aa128-8dea-4723-b728-309ae182914e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "596d4e08-535b-4701-8626-1ff324a1177c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbe0a6e-70f9-43c4-9aab-1e62839a9042",
        "cursor": {
          "ref": "760f6497-e0f2-475c-b39e-2022520929b5",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d3f324ee-0f9a-494b-943d-92e08c3dd447"
        },
        "item": {
          "id": "7dbe0a6e-70f9-43c4-9aab-1e62839a9042",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eee9f3ce-d51c-4556-9e84-6155521f6c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6533f481-8a24-4a6d-9fb7-01515ea30041",
        "cursor": {
          "ref": "4326d735-7754-4454-9e2b-11f9d467fa53",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9c51d55e-b8ee-408d-b63a-5fbc7ab3e162"
        },
        "item": {
          "id": "6533f481-8a24-4a6d-9fb7-01515ea30041",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4286dd73-ba94-4ce4-86da-f525e6ef21c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3d5ccb-59eb-46ab-b794-5fa896dcbb81",
        "cursor": {
          "ref": "a855978a-27a5-48ee-8ca8-84ccdc58e97e",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ff28c09a-c637-4a22-b8ce-11a3ddc961bc"
        },
        "item": {
          "id": "2c3d5ccb-59eb-46ab-b794-5fa896dcbb81",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c25202aa-b4b8-45c2-937e-2e2b854cf176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0dfb79-38d4-4974-851f-9386158306cf",
        "cursor": {
          "ref": "5bf3c024-5cf6-4906-935e-38eda881b913",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bc8e56bc-5ec3-4a6e-a0e4-1a964fb5ea38"
        },
        "item": {
          "id": "1e0dfb79-38d4-4974-851f-9386158306cf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "804b3154-adc3-49aa-8471-bbeb6ef52f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adea02d-69d4-4137-93cb-200808589e61",
        "cursor": {
          "ref": "627948ac-79c6-450e-a5e5-3520f416fd86",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e936aee9-6cfe-4473-9551-495dba653ac4"
        },
        "item": {
          "id": "4adea02d-69d4-4137-93cb-200808589e61",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1cd848ce-3975-4e31-91d0-44f149d441ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066f0701-2c2e-4f6c-a020-68398d8595c1",
        "cursor": {
          "ref": "0f5fc9bf-45a8-412a-bd76-cdb8e7825a96",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "80305fb6-7f7e-47de-bd89-d7de5c23fead"
        },
        "item": {
          "id": "066f0701-2c2e-4f6c-a020-68398d8595c1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d574675e-529b-45b0-8512-b8190261a2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9939e951-b199-41d4-abda-36bae9e068f1",
        "cursor": {
          "ref": "b4556c55-793a-415e-8286-9d340e3383c5",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d9d6dc73-9079-4928-914b-3c542edc3b8f"
        },
        "item": {
          "id": "9939e951-b199-41d4-abda-36bae9e068f1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5cc8c1fd-9347-4908-8582-113dbddad9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3febdb4-099c-47f7-93d3-7055a42a307d",
        "cursor": {
          "ref": "6c9b0adc-adac-49f8-a11a-4a418e26b490",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6856c3a1-6f1a-4207-ad2f-58505bac9c31"
        },
        "item": {
          "id": "b3febdb4-099c-47f7-93d3-7055a42a307d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b82322b0-fadf-452a-90eb-6d7d2d488eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2c9d10-7c75-41b8-95de-c6f0f226d4be",
        "cursor": {
          "ref": "8118f86e-1c55-4073-a2e5-012cd2a15f1c",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "32bef33a-af76-4362-a50e-7355506b5f5d"
        },
        "item": {
          "id": "fe2c9d10-7c75-41b8-95de-c6f0f226d4be",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "48332486-9f4c-4daa-9136-f3831424e217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e447efd6-d60f-4e3f-b013-3805a86080a2",
        "cursor": {
          "ref": "ce203c26-8c9c-4fb3-ac71-63ad2bdce5ad",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "71b9873b-6d09-4618-9c1b-8139109a88c5"
        },
        "item": {
          "id": "e447efd6-d60f-4e3f-b013-3805a86080a2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1ea15fb1-9fd3-40b8-8fd5-10f3ec01e63f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "72a4b65b-07b5-4aba-8db0-a4bd3ba11a02",
        "cursor": {
          "ref": "22a84367-5e19-4474-9173-9fcc89df969a",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "adeb0b3b-2ba7-4329-87fe-0f084201df43"
        },
        "item": {
          "id": "72a4b65b-07b5-4aba-8db0-a4bd3ba11a02",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4eeec337-e3f3-4ed7-aea4-f4c95fcae67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "1012c8d6-9f0b-4dcd-8f99-4d9ba83f9bde",
        "cursor": {
          "ref": "b7cb8b02-d4ac-4c26-8738-e4d62d213d36",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "689f6693-0fa4-4731-b8c3-27d49137cdbe"
        },
        "item": {
          "id": "1012c8d6-9f0b-4dcd-8f99-4d9ba83f9bde",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2841b706-edf3-428f-9127-2f0586fb29aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1012c8d6-9f0b-4dcd-8f99-4d9ba83f9bde",
        "cursor": {
          "ref": "b7cb8b02-d4ac-4c26-8738-e4d62d213d36",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "689f6693-0fa4-4731-b8c3-27d49137cdbe"
        },
        "item": {
          "id": "1012c8d6-9f0b-4dcd-8f99-4d9ba83f9bde",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2841b706-edf3-428f-9127-2f0586fb29aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068b13fa-2e18-4b73-8792-b739728e37ab",
        "cursor": {
          "ref": "f3aae1c9-8876-4df1-b73e-2bc40e3bbb53",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d96f4cb2-5dd3-4ba1-903a-fbbf8f95610e"
        },
        "item": {
          "id": "068b13fa-2e18-4b73-8792-b739728e37ab",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fb6bb8e9-ed05-4e68-a54a-62ceb023eb23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755ab589-342d-4e00-a75c-6753ea41a300",
        "cursor": {
          "ref": "23e5621b-ac5a-4318-8f41-0b07e103087b",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "735940dc-d8df-4759-b68e-27847527fa95"
        },
        "item": {
          "id": "755ab589-342d-4e00-a75c-6753ea41a300",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c0132606-cda6-4b72-bb0f-01e5f2f2f4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b255328-76d6-4c84-ac22-65b86e538082",
        "cursor": {
          "ref": "4d3c1e1d-7d4b-4036-b718-7bb3f05c954f",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1621f00d-0dd3-4513-b51d-da2457db348e"
        },
        "item": {
          "id": "0b255328-76d6-4c84-ac22-65b86e538082",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9dca923b-9465-4385-92d4-20e449400dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9e69d4-3247-47ed-adad-298979f60e92",
        "cursor": {
          "ref": "3dab7b54-9607-4a28-997c-52d4461a9174",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7deebeb1-826c-4d3a-8881-17396f0eaf35"
        },
        "item": {
          "id": "ea9e69d4-3247-47ed-adad-298979f60e92",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f572ad4e-a15a-45b9-a609-86b57a410905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b98651-fc91-40b1-b3b4-aab1beb332af",
        "cursor": {
          "ref": "38834c30-ce1c-45c5-a37a-9146e586c716",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c160ac75-fc58-4b0f-a465-d6dc267e18ae"
        },
        "item": {
          "id": "84b98651-fc91-40b1-b3b4-aab1beb332af",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6883bff8-e90c-4e63-84f7-025f427e9e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af5942a-f90a-4d8a-9285-1426678eb087",
        "cursor": {
          "ref": "45a939cb-c619-4bd0-ac7c-493caeee9f0f",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "acac4dcf-2989-4c8b-8b25-6849e24bcdf7"
        },
        "item": {
          "id": "7af5942a-f90a-4d8a-9285-1426678eb087",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "346c007e-bdee-4f0a-b42d-0beb4139471e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf502682-befe-4f37-8739-e96bcffb5ae9",
        "cursor": {
          "ref": "a608c8cc-2a19-42ff-a280-b9c9d3bc976d",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a853231b-2c29-47d4-b79e-8dabdc1a1f2e"
        },
        "item": {
          "id": "bf502682-befe-4f37-8739-e96bcffb5ae9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "73169988-c2fd-400e-8e66-d54291dc27d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044c4768-ebb0-4c41-89ff-18aaf0dc54a8",
        "cursor": {
          "ref": "273aba24-3318-4f92-a3d4-29945ae10778",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9f689db6-7e11-42c1-ad72-bff7622d2458"
        },
        "item": {
          "id": "044c4768-ebb0-4c41-89ff-18aaf0dc54a8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f37e6064-f9c0-4888-a690-df02c7f749a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4315176-16bd-4cbf-bda1-7dd5ff3f8591",
        "cursor": {
          "ref": "be86b359-4941-4d00-96be-ae412f017256",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2689b1ed-6173-42ab-adeb-0b463f2d4594"
        },
        "item": {
          "id": "c4315176-16bd-4cbf-bda1-7dd5ff3f8591",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6ba0713e-7c22-4a5c-acd1-5718e2fe5a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aec7fcb-507d-4031-bbe2-3be9e9eb6512",
        "cursor": {
          "ref": "49d900ce-e270-40db-85ba-29a5c80b4138",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cfcf9abf-5173-440c-b5dd-58aafb0d048f"
        },
        "item": {
          "id": "2aec7fcb-507d-4031-bbe2-3be9e9eb6512",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "85d3e465-55de-4003-8156-47f94f54f1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb954d8e-47ca-4c8b-b647-7ee1e40a08c8",
        "cursor": {
          "ref": "1ae7ce95-ffc5-4465-aade-0d5ac9f0bceb",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "28448048-58fd-48b9-b920-9b70df58dbcd"
        },
        "item": {
          "id": "cb954d8e-47ca-4c8b-b647-7ee1e40a08c8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6affc340-d7ae-4986-844f-8f3d6384f6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4103bb-7411-42b8-b71b-cc09e8e83b31",
        "cursor": {
          "ref": "13c781a7-880d-4dd8-9613-6d92fce23204",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b3c4c0c7-8d5d-451b-aa8c-7642f260c801"
        },
        "item": {
          "id": "fa4103bb-7411-42b8-b71b-cc09e8e83b31",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e72ee2c3-fcdd-4eb1-b340-119cc4bde8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68201c3-d748-424e-9843-adacaa446c82",
        "cursor": {
          "ref": "3fa80f73-95ff-48a7-bea0-387b9c11d01b",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9a0084c1-7640-4ad1-a616-0d7d150a7034"
        },
        "item": {
          "id": "f68201c3-d748-424e-9843-adacaa446c82",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7f0cdfa6-a82d-4e7c-86d3-5e1625e1ba74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d04959-4a9e-4c1a-a9ab-75417d436d65",
        "cursor": {
          "ref": "8e44dc5b-e8bb-4c30-ac45-bbe5a7aabce6",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d9ca3247-9f97-47a3-b6fa-bec3fe0a340a"
        },
        "item": {
          "id": "d0d04959-4a9e-4c1a-a9ab-75417d436d65",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6bfe3ac2-f430-47f6-aa4c-d9d71037a9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52860d2-486b-4e17-9052-7420dc63f2d9",
        "cursor": {
          "ref": "86b5b508-5694-404e-a0dc-e06bf9267f94",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "73213dad-6666-417c-8b4c-4f1c6114a7ec"
        },
        "item": {
          "id": "f52860d2-486b-4e17-9052-7420dc63f2d9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8b1852f9-c579-4f57-bf24-b276a460a57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84971cb3-4cfc-426d-b04b-ba00877c85a8",
        "cursor": {
          "ref": "92b79fc1-4cf3-435b-ac3f-8144c3cc0a56",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b6fdf18b-5ba2-4327-a52e-74439a045f3a"
        },
        "item": {
          "id": "84971cb3-4cfc-426d-b04b-ba00877c85a8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "22b0d040-af69-420a-894e-13c22c0c23d8",
          "status": "OK",
          "code": 200,
          "responseTime": 250,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "db06df50-c0f2-442d-ae90-b4180a0ef306",
        "cursor": {
          "ref": "029a0dc9-c5d4-48cb-a37a-9350d2a5fbac",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6975d4a7-eedf-4ea3-a382-3c5b712ed029"
        },
        "item": {
          "id": "db06df50-c0f2-442d-ae90-b4180a0ef306",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "724b38bf-0910-4ce1-bce2-d12b3a2391c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97ff30f-2ec1-403c-9344-d7b3a73a1e44",
        "cursor": {
          "ref": "7458ea53-7214-4870-ad3c-1b0b34c508f9",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3b0299f8-986b-42ae-aaeb-f44627732bcc"
        },
        "item": {
          "id": "b97ff30f-2ec1-403c-9344-d7b3a73a1e44",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3b5ce8a3-a43c-4eba-b2a8-5af52572ddc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00425557-89da-44cb-8f59-d3153d453bac",
        "cursor": {
          "ref": "bef7176c-6dc9-45c9-a0e9-af7ae21e12a8",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "013b8e08-5975-41ab-a698-9b5e57dde272"
        },
        "item": {
          "id": "00425557-89da-44cb-8f59-d3153d453bac",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "28329188-98f9-4c6b-8775-61fc870c06a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c427eb2-b3e5-4199-849c-44147e4e94ed",
        "cursor": {
          "ref": "04989d1f-6097-49e7-b3f2-904848040bfd",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e96e88c5-82e0-4c01-863a-1d0ecee18237"
        },
        "item": {
          "id": "3c427eb2-b3e5-4199-849c-44147e4e94ed",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7bfa2adf-8224-45ce-b498-1b093ff6ec2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd153be-7220-4ddd-a4f7-ced7b38a395e",
        "cursor": {
          "ref": "63ff88c0-df96-4147-98d6-0c058fe3c8c1",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c08254e7-291a-41b7-b45e-e74658f2472f"
        },
        "item": {
          "id": "9cd153be-7220-4ddd-a4f7-ced7b38a395e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ce9ea18e-9ff6-4df3-98a2-a896b86d2dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40256f61-a4b9-49cd-a434-de6dc33bc8f4",
        "cursor": {
          "ref": "ad4b06ab-c5fa-419f-a6ff-fe288bef3003",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "09330873-d6ea-4c60-b244-3531c632a154"
        },
        "item": {
          "id": "40256f61-a4b9-49cd-a434-de6dc33bc8f4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "813a8beb-f19f-4dfc-9b79-a6956d856298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccef351e-f942-42b9-a652-75ab5a67f048",
        "cursor": {
          "ref": "ea581b19-8e21-4d6d-a47a-c7f8d6356132",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1bc1747e-3e0a-4434-b5fd-f288afc7574c"
        },
        "item": {
          "id": "ccef351e-f942-42b9-a652-75ab5a67f048",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1cca8cca-7a18-4853-b0c1-66fb4a3a2184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d3c6d2-f909-43d5-a140-0265fe214cb4",
        "cursor": {
          "ref": "2815b948-f72c-4222-bbc1-84e8e93d0956",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a40db376-e35e-4204-b5f7-9cd9dd51b186"
        },
        "item": {
          "id": "d1d3c6d2-f909-43d5-a140-0265fe214cb4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ca60420d-5833-4a4f-9d0c-949ae1d2a74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e85477-8126-4a30-8408-8acdb67cb1b6",
        "cursor": {
          "ref": "09b9f3bc-408f-48b7-8341-8def13f52124",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "59783819-789c-436d-ba1c-a2d5543c9846"
        },
        "item": {
          "id": "67e85477-8126-4a30-8408-8acdb67cb1b6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f7ed14e4-6290-401c-9848-54755946218c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d0d30f-423f-4e32-9555-3fa17ddc6255",
        "cursor": {
          "ref": "26c93e1c-54a3-4ff3-8673-621e96845f87",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6e1f88ce-d975-4095-b869-0ea0bf89bcb0"
        },
        "item": {
          "id": "87d0d30f-423f-4e32-9555-3fa17ddc6255",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9f268102-dee3-4401-99b3-b3806338f24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae13f4f9-db4f-43b2-8286-1c8c95b0e619",
        "cursor": {
          "ref": "7ae7be3b-03cb-4591-a68a-5bf678164402",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7593ea2d-e27d-4bbe-ade8-600e62a46cd7"
        },
        "item": {
          "id": "ae13f4f9-db4f-43b2-8286-1c8c95b0e619",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "47e0ad35-f3eb-4226-984c-182e320085db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d672ca-7960-4c94-9332-3c81abc87965",
        "cursor": {
          "ref": "bfbb0f66-e6f1-4154-878f-3f34fe34f28d",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "466db28c-af21-437a-a5f4-63afcda6112d"
        },
        "item": {
          "id": "89d672ca-7960-4c94-9332-3c81abc87965",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9a538e0e-aa33-4951-99a3-c3d708c94073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d230d5b-f25f-4ce1-a962-aa29744e901a",
        "cursor": {
          "ref": "7beab151-5ee5-40ad-8010-e7fca1cb97f0",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ea059ad1-7aa0-4c26-bac9-0ea0490698e9"
        },
        "item": {
          "id": "0d230d5b-f25f-4ce1-a962-aa29744e901a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2225683b-9553-450e-b550-9c447815e4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b58c34a-2180-4be6-b54e-8de6fac60905",
        "cursor": {
          "ref": "5c1c6d8d-a071-4fcf-9929-92cd377e87c3",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "439e883a-5204-4b84-a7cf-9c5d20266354"
        },
        "item": {
          "id": "2b58c34a-2180-4be6-b54e-8de6fac60905",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "07e645f1-555c-4cbc-b131-d76740913376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7138429d-38ea-411d-afc3-799f26dafdfc",
        "cursor": {
          "ref": "9e099845-f4ec-4258-9fc2-541a5bcbfec1",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e988844e-6b55-4a5b-986b-76022bbe5b47"
        },
        "item": {
          "id": "7138429d-38ea-411d-afc3-799f26dafdfc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "69f70619-3a8c-41a8-8bb1-fd0744c3a3e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171dae0c-8a00-4431-ad57-346549d880bd",
        "cursor": {
          "ref": "59203ba5-a261-4b14-8dc1-90cf2de1747d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bcbdd59f-1621-4966-b8cf-876ac0fbcb94"
        },
        "item": {
          "id": "171dae0c-8a00-4431-ad57-346549d880bd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "377eedbf-6e6f-44b5-a6db-6d9584706ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6406a5-744e-49f9-8ea9-ad5786a4b917",
        "cursor": {
          "ref": "3e2e1e45-c5d9-4aab-a610-382c5608d418",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "198820ce-501e-49a9-ad8f-9b49b7a0f4ee"
        },
        "item": {
          "id": "af6406a5-744e-49f9-8ea9-ad5786a4b917",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "74621222-5915-43ef-9ae9-d7134580f714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ac307a-85cb-475f-adda-cc99ea683910",
        "cursor": {
          "ref": "85514175-5458-4554-907c-e899d66b2594",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a7d7115f-736e-42ad-bcb5-1cc849a5a688"
        },
        "item": {
          "id": "05ac307a-85cb-475f-adda-cc99ea683910",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7da30899-13b6-44ec-8c43-35615f624c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83532d2-f3a1-4f9c-97b3-79f03f9269be",
        "cursor": {
          "ref": "75b7e24a-7a42-4088-8f2e-9e02dfa6a2c6",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6c9b0e3f-6d6d-4292-9c91-298027b3f5a3"
        },
        "item": {
          "id": "c83532d2-f3a1-4f9c-97b3-79f03f9269be",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b728d57e-9fce-4886-9a39-839fe994f4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d655d3f7-db9e-4f74-acca-f285943dec9d",
        "cursor": {
          "ref": "305d2a8c-a26b-4925-a4e7-e16b2342017e",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "68b1f645-73f4-4f66-9b1f-3b2f5ff139ad"
        },
        "item": {
          "id": "d655d3f7-db9e-4f74-acca-f285943dec9d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4400407b-4154-4193-a663-3e729f4fdad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2c0919-1667-42a1-8518-e140471eb34b",
        "cursor": {
          "ref": "a04a3a6f-b2b3-4ec4-ad24-c53323ca51f8",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "428dc6a1-3418-4ab7-a4bf-7a6614ca56b9"
        },
        "item": {
          "id": "8e2c0919-1667-42a1-8518-e140471eb34b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c8844883-28bf-4bf7-8d58-80ac6841e160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe8c800-e87e-4f27-92bb-adfb384855d3",
        "cursor": {
          "ref": "034bb5da-5495-43b4-a9c3-68e17bb8325a",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ac78df97-722a-47ac-a85a-28ad897745ed"
        },
        "item": {
          "id": "afe8c800-e87e-4f27-92bb-adfb384855d3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6fc81309-f651-4c4f-8496-b211589a39dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a656ef-5c18-4c46-854a-f448652fcb8c",
        "cursor": {
          "ref": "8c49eb22-0df5-42ae-a947-6722bc9d97a9",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2605649b-8637-4a82-ad9b-7b73513ebe21"
        },
        "item": {
          "id": "b2a656ef-5c18-4c46-854a-f448652fcb8c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c31ad5c9-5bbe-4d8c-b60b-747db9d47892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcb44b2-42d0-4f61-9902-05043b0e3af3",
        "cursor": {
          "ref": "d77883f5-043c-449c-85e1-84d9c22c6493",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "085972fe-a057-4d2e-8e8a-0a46a763a043"
        },
        "item": {
          "id": "adcb44b2-42d0-4f61-9902-05043b0e3af3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e1623674-8474-41dd-b0e4-4eeefd0a4bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bd0fc4-43aa-44f3-85b4-9d28c867ca07",
        "cursor": {
          "ref": "01d18937-51f3-4c54-86ea-16a98888e3ba",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b58b6633-cade-403a-933c-d2ea2e0672db"
        },
        "item": {
          "id": "b6bd0fc4-43aa-44f3-85b4-9d28c867ca07",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e186c8ac-2cf2-40f5-a250-2ff874e9d92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482fe501-13db-455a-bb7d-ab8b135560a7",
        "cursor": {
          "ref": "ba1559ff-4afb-48e6-a63d-461d1b534a6e",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "df1fd585-f0b9-4e28-b525-ad20abaaf625"
        },
        "item": {
          "id": "482fe501-13db-455a-bb7d-ab8b135560a7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bb042972-d00f-475f-a824-e4829da08dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a366b1e9-0121-49fa-bc40-a080348f9cd5",
        "cursor": {
          "ref": "be476e45-58b4-4691-a7da-4a157d9d3ea1",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f87df497-983c-4a63-b0b5-2cebd696cbf4"
        },
        "item": {
          "id": "a366b1e9-0121-49fa-bc40-a080348f9cd5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5c1c3e53-f79b-431a-897d-16d1ea66f32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7deca615-503c-44e2-8fc6-bb6b78ff874c",
        "cursor": {
          "ref": "68335fd5-ab05-4c7d-92f4-7cfa362ad1c3",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "37b4bc82-c5bc-41ec-b1a9-51b59776569a"
        },
        "item": {
          "id": "7deca615-503c-44e2-8fc6-bb6b78ff874c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "382ea523-94f2-4886-b7ec-cb5a4927e957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467e454d-0f3a-42ff-afbb-11ecf95d2b9f",
        "cursor": {
          "ref": "61a3df19-43a5-4e1b-8f3b-d8c597a82cb7",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "47600486-1999-4f10-86cf-ca5da8a1b22d"
        },
        "item": {
          "id": "467e454d-0f3a-42ff-afbb-11ecf95d2b9f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ac67fb16-f9bf-4524-b3b5-6ed1758c876d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a048a1c-190a-4882-b663-f1e7e2c56cd9",
        "cursor": {
          "ref": "ed98f7da-8861-4bc2-8bb6-7fff475886d6",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6d3b3102-5fdd-468c-9a5e-27febe4fb3ef"
        },
        "item": {
          "id": "6a048a1c-190a-4882-b663-f1e7e2c56cd9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0072a99e-ae90-4852-bd46-a9e7eafe10ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfbee6e-dafa-46b4-a1df-07fd1b202c41",
        "cursor": {
          "ref": "078bedec-50e0-40fb-85b0-9baace086632",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "38a71845-dea2-4952-b5d7-0c47b7486acd"
        },
        "item": {
          "id": "7bfbee6e-dafa-46b4-a1df-07fd1b202c41",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d3f21577-7d64-49b8-baa0-84b828fdd051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3932598-beff-4417-bf4f-3d473dfbaa54",
        "cursor": {
          "ref": "f7b9cb9b-4ae0-49fd-ac3b-4040489646df",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "91ac784b-8108-4732-b558-e2f14a95df26"
        },
        "item": {
          "id": "a3932598-beff-4417-bf4f-3d473dfbaa54",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6637f9f6-74b5-4d57-b86c-c786c32132d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf000748-f587-48ae-b095-1ab563a1b792",
        "cursor": {
          "ref": "69bd1a03-d586-4135-be40-c906cec0dcc5",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "90fa3eac-8768-4651-a61d-c6bdcc64d68e"
        },
        "item": {
          "id": "cf000748-f587-48ae-b095-1ab563a1b792",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0541b181-9eb8-4508-8edb-1dfcd1cc819b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69ce68d-8906-4d8d-ba14-e26811e7d075",
        "cursor": {
          "ref": "09e6a1eb-1ef9-4d28-b50e-449893d84cc4",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3c7710ec-0cbd-4acb-a185-b0a7dcc08f8c"
        },
        "item": {
          "id": "e69ce68d-8906-4d8d-ba14-e26811e7d075",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2658e3a4-60da-497b-8a76-fb86627e97c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa89c38-4850-471a-9b05-a8a776b4da48",
        "cursor": {
          "ref": "a3b342f9-3daa-47cf-9367-e16315e78f70",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d698c21e-c2de-4992-92dc-89d58b19c241"
        },
        "item": {
          "id": "9fa89c38-4850-471a-9b05-a8a776b4da48",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c79dc264-7e50-4e57-995c-1ee8683c9cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb03138-f289-4b72-aa5c-3505df4d6d79",
        "cursor": {
          "ref": "3257243f-c99f-46a1-b269-717ac4db8295",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2a9718c8-eb26-46b6-aa41-84add8e664e7"
        },
        "item": {
          "id": "fdb03138-f289-4b72-aa5c-3505df4d6d79",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7bff8207-4dbb-4495-a01c-52129d8b4fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30bb1ebe-866b-42c7-99be-f81784cb1092",
        "cursor": {
          "ref": "ddccc837-5ce2-4325-9f2f-4fe06a1285c7",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9caf4fdb-709f-4f46-a879-749c41724f9e"
        },
        "item": {
          "id": "30bb1ebe-866b-42c7-99be-f81784cb1092",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "be1b9b75-8b4b-4378-b96d-8e08b53c6089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e70f54-3816-4e31-aa56-5b68010e9406",
        "cursor": {
          "ref": "383b0e82-d7a5-4eb2-a591-b9870ed7f898",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2c008171-60df-4e51-9670-1ef4ccbfde1b"
        },
        "item": {
          "id": "a7e70f54-3816-4e31-aa56-5b68010e9406",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "22161041-7c00-477a-9067-f4681a899c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afb725f-1504-4ce2-853a-e52a07a18ae3",
        "cursor": {
          "ref": "8b4f583a-3e3c-4509-ae7d-1738c07ac2a3",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6c328f11-9241-4d3c-bb10-488363b453d6"
        },
        "item": {
          "id": "3afb725f-1504-4ce2-853a-e52a07a18ae3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "87bb9444-26ed-4459-9d46-bd360615dc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0ad0eb-74e0-426a-bb3c-f6f56be36c7f",
        "cursor": {
          "ref": "ddc1d5d1-f5c0-491f-9d38-d1bbc38835a2",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0c43b262-c7a3-42b9-9531-78aed5144725"
        },
        "item": {
          "id": "ee0ad0eb-74e0-426a-bb3c-f6f56be36c7f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5e8da577-de98-4020-a252-3d5f1df7a021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad146f62-6560-4409-af57-8c427a471ae4",
        "cursor": {
          "ref": "85255d1d-028d-4e9b-8d24-cc68f5faf1b6",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "84c55fb3-ae5b-40f8-b158-eaa3b683c89a"
        },
        "item": {
          "id": "ad146f62-6560-4409-af57-8c427a471ae4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dc10e5eb-5c54-4a29-b12b-d54d35a99f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b390e4a-3458-4bc2-bfb2-fd1e59f243df",
        "cursor": {
          "ref": "964f7e6f-d3d5-4337-a3fe-9c8b55427e14",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e7831c41-70d1-47a2-ab75-ba4af689a7ef"
        },
        "item": {
          "id": "2b390e4a-3458-4bc2-bfb2-fd1e59f243df",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "360093e7-5b91-441c-a877-a8033756d95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a200da9-2b05-48a1-930d-7587fb77fb9d",
        "cursor": {
          "ref": "691af23b-bb52-4e02-bf42-6b1e20a37da5",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8c63cd69-45da-47eb-aa33-a89c2e9ae8b9"
        },
        "item": {
          "id": "2a200da9-2b05-48a1-930d-7587fb77fb9d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ea527b20-b78f-42ea-b8f6-c44778852102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98aa03c0-54a9-49fe-9088-1d84860638a0",
        "cursor": {
          "ref": "b5730f09-0374-4b5c-a632-66b62c49ed00",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0fabd034-f4cd-4df5-8d90-d69c15b5bc89"
        },
        "item": {
          "id": "98aa03c0-54a9-49fe-9088-1d84860638a0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "36170cf0-dedb-404b-bd28-2db847675820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fe3869-1aa5-455e-a79c-2543d29e4777",
        "cursor": {
          "ref": "205c2827-faec-49ea-b829-842472453a95",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b0b3a4f5-83c7-443e-a996-04b723e7a07b"
        },
        "item": {
          "id": "d2fe3869-1aa5-455e-a79c-2543d29e4777",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4255bc42-db6c-4a80-b2ab-2b66de18c83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34196e35-26f1-4e81-bbf5-2e09018114c6",
        "cursor": {
          "ref": "ace0814f-995f-46a9-bae1-2c2f5d52755c",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0af8b1b7-a2e1-4027-b8fe-8ac67a94d0a9"
        },
        "item": {
          "id": "34196e35-26f1-4e81-bbf5-2e09018114c6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e7584109-b914-4419-8afd-017cced02450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9aad58-e90c-4adc-9d42-3ce42f79c0a1",
        "cursor": {
          "ref": "3962920a-8128-43f5-a4bc-96d78e98833d",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5433808e-aea9-4627-aacf-0d0db3d58cd8"
        },
        "item": {
          "id": "bf9aad58-e90c-4adc-9d42-3ce42f79c0a1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b4d0b6a8-6faf-4868-a176-47235b18608f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a14e01-22f0-4fd5-ba0d-3ee589f8b700",
        "cursor": {
          "ref": "a6391ce6-027a-4cee-a9e5-2a3bea9f8262",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "50af8899-e748-439d-a172-d398d827ed72"
        },
        "item": {
          "id": "f3a14e01-22f0-4fd5-ba0d-3ee589f8b700",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "05369ce0-9014-4ad1-bbfd-a92ed1da65a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d97802d-59a9-4ad1-a6a8-0797463bc59c",
        "cursor": {
          "ref": "5bfb62be-d038-4a63-a904-cc15743e616b",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "02230330-159a-4f48-b9c9-c92a3451eb4e"
        },
        "item": {
          "id": "4d97802d-59a9-4ad1-a6a8-0797463bc59c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d77ff02c-bffa-4383-9319-7b4ececd3880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f30c317-90a7-4ae4-9454-fbe5b5cf729d",
        "cursor": {
          "ref": "efb95474-5bfc-4f9d-9304-17c2b6ec5d61",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "53b004aa-3603-4489-b5a0-7c1c43ffea2c"
        },
        "item": {
          "id": "8f30c317-90a7-4ae4-9454-fbe5b5cf729d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0068e709-aee6-448f-b0a0-9902f1d1f2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9aea24-a1cb-4eea-b7ac-09c88d81fc17",
        "cursor": {
          "ref": "35142a14-7b36-4e04-829f-beac3a59faf4",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6dca2e5f-30b1-4e94-a5f5-4abe280ab8e9"
        },
        "item": {
          "id": "6b9aea24-a1cb-4eea-b7ac-09c88d81fc17",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3a756167-1be0-4971-8164-49ba134f606f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6089332-8b3e-49e8-999e-9630fd4bdc21",
        "cursor": {
          "ref": "e2be5dad-2b25-4173-af03-128ce231e208",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "78ae1ff7-b7a4-43c8-bf88-b12749a7b898"
        },
        "item": {
          "id": "e6089332-8b3e-49e8-999e-9630fd4bdc21",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9ad6a8b7-03a8-4d84-8c40-0a0dbb40d7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9c245e-f121-49fb-8463-3de761b23dc6",
        "cursor": {
          "ref": "d2f480bb-a3ee-4328-b895-30006017b987",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fdd589a3-13c2-4bbe-8565-a608609da044"
        },
        "item": {
          "id": "9e9c245e-f121-49fb-8463-3de761b23dc6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "13d367e0-b7da-4c3d-b8c1-ed73b24bff78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38300d3-5f93-428c-95ab-8aa78a9adcb9",
        "cursor": {
          "ref": "dc18801a-90b3-4bd9-87ef-85a5efc16ad1",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d1f83c3f-0b36-4d17-af3f-0c54d2d45907"
        },
        "item": {
          "id": "e38300d3-5f93-428c-95ab-8aa78a9adcb9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "463d187f-c3e1-4deb-9ea0-96c1c6df0629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9154b8f8-c698-4d38-a9ff-fa10743a0177",
        "cursor": {
          "ref": "533e82ea-d894-4758-851d-6c3ebf337b39",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8cb180e8-42a0-4e53-93a0-9fd87f2e3c81"
        },
        "item": {
          "id": "9154b8f8-c698-4d38-a9ff-fa10743a0177",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "eda88055-ad76-4a32-aa53-5fbf0b68c424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5db33f-38bc-432a-aa13-4bc2f3e2b440",
        "cursor": {
          "ref": "65a74aff-356d-43a6-a0b3-7013f945791f",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "dc4a20d5-7d61-4345-9365-b5961fb7b045"
        },
        "item": {
          "id": "bf5db33f-38bc-432a-aa13-4bc2f3e2b440",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e2ff6f66-23a3-4e8f-84ca-e8e7937c0d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea822c5-7bb5-43f3-bb8b-c5dbd6e8f549",
        "cursor": {
          "ref": "cadfd7c6-fe64-4cb7-8e91-c129c897f351",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d468b0d6-de97-49c6-8eab-486686860987"
        },
        "item": {
          "id": "5ea822c5-7bb5-43f3-bb8b-c5dbd6e8f549",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1de94697-4d9a-431a-9fe1-bb4260938e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9241217d-0a74-47ab-b46b-9ce0e2035273",
        "cursor": {
          "ref": "fc7b0c4a-6e95-49dd-88e5-8aa1cc3658b3",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6a8c861d-4323-4238-90c4-5dba43adcf83"
        },
        "item": {
          "id": "9241217d-0a74-47ab-b46b-9ce0e2035273",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7cd1e716-98c1-45ac-8e65-3ca3a8a8e4b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d85990-10c1-429e-9917-697e21dad371",
        "cursor": {
          "ref": "70a3425e-79db-4982-acdc-edb0ba2ac652",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "454f318e-aa9a-4f9f-8efd-78b7c77f895b"
        },
        "item": {
          "id": "68d85990-10c1-429e-9917-697e21dad371",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "edbb4177-66f7-4bec-90d1-5f820c65ca82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ed3d00-1d32-4276-b977-2c4dc2f5da68",
        "cursor": {
          "ref": "4f50497a-b69b-486a-8130-7d75dfb83b05",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5932f8e4-5096-4727-94ae-832c9ba33cbc"
        },
        "item": {
          "id": "76ed3d00-1d32-4276-b977-2c4dc2f5da68",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ded39bf9-e9ce-42f2-8c25-81a6a4dbc9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3727ae8c-4bbf-4bd1-b853-42bac6e1428b",
        "cursor": {
          "ref": "1045829e-bbe6-4393-9408-6e9e74ea26bb",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cdb7c447-1903-4e31-8a58-da4f6bf9a651"
        },
        "item": {
          "id": "3727ae8c-4bbf-4bd1-b853-42bac6e1428b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6b91a8a6-e20b-4fb4-96e5-f8e59b510f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f22d146-1fc5-4257-8819-2c4c6508e1f5",
        "cursor": {
          "ref": "a95863ee-259a-40fd-918a-4907b2221093",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4ea6b5c0-7d66-428a-b0df-87b62f0c702a"
        },
        "item": {
          "id": "7f22d146-1fc5-4257-8819-2c4c6508e1f5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3043119e-f82d-4b2f-a000-72efcf9aacf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b604de6-ceaf-47b3-a62f-adc626e29065",
        "cursor": {
          "ref": "5d857148-cddd-4f06-ae93-ce08736e4e4f",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1fa15cd8-6944-4cb2-8d56-8fabd5ac4cff"
        },
        "item": {
          "id": "3b604de6-ceaf-47b3-a62f-adc626e29065",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "951b69b9-73d3-46ec-afd3-7c14953eba68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743545b6-3267-42b6-b14d-9f6eb2579c0a",
        "cursor": {
          "ref": "b9d68831-7b88-4e9c-b41d-c7c981a6ac96",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "11c72d34-2743-48a1-a121-d81d3cb28f15"
        },
        "item": {
          "id": "743545b6-3267-42b6-b14d-9f6eb2579c0a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4860887c-c0a6-432f-9c61-c3b7e20fe635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64322ef3-d033-4205-8f2e-82b3faa72bb7",
        "cursor": {
          "ref": "644264d0-9ce7-468a-b6af-3b181ae85e40",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4384b59c-0ce1-4b90-a2d0-594e19210865"
        },
        "item": {
          "id": "64322ef3-d033-4205-8f2e-82b3faa72bb7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1fe62874-2c77-4b76-b74b-f250795b16d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba341f9-30a0-40f9-af9f-d1cd80405df2",
        "cursor": {
          "ref": "e81948cd-c7c7-4d00-a769-9662187c9fcd",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "74caf8a9-9b3b-4567-a7fc-8e9c88ac4e5b"
        },
        "item": {
          "id": "aba341f9-30a0-40f9-af9f-d1cd80405df2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5a4bb14e-89d5-47e3-b557-009755e0a334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58998323-0ea7-4609-95a4-ac9135d64dd8",
        "cursor": {
          "ref": "ca5a126e-2df6-4fa8-9aa8-abf6e974fe24",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "367e650c-b3ab-446f-9eaa-f6ef9ff584a3"
        },
        "item": {
          "id": "58998323-0ea7-4609-95a4-ac9135d64dd8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "602e184b-4494-4b32-8d26-41385d4d1323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7a3abd-aa29-46a8-bc18-62a3c432d459",
        "cursor": {
          "ref": "057d1bdc-98d5-47d5-a339-934aadf7ff10",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f9165616-bae5-45fa-8a10-24fea06b5380"
        },
        "item": {
          "id": "6e7a3abd-aa29-46a8-bc18-62a3c432d459",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "89598d2a-9f48-4977-8e70-956ddeff0ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb06aecb-6a26-4dbd-93fc-8001c2ed51a9",
        "cursor": {
          "ref": "18f7e894-3f26-4801-b5b3-3895beca07dc",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "997f23f9-c500-47d3-baf0-0efaa356b33f"
        },
        "item": {
          "id": "cb06aecb-6a26-4dbd-93fc-8001c2ed51a9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bcb9119c-e5f2-4e6c-9d2b-b6a08a9b966f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995cb0b8-532c-4dba-8404-d4b1afd4db21",
        "cursor": {
          "ref": "f4832dcc-6cea-4c9d-b841-662743ad75f3",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6913e57b-4935-467b-99a4-974c8fac525d"
        },
        "item": {
          "id": "995cb0b8-532c-4dba-8404-d4b1afd4db21",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "32640c94-c3bf-40f5-82ed-c62310549bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f06ef1-4abc-48dc-b4b7-bc70ffb7176b",
        "cursor": {
          "ref": "59eefe88-e3bc-4f1f-b786-c1a8322b94f4",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "df111436-9bf3-4112-bf67-d5b5c037c668"
        },
        "item": {
          "id": "63f06ef1-4abc-48dc-b4b7-bc70ffb7176b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cd5dbd53-c655-421b-b5b8-54d81c08605d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a748b15d-2237-4fc2-9528-d3deabe444ef",
        "cursor": {
          "ref": "1d896a7b-62de-439f-87ca-b88269c4d886",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "381801d6-3613-4d7b-95de-1f6d4011d2c8"
        },
        "item": {
          "id": "a748b15d-2237-4fc2-9528-d3deabe444ef",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "427693ab-4299-45ae-928b-140a8b44147e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60617453-c918-48f4-bb91-d90b055ae189",
        "cursor": {
          "ref": "a4ad1814-eafc-450a-b96a-a3c762452756",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "67f22d1c-756d-47d3-8cf9-0fc0c9caa41e"
        },
        "item": {
          "id": "60617453-c918-48f4-bb91-d90b055ae189",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5a14c467-c714-4a9b-9bef-c61d3111cca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293edd0b-dd59-4af3-8066-10435f2cc2d0",
        "cursor": {
          "ref": "4a3e9fed-c721-4cc5-8b9a-2cfd30fd9d98",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4588e365-0a6b-4c89-be64-96a945990bbb"
        },
        "item": {
          "id": "293edd0b-dd59-4af3-8066-10435f2cc2d0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bcac339f-09aa-4158-b737-b469196b4fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fab72a-2c7a-4217-ac44-5bace5b9d873",
        "cursor": {
          "ref": "953bbd19-cca8-454f-af4f-b6fdfde4b35d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d337e48e-fdb1-4295-810a-d9e556b5dc46"
        },
        "item": {
          "id": "40fab72a-2c7a-4217-ac44-5bace5b9d873",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8c25b14d-6975-4572-80c7-ffb0e46fc327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b0071d-5d8b-45b9-a133-0dad11b1da85",
        "cursor": {
          "ref": "6202db85-25d8-408e-a086-e71c02ee0a06",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d7b66e0d-ae61-4a64-9e9f-1d16fe61d800"
        },
        "item": {
          "id": "f6b0071d-5d8b-45b9-a133-0dad11b1da85",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a2138fc1-35d0-4804-8e9f-34ed803543bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545dd410-7965-4342-91aa-e15c511b9402",
        "cursor": {
          "ref": "c31359ac-339b-4d1c-8c29-6f28efdf58b9",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "157d3bdb-62e6-4823-8a02-5644a5e7dfab"
        },
        "item": {
          "id": "545dd410-7965-4342-91aa-e15c511b9402",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bd84569b-b734-440b-a184-e30fd11683aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6736af-6d59-4b20-bdee-ed96cb7a0499",
        "cursor": {
          "ref": "cf0cf0ec-ea3d-4460-bb43-3d239f167ce3",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3d748e15-6cd4-427c-848e-279702caff99"
        },
        "item": {
          "id": "9e6736af-6d59-4b20-bdee-ed96cb7a0499",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cfc42bc6-f2a2-4d62-9bc7-25a09de2729d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17a6cba-526f-41fa-aa9c-485456095278",
        "cursor": {
          "ref": "5664527e-35c2-4493-8ea5-c96bdd8c7de1",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "30740361-2d34-49a5-922e-ab03ea4aa447"
        },
        "item": {
          "id": "a17a6cba-526f-41fa-aa9c-485456095278",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c7bf140a-6b0a-4d0f-939d-f0b23d27b101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e61707-da4b-4a4b-8c06-025237b54987",
        "cursor": {
          "ref": "a919f4b2-7915-413e-86c7-568006c512b6",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "83becfb0-01a2-45ea-b399-2fc155019c55"
        },
        "item": {
          "id": "47e61707-da4b-4a4b-8c06-025237b54987",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7c0264c3-3bcd-47ca-b974-9bc95e6cfd4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921db1bd-5758-4ba4-a665-573fc142aa3b",
        "cursor": {
          "ref": "cd544872-4be4-428e-a81e-7ae36f3fcd32",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5923f566-e1be-4362-9f88-5ff905083880"
        },
        "item": {
          "id": "921db1bd-5758-4ba4-a665-573fc142aa3b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7ae70d4a-029e-4fa2-94f5-956399b65ed5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3b38eeb5-b213-42d4-94c1-f2f62f816ba7",
        "cursor": {
          "ref": "86970175-173d-410d-bf47-4b12f3bf62e7",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "833d6018-c865-461e-b385-19be73af091c"
        },
        "item": {
          "id": "3b38eeb5-b213-42d4-94c1-f2f62f816ba7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7feb2e3d-bd6b-4ab5-9fcb-a24ec1782a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ea4dd25b-bb35-4227-a6fa-4d88fbcab9e8",
        "cursor": {
          "ref": "2b59a637-2d9d-4c84-a234-6fd840167bd8",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "51c28cd4-edfd-444b-a45a-565e0a7c3571"
        },
        "item": {
          "id": "ea4dd25b-bb35-4227-a6fa-4d88fbcab9e8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "54ac6807-dfb4-41d8-a6ef-3aca1900bc78",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fac3062-c00c-41b8-ba6a-dfedd1c84a1f",
        "cursor": {
          "ref": "54837d60-3a39-49ee-be04-79899be37fbb",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9f4bc006-9967-463e-83c8-6c00eeb09c68"
        },
        "item": {
          "id": "8fac3062-c00c-41b8-ba6a-dfedd1c84a1f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "021a8f7f-2c7c-4088-b3a0-32053700cac5",
          "status": "OK",
          "code": 200,
          "responseTime": 1645,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e8ec26-71d4-4669-8438-26581177db62",
        "cursor": {
          "ref": "8f6aee0e-5d8d-4b23-9e29-f09da3e03bdd",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3965429f-b833-40bb-96b2-faf982d570cd"
        },
        "item": {
          "id": "93e8ec26-71d4-4669-8438-26581177db62",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "36edb55a-a5ea-43c4-8573-2740a44c8357",
          "status": "OK",
          "code": 200,
          "responseTime": 2108,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6283b88-1212-4119-9a31-87e66e92ea57",
        "cursor": {
          "ref": "394f4d99-aea0-4d60-bd9a-c99a9fac6603",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6dfd634a-35a6-4934-b9d4-ba03df7133c1"
        },
        "item": {
          "id": "b6283b88-1212-4119-9a31-87e66e92ea57",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f8e95969-3af0-44c2-a0d2-4132cc96a04c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b6283b88-1212-4119-9a31-87e66e92ea57",
        "cursor": {
          "ref": "394f4d99-aea0-4d60-bd9a-c99a9fac6603",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6dfd634a-35a6-4934-b9d4-ba03df7133c1"
        },
        "item": {
          "id": "b6283b88-1212-4119-9a31-87e66e92ea57",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f8e95969-3af0-44c2-a0d2-4132cc96a04c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b6283b88-1212-4119-9a31-87e66e92ea57",
        "cursor": {
          "ref": "394f4d99-aea0-4d60-bd9a-c99a9fac6603",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6dfd634a-35a6-4934-b9d4-ba03df7133c1"
        },
        "item": {
          "id": "b6283b88-1212-4119-9a31-87e66e92ea57",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f8e95969-3af0-44c2-a0d2-4132cc96a04c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "74bda971-d8f5-41a6-8db8-3247ca33517b",
        "cursor": {
          "ref": "b44a322f-5fe4-47ca-9e8c-c5402d4c39f3",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2447df54-ff70-46f9-b7b3-3c81d55db3be"
        },
        "item": {
          "id": "74bda971-d8f5-41a6-8db8-3247ca33517b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a7669022-6cba-42f2-bcff-c4d2176dc479",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "ef8d4d31-f3ce-41e6-b6ac-783f87e426cf",
        "cursor": {
          "ref": "80d574f4-d4ca-4941-b0e4-54555f6b95d7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "15a6a58f-e615-487a-bd17-04e5ed2591dc"
        },
        "item": {
          "id": "ef8d4d31-f3ce-41e6-b6ac-783f87e426cf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "73530f8b-5ee0-4fd7-a79f-ce07453a0711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ef8d4d31-f3ce-41e6-b6ac-783f87e426cf",
        "cursor": {
          "ref": "80d574f4-d4ca-4941-b0e4-54555f6b95d7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "15a6a58f-e615-487a-bd17-04e5ed2591dc"
        },
        "item": {
          "id": "ef8d4d31-f3ce-41e6-b6ac-783f87e426cf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "73530f8b-5ee0-4fd7-a79f-ce07453a0711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "cd945487-a8fe-464e-b62f-caa3598d47ee",
        "cursor": {
          "ref": "e49a4ddc-e81d-4bf2-a9a4-2fc88a7a6054",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3016e990-7a82-469f-8e99-4bac7cf74df8"
        },
        "item": {
          "id": "cd945487-a8fe-464e-b62f-caa3598d47ee",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "068293ac-4c8f-4b1c-b7d3-413e270ce0f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 134,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "66f5f9f9-b9fa-42c8-a337-756b86b6d9f6",
        "cursor": {
          "ref": "6b37c359-bcbb-406f-ae41-7a529b366389",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "472c3774-17a4-4390-8af1-26a21e0361d2"
        },
        "item": {
          "id": "66f5f9f9-b9fa-42c8-a337-756b86b6d9f6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3e4fb509-040a-44ff-adeb-d2c55a0379c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "66f5f9f9-b9fa-42c8-a337-756b86b6d9f6",
        "cursor": {
          "ref": "6b37c359-bcbb-406f-ae41-7a529b366389",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "472c3774-17a4-4390-8af1-26a21e0361d2"
        },
        "item": {
          "id": "66f5f9f9-b9fa-42c8-a337-756b86b6d9f6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3e4fb509-040a-44ff-adeb-d2c55a0379c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "98810c25-a151-47e9-8749-abbfdbf06fc1",
        "cursor": {
          "ref": "be286823-5db0-4096-8f73-0ff78aa3c9ac",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "cdfd062b-75f3-45d6-9056-b43db6390ed5"
        },
        "item": {
          "id": "98810c25-a151-47e9-8749-abbfdbf06fc1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6c436ef9-b46d-4803-8061-f7ccda0a8583",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}