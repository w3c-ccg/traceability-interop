{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "de6bdeae-326d-4155-b9b4-046fe75e9618",
        "name": "Clear Cache",
        "item": [
          {
            "id": "cd245f3e-ae03-48f2-bec9-af56f42e9f0f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12d1e99f-9919-48f8-bdf9-76c123e2514e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "550df5f3-eb3b-4042-ad94-bf9b898c27a0"
                }
              }
            ]
          },
          {
            "id": "441a24b0-51ed-4d3b-a02e-a10f8e452a83",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32da022f-c61c-4a96-a48d-51da3e22a070",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "06460848-e3a0-42cd-8b65-2e70ab174e8f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e396265e-5ae1-4aa3-b286-8487884d0816",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a2bec038-13a7-4cf7-9d79-e31d60e19d4f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49f00935-8d64-4b2e-8df3-970da17ef5c5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce1b1346-6c94-45c1-b370-665648ee2249",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "316ffc76-e004-46c0-a217-49483684601a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d92f1e23-2c11-46b1-97db-7431c0a466a9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6f658ef-e677-4f6a-811c-0c222b5eb95f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02e341d4-04fe-4dda-8c9a-f464276af514",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f989a60f-9c42-4134-ad70-b78e36a30a3f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8dc63dc8-e59c-43a3-9272-3a2abb89d659",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "88c6a184-ff0b-4fb4-a7b9-3bb26045d4ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6d5a318-67bb-4396-895f-205f671b11b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32fde809-f09c-40ce-a806-16e141e085e8"
            }
          }
        ]
      },
      {
        "id": "d5b90dcc-f348-4aed-95fc-6253614ebd2b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7e92841b-e067-4a9e-a456-33aadccab1ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b459514e-1ed9-4f06-8627-db9d1cb40543",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bd8bb249-ffd7-40cc-9ad1-5169bd577b03",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e462a3e6-2d59-4e1e-a73b-9d63c66f49e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "768e1c8d-6390-42d2-85ca-640b18fb4f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a36c64-9997-45c4-b583-e9033b8da869",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8341ca0-a785-4564-9c5f-f29821aaeb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9dc6aae2-5da7-4fb0-b98f-293b575e0bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f192cb-11c6-4d4a-a185-a333d166b81a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743e3988-9a7b-4261-bddd-aa63a42d0361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5e2b62e-eb9c-4255-89fd-5fc7afc1c8c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e4f21dc1-ce90-480b-b656-6284899ae630",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b92d606-7bb8-40c9-9541-6415679cb2c3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d4411d-10f4-4062-8f11-33f3ba1a40ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2266058-8347-46ab-8274-1119965aa0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04490077-3ff0-4771-9c72-b3c2eb804bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107a3cc7-0208-4238-bdaa-a559dad81d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb5d773-0b0f-437f-b8ed-ec0538df26bb",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5b249b-6235-418c-b9f0-dbcf1fda12d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d16359dc-13e3-4358-80e1-7797ad9f567d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1c7697-d9f6-482b-ae59-7ec20f8bf203",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0763d872-2673-4632-bb6f-19607f6eee63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2986f36f-37d1-4eff-9ec1-2f3467ebc39a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "499ac225-4866-411d-89b5-891c8a0173e4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00125f56-fbaf-4e96-bec2-774adfc41ce9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "381660b7-0192-422e-b156-c5c7189dc552"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd026caa-fa46-4c3f-a4d7-251702d48b83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "652c0e4b-7787-481b-9f7e-4ccdb2978533"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2733ac7-4fb2-410d-82fa-fab10f6fabf3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6039e742-14a3-42a8-80b3-91d47149e177"
            }
          }
        ]
      },
      {
        "id": "f0c8c2fe-120a-431f-b34d-a400c2bc34a5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0c9b3240-1d93-4782-a98e-6f8c598677f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c4b9cf0-179d-45a6-aab6-c5928e80a3f3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bc676adb-00b9-4604-8ea7-8fc81fcb83ed",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e6e2c3-00aa-4e7f-840d-21e6558265c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb6cb4f9-f29d-42bc-bc7f-e84ef0987166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543f418f-6431-468a-aeea-67d5efb3abb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b1b80a1-c168-49b0-a16f-9b2768a0dbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497def1f-053f-483f-821c-af72948a488a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a956b457-5bea-4a00-a7b8-989ce75d2fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccc2a9c-cd3f-44e9-ac41-bfb394b4af5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f210d61-86d9-470d-8040-cf9475e022ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c28cc5b8-659b-4ee5-b1ee-ddeb8af74a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83da2aa7-cd2b-4186-9b80-cce8655fa5ff",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69cf323-d38f-4743-a831-32a0bf06d305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5fdfff-cfde-4efc-8ea9-667849dcdfdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ac955e-045c-4ac7-88dc-67dcc404997c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b6b18a5-cff5-412a-b15e-339b2d8ea026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3978eb32-a8ff-43d1-b5c6-e56045227f81",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1139fe8e-449c-4a63-879f-9f862e5cfe83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187195cd-dab4-45b4-94a4-0c9d8074ce8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29b43c7-7953-4bcd-aa6e-421216701341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ada9eac8-8c8b-4dc4-bb63-45be81b48247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0e42c0-4d8d-4ffc-8544-b8dde3f20bcc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbe7dad-b16c-4492-b112-c3bf34249412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde98144-dc3e-4947-9e81-0c4755403ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67df788-d122-4659-a045-3909c1da0200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38728dfa-0bb9-4c70-884c-459152444246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a08fc0c-f6e8-4e2d-8a0e-f6b1375d8245",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adf3dd5-c52a-487f-af45-68fa112ebc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cdc67a7-3dd3-485a-a3ee-078342d30eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09eaa68e-edd1-4d0f-b518-f0c65f7a82dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a894f25-bef3-4aaf-b23d-8ada087ab950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3587942-1d26-4c8e-b8f6-9d232ae647e8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757a6e36-a21c-4625-bec5-c4825b658783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aedb0e98-cdcb-4af4-ba43-0de6cd743811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb708bae-e40e-4fe3-b6f5-322efbd8cd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e4c3608-b088-44cb-81f0-62e8836fda68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b715549-bc58-492e-8bb7-8cc0d5f42785",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bcbee8-047d-4c5f-9a9c-eca9d664ad7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bcd499-3931-43aa-a18f-a5746db05583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b464e8ba-1e99-4f3a-920f-e6add374d644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2019ab6a-e5de-4936-bdbe-1fa09ed36a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d777abe-f461-47e5-bdd5-122402d17ec3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd3b5bf-f840-4f05-8be0-9f7dc7f8759a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b2c350-c908-41d8-903d-63eddf02676c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcb9d78-522f-4b64-9535-421b8470f4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce0f10d4-0c7e-409c-b23b-cc68a405d700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f5002b-4f77-4398-96dc-b92a90be2466",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2be4469-211c-4daa-9331-b556e94c8fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94f9c8f-6f35-4a4d-a0f8-55f3d7db6550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a9f05f-4206-499e-8deb-3dddf56ee996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c69e3d53-7d4c-459f-9172-5cab26649f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9102b2f6-64a1-44c1-83d5-3b5136951a87",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44db8d47-6b3f-4434-ab16-110bff4c95aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8043a0-d32d-4fd9-941a-315852c611bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a7691a-0bfb-4c9b-b624-c33db8337c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b1a49b1-c889-43aa-829a-30d820a766f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e17ada-5d3b-44ab-88ba-4e1b5291975c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7927daae-e9bb-4c16-9afb-e54e6a7d6e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4caeb05e-7e50-4e91-94ec-7de71d7c1d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98aff849-b354-4339-ab1c-d2b115f0f416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a68b700d-cfd9-4833-94f9-9ec7d5579dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9096f11-16ee-4709-892c-18c2d9a2d6e5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f01298-b441-4712-a89f-4cc6b3b0673a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494cc072-8c1e-499b-9a28-431f47bca530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51712f25-6791-43bb-a515-6994a754efea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4ed5ab2-c19f-415e-b176-a72bee369114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41230e88-15be-4f0f-8f1c-57f6091614fe",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f08237-a0fc-45b9-947e-ff5f2b6851ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98446d13-9690-4573-97ee-a4140210572a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ab6f27-751e-4f3a-971e-3fb48c9e784a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efc28bb0-77da-4512-8b77-d46f8fc71a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2d5a54-10bf-43ec-b7ae-7b29c76a255b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc2f659-57c4-4e3e-a84d-88f16e1cb5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39ed791-c397-4574-a2b0-de14af0efa5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a53bf1-08e7-4f47-838b-648c59ca2840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a34ea12-9578-474a-8a19-e82e90019eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37dea288-aaaf-4066-ae12-a84ad416e822",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477807a2-83d0-4a28-900a-c85beb7c909b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab01aa0-836c-4f54-80b9-ba89f2a4fa76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfc9f6e-bbd6-4efc-b87c-74900d635367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d01c4f60-d4bf-4509-8307-299791698afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868c3aee-b66c-4c06-853a-9ae09204ec49",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dceed9b9-7c57-41d8-8b8e-92f85bf03f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba6f601-7f7e-46fc-b198-30ed14fb1b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4690d3bc-f4fe-45a1-bfa4-9367c6455bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd25d99a-157b-4f20-8461-5051ae95e4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8faee3c8-478b-4ead-86f8-bc63271eb983",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "593401dc-3bdd-4d35-ae15-74a6121ea525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d252b2-0872-49fa-bc57-6160324e69cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56864e6f-bff8-4e4d-9036-7a1bc1819517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "73ccccf8-e3f2-48e4-9bf1-c21383d9266c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca86d53-5965-4450-8c19-58f03d666921",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f64c542-cf57-451c-9dca-36d7cec83b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8776f868-2e3a-4d85-9a65-0f27ad7bbc96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd71569-8843-4192-ba02-cfb08b422a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b658a3f-cdcb-4bb7-9dac-65b375c4fdee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df9797b-3552-4ad5-856f-50acb0455ea4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed40f564-4b51-40be-83e7-2faff063f33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a528db61-2585-49a8-9d46-48822ccd6dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5649f37d-61a6-48fd-ab31-90d6b0e903d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45c99725-6621-437e-8f18-4529eb8e4663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24d09c0-5a51-40d7-a225-d0624c660b66",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab94949-c2db-4624-9105-5df2e8896707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7219a22b-e11c-433f-ae50-8b594ec00965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a47572-a8f0-4d74-8563-02ea563ad262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf8d8630-ff37-4413-956c-a6bd7f1ff5d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3576a65e-b14f-4229-ba5b-ff86f08f12a6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0597cc7-7bb7-46f6-bab1-591dffae3162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32153fd5-7a65-4880-94fc-96ae603205ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c815d9-cffa-4184-a2e8-532196707fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db605b8d-806c-4c7b-a545-94d83cb12138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc13f0b2-b641-4da0-a29b-a9d3e73a327a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165b24d4-e026-4610-a422-5d828704935b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558f6bdc-52c2-4717-8a1a-63b1b40cdf89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e926adf0-920a-48c5-854d-606bf46a88bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b052fee4-fe62-43ee-bc95-520880f5cff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db5de15-ee68-4053-8b72-488fdb063a94",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d3c719-14dd-415a-b7f4-d84ede5856e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc0da65-e0fc-4e87-bb90-883625600f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad346580-550a-47e0-a5d9-7a5c81950441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "847a107e-01d6-4217-a1ef-0e25a0a8b7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9acafd5-c992-409e-892f-1ca2f2b728e0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b16f10-a1cc-4775-9aed-69c24058c199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54aaaea6-0f63-4a4a-8f8d-3866134f969c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00ad8aa-e67c-46ba-b724-19c411b8b212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc76adaa-8bc3-47ed-831d-5caa295ecc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab91c49f-d879-4152-b39c-afb201fc6b78",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c205a4-66f1-47ab-8cd9-7fe1999390e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a58d248-e648-4a27-bb80-7eb238498b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eae06ab-af6c-417a-a0a2-5beee76c6577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4095e5-9f48-48b9-8d5d-9f0ca17456e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d62a71e-a14b-4476-9717-9c266523decf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16766eaa-5e9a-412d-97a9-91fc9df11a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fd8e1b-fa31-4d05-8f01-1234f98a72e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d31ffa-4165-4925-ae37-7bfd1aaafdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6809d85-4563-4531-9367-7f5c5172d96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72c36f2-284d-44ce-8049-1ee7ccb76e53",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28ec24f-190b-41ff-b1dd-da210f6b5d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3421e95-44ba-4041-a556-48ab40bafba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd606c57-04dc-4c0e-abed-1439335a11cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e43c3c1-63cb-462b-a5c2-803d2c032bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506aebb5-be99-4f54-8211-992cf665c183",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ca2c49-831a-412b-9cd0-7593be06f2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "542b4adb-2743-456b-904d-8c3b3d2fe65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080d6f81-9b03-4061-9782-e7cf19c4c25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "741de87b-ab2e-4226-bf9b-85773ecdda9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bfd3d9-9441-4486-ba87-01c92130728c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b53cb26-fd08-4421-9c41-85175ad6b444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5367686e-b51d-42be-a4e2-a1ba5cf4315d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f880583-1d6c-4f5c-97d0-02e1402494cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4295e453-8764-4d20-a40c-2cec7a35c851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c91ee9-aa2d-4f4d-bc3e-08445cc10633",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a970761d-6325-4d5f-88a9-9ba985dce86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100bd119-7efd-479d-a639-67088a52fc3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef91415-5e26-4785-a922-42408575b668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4ab503-8614-425b-acff-3c855cdeb504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472d449f-5188-42e9-bf57-3c14e1ddfc2c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe64492-153a-407c-a739-27dabe96c1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8315dfc3-4e89-4a0e-b9fb-5fc64572f8e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50111fc7-1f13-4bf6-b02e-7c3a5b8228f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54fa1322-cca9-4fa2-a73a-48abb35fdd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546ebaff-36cd-456a-b305-84574f8def6b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31497895-bee8-41b4-9533-76219170083c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1daac303-97ca-4794-9425-e297e216c2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4adc7d-e31d-474a-832b-bb46962b9136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d79ba9ec-3d10-4d3f-bf27-219f4d80ed75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16293207-8332-41e4-8a61-337a5c1bea29",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc0067c-995b-46f1-9d05-5f05e1a905f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce6a5b9-e644-4c44-959c-515ad7ddf16c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae0b8ad-3cde-4501-841f-a85b45401564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aac5af5a-cf63-4910-80be-9bf48e2fde51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6d7071-50b2-461b-9d71-a7e5f1a607e2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a07277d-9239-4154-8ea9-b273d90dec62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b16c8d-50dd-44f0-8280-8fbec968e0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96be03f6-95a6-465b-b90d-de346a314a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3a5668-dd9e-4437-abb2-1d2182e588e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ac2770-ebd8-42a0-89ab-0ee6b3ce8a50",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3391ae1b-55ed-4417-afe9-29707a5eb2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35a77108-f1a9-4870-a362-1d4cb291cc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65777fd8-6dea-442c-b366-1b4e8ef2aaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09c7ee60-b1e1-483a-b9e9-52f2be9eb67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7478c2c8-903e-49d8-b9d0-67fadc871b63",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c738b97-73b5-4232-880b-3d11ff0cc551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9eea6a-6d1f-46ba-9e3f-7375c0429ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5e5dbd-e95d-4346-aafa-1ebd5646190c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a8ee51-44db-4dff-8729-f26392728694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a22517-abb3-4bed-9818-71f1db8b8524",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8452e7a-4093-4bc5-b6a7-9e7b83c7838a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e35261a-eb92-4a55-82b3-78a791bb33b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7042f027-8e20-4dca-b823-2874d3bf166d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b2d3f4-d81b-499c-9731-33b43cc80380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a83e27-9bc1-44d4-adb1-a0f44e2fe0f2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba8f2bd-b2ef-4513-8e89-66d7cfb904fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574da662-0f2e-4537-ac46-40146cda95ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a6e8cd-378a-4db3-88a9-f284037bdcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac7b703-e3b7-4793-9a94-d4fead43a841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7071a22-008f-451d-bfe2-030276b5d28c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a439674d-d881-4146-9640-dedc761c5dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba6ef46-66ed-4b12-bcd0-eadc4f567ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff8efef-b3bf-413e-ab68-703b8c745bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9487a995-3054-4779-a9b5-d9d4d7e3f4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe013ed4-6062-4790-9b6a-e208aba38ec2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee013a7-7017-42d7-bda3-94afd8da9468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfde1181-7e6b-49bc-a8a4-3da0a0a53401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84003c1a-ce84-4609-8207-873845f94aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff30dd92-209d-4190-9e39-331a063a3052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f24a13d-b237-40ac-9df3-7c98188ed433",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc8534b-dbc2-40d0-89c5-6efa11d146d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b6ab3e-5886-4c31-960b-7e9fbc1270c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be740356-897b-468c-8101-561f9ea78296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "94a193e2-30c0-4dfa-a2b3-0f3ea731919f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65373899-de6f-4ef8-b711-8f1df4395e0e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58efe6a3-49da-4864-ad2f-d19b7b5e8679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ecf50f-ca27-4e0b-b95f-5b61976c9aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f734896-2737-4226-8dcf-847ca52bd808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b959a0b-13b6-4a32-ba3e-8251804ddf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d948c605-5c95-4244-b8f4-29e582c9baea",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a99df9-4f54-418a-8673-e743505d07f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b0021a-4eac-4531-8bff-b044cfb76cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6261e4e-fdec-459d-9af2-00a7a32179fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe68750d-52f9-4984-b81c-0b6aa776d7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9035497-3928-47cd-afe0-32f1e949ac46",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d419cee-f068-4e8a-87c3-6c7e840baf83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2b058c-bfe3-49ea-be0e-b1dabfa00353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be512d5-6890-417f-87fd-73fefa832364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f7fc74-9a7b-4fd1-92a1-fb3c38f18ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf797be3-49b8-42a8-ad62-8a18ef2005b1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95caa6f-9c5a-48eb-91f8-e088461cb061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa6c84d-f12c-434b-b12d-16aabd601124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53669a2-3a17-47b1-aec8-777073212279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97d45e18-6cec-4259-9c80-5f5f468d9055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf08929-f0ea-4648-8f1b-7997bf425b48",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2283b0ca-51e1-4914-8a6d-2a0f5272a0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a0ed39d-e1e1-4a85-aa7d-e2a3c7d0e26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8082f4-ffc8-4a46-b8c5-e6beb66d9875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61ec98d7-359b-4b51-8470-4e48f6a4a334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c347ec26-6711-4e89-a473-9aedf1ef8fe1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84886236-1d99-4933-997d-9a14484e5495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd3fb01-5768-41f1-b2d8-311da862d88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74daa6d9-c7a7-41cf-8689-112cf6237b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4398d18c-6e26-4a43-b83b-37c97ff8f9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831d9732-4794-4448-854c-423719b97a24",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c63388-7d0b-45b9-aee9-ab33b75d9367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ac7600-6168-40f6-9bdd-08281f5de2fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3b2dcd-ce4f-47e5-872c-1fa6aca4a372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19819503-1946-43f5-8776-4fa7e46aedc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080e4c7c-5c9f-48c0-ba84-afc6cb3e1504",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef265aa4-7715-47a5-836a-b2e8787d4c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b137f37-1e31-48fc-9372-c9932a522e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cbb775-0be3-42d6-b40f-36f8b503dd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c35653b9-c877-415f-bdd7-0e4c0b1368b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafca6fb-1477-45bd-be96-2430ea41abc5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bda144-d6a6-456b-aa12-f2dd632e3e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a62a8d-9066-44a5-ba0c-ab0a8633648f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de32f2fa-5265-4dc5-b94a-ea2a87757a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "67b551b5-71d0-4614-b893-f62cfcb68a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7e4564-7bea-41e9-992a-a604103ac7b9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45acbad-083e-4414-8d1b-606b00f45f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0afd37-1052-49cb-aa87-5e44199ed19b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b97ecd1-5beb-484a-a57f-7de3e6bcf1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dffa1f5e-9813-4ddf-89d9-0b230703457f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9d8baa-5507-4ce4-952d-0a246a94fc74",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a87897-8eb2-48bb-b469-894dd4e3b85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6f60dc-3c51-485e-b318-b88da40df98b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10b2ab4-cf10-498b-81d0-9ada9b452466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5376eaa2-0308-4f23-92e8-f72ab36e2ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235d3b42-56a8-437f-aa20-5064e4984dcd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3809b6ac-a390-4229-a04f-fca57d9a8b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a38511-811f-4b1c-8b5d-9fadbca1f731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a707e8d9-0cf0-4f7f-b638-1bd4c783bcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ec2fb0-0207-47f6-83bc-818e19657c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a01e0f-f2ce-443c-ae81-71dd016ed19e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02210f1b-d5dc-4cd7-9b5f-a48398c1fbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7328ef80-bcb4-4e86-8f24-d362afa2fd49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a63970-b896-48d6-9882-119d8e97de2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e7fd1c-7bbf-458c-b7e5-a1d918bece6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f33602-2064-4e47-bcec-50fcf3e73a8b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28097f2-0025-4edd-b409-c425fe37ef43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1dc7a95-fd34-4bec-a033-37469bc3d4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6718aa07-70d3-4fbd-bfe0-5cb7902cb602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8ed53c-6421-4ef3-8218-f2c84b13a760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209c0e1d-3ed9-48b6-af34-a50d5e5edabb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885b51b4-3640-4dd4-b033-536d9d5bfbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14c2be2-6c49-4551-998d-5ae21842442b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ea81b2-9e28-4d97-91b7-ac929a69a25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0644f6a-e2f1-4c1b-bc32-4759122e31a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7381941-35c8-482a-9831-441f165b2282",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6019eeb3-d46b-4621-b2cf-1d26c0b4f816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e56098-aca2-41ea-905f-6a201449caec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb0045e-f1f5-4f89-92c1-df9511d5460e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "deb489de-611d-4dcc-a0c7-46c4df1bb561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051089a3-fe63-4f1e-ad3e-74ce43613f83",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628d70eb-9596-4bbb-9cc9-21a30eecca07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3ecaf4-b320-4238-a0ad-44d80664350a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf184ec-b6c5-4c14-9a1b-fb119d69b7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdaff2d5-0f05-47c0-afdd-624131bfc8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e124cdcf-855b-4328-8273-2aa83eb43ac1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5010aa83-4549-471f-b888-8a352364d8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5097438b-137c-4cae-a04e-ec71c9dd38d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4027479a-ac34-4168-86fe-16f9910c8c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0355767e-4221-4073-a247-3aece462a298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5528a6b-705b-4b49-b8c7-8b4455d70b37",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584873bc-bb7d-45d5-8ae6-fc0142d0b7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82ef9da-45ab-40d1-9df9-aead0f76f23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51728d0a-b61b-44e7-a465-f0de0d19d6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "144a2e24-a5df-4e97-bed1-508f77068605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53c8e6d-6066-4bfb-b33c-a4fac057af96",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a59e4c-41f3-4bff-b14b-0f65344f19bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab676940-cec1-4ed9-afd2-af2ffe9d752c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57423d1-eef5-45e2-a909-9d5e2cea8864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0f0a64-0b51-480d-9443-3c1171d3cd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d702a2-5850-404b-91df-67bf4178bb49",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9439bd11-5f9c-4955-8773-328395d732cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c044e95b-c6f8-44f4-8d15-e68392d54547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce696163-c704-44c4-8a56-6f19eda60dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dea40c1-8905-467d-9c86-1918b16b4475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c64f510-8984-4cec-8df0-356e5815ed26",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d064f989-a0a9-48ca-9c60-9588cbc3c6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1743a0cf-ae17-46d6-beb5-11ab4039650b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e415f607-4478-432a-b744-8cdf3082cbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea29be7-bc28-4c67-b0f7-f2e587bd4bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5305e52-664a-4d6e-a747-925f78895951",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e685e8f-86ab-4663-9ba3-5d8d78c33960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c9d4ce-95bc-468f-8e2f-65d66134d652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eee6e7b-4074-431a-ab5b-4c872d023618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53a327fd-fa3f-4ea1-8170-12c87ebc66e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1834061d-2ddf-4b4f-97c4-3725fe8a392a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ca2ad0-7c54-48ec-8aee-7dd40151668c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078efba2-22e4-4498-889c-0a0660b895e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96edeb4b-5ce2-4ca8-a885-a087fe4c4bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "410ab237-5014-4bc4-b76f-9b5642db5f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34d338d-5a84-4f65-9a11-87f105a8e7ff",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad61c24-c076-4322-bc4e-434691699b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7fcbca-6b2a-40f5-82b6-ce83f88fdec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6f431f-f159-48c5-ae14-775050351cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db88e0a1-6304-4ea5-b372-5bdceaf029be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4ae0e3-a0e3-440d-a297-e82331b46b15",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6763127-2d23-47a2-8993-6274a3ccfd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e728ea6-3eb0-4a89-9bef-c978aec22114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165fdcb3-1a8f-4c36-9d92-214f0053ef0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d578c9e9-19e6-44ec-8361-e37e7c1cbc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4672fa03-6915-4883-97ff-78aa01ee5770",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5b47d4-7541-4f07-94e1-816fc8a4c8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993ed4d5-d0ae-46a5-ad62-89eb41f68918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40825e72-933a-4671-9487-d2dd2b1dfef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "37f9e8d7-d3c8-4657-a72a-3688aa4421c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9f4e5c-035f-4130-8c17-12748b701003",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4710ad14-e54d-489e-9c87-aa2ba5c3d1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d172ec5-b3be-414c-99f9-dfa1e7706d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6a1823-f085-4267-b84a-6b3c8604cd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32ea61df-58a2-4604-834e-7d3d591ece49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de793a92-746a-46a0-86fe-eddf9ec7dda5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e206c8a6-1e04-44af-a72f-f8041aa066cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9b193d-643e-494d-827f-61fa6d2bacf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4907daef-8330-478a-bea3-5475061ca44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd1098e-3f2e-4b18-88ef-d3f9cad6b95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2793baa8-885c-4de0-b8c7-545b6a838877",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fc23d7-6d4d-490f-b3a0-6ba2b2d83595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e26e301-d6cc-4fa8-b073-0028f0d62b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1666ffa8-7c98-4d62-bb5b-0a834d4a1dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c2a565a-0e6a-47c4-8604-fbbcfbd5bf22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07aa6c95-ad8f-4afd-95d2-a5a4c503bfad",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1248c1-ba0f-484c-9c1c-e5d3f60e2af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80ff21b-8589-4d0b-8b97-92911887e6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800055a5-78f5-474e-a4fa-b4b43c90563a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccf68db-46ad-4c33-891d-0698a79b254b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f070d0-a080-4a6c-92f3-d2c8f1470971",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b31ed1f-f7ec-4f74-99e6-d8b0cc4ddf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f9fba4-5b6c-4bdd-9754-bbf316c0f9c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6235776-8b18-4477-83e8-47bafd434974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a7cbf3a-68e0-4c94-aa5a-bba7e973e792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222943d5-d4ad-4a9d-aa28-bd8eede4d925",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1206e6a6-4958-4d2c-83c8-dd98abb936c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0a4dda-2ff5-474c-9c4b-e565782df1d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8faafd-89ac-461e-a001-277d6fbc919a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae916f02-8ab9-46c8-a99b-ddebd4591330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1067077e-41fe-4914-b112-16a3138544f4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffa40ca-e13c-47a2-8447-d0c0667da25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bb5339-b338-4b8c-94a0-63f727f96b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57d7da3-d727-40c6-a015-64d57ce9049e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3b70df-1fdd-4f57-8a94-13a2d46e7863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a216bc5-e560-4b24-a68d-ef7bab652162",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b47e7e6-36b1-47dd-badc-21caeb4f825f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1c7a94-6359-4598-acba-4bd7d648ae1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00632498-7997-4e04-aef8-fd92d1c1eb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "235e10fb-9f56-4c6b-a102-67c7fd25085f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d733db-b826-4eff-bd02-a4cedf346ce5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42afe7ae-f3a2-47e7-a206-8d735433cc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1337223d-d7e5-40f9-8762-dff26608140a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f5974f-453b-4757-8cc6-53276acceb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4652c63-c45f-4c77-9e13-647539f5deb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767ffe32-cbed-4a3d-88e7-09b1e6b1b15b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9880e1-a961-482b-b791-3a4f502628c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7168046c-e7b5-4682-ae7a-fcc27316d91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75261821-1aed-48ee-bd95-09218629beea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "218b4418-cbdf-4ab2-a7f7-e4445abdeefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9321eea-387a-4144-ad4f-1c7d0cb0e6e2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258eaec7-0659-488a-a929-22ae6b90f85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57904d6d-6ec1-47ac-a3b7-86a10f009b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4365e7a-ea6e-4473-98a9-1c87d209e5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e34769cb-4f83-4ec4-96b6-254aa36c2dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bfd9cf-983f-492c-90fd-2ee891e70162",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a84b3bf-c5b1-4cbe-bc21-7951a46cd3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a87840a-0e81-428b-b478-946f4396083d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f494c816-dd0a-4606-8c03-912ef5965a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2b2a96-524a-495d-9cb8-78a0feb37c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeaefb9d-c1ae-40b0-ad4f-5bf1e6817de0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8107d36e-7321-4801-9740-ab081462f7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0106b734-3970-4167-9fa0-a08efcc73ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4801135e-afbb-4f89-9855-08a64ab8a04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62747284-380b-4c77-a592-8f4fa26fce1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26a851a-ef4d-466f-a970-9c20268d3af6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4484838b-2b4f-424e-ade2-d5e5f10fa884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615de6ac-5b5a-4a55-b298-0ea157435243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9282d435-e5e3-4f10-bc1d-53c034ad1ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "375e7e81-9198-46c3-bba9-822a413dd497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed5372d-f2fb-49ed-b6df-4fef83af1795",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f3a253-9e29-48ac-a67d-afac5f6632dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d87d3055-496c-4d3f-9057-e924963e9b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf5e82e-4ed7-4175-a260-f56d96ede88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a965184d-97a0-4dbd-beeb-02df76d4089a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137ef702-43f3-44bd-8556-36c9063fc499",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77854794-abc7-41bf-9088-f5ab0700917a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bab5eda-570a-4e0d-b3e6-844d924f8afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06521b8b-fae4-4f86-a401-0ba599a0bbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8300c8cf-ff7a-434e-8590-13fa85d582bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4f46ea-8639-4a4b-92d2-82975fbdf936",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ce8d83-da8d-493b-a76b-cacd711e0a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815125d1-e822-41f4-a5c8-481755e605ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790eb353-7fd5-469b-b363-41b83712b9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c76e34-00b0-4047-96d5-3384283d976e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ea064a-cbdf-40a6-b5b3-0c9fa8c86298",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e0e806-28c3-44ea-b228-bd3201a5a34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42cf690-b6c4-4575-b0cd-4485f8e15fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411c293c-484f-438b-8d27-f6c184fc7450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "027457ba-8091-4151-b5f0-0b1cc08207a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931323a9-709e-4616-91d9-67430555dd27",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a6ddf6-4574-4bea-b59c-1bb30179afcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27132728-1e27-47f9-845c-747510807da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b279550e-8c73-4dc7-9d76-37d841a35a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "981a2327-e2be-4b18-8e25-f6daad76d950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8433d898-4af8-4433-a217-c29c624a0c56",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc58be2-a706-4d81-abda-1655d0d04679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b4d303f-1c1f-4be8-bc99-24163375a9e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da68d89-c34d-4c11-9ec1-8aa60dcff0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3674d34c-594c-4f50-8142-de44c47d08b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2fab3c-f911-42f6-9a0e-bbae13b8a549",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f44a014-f084-4a45-bf11-46e3d7e72a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894f9cab-be1d-4975-b918-a17a77433541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec20d555-b724-4f5d-9f8c-742b22830fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6992b2bb-94f6-4ad0-9c07-41233ff6a49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7826d1a0-72b9-416a-80a6-358093e98ce8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e18e94a-66f6-4727-ad61-43a097e2984f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a13eff-3826-4ea7-a65d-fafe27c7e0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2c7e2a-65ae-48ac-90c4-9260ac8b3ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "017cde2c-5a17-4596-92da-e9028656411d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e57067e-17bb-437a-bcda-e221c1b2969e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf22d5c-6dc5-48a6-80b0-3cb61877440a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ccb4d00a-1175-4f06-8b2d-667fb58e44f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db60fcfd-b91b-4751-88a6-ec8ca3c18cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "36eb95c4-dae2-4abe-96e5-3185b4593dcd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dc262401-95ef-4d5c-95a8-4b432d139fac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02954c28-b953-4f85-bea8-d5bee04f3e5a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d068ea-9234-4666-a411-dd68bbde5e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e320934b-018f-42a3-b877-79fff0c1cadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc16ade-2aff-4b64-9896-320558bc186c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6441f1f2-9a64-462c-9754-e11321ee0d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882a7074-bfb0-4e1b-b942-54a5ef50822f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14f6ff9-8352-4d2c-a5ef-d9fdcf35f379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c01f144-4a83-4806-b90f-abe2c5a03552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727550e3-9115-4acf-9ea6-4a380ca0c0a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "14091bcc-550d-481e-9ced-7a34153fa086"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5951178a-9dca-4a2b-a30d-8b1e4ad8023e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fe763a0-9e40-49af-806e-67a156f28565"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "427e5186-4402-48d0-b4ff-f1e00081a960",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e8d28aa-d151-43fe-912c-0930ea6e2680"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ddb135a-eae6-414c-a971-61dd2416a683",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "81e0005e-a94f-4c5b-ae6b-a496a1a08651"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "907fecce-bc5f-4483-bcd9-bc2c7202e2b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "632f2169-0445-4498-bb16-df377e3817b6"
                }
              }
            ]
          },
          {
            "id": "a8baab47-4c44-4537-aaad-abbaef5f4d70",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7e186d01-aec8-4167-b072-216796751a7b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c468fc45-d16f-4f9e-8ba6-66f0b3cdb8bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e147b0b-2113-4d0a-b65c-10ff5dfed4e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "956434ab-2edc-4684-815e-daf2624d1014",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9ab419c6-e102-46bd-a1c2-e2d9327cef98"
                    }
                  }
                ]
              },
              {
                "id": "12eea246-5229-4706-9e29-27e637732502",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4932ce3-7807-4485-8c1e-10d197877424",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dac25edc-c2a1-486e-9916-266395c0e17a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4399f01f-36c3-44ad-b9ca-d3a850dea847",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c17e6a5-b209-4d9d-8c80-0c59c988995d"
                    }
                  }
                ]
              },
              {
                "id": "fab022bd-da2c-4c2d-b525-741f03db7ae0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03329485-4dda-4f65-a3b3-1da9ca79edc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e52e109-adbb-43b5-9339-d4dac9bcf496"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74c4bf41-5a13-4305-b618-5bbe35ac6089",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bb7d0e19-c807-4427-a572-68e53b1f84fb"
                    }
                  }
                ]
              },
              {
                "id": "2dd1155e-8c9b-4af6-948d-97981b3d73cd",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08d62b96-08af-467c-8d50-436cbb5e2f4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0beeab5-190a-4c3b-8c89-a213f0331d66"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0eabc949-fa13-437e-b99b-a1a2f17b1ef9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d71dc885-9335-4a74-88b0-221f87d76890"
                    }
                  }
                ]
              },
              {
                "id": "91e2b21b-2347-4da4-a931-6a2d4431e157",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a2d9df1-9af1-4f80-b603-2cece240a011",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b70c6515-0211-4524-bc8c-fe8c1a8a2827"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eca23969-01c0-4662-8456-25f45717c30d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b6447812-717b-4ae0-9f9c-d7dee09236c4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fe78c042-088c-49f7-bc84-e20365e775ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62792316-4ba7-4a6b-994d-d27efcc9dd06"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "41888589-70f4-4900-a815-477837d34751",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ebbf8dc-7eb6-499d-bb99-c013ad5591d6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efb557b0-229a-4c2e-8a87-ebb12d61116c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1d06323b-d11e-4934-8201-a885f1f2b60e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9262687a-5dab-41c0-9d09-3fdbf0f62eca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a2544a8-1561-4816-99b5-ee8867b059a9"
            }
          }
        ]
      },
      {
        "id": "739cbbed-5fbc-4113-89ba-e48883d75cfd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4168d948-1b4b-42da-bf0f-16e622e41aca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10caf1d9-899c-44d4-a1a6-629f66cb8fae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "05ef9fe9-a6b0-47e9-b418-bc4dfb1cadab",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c7c16f-7821-46d0-beff-c373914c9744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b64de2-04e0-4821-8bdf-84180e7b8d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e0532a-cdcc-4465-a0e5-7fbc86cc85c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7800d72c-cb80-4b60-b3eb-2a9c9dae8353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080f96e0-da5d-4851-853a-ecdd59808e98",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9ad7ea-8052-43a4-908e-9764f23cf170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420530be-fb3f-424d-ac54-15658efc2ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a65800-da8b-48fb-8ac1-b04c45eab6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8a18cb-e183-43a4-945f-d24e0f184b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f8c383-b024-4a2c-86af-793c643f0dde",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8d6cd3-79e5-402a-95da-6b99a1445589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621ae272-d94b-426f-afe9-978d1dd5434d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff5b386-8983-472e-acd1-bbe5a6405126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8250a8-3b79-4a1f-bdf2-e781fcaf3ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412a0f7f-3ac4-4bef-be78-03c0c9d550a0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e86000-3efb-422f-ba84-2878c04eca79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d14e2d5-787d-4581-9ac0-e22ff0da5220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8ac1d7-b41b-42c8-a849-c90f9a4682ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "03454c5b-3b98-490a-993a-14487e57808e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9845961-c8ce-4677-9755-f5e5d3c37827",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17dad1ed-82fb-411e-b20b-c17b68b38972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9004e164-ab57-4eee-84fd-96db160aae56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84eab0db-87e4-4ab8-be6f-f80803c945f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a467af4-44de-47e6-baf6-090878fd023c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2be9ec-0aaa-4fc8-a5ee-f872c595df79",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8594771-5ad0-4ec1-bb3d-84d7575e7735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80097d32-2812-463a-8b73-d5df4c04fa19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0957b8-7f6d-40c8-9132-ef56b3bf1557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b52d465-de80-4853-8432-f3aae34ce94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a3254b-4e95-4be4-8aa5-ceb450beca02",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9fdff2-08f8-4aaf-9adb-ffbdee27d791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815e5536-07fc-46be-900e-7e8b57c6c7ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd72bfe-8ce2-4e30-bde8-73e086cd6e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d43a06eb-edd2-4aa8-bf9e-32658f752798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3aa6b47-6011-4916-8d6c-94071698e90f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589075af-c235-4947-8095-cc1426dbbc3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a958f1b2-b424-41a2-85eb-9cd2bf9fd774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f6eb69-4611-4426-b760-f8886ba8967a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "004e2de8-b545-496b-a164-c7eb3cbcb530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528720fb-7c1c-4df8-a931-dcdae89b63e7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ff838d-c4a6-4e22-bd22-cda28486712d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7cc967c-ad49-436c-9678-ebdb2bee7e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9896e7-b072-4d29-9070-2a736e183cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2ce78c-e80b-42f5-87b1-5f75144a4b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00f0d92-fd81-482e-84c3-84565bac235a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e2b2ab-64e4-413f-8b8e-04f6c9c5f231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d553c577-3e82-4e86-be23-5edfd9fe96a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52324c8-bf6e-4cd3-a518-8078c61f4c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c05fce-2b19-4d90-822c-3e3d35dd03ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5bc1fe-269d-486a-89c6-1b09a890f69a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1436f697-4297-4660-a584-20cf502710c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbab46c-fd00-4253-bc6f-8d7ebb8ad4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547f232d-fb70-40ef-8d59-02c300c4146e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e1197140-e273-4daa-8199-ca4f49e59ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d71b8ac-6673-421f-902f-ca7a27ed2d87",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4abaf33-d038-43de-8c0f-9f87251b0f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b576a7b0-66b0-4e92-84b6-cc3ed5469ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9891c715-eb6b-410b-ad04-80965e53f22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5878fb81-a775-421f-8f08-00698609730d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23928f2-63c1-4aac-a9ea-ced6e1e8e7d1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f685aa-65be-4804-900e-c8a1b34a2747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcfd4d5b-9a88-48aa-9fe1-a2685bffc017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43438757-1388-490c-87ab-11a9c3ab3439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "912677bd-81ac-4184-baa2-da55c05b1985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50ea357-12ec-4f5c-b977-e1bffeebc7f8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8242024-3a0d-4273-9909-93e34132319f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb673fba-65ef-445f-8669-3e66d4c65e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5b7f65-89c5-4fe0-b512-450586979d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea7e6dca-83fb-42af-9990-6f55e791973c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371bd229-83ab-4536-a0e9-47d98581b2cc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721f6372-75e1-45bb-aef4-ed6741e3f05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9271f62-85cc-4dbf-98f3-b2a67dfff381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2943d818-45c3-4200-a13d-3c513a9cc9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "044847b6-8baf-48c5-b471-4881fc795345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fef921-1aec-4252-9ce9-31f86bb351df",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556a5965-f4d9-4056-b9c9-dd49559e4976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4aca6f-3539-4d21-826b-079b8574c047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892180d4-3c50-40bd-b074-13a575b742a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c997354-5c53-4dac-8d85-021c99c01fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59320ae0-006c-47d2-9c88-15b61d3fb7b5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7df692-baed-4274-b4dd-df384c775aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b76ecb2-e2c1-48d1-bae0-8573e65859c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9c55b0-b0db-4e29-a375-edcc5f17e5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9dc71fe-49b0-4d20-9002-424bc757b3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd016ba-4201-4f82-95a9-ad40de900e7f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c279f6-c4c1-4df5-b8e9-319594ec2aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77a0340-e2b6-423f-80e4-e860282346ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068d226d-2478-47ea-8c62-9f6fe821b291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bfb957e-2807-4982-918b-154ca19ee48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bb7b98-4d50-4cb9-926b-3c7783a92600",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0c9a29-cc24-40ed-b970-e3d0e1a9f79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "005e755a-97fe-4371-9b25-01753f0ac94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb2ec68-1f27-4105-9fff-166818a866b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f134b109-2ff0-411e-b99c-6c9028390431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df00591-dabe-4ff9-b413-bbfb391bc28d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e374f85-f7dc-4e2f-b155-8de150a2830c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0581df72-2322-4bf5-b911-e59fb0573aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec59492c-ee2b-4f49-80eb-0f4f18035f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c40116b5-7619-4220-8656-0fb7b30d110d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8c2623-8080-4254-994e-3672535776a5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5632546d-5c42-4d13-8c4d-2aec176b92a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d51d7c9-dc52-4439-8d2e-d115a7c21b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e9a834-457a-4f05-b9dd-22016e406944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78cf7e2e-bbf1-459e-9000-75dfe9da3aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af3c562-996b-4673-a895-fde05c5f4a91",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61abb079-e3ef-4bf7-a886-12176230907c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b24107a-c378-4e07-96d7-81460d8a06e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104f550a-1691-4fd0-8c1c-270bc1abf94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15a82f65-8fae-4708-b267-3e04cb21c38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32f43d5-4c37-459c-91ad-08166ca863be",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a055e30-db9b-4aba-a0dc-72769224811f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01301923-917f-4939-9323-c02d21803e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc597df-0ce8-400a-8f83-cbb04c8bfe25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e652b2fa-4c8e-4ecc-8fcc-f31fe24b2cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df860ac9-15e8-42f0-ab82-7744e16b1c7c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d21be93-2f47-4a8e-805d-0ec4856f24a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504aab55-01f2-4baf-bfd9-856147de2cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5713c442-7dd6-4fbc-861f-592386c055a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6da14bde-dcfc-42f9-b33b-4c687fc03e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631c2f3a-e589-49aa-911c-f5a19798ff37",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4f6f74-5f97-4ad1-9a2c-48b1d577ccc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38cfa387-0d26-4301-b3d8-697e7c41ea49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6c38e4-5358-4e0f-8f12-379f25f93ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4baca3ce-3bf7-4399-acb2-2e423bb5ab96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0833a2bf-0901-46b0-b983-c2ef0de49f2d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5968e41b-76a5-4421-8c30-fa6b6dbe5f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63e1418-9e49-43f1-9a5e-4b1d4fb478e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b3ce33-5176-49f4-85b8-f3bc2e15c2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "808aca1d-1e90-4b25-a63b-e12f9a8214c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce802e22-c283-4633-b032-826857c639d1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c118603-e2d3-4124-8d70-21b0aec28446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94b9c5c-5dce-4d92-ab55-0983a2e95023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557c6d19-6782-429f-908f-62d1f0a84169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26e8dc00-98ba-4c06-9d73-bd16dcda3551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a795a531-94ea-4ac3-8e23-99c127ca3766",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c055de-d6fb-482b-9128-5559d3298606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f073e8-9025-4f12-b4a5-bfefd88ef9b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80cbb50-a1e8-4781-b44f-ea857dae814f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87f09eb5-41e2-4826-9d48-2c764c689d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75880ebf-b1c3-4484-b47f-97c1459c9da9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e413226-14c1-412a-a649-e545f0aa2059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01542186-e9ef-436d-ad10-fc2755b36c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d26466d-31b1-42b4-80f3-3227b5edd350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd8a859-bf8a-4b88-9ec1-0005aed1268c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5633f445-1469-406d-853a-d0e70801416b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302f9491-3615-4179-adb9-b8a3a71048a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212a28ad-a474-496a-9448-ef4720246bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1ce966-b0d3-4782-9e10-ddd5a24fcbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c91eff30-39da-4df4-8a3b-2ab763d974a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d5d0a3-8056-4735-88fc-f3562007e1b7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54fa716-e77e-489a-8fb7-b84be488bcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd5418c-825f-4609-94ad-3aa12ecc8568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dc7866-d00d-40cc-aba9-e443775d2fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21be91d5-8524-4fed-b256-ed691ca5b2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35b6672-9cc3-4d3f-8443-34d6589e3d53",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2d211d-1735-417e-8c4f-0d1a69bf5727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4ca3e6-5d7f-434d-bb07-2a288b8a9219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376aef92-9ede-4944-aaa2-9290d1846102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60313f04-b03a-4266-93a5-5ea13a5b8a8d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "539da166-1c90-40ad-88c3-f820dbd76606",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64cae6fb-f892-43be-afc1-3eb3abeef818",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c78ec28-b3b9-4cef-8bbe-acde73df4107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7abaa41-8f65-4827-a1ad-c5a9ae130c45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12e79df-b91d-4cf9-b8d2-c0e0f12ffc88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f95f9ce-c6b8-4353-b17e-067d6d97b993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac37242-4fd1-49cf-a40e-a1e9f9a6c593",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc7b503-da26-4074-be43-b6b1cbd4c61e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0a1ef428-14c4-456a-9fb4-2da884066b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a18d0b0-4d3d-4449-a4df-157df352ce88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e8c53e2-839c-4204-8462-8ec53f55048f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9db968e-365c-45ee-abf9-40514716e141",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8c07e3a-a16b-4477-9674-e7391b7ef153"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2074c32b-eeb3-498a-96ea-8a2cb08a9bb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f449b39b-f5d3-430a-b018-f95c3125e631"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f5ceffe-c4ac-435c-ae28-10e0f6ba7cf1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "99cae471-146b-44c8-ac63-857943b8d6b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c3f8c65-5856-402f-b730-1e6ce893456f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58300176-49ef-4876-8c66-44fad99f5d2f"
            }
          }
        ]
      },
      {
        "id": "e80f4023-31fa-431e-add0-40e0e2449c52",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f772f5fb-e954-41e9-8488-b93610469f93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1583f111-7fef-4254-b254-de64e2f63c05",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b3799397-34af-4576-9088-d697f2bffbbd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978d0453-7dd0-4725-811a-69c1acaee04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9cba568-7b2a-47ec-91e0-ae89277f4187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34fd48f5-30ee-43a0-bef9-a517f1d1b717",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1e7d4d-2caa-42ee-9888-663f04756609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672241e7-552c-45d5-8747-86d487ee8532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe782e3-7429-4bc1-9a6e-206861f9a904",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ec9213-b2c9-4ebb-aeea-c6209c6603bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde3c81a-5ecd-418e-80c7-d336d58bb6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518b3988-83c6-4e49-819c-e052f1227678",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f491255-c22b-4d09-b1e4-62d01488e827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c6299b-fac7-4634-b6ca-09ac2e8da449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35244f42-9249-4dbc-b56a-943864716434",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bf6f0e-1bc5-429a-9e3b-1d716e9ee42b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562aaa98-631e-4b70-b0c0-44cbfeb7aa7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef8795a-48df-4dd8-8457-d661a6b10681",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2847444-175b-4f22-b50b-40d6f466456f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558ffb0c-e54f-4562-8035-523e2faf709c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d0cbe1-619f-4239-869d-34ef30192ae9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea36dd35-d9f5-4ce4-a288-94b1ac1ad924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be27d97d-f29e-4f0f-bf6a-3e006ce46d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8800ecf1-71cc-47e0-9344-8066c159c30b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22df4a0e-4b10-4b93-99ca-1701179bc480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a10006-acc8-4b92-9dd0-fe713feccf5c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f93512-c6e4-4480-a0ce-a382ddff99fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "328225c8-9200-4d88-b9cc-5981cdc3108c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afaf13fd-2a4b-4c29-9429-2b9e910b1b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8892c91b-eebf-4d8b-bf14-f3d28b9238c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd90272-a20c-4bd0-8db5-55d6f9d0488d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2221f03b-6344-4081-b8ec-fc62d2ae7462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3293d295-0685-41e6-b2a3-a98936132681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36141a4-579b-4af4-ac55-15425d97726d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "466437c5-b945-4728-aa6c-381a11ade421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5ecc95-eaca-4fc9-9bc6-d0191bf32515",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a2c140-39ab-4869-baf7-574f836d0588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acd2806e-c68b-4f75-bc9b-bc1766bf31fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bec6342-6e32-45be-9739-47374d2fa7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b283bc-96fa-40cb-8f0a-3d852ef30c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0be34c6-5b05-42f6-b890-96b693ecb443",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a11df2-3399-4347-b893-c80c57a2a334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b46bb15-ca27-48af-8505-049383bec9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148119e6-0de0-483f-8568-7914cc5826f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec87ef5-8499-4ef6-9db1-aeb3dd270494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c19c0e6-84a3-4a63-b8cd-05970d49c33a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df48c355-b621-4843-b89c-0d57c3150c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e9e30e-3a34-48a6-8761-b5440fb9a83f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be9f15c-dfa2-49d0-9796-28a1f86a4a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e893612-4d80-4ecb-a864-1de4d779d690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6005890-31d3-4262-b82f-66b3c083c9d5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02872b11-ff24-474c-90b8-9f7fe6c48db1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cc11622-46aa-4644-8166-85f6c641b933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b9e542-b4fb-4c1b-b199-4404e5a10ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e920a38-37ce-4944-84bd-2e35daf2cff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c033fe-a2cb-4943-badf-afff4f90f6a4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11db859-f74d-432d-8426-82ce3577843d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "803d0e43-3990-408e-b952-c6201bf4a6c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4aede0-fb12-4f13-a141-f3c660fa00f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3264785b-d56e-4348-8d59-5cd3a7006f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a15b06-e481-4177-a095-6d013482fe2a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95af2eba-27a1-4919-964b-d627dd3284ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfb5f776-f424-425d-a5aa-bfa87fee3121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be188664-4048-4206-9da0-2b8dfa633060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abfcc107-9d0b-44d9-bd0f-4ee05464ccc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372cd5b1-6a73-49e9-8fc8-fd01dd3ad860",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0e2373-60a1-4722-ac01-c9612460b1a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b965cd19-727d-41e8-b534-b54e9bd21d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a227c9c5-5cfa-473a-8ce7-814671775a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8638584e-8404-46f6-9286-ef10a5bdafbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b77b5d-3f49-40d8-b357-8522318d0259",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85627351-f46c-40ae-be78-9d5f91342322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b456f904-8411-40dc-b14a-526238a55229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b3c50a-4117-42bc-a6e4-ca2fb035dece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d144d8-59b9-4886-be46-007ecd0b15e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dfc0c6-b53a-45b5-86bd-ae40d23faa74",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef14ef02-f7e3-4ae1-be38-f1b1f7347996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93bbe584-da78-4ff4-8caa-71ded798760f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6940a8d7-3f5d-4a3e-bdea-a5dd663a7393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674dd004-f22d-43e7-bbd1-b36b90b965fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828d7825-8453-4a4c-ab24-c800374625e6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19694ad2-f9df-4290-aec6-a22e2b454c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc333ba-9440-4469-98de-6c408bb56ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74dd5d95-1317-466b-a20a-60fb81c84ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f056f64-115a-4a8d-b89a-c432663ff70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b0e136-37b3-465a-bfca-3cc120c7991f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73b124d-435d-47d6-8d63-e09306fd814d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9a41c9-9c82-49cb-a7e2-5498c79e12fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0734f45e-038a-4481-a61c-bf168b69ce64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0eebf6-fb7c-434a-b82c-723af4548a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fbddcd-9af6-4a53-9dc6-124f64f566b5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a4ef2e-e87e-4a11-8ae9-90c6f798d0e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "159361cb-878c-4a36-84ce-67d00d7973a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "717254ad-69a2-447f-9586-d9c8448cf478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04abc31-ef3a-45b4-b89a-225d222b48fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1abdc9-9f8c-4039-983d-261a53b2ee1e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a14ff8-c4a3-4f3c-8502-b287bcecd544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd41eede-7cde-409e-bfbc-87c130f89b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1117f379-df82-452f-aa99-b6e235703c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048e5e98-a0d7-4227-a873-1400e5adf54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fdcb7c-da24-4167-9667-e8cb3d1f5da5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adba552c-2b47-4ce6-ab60-d0a8834cb7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a538484c-7a09-47ad-9613-1ae1b8afe4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cde320-13cf-4004-a1e5-ebdb99520c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6cc2406-d7a5-4a10-941f-ccb6df397740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dea28ef-47ee-4c7c-8c1c-26b64ff9aca6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ddcc78-8541-4505-a62f-8e41cee16413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9664b35-51f0-44de-812f-f0ca9fef2ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "003c8cca-d81f-4fc8-ba4d-07d37696573e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8739a16f-c351-4da2-b67d-8f9a9764fac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915af7eb-7b48-4217-8c52-692b9f9851e9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ccbe3a-cedd-4b4e-bac5-80803e300c6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56e6a77-d940-48dd-8ba0-7e142ca79f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a06533-50b0-4fc0-a0f0-e9b9525528c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edeccc49-8423-4df7-bc9c-2e6151a1ccf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd217c3-f4ce-48e6-a6cd-ebc0c5301cb6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24cdc8d9-c986-4aa0-9be5-fc050bbf6493",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4e5f893-b247-483e-b718-f4341ddfb838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d01729-a079-4fe3-8953-50440f841ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "342e7494-7899-4d82-8b9a-d2018e885e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7bf3505-88af-4502-ad78-cd0c0a97674c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc56213-de02-4072-b6b0-0b91b299f910",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fd4b0f4-557e-4afa-bff5-6e578e9e062e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7731cf95-cff7-41ec-8362-e5e08d5ad207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4551403-eff6-474b-9727-f0baad09703b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50d73dc-acd5-4cb3-9982-061eb08ac728",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de4d06e-d074-4b6d-a57b-c696e94c8b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34c931f-a8e9-403e-9a89-83e1246ec1da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c95fbc-80a4-4a9f-b6d5-29a73df8f8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16518f63-245b-4e8c-9d63-d8786e8cf919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56885ae9-7e7c-4045-9e21-eedf19f00390",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e938d7-775d-40e8-a043-4f0da577f9f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ae453fc-cdfa-4975-b298-7cf695231681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e5f814-0daa-4171-8b32-026edf81e382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d4f381-30d5-4c8f-930e-acb9c9d9afab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b0bd3a-c99f-426a-98ff-4d01edc4cf32",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e5aeaa-8ac0-4943-ac81-c109aa33cd25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7366f1ac-12ca-4e20-b281-0e39fe578f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7fd7ff-96ad-4d92-a92e-51019b51a9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181d6035-805b-423d-bdd8-1a0ed46c1f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda8f899-563f-4fa5-99dd-4e298b451f40",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2198d444-2b35-4d87-b7b8-40abe866d1ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b221681-82f9-4bce-8521-48a58604dc31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1909f635-dc3a-44ed-80ea-7409e7a0f51e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2840fdb4-87aa-4cd6-8533-c1a8d6b15d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45dcb0a-6bef-4735-a9f8-4cc14896ad0c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fc71de-6d21-47f3-a40f-2aa9e9229f5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a73e5a1-3dee-4b36-bc2d-5aee4a76e965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d27158-572c-4a6f-8e6b-b7fd7ce3d821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616daebc-3361-4212-a829-dabeaf63f4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d812a4-2b65-4bd3-bb27-ab2e22387ba6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef93a4d3-c517-42ce-b0d0-fb65f10acf49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff53bde5-3959-4cce-a86f-6c63559260bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f453f1b0-600c-4453-a4c5-d6adae1b4f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d12e59-708c-471a-ba00-0c979fc3b230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a0153a-a013-4173-8b3a-ef17813f6daf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6291c983-83eb-4457-befe-80aee2bdab55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ecb7eef-2934-4aea-a064-822cc1dc173a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c21758e-331e-4d79-9602-efb444af55a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05356125-c609-443f-ad2c-1eebb2296d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8731984-9ea6-47a3-9bef-3ffe576ab045",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6c691e-f016-4b1c-a988-851d6c456bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d632b8-f0f9-42e9-b641-08257510ee29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0422f068-f33b-4a6e-8f7c-915e84391865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f70672-52dc-4490-9b92-7f2ffcf0db39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2353d4a3-f8d6-471d-bc3d-e927109162b7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84ec392-fdbc-4b5f-8ab9-dcd7e27ed7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a88d9ce-1236-43fa-8abb-3c55aa012e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11175b85-a915-4f62-ba28-be600f1fc7ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5963aaa-cdf8-4864-ac24-9b906a3a4414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5036599-c96d-4401-a821-ad514a7c6bc3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fcdf3e-66b4-448f-b9b8-910a36471310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52a18da-89df-439f-aa5c-5a182c34d658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55889a5-60c8-4709-a8dd-c400aa397d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864149a8-1896-4b2f-bcaa-36ace36adaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1375f6c-a0da-4aac-afbf-4ce6f5fe5b37",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd5f308-48ea-4d0b-97b4-0969637f9b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499d735f-f50b-4dae-949c-88de2b6026ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbd7949-149b-4530-a99d-ca4b382add6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04db99a9-fa34-4213-88c2-62869f4c61ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275768e9-f67b-48a3-81a6-be6c16895a0a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c707664f-fd3a-4899-8c53-ed707a72c4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01e2567-286a-4d52-a69a-f2768423bae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2e93f0-1235-49c1-823c-eb570b193a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e43f8c4-d493-446f-9316-21611573bd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f47679-b2e7-43e2-b978-a29041a0d6cb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6570e5-91c2-40d6-898f-fe887025fa2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412b24a4-4d24-453f-8d3a-08215d006767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0270f0e5-19d1-4656-bda7-109269a18545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2ede3b-8c3a-4ff4-815b-5cfe193e7ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d8b2f6-1413-4ad5-a1ac-d92e6d943f23",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26f756a-6bea-4c5f-aa65-0409ac322eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60717b6-696f-48da-838b-e4d996b52355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288b4a85-66aa-45bb-953d-bbb9f680c73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6db899e-da4c-4e3f-8e6d-ec60bffc0614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adf9abc-da9f-425e-aa32-fbd88e7c69dd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e42fe1c-d81e-4ca3-a99e-20c656d8fa41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0ad40f-d789-4a11-b2a4-58d8dc9401d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c3c9e5-b7f3-4fed-b6a6-8fa6f27ea163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f86fd50b-beea-4228-968e-246198552fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3287a3f-8496-4f9e-b120-82d3251c0f2d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd13f48-7270-4db0-b29c-9f76bbe477dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d88ddf2-43ed-45f7-963d-49b6336de52f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef8d9bf-6504-4f35-a1d5-7a438f4b7983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccef4621-1367-4786-8743-4d859c26a05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf62b2a1-f5ae-44ec-9e48-8837aa2a6662",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6ac682-34d2-4b68-abd0-ce549c48e668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f6fdb2e-1d51-45cd-b3c3-90a76991d2b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b486dabb-cd57-4803-b174-105123ad7d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e78568-edea-4b45-93d9-e0d2a8ed9c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41586d32-99f2-48a9-b6e3-2466adfe169e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4987bd-ee7c-4fd6-999a-2e9d01eaa551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0392d8e4-93e2-4485-9b21-1432fe58e713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df7cdbd-2bb5-4037-b184-d84f5199f25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b57afe-54b1-47a7-939f-dd80ff4cc8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d429e712-37f2-4787-b87c-c43b85cd6ae3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a05c8c-00f1-4cd1-aeec-76f9a5181371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2aaf6d1-1236-4953-98c4-fc27ac129db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b535097-29a8-425a-a073-67546aab3dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1d28ca-23ae-4e59-a6b4-cee2080d7228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a437a3-41fc-48e6-bb65-fe18de8ecbc7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1de9f61-dd5a-41a1-a906-fbc4fd0c845e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ef7ea0-54be-4867-8d1d-953f36b579c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2176d2f-11c3-4ba6-a249-7debae500d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b139b0-8bb0-4927-8759-0fb8ebb45077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e72639-f27e-4a50-9d4e-c29aca845b99",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8984ca40-dfef-492a-8bcc-a1e68370f345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f2b15d-d244-4e33-bde4-bcdc012e3614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cce490-cc0c-4d86-af83-d7fd513d544b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e2ae07-f22b-4b0b-94ac-6fa0cdf1e3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc6938f-aa20-4829-9591-696befdc1222",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d0d9ff-b4ee-4e3a-b45b-757f6c253a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3fd5e4b-d801-4718-bee4-fba35da80d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d04707c-f07b-419f-9efa-1b1519594be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99e7ac9-fb0e-417a-96aa-1af5205d03b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef119c3-fcbd-4557-9f28-fec25707ab25",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2709a967-64a8-4f20-89bd-f439bb9ca2e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a74d4a-03ef-481c-be23-706fef85f344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f127ee3-3ff8-4fa5-a633-a55d734d9fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "226af2ae-a53d-4443-ba3c-c434e746bbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5a20ba-2833-4347-a8ac-7717adf654b3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d0c4b8-705d-4642-8afc-b9e3baa2afd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607f6baa-1370-4186-903a-133de8e82c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2fce06-70e8-4748-9888-21fa7e147f0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d350bad7-b661-45a0-a918-50fc3c1ce43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9172f9-650c-4d3b-aa90-daf7b6874f2e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae8ab4f-1b4f-4b5a-be55-3dc48210a35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94224cd5-3740-4e59-8866-4053356b900f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b31bf9-1ebb-46d7-b55d-48412dc77f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e322adb4-44b6-40fe-bf58-fc28c7a08e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0aab51-174a-4313-8012-2e1944bfa9cd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fdcf58-04d2-4bb2-b22f-926ff62b687a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3998320d-ee82-4c9c-a7bb-f5d3e2b3eee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41aad4a-1dc5-4140-9b18-67f92fcf68b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58dfe8e5-6246-4d30-ba58-43b0f3529626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848008e0-2ba5-4330-bc1e-61829995c00e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e4f511-83ea-4d7f-ba75-74ab9512d29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ced63e-c660-4b69-ae28-9caa2f27d39d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cf965e-ec87-496d-be34-e70631cdb136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac9fd72-5326-4caf-bf52-a7737328fb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d18e5ca-4ab6-42c0-a80c-533cc9d40a2c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3045c3-d1d8-438a-a630-432b8d8beefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f2d29e-6759-43b2-b16c-e72e39cedd1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e7cab4-2b27-41c8-ac32-3960fa163d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9351f739-f39f-4713-ab70-d177796a54a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdb7052-f3c0-4220-ad28-a81d3ad327d3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817038a2-9cae-4fa0-b702-374085daa60f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963d9ebe-9dc3-4e71-876d-a2620e409055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493db9c4-8b2f-40a7-bfa5-9104b407c3f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749d7ff2-a098-47de-8a6f-4378edc390e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ed51b5-db42-425e-b221-7810911c3102",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d4a126-467a-4f11-9a9e-19910b893721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92972f9a-371a-49b7-a6a3-cf680a82f7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6477c6-1dc7-47c2-bdd2-80672ec453f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80bf81f8-f5ba-443d-b416-b398ccf78881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad982fe-42e6-4174-a562-479772b14f19",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd36db78-f730-45da-bf61-20cfcda4e83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49ec158-fc95-4e0e-b903-00d96454c8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714aae5d-7daa-4524-86cf-856bbaec7153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f8478c-f5d1-40ff-824b-ce5a9fb54624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813e7fa7-e87f-471d-9d87-3c945b4908f4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8a7221-464c-4e6b-ba6b-fd209de67d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f89021-0733-49df-b37d-7c6cbf80fa75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845f1078-f61b-4189-9cd1-5059e06ea98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75fcb2d-6cf3-4eea-b23b-a2f5a7679512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34311007-756f-4c9e-b769-ae8a64a20721",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d591501a-1207-45aa-8688-1903400aa05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054c48b3-0a76-4e51-a5f3-518c8a60d416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d449ae-50c4-486f-88ee-21ae2b6c4a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e848b368-c39c-410f-80c9-109d37671339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216b1134-1365-4abd-b8c9-0b88c847f5fe",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7162f7f6-88fc-411b-b816-e9ba577f8724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8149ebda-b4ca-44b2-9987-16a788edab0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb35aa58-22ba-4a4e-b1b0-bb893a0e8476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5d11ff-2420-4af3-9c34-163617d16642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fced37-8967-46d5-b852-4d2bcce71f1b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30f8f58-1438-4c52-90e0-3e2dfe713a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81020011-8c4f-4492-bbd2-bd0ca8c0c863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129c2a73-b70e-49e7-8af5-6fbfba4c8b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fb1bf9-9750-43db-a75e-80e62772dd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe170179-1c0f-4130-b18d-c8e8477cfa1f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42157a24-f455-44b9-a00e-5966f41a25c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "442881d3-2578-43ce-bf3b-58e860e51953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19abe080-115e-40ab-84f9-9026ccc3664c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bf85fa-2261-48e6-a669-69b13bfabae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8ff89b-5c65-4a05-b1e1-205922c4495e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e29b6af-0c72-4329-bf76-edf41d9b0aa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c95a9aef-ed24-4637-91c2-6954fa1cba49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c024824-4a8f-4353-a92d-8685bdbb0181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e47734fa-e1dd-4b8b-9f40-143574a0c4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a30bc0f-211b-45e0-af40-c7a15394020a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a15b17e-96f6-45e7-ac72-3185a07178e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06feac9e-606a-4fc9-9392-733e0d265aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fba83ba-1c3f-4232-8c63-c65aed2d53ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed388a7f-cd7d-4a63-891c-76760a758174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2dcf48-219f-43df-88dd-83520b89c00c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84af94c6-1887-4309-9fa6-c6c81de832aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549a96f9-ce71-4c01-873b-7ac1c1444849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe66f5d0-9cda-4be4-bfb8-e506f6b48def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b47c02c-34d0-41d7-bdec-52062da86aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e950e010-c52c-4e06-a648-58b0f2fca91d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c689696d-7a61-49f8-91bc-c8b706fe6001",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20f91eb1-0cdf-4751-b854-8098f1da4b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2ab772-8a97-4e51-86e4-479b853f233f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b8b695-7cd5-4c96-8e8b-82af3817589f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a473e2c-430a-4a1e-befc-bbc00e526403",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d748b2-7db1-4b99-ae80-2808a81a1ad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a256314-9315-4d3d-8de6-d12fe86861f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6129d0-1595-4e1c-8fb2-cf662a87f41d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10903e01-c5ce-4218-9c2c-eff74ae18569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1197a5e9-7d62-45ee-aacd-7168f47c895f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa733a9c-8b4f-4179-9cfb-a68ac9a4bb2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3503fb6c-efd9-4765-8377-040e93b3bb62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37acd6fc-d1be-48b7-afc3-12141ce87dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b496faad-65b7-4982-8605-2b54d44ea2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04156c3-b2c1-4eb9-8597-40a441ff4ee1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571d4e3a-fc59-4313-96d7-ae629e47f266",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a62b12a-91e1-40c2-bca6-ea977b6148e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e6b16b-746a-408d-9f95-77178b4106f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3921b685-be50-4ea1-a682-35b5c02bd89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4969709f-660f-4f7c-ba59-a88013c6387b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d5a33f-b025-46cb-826f-dc0763bdda5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1be21de9-dc82-4003-86f6-b7c949039f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4741378-c9a8-4c40-8a3a-5baeceb1d745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805d52e1-58b1-4f2a-b388-193ce66aaf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fe5721-ecdd-4b6f-aa03-3c34d17de9a7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411c932a-628b-4873-9bc5-bd3d69775eeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b0d0933-2db5-49c8-bbc2-bec60d3fef41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67863c16-997d-4907-9305-2e02455d6c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ab20ee-34bd-4249-b64f-5d0f3962563a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64113b6b-4629-484b-a378-3d1f69d1b55c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b617246-146e-4ac3-a121-8fbe6305656f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7756e63-8869-4eb4-ba59-591acb4c1bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df39c5f1-75a6-423d-8e2d-5b6274a5a238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede6736b-c5f9-436c-a5a5-a76b1d739797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02981e76-9aa5-487e-b649-041b94908161",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dffe42e-7ebe-4e54-aaac-fadf49366c76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b15ca242-46da-463c-9c26-9f5bc9228d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d401a93-8ebe-4b9a-8d61-a9ad3cda4d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9b18d9-d994-4bfc-a9ac-d18793e992e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf70b00-b929-447b-a92c-a6263954b346",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63011354-cc8b-4986-9d06-5d91b3047616",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29e1a22f-b072-4400-9c52-763186a28e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5174e54-8687-4d83-9256-f4c2166bc7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53eb8ba8-f9e8-4329-b128-0fa7716b6326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ff7aa1-8305-496f-8482-468ea316bbf1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a992af7-bce9-4fcd-9f40-c1ce4c98cad4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f98f505-ccaa-4aa7-a6f3-edb5be1dfd3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b073701-dd12-4c45-9e5e-32be39080678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af25b87c-cbc1-4559-856a-520b360a5b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57504179-41ea-4715-8750-99eb432f0fdb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d6fd52-cf45-47cb-af49-42924e993691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef4b4f2-fa52-406c-9cd5-b0b3bc3ef1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "128e7c2c-3283-4a17-b9aa-8cfd3bab0fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d649a166-dfbb-4c7f-a95c-03e8005ddbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ba49f2-90ea-4c72-9d09-6f3bdf1609c4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46592f40-0d20-4e81-8e8c-4357238181f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2509a157-2104-48b1-8ec4-0afe58d2f1d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0706825f-02db-4293-b643-906db17f3adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1abcca6d-e60a-48d1-bff8-7adc88ebc50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924571d9-e191-40be-bed2-4704a5827236",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9083a798-fe4a-45ec-91b8-2a9cad8c1c67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aade923e-025a-4219-9b19-260c88688de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f609ad28-27c2-44b1-b093-5eb882bd7d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d069cd-8dfe-4c13-afd1-fdb491e1b3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93f1ee8-53bd-4487-8b54-f051601c0873",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f9eff5-d448-455c-a9e8-29cb57b8f860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "721ed198-f843-4b98-b7b3-26963a5ba85d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97e628b-c9e9-4533-a22d-1746e8d45443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51998d2c-d687-445f-b6c0-c479345f93ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc32d31-22b6-42c0-9ec9-cd890c11e338",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e0ebb3-eba8-4e62-b69b-5ea3c21c5036",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aae2508-ce6a-4cf8-afce-5b5afb1f6c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ce67de-2545-4721-bee6-a458f10b0f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61712c70-b244-45cb-bd9d-d3ff5100392f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5daede05-8c04-4910-b420-9094efad49ad",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea04afd-0ce5-403c-9b40-e9abf4828a42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c52fa3-9787-43fa-a785-3916d86594e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c089f256-f85c-4977-bd6e-a4b9197f8f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53fdb8e1-d908-4e20-8822-60040fda3cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97dc9549-224c-47d5-b8f2-9fa11b1e96c4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b9bd04-f0e5-4326-b1d8-828aa3262925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6991b8ae-b946-4a45-8885-287694a279bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890259de-97fb-4b46-b0bb-dcac5a48bddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553a8fda-e5b9-44e0-8b61-e5969d263c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2584eb-80c8-4dd8-bb03-4f2081e5424a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abe658c-404c-4392-9f12-8640db826fef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8db6154-7e4a-4520-833a-a9f4ef84169e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e00f1d-d9ff-4e14-8f7a-e3904de37c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ceafa19-ccc2-4c7e-a876-8bc34772e329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b870b08-b5a2-4c80-bc87-dcd36b4bca11",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb37c37-40c0-4277-9e1d-8f768387d997",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31a5225f-4dc4-4d21-bc93-57dbed2df3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "375a2baa-7f46-48c8-aebe-a8e3d9a94435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f113cd-b87c-471d-bf3a-341f113bd5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab2a3eb-dc73-4fdf-bee3-3369557b7a5b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1fc067-7bd5-480c-8f4e-4dfccce45c2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48f69e61-cef6-471a-9515-f3211f7e3d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3e34c0-9e1b-4819-b1e6-0bf59cf54620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d77a8d-994f-408c-a996-0f44c80a1cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56150822-ef55-4af5-bc17-cd907fb70853",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d735c02-7a7d-44e1-b255-0501e2d6eec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57689836-b8d4-41cb-9332-a7ac46463827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c55dde-434d-4e23-b631-7d57bc902d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bae7c1d-70b0-473f-b00f-8e193c196bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868b5bbd-1497-4189-ab42-f86aa4547b49",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39261bb1-e53d-4a68-8a89-eb9022fc27af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b594789-9a3a-46c8-9886-28fd20291959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b3c9ff-4202-4103-b51c-35a08b111935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf225123-4f86-421e-aff4-8b49c2e9a430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767e29b6-b211-48fb-b3a3-a23fa11ae8c4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cc74d2-2d31-4fcd-9cea-559f686d1c58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e0788c6-ef68-4ea3-a7e3-347ef86cc4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c88b17b-6bec-4c31-83eb-4630a597f951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b34234f-a508-463f-8236-eb1b534671d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c33fb72-c8ef-42dc-adb3-743bf51ba71f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062f0c18-9f56-4484-b91a-906b83858be1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fa03878-e7a1-4cb5-b1e3-da0e6e98a451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0830f6d0-328b-467d-bc8a-ab6be8a76461",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb57d11-eb06-42a1-bfd1-4d9c5c12019a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed406f18-0b09-40d1-a4e2-8e0de559ad43",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1e815d-75e1-4ee4-9c26-914f8c17d2c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f537c2b-c19c-4709-aec4-5dfc5f28b6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3814b866-0872-42e5-b013-3c0b7c89650e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72ac081-d90b-46d1-a2bf-20686e8a34b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d7dab3-8dd3-4ef4-b850-127db3fabfa3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0ee178-dcdf-40f4-a2be-46a22e0add1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8a20887-23b6-49fb-849b-884ec218b315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd3c08e-cfd5-4699-83f0-7120ad9db478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5afd0977-0c70-4e10-8a4f-c6cb9508cd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44a5d3f-0f15-4f82-b185-486f4de0b2e8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cecbb11-cf39-430d-8191-8ef8c99fa176",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8927076f-16ec-41d2-8f79-ede297392c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf480fd-f600-4c7c-8cca-a3fb65c8b81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50232341-892e-4c45-8417-44ec3d7c6afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565df0c5-e4b7-4026-9a48-3f68f95901a9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa581cd8-db36-4d6c-aa22-6a5091708bcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b49d3be2-92ef-4db3-bfe4-22e259433007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f7f316-6abc-4494-97be-89ad5002d21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9d93f1a-057a-442f-8410-8dc3cad0d5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2814272f-2f66-428d-a65e-2d52ebc8a37a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f92321-5cdf-4324-b7d7-7bbf97476ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22ab7fa1-75c7-4a31-90d5-5dd56b94c4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f88ebf-b232-45e7-8a48-563a59303efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6731b72-ee5e-46cb-8785-d1f7f1762802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ce9757-18a4-4e04-8f07-d75fac2528a9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28162ab6-38e3-418a-8a27-8712b162002e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bbd4727-721d-4f45-a49c-2f1426f1f864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d94aae9-be32-4e57-a6e8-fde988fcf3c2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2486f88-37d8-40ea-821e-0f61391f0000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b249b861-0894-42a9-b1ef-cc6a6d6a65b1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc30451b-8611-4ff4-9989-d29d4aa45e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "853f0f93-f30d-47be-a5d2-7ea4654f6f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c589a47-9843-4ae2-a7f5-60e50ff1c9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5704636-a9dd-4a79-aab0-d5f2a0d1fdf7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b823b099-0ddb-44fa-9ac8-9f8d0701c028",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e450864-4564-41df-b868-c24fd6af7ead"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "edb312fb-eba8-448b-b4d0-2bb5e916f8be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "880439fe-ca08-4a61-91b4-1abbb7b3d9b5"
                    }
                  }
                ]
              },
              {
                "id": "0b3be9b9-5168-4b00-a538-77e4e6ee5333",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee9fd8dc-4542-46ac-89fb-3122114b1cf2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4821b33-4219-4d2e-aa63-a3adb63d8dd9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2198924a-34ed-4fd1-85c1-8e76a00136a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95439bf-8724-4657-b13e-c5c9c875996b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "147277c9-9955-41f9-ac21-5f082bfd6334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954504c3-556f-4a02-9d24-0bbad5033716",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be97c37-b459-4882-91d0-44ad174bafb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dde5a94c-833f-4d38-a5e7-b40b89973505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b28f04b-1eb4-47e2-9de1-094b681b3d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cc4bfdd-5206-4e36-9ceb-0a042d23192f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8b98eb2-9936-4676-baad-49d4f12da225",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ad776e6-b833-4eea-b776-eb859de652ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb7c7f1f-b613-45dd-a5a6-9763d3c0290e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ceb3e7a-91b7-4bbe-a3c8-5435769ea19b"
                    }
                  }
                ]
              },
              {
                "id": "67038627-3319-40da-ac74-4d59e8f1f405",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6b579ff8-041a-43b1-aeeb-2175de9b30d9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac4d71b-9b01-4466-8162-885a12e038db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "52ffacca-46a9-4bfa-b98e-71d920971f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55604567-b683-4c21-ba82-517028ed6f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e689ee77-4326-4484-a04c-eb773ff21e0a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5fbbcf68-92c6-4624-89a0-29dbae06c743",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cfda5bd3-eff6-4263-adea-b02ffc717a96",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8d174b2-67ea-4d30-a7fd-c88ec1f0a598",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4b671637-649a-42f6-93bc-3f21f65e95be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd266480-3b05-4422-90d0-6e18b1e83860",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b7a0610-b1b1-4ecf-9ecf-533aad67eeab"
                    }
                  }
                ]
              },
              {
                "id": "628bcdda-00b8-45af-b399-4c4c88a18ec9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f01817e9-eddc-484f-b324-686c11d816b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2cbc9294-e3b2-4935-810a-1dd596ca54de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4372394-5f9c-476b-9056-53f3b6f5289d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5876c0f-ac64-4538-adca-c1a040aff5db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db50d814-046d-429d-ac4f-be50cd5149e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "efe2a0e9-8620-4eab-a4aa-a8b0758205e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fff24a8-156c-483d-bd20-117ff65bee08",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff6bd56e-9783-4d2e-ade1-a2da3133bb3f"
            }
          }
        ]
      },
      {
        "id": "1887fcf6-f1dd-4013-ae0a-ff6d7c51617f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c0d88547-d2a6-4c45-b7f3-3c6cd2058964",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e7a1b779-ec25-4c2c-9a1f-71074e78fd47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f80b60e7-48cf-4ef6-8457-f1494b15b7aa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da1e09a-9d8e-4459-8215-ea72da105c2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3e830ae4-cddd-42af-a424-1193dae933db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b219edd-2e1f-40f3-9e80-1c735ed1d4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7952bc32-2220-46e0-afec-0adf5b6c405a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cda9c10-40bd-4d0a-bebd-a1eb5d0b8d82",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdc8b30-0aee-47d9-9935-2658b978dd85",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "85702c93-ad57-4e08-b0f4-658dd24b5044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bc9977-6af3-4130-8152-ef4210021cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0451e8e6-226c-49c2-ad4f-1ba47de27bdd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb263e10-c3df-4ec0-a5c8-d3dee5c16629",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a972312e-12dc-426b-baa8-78bce203a14e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e3e4396-be6c-411a-82a4-617804c1e52a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4e848af-8a13-476f-b2e2-99d30ae0d28e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "626fe982-de12-4152-b8a5-4fe7a2cfff42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7cf1f691-619f-4ec8-b6d7-ceaaa7a03e72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73f11500-fb66-4e1c-8242-bd5c3e4fa5ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0dd2e8d7-281e-4c56-afda-b9be1902e235"
            }
          }
        ]
      },
      {
        "id": "784e3464-20a2-460a-b330-c30fd7692ca9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c0e7e92f-e390-43f7-b58f-249d222ffd18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c1a3891-517c-4598-a897-8ff77ddb5931",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f9047fe-6cdc-456f-bdd7-4d8bd7e07d4e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308f4d0f-69ab-4fe2-ad74-6ca055519acc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2cece795-c8da-4009-bfac-a90eecc10962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fc6174-3952-4bc0-bc66-e4a9ad7531e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a5a795c-cef5-4018-b1d3-89f441c39fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d10157-7dcc-4a44-96cd-89ccbc791ee1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3470b6c2-63a9-41b0-a20b-119f172350e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "49849dbb-3603-41e2-864e-5227b30e6e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2560a42-26f6-4d58-bcf2-39d08d864ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a998789-5a35-41ab-9da6-f8582198783c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "269a036c-22ef-49f5-ad76-429728cbb168",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea855ac1-0e48-4408-80e9-e5c8e7d4439d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "114eb2ee-0fb1-49c8-89b2-8092d791ac2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6924b7de-ab76-41e9-bd9d-fa16f7db2ca7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bdcb3c7-8f6a-427f-ad9a-e9f84fc266b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d2d63b48-4853-4779-a425-83b1dd09e23b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb74a6f1-011b-4ebf-bb3d-464e266d32cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3255b6e-ac22-4478-96c1-e3f7fe737eac"
            }
          }
        ]
      },
      {
        "id": "54075062-d44c-49f3-be3c-865dccd96e4b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d94ac76e-7704-4379-877b-19d562b274fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "349f9a66-1aaf-46e0-a84f-4d3c63470d2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2314052-765a-414f-a5c8-3c7a09ef3e82",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09b23ac-bb55-425e-81df-54b8756a2ae0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f57d5522-924b-439f-8244-947df8786ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a83359-46f6-4389-977e-6bd00f1a0a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed5b155a-1a4f-4883-b4e4-7b19f813e696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b080b9-ad01-43e5-a253-bec191d0e4e8",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2898486-864c-444a-ba80-90439f58b979",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b6bbd35b-f569-4c34-9afa-e3199aafc096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2523525-868b-406f-ae04-ed6664145de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "759dd86f-7317-4a83-bcaf-464b3d9cd9a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38eaa823-e210-46c9-bada-b27eefadf586",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d21a202d-6573-480e-b556-85cbf25c541e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6b4758e-fba0-4cdd-bdef-6cef3309bb64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46cdcdbc-5953-438a-af28-b6707803998a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "157783a6-49f5-4e7a-82bd-92582b5f1afd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c053826e-1ddc-4aeb-8060-e7ce557f4cd9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56f4bcdb-78fe-45d5-b44e-7b76ecffd753",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4fd92df2-6fb8-4659-9d04-c33dd7bc6ae9"
            }
          }
        ]
      },
      {
        "id": "d1c15db5-0557-4585-975c-cb9d1a9af7d1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82cf9a6c-66c0-401c-ac9e-7faf7338aa42",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a07faca-82bb-402c-8a63-55798ac6bcee",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "362c55d6-4c0f-4541-8781-c852dab0c202",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2702f3d-2bd4-4d03-af56-f4d8b5fa8cc1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "946ffe29-a230-47ca-8683-62db224a6b99",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 226.82239382239388,
      "responseMin": 7,
      "responseMax": 7733,
      "responseSd": 761.9273616056719,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677458488152,
      "completed": 1677458557847
    },
    "executions": [
      {
        "id": "cd245f3e-ae03-48f2-bec9-af56f42e9f0f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5971d9ed-579b-42ca-9497-675e39dd4319",
          "httpRequestId": "1836f943-e7ac-488b-9c82-43ad6639869f"
        },
        "item": {
          "id": "cd245f3e-ae03-48f2-bec9-af56f42e9f0f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "02cd4186-4760-4530-9eb1-13139a6ff94f",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "441a24b0-51ed-4d3b-a02e-a10f8e452a83",
        "cursor": {
          "ref": "ee774323-547d-4351-a89b-a839717a403c",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "16088707-c033-411e-acd5-38d7db7f0445"
        },
        "item": {
          "id": "441a24b0-51ed-4d3b-a02e-a10f8e452a83",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fe9b2bef-4712-4c6d-b16b-608a65d41452",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "49f00935-8d64-4b2e-8df3-970da17ef5c5",
        "cursor": {
          "ref": "06a3e79f-4fcf-46bf-97b3-196c1db26c75",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c027118a-2149-4cd1-a588-d82d9943b518"
        },
        "item": {
          "id": "49f00935-8d64-4b2e-8df3-970da17ef5c5",
          "name": "did_json"
        },
        "response": {
          "id": "1119f284-04f2-4fc3-9bda-e90c85bd549e",
          "status": "OK",
          "code": 200,
          "responseTime": 320,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8bb249-ffd7-40cc-9ad1-5169bd577b03",
        "cursor": {
          "ref": "c8ed163e-40fa-460a-b87c-4d9038320461",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b1308e06-d6e0-4108-b219-75a5bd613048"
        },
        "item": {
          "id": "bd8bb249-ffd7-40cc-9ad1-5169bd577b03",
          "name": "did:invalid"
        },
        "response": {
          "id": "4f1fe1b0-0c04-4a43-b600-2067e2795ea5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 576,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bd8bb249-ffd7-40cc-9ad1-5169bd577b03",
        "cursor": {
          "ref": "c8ed163e-40fa-460a-b87c-4d9038320461",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b1308e06-d6e0-4108-b219-75a5bd613048"
        },
        "item": {
          "id": "bd8bb249-ffd7-40cc-9ad1-5169bd577b03",
          "name": "did:invalid"
        },
        "response": {
          "id": "4f1fe1b0-0c04-4a43-b600-2067e2795ea5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 576,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c8a36c64-9997-45c4-b583-e9033b8da869",
        "cursor": {
          "ref": "8ebf4dd2-bfd1-4cd9-ac58-27a5c56ee4cc",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7a47c15f-8dd6-4a55-8505-f8361b211a8c"
        },
        "item": {
          "id": "c8a36c64-9997-45c4-b583-e9033b8da869",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1be2f030-ec24-4a55-9848-500a46837ebd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f192cb-11c6-4d4a-a185-a333d166b81a",
        "cursor": {
          "ref": "49aeb896-c547-4f82-bb8b-d903a48fbdb9",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e86ceef1-8fca-475e-a936-741d6c9bfe8e"
        },
        "item": {
          "id": "94f192cb-11c6-4d4a-a185-a333d166b81a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ee4f4866-53aa-469b-992f-a8bfaf59d18f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b92d606-7bb8-40c9-9541-6415679cb2c3",
        "cursor": {
          "ref": "ea719eaf-15cd-4b76-a6aa-787a5725b637",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4c5f62df-b342-4918-8e14-dc062b0efa83"
        },
        "item": {
          "id": "4b92d606-7bb8-40c9-9541-6415679cb2c3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f292dcf4-0e50-4423-bb92-2c8315931184",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "6bb5d773-0b0f-437f-b8ed-ec0538df26bb",
        "cursor": {
          "ref": "6a11fa6d-d6b1-46b9-825d-6eff576a4150",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8620fda0-531b-4eec-b9a2-4375aae3c56d"
        },
        "item": {
          "id": "6bb5d773-0b0f-437f-b8ed-ec0538df26bb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3517d193-a944-4782-81e4-edf546bf5a75",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6bb5d773-0b0f-437f-b8ed-ec0538df26bb",
        "cursor": {
          "ref": "6a11fa6d-d6b1-46b9-825d-6eff576a4150",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8620fda0-531b-4eec-b9a2-4375aae3c56d"
        },
        "item": {
          "id": "6bb5d773-0b0f-437f-b8ed-ec0538df26bb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3517d193-a944-4782-81e4-edf546bf5a75",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "499ac225-4866-411d-89b5-891c8a0173e4",
        "cursor": {
          "ref": "8e20deed-899f-4864-b4db-2331dc8a9ef7",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6a48fc4e-0cf8-4601-b951-abe07672c17c"
        },
        "item": {
          "id": "499ac225-4866-411d-89b5-891c8a0173e4",
          "name": "identifiers"
        },
        "response": {
          "id": "81d8c7ed-29e0-4443-8bd8-f953d3739b5c",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc676adb-00b9-4604-8ea7-8fc81fcb83ed",
        "cursor": {
          "ref": "42d82343-7131-4159-9ce5-b7dd2618e99e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cac0885f-7dc2-4ed3-b7f8-8092daf74ea6"
        },
        "item": {
          "id": "bc676adb-00b9-4604-8ea7-8fc81fcb83ed",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "29ab9fda-60e3-40f7-a8c2-14f2b63e704c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc676adb-00b9-4604-8ea7-8fc81fcb83ed",
        "cursor": {
          "ref": "42d82343-7131-4159-9ce5-b7dd2618e99e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cac0885f-7dc2-4ed3-b7f8-8092daf74ea6"
        },
        "item": {
          "id": "bc676adb-00b9-4604-8ea7-8fc81fcb83ed",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "29ab9fda-60e3-40f7-a8c2-14f2b63e704c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497def1f-053f-483f-821c-af72948a488a",
        "cursor": {
          "ref": "3dd86289-2d99-4047-9249-803a0f994146",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9abed98c-e49f-4f6e-9990-f7939e1a8916"
        },
        "item": {
          "id": "497def1f-053f-483f-821c-af72948a488a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "59dd145c-a1a8-4716-b31a-8e7015416b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83da2aa7-cd2b-4186-9b80-cce8655fa5ff",
        "cursor": {
          "ref": "b7ca5d1b-a885-4400-99bb-4c9c118d8272",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "66f3b249-5c0d-48fc-8a44-537f7a894803"
        },
        "item": {
          "id": "83da2aa7-cd2b-4186-9b80-cce8655fa5ff",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e7243f0a-2650-4bd0-b2fd-d9944218d44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3978eb32-a8ff-43d1-b5c6-e56045227f81",
        "cursor": {
          "ref": "79f1c165-40c5-4203-9c97-6376807da615",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b02bbd48-7c9b-41bf-a56d-c58fb4e989cf"
        },
        "item": {
          "id": "3978eb32-a8ff-43d1-b5c6-e56045227f81",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4c7031d9-6484-4ca2-b12e-7056b268f234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0e42c0-4d8d-4ffc-8544-b8dde3f20bcc",
        "cursor": {
          "ref": "6268a165-c811-4f48-8727-b7186146f216",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d308698e-e6f3-4dcb-b439-a3fa928d7ebd"
        },
        "item": {
          "id": "4e0e42c0-4d8d-4ffc-8544-b8dde3f20bcc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "90be3064-41d6-4a04-a59b-29280d3967f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a08fc0c-f6e8-4e2d-8a0e-f6b1375d8245",
        "cursor": {
          "ref": "30e92f7e-eb13-4603-b22c-4d9188cc45b2",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8d1d09f2-05e1-4131-84f3-73ed641066b4"
        },
        "item": {
          "id": "8a08fc0c-f6e8-4e2d-8a0e-f6b1375d8245",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1e281d08-ddb0-4e62-aaad-652cc6baae4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3587942-1d26-4c8e-b8f6-9d232ae647e8",
        "cursor": {
          "ref": "29d5c334-9b58-40a9-adf6-00c387565f60",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d266ff39-05ad-438c-bbdc-969d0d82d97a"
        },
        "item": {
          "id": "b3587942-1d26-4c8e-b8f6-9d232ae647e8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2210a8e2-75ba-4153-b2a6-9fbdf0f95683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b715549-bc58-492e-8bb7-8cc0d5f42785",
        "cursor": {
          "ref": "83f744ef-34ff-4240-800e-e6f90deb985d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3a52914f-9c24-4b04-903c-b0d9d52296f1"
        },
        "item": {
          "id": "6b715549-bc58-492e-8bb7-8cc0d5f42785",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ff4d6c22-e489-4710-8a41-9da8a099a1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d777abe-f461-47e5-bdd5-122402d17ec3",
        "cursor": {
          "ref": "500f11f8-5c06-4f60-96ea-94703058cf1f",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c7e97791-8017-4080-9cf9-f29cf685222f"
        },
        "item": {
          "id": "3d777abe-f461-47e5-bdd5-122402d17ec3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7a7d0721-4e5e-4659-911d-9e10cc34c28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f5002b-4f77-4398-96dc-b92a90be2466",
        "cursor": {
          "ref": "d3a6ca2f-d4b1-4e84-ab3f-ae37a9c2c0de",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b5ca14ca-5e0a-47a1-97f4-1e3f5ad7a942"
        },
        "item": {
          "id": "16f5002b-4f77-4398-96dc-b92a90be2466",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "39ada91e-203e-46fb-98a5-5ce6062f01b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9102b2f6-64a1-44c1-83d5-3b5136951a87",
        "cursor": {
          "ref": "280bdda2-ac37-4381-8fd8-99b52ef146cc",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f48edc5a-3a67-4231-83f1-16f1f699d23a"
        },
        "item": {
          "id": "9102b2f6-64a1-44c1-83d5-3b5136951a87",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "62167ef4-bb36-4ed3-a29b-f1c24b5127f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e17ada-5d3b-44ab-88ba-4e1b5291975c",
        "cursor": {
          "ref": "fb2f581f-0679-4807-b41a-98d45f1f950d",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6b1cd411-e858-4aac-8f55-a002a27ee743"
        },
        "item": {
          "id": "42e17ada-5d3b-44ab-88ba-4e1b5291975c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "380f561a-294d-401a-b4ab-5e1b8d6c8dba",
          "status": "Created",
          "code": 201,
          "responseTime": 746,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b9096f11-16ee-4709-892c-18c2d9a2d6e5",
        "cursor": {
          "ref": "c38c4d6c-fd55-43f7-8417-1b66525f2357",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ed0db8bf-9154-4d1d-ac9e-593877e6f1f7"
        },
        "item": {
          "id": "b9096f11-16ee-4709-892c-18c2d9a2d6e5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "09ff8709-d832-49de-a9d2-3d62f7fcd61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41230e88-15be-4f0f-8f1c-57f6091614fe",
        "cursor": {
          "ref": "66873e8d-13ef-4dd9-a373-cae5fd5c4134",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "582f8bb2-4b6c-4cff-a627-37a5771294a3"
        },
        "item": {
          "id": "41230e88-15be-4f0f-8f1c-57f6091614fe",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "560b629f-ba5e-4908-9a79-db257eb97240",
          "status": "Created",
          "code": 201,
          "responseTime": 7733,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "9c2d5a54-10bf-43ec-b7ae-7b29c76a255b",
        "cursor": {
          "ref": "fe5b449e-7ae6-41c3-9a19-031e2c8a0b00",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "89ba91a7-2ad2-482e-adba-ad52de74541e"
        },
        "item": {
          "id": "9c2d5a54-10bf-43ec-b7ae-7b29c76a255b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "49a5561f-83b0-480c-9b04-3c3a14782971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37dea288-aaaf-4066-ae12-a84ad416e822",
        "cursor": {
          "ref": "bf2f13f7-9ca8-4d01-b9bf-a81e7609f9eb",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "38e6f372-6714-4e24-b869-874690bc4132"
        },
        "item": {
          "id": "37dea288-aaaf-4066-ae12-a84ad416e822",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3fdb24b6-f9cc-432d-9e01-66530565f755",
          "status": "Created",
          "code": 201,
          "responseTime": 5154,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "868c3aee-b66c-4c06-853a-9ae09204ec49",
        "cursor": {
          "ref": "99581c5d-1b6e-4f35-a0a3-1d3e8e14a964",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "13622642-2356-4e25-93ed-79484ba05730"
        },
        "item": {
          "id": "868c3aee-b66c-4c06-853a-9ae09204ec49",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e9b3310e-f28d-4acd-99e6-231c2ab56e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8faee3c8-478b-4ead-86f8-bc63271eb983",
        "cursor": {
          "ref": "4521a87b-ba4f-4216-a7f9-9be3a39a542e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "90541fe7-7e0d-4022-b204-17b0ab92a810"
        },
        "item": {
          "id": "8faee3c8-478b-4ead-86f8-bc63271eb983",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "489f05f5-0e05-48c1-8dac-4673da9c2c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca86d53-5965-4450-8c19-58f03d666921",
        "cursor": {
          "ref": "05bf673f-1d96-453a-a47e-f1c1cb84dd06",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b6693bbf-8ae5-4e02-9b06-dc40e88357d8"
        },
        "item": {
          "id": "fca86d53-5965-4450-8c19-58f03d666921",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "98db2204-f1e3-403f-b05b-3cd2664de7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df9797b-3552-4ad5-856f-50acb0455ea4",
        "cursor": {
          "ref": "2b8dac3a-0e9f-4098-ac8d-232b294b2809",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0da7c4da-69e6-4df7-b99c-de12de9f88ec"
        },
        "item": {
          "id": "9df9797b-3552-4ad5-856f-50acb0455ea4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d3c76728-00aa-4650-8c69-9acaf863639b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24d09c0-5a51-40d7-a225-d0624c660b66",
        "cursor": {
          "ref": "6640a856-bec4-46dc-b0f3-4fce2f6f5b88",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bb8ab92c-1878-4d06-ac1d-884ffdd36c0c"
        },
        "item": {
          "id": "a24d09c0-5a51-40d7-a225-d0624c660b66",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fe35cc32-315c-4378-8295-e775d16fe81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3576a65e-b14f-4229-ba5b-ff86f08f12a6",
        "cursor": {
          "ref": "4df78a5e-7a08-45ca-ae8d-6f143ab021bf",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7c30b711-c9ec-441d-b714-e98f20667927"
        },
        "item": {
          "id": "3576a65e-b14f-4229-ba5b-ff86f08f12a6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bd58a0c9-a7fa-4c20-946c-0eb68a1b58e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc13f0b2-b641-4da0-a29b-a9d3e73a327a",
        "cursor": {
          "ref": "ad165bb9-25dc-49cc-b888-17aa8f9ec5bc",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "08d41596-6620-413b-8dcc-dd283c049f7d"
        },
        "item": {
          "id": "bc13f0b2-b641-4da0-a29b-a9d3e73a327a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6b2df7a3-25e6-45a8-b192-b31b5c0e27db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db5de15-ee68-4053-8b72-488fdb063a94",
        "cursor": {
          "ref": "a3c56c6e-421e-479b-84b0-10d3bf589589",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b3bade8b-2600-43d8-a2d7-01feedad045b"
        },
        "item": {
          "id": "0db5de15-ee68-4053-8b72-488fdb063a94",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ceac97cb-2784-40c7-bace-3126092768b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9acafd5-c992-409e-892f-1ca2f2b728e0",
        "cursor": {
          "ref": "ca15c2cb-6f57-4566-957f-c63762869441",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "57df4cdd-b399-49a8-928f-339dab0ca155"
        },
        "item": {
          "id": "a9acafd5-c992-409e-892f-1ca2f2b728e0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "93113111-feb6-42de-9a3e-6e059c215b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab91c49f-d879-4152-b39c-afb201fc6b78",
        "cursor": {
          "ref": "607fa687-0420-444e-ba42-b4dc67c8be03",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "68483f2a-a505-4424-af84-301eeb0f4e4d"
        },
        "item": {
          "id": "ab91c49f-d879-4152-b39c-afb201fc6b78",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "76b2b81d-b746-4c5c-9d43-4800d6116328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d62a71e-a14b-4476-9717-9c266523decf",
        "cursor": {
          "ref": "ecee8d71-21df-4c4b-9e12-3cb572d09a78",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a01b945f-83f7-46fa-bf2f-c1a975908134"
        },
        "item": {
          "id": "5d62a71e-a14b-4476-9717-9c266523decf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7b40efcb-ad02-45b7-a089-227a7bc0c46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72c36f2-284d-44ce-8049-1ee7ccb76e53",
        "cursor": {
          "ref": "1f411b86-7ce8-4f37-834a-b661212a5848",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "161e9a47-9e73-41b6-b898-fe360e1f47d4"
        },
        "item": {
          "id": "a72c36f2-284d-44ce-8049-1ee7ccb76e53",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "59abaedb-ce53-4106-b2d8-399b3aae826f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506aebb5-be99-4f54-8211-992cf665c183",
        "cursor": {
          "ref": "310d5fda-2bb0-43d5-857c-804887caf5d9",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f36ed912-ec76-46bd-8d92-5d4b708ea090"
        },
        "item": {
          "id": "506aebb5-be99-4f54-8211-992cf665c183",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9493ba5d-b493-4c44-8c90-494d5eeba65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bfd3d9-9441-4486-ba87-01c92130728c",
        "cursor": {
          "ref": "31221a43-72ce-4fc3-8b0f-9e519f65e922",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "eef0ac2e-2908-4a37-8471-2fbd3cb74293"
        },
        "item": {
          "id": "57bfd3d9-9441-4486-ba87-01c92130728c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "661b6ab9-89ae-4c3f-94ce-c3046b971da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c91ee9-aa2d-4f4d-bc3e-08445cc10633",
        "cursor": {
          "ref": "f9403a39-6b3c-420d-85cb-08b7f1c8fd05",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2453f554-7794-4663-b386-a24f235d3da9"
        },
        "item": {
          "id": "f3c91ee9-aa2d-4f4d-bc3e-08445cc10633",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6b9f4a48-ca87-47e3-acd6-169e592776ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472d449f-5188-42e9-bf57-3c14e1ddfc2c",
        "cursor": {
          "ref": "15b5ad72-1254-404c-860a-695834861607",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d1cc8487-0bba-432a-98b8-e851b9b7e1aa"
        },
        "item": {
          "id": "472d449f-5188-42e9-bf57-3c14e1ddfc2c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7b65e990-4f8f-4c5f-89eb-ba81d75195e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546ebaff-36cd-456a-b305-84574f8def6b",
        "cursor": {
          "ref": "f7560ab5-63fd-4a1d-bf24-07ad570c7c56",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2e625392-f759-4247-b3bb-06fb536a487d"
        },
        "item": {
          "id": "546ebaff-36cd-456a-b305-84574f8def6b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "62b85079-1fcd-4bc2-b867-759290e5f461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16293207-8332-41e4-8a61-337a5c1bea29",
        "cursor": {
          "ref": "2096b418-575b-40c7-a41f-06998ebc02ef",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a8bd9429-934e-49bd-9c51-e1c3dc6c1620"
        },
        "item": {
          "id": "16293207-8332-41e4-8a61-337a5c1bea29",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c682d7a1-9b0a-40a9-b5e4-66f144c9b2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6d7071-50b2-461b-9d71-a7e5f1a607e2",
        "cursor": {
          "ref": "39f66d9a-216b-404f-8cdc-b6135a34aa2c",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7d8d587a-c708-40c4-8285-563f064eda62"
        },
        "item": {
          "id": "0c6d7071-50b2-461b-9d71-a7e5f1a607e2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6700a328-c700-4a91-8fa7-c1e2f478d71c",
          "status": "Created",
          "code": 201,
          "responseTime": 2097,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "52ac2770-ebd8-42a0-89ab-0ee6b3ce8a50",
        "cursor": {
          "ref": "7475ac9d-07da-4831-aedb-263d6bcb284b",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "90d86967-0a66-4cd9-a45d-4cea26a885c5"
        },
        "item": {
          "id": "52ac2770-ebd8-42a0-89ab-0ee6b3ce8a50",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f88a0b64-08ad-42ff-8cff-6ff89c75fdbf",
          "status": "Created",
          "code": 201,
          "responseTime": 2386,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7478c2c8-903e-49d8-b9d0-67fadc871b63",
        "cursor": {
          "ref": "ce395bfd-bd5a-45e8-be02-2509a678d5e8",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "54f526ca-5284-457b-8067-be0980e4c426"
        },
        "item": {
          "id": "7478c2c8-903e-49d8-b9d0-67fadc871b63",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e97df489-447d-49b5-93ee-4e96d535b499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a22517-abb3-4bed-9818-71f1db8b8524",
        "cursor": {
          "ref": "1a059470-5580-42c7-8176-5d421af06656",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6408e367-cc8d-458b-afed-c5de992f8eb0"
        },
        "item": {
          "id": "47a22517-abb3-4bed-9818-71f1db8b8524",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "67775706-14d4-4122-9760-4a6434b1a923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a83e27-9bc1-44d4-adb1-a0f44e2fe0f2",
        "cursor": {
          "ref": "99909956-75fe-4e1f-8737-aacf10d29c52",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "16fa1333-00a3-455f-a31d-bc9ccc6e2250"
        },
        "item": {
          "id": "f8a83e27-9bc1-44d4-adb1-a0f44e2fe0f2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "51b6bba4-37b2-43e3-a805-9b5706a3429b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7071a22-008f-451d-bfe2-030276b5d28c",
        "cursor": {
          "ref": "eb01d850-c25c-4646-b880-60a610f348a2",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c71d876d-483f-4fed-8217-d3ee4b6c51c3"
        },
        "item": {
          "id": "a7071a22-008f-451d-bfe2-030276b5d28c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1b1b4b87-44a9-457f-8382-c9fd0d1e9dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe013ed4-6062-4790-9b6a-e208aba38ec2",
        "cursor": {
          "ref": "46d6aa88-0732-4da4-940f-860cf1818c7b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "183504ab-cf0a-4285-b991-e3aa108f8d3c"
        },
        "item": {
          "id": "fe013ed4-6062-4790-9b6a-e208aba38ec2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6302cfe2-d816-4e33-875c-407c3e835ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f24a13d-b237-40ac-9df3-7c98188ed433",
        "cursor": {
          "ref": "16be2086-b1e3-46f9-85e8-cb145f3cf2a1",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "82cddac1-1631-48cd-a30d-793b8f145102"
        },
        "item": {
          "id": "7f24a13d-b237-40ac-9df3-7c98188ed433",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3de1965a-bde3-464b-88cb-9ab712f7cc3e",
          "status": "Created",
          "code": 201,
          "responseTime": 2540,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "65373899-de6f-4ef8-b711-8f1df4395e0e",
        "cursor": {
          "ref": "32307e6c-2003-4829-9eb5-8314c672c1da",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4922a07a-5ac4-4db0-ba16-b12f3abd2963"
        },
        "item": {
          "id": "65373899-de6f-4ef8-b711-8f1df4395e0e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9e99d231-6732-4ac7-8948-48c101c0d85f",
          "status": "Created",
          "code": 201,
          "responseTime": 2270,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d948c605-5c95-4244-b8f4-29e582c9baea",
        "cursor": {
          "ref": "fea4ff0b-3f72-4664-9d4a-2d454a75c4c5",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2c26a95a-f0c7-4e50-a3d9-0695eff66b57"
        },
        "item": {
          "id": "d948c605-5c95-4244-b8f4-29e582c9baea",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "44f6f58f-7948-422c-9d32-dcec8562ec05",
          "status": "Created",
          "code": 201,
          "responseTime": 2374,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b9035497-3928-47cd-afe0-32f1e949ac46",
        "cursor": {
          "ref": "f76f88b2-f0b0-4a97-b0d7-70702e82a735",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "97544f7a-8eec-4318-b5b2-8c8c1164a08f"
        },
        "item": {
          "id": "b9035497-3928-47cd-afe0-32f1e949ac46",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c3dd4967-2e97-40f2-a3bb-26ecac6d74f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf797be3-49b8-42a8-ad62-8a18ef2005b1",
        "cursor": {
          "ref": "3dd0e603-76df-475e-bb8b-97a99a9fce26",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bb16d11f-81ef-4c00-a7dc-f9879a84c8cd"
        },
        "item": {
          "id": "cf797be3-49b8-42a8-ad62-8a18ef2005b1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8a7340a0-d8e1-4f14-be95-dc5dccdcb8c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf08929-f0ea-4648-8f1b-7997bf425b48",
        "cursor": {
          "ref": "aee1b1fb-d6cd-42d0-a039-e984744eeaad",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7bfaae8e-9098-4453-afe2-9b684bb97a2a"
        },
        "item": {
          "id": "baf08929-f0ea-4648-8f1b-7997bf425b48",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "77390bed-3149-4abd-8f99-f73878cceda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c347ec26-6711-4e89-a473-9aedf1ef8fe1",
        "cursor": {
          "ref": "c2c3fa5d-a178-495d-bebc-fbc6814a5df8",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ebca482a-0bbd-44aa-852d-1e0656610bca"
        },
        "item": {
          "id": "c347ec26-6711-4e89-a473-9aedf1ef8fe1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2aebe351-f4bb-4b0e-93ee-c560124f9ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831d9732-4794-4448-854c-423719b97a24",
        "cursor": {
          "ref": "ce53ca9d-b077-499d-af42-47031cbcc835",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7eec004d-b4ba-445b-8416-7b1f0d19f71e"
        },
        "item": {
          "id": "831d9732-4794-4448-854c-423719b97a24",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6e29f4cc-95fe-4850-bae0-63e6e80c6687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080e4c7c-5c9f-48c0-ba84-afc6cb3e1504",
        "cursor": {
          "ref": "6b58001c-699b-420f-8f3b-e68e99282378",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a0201b16-e46b-40d0-a617-dceeb17cf834"
        },
        "item": {
          "id": "080e4c7c-5c9f-48c0-ba84-afc6cb3e1504",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b4a1a70c-5d1b-449b-9208-520f99fb1f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafca6fb-1477-45bd-be96-2430ea41abc5",
        "cursor": {
          "ref": "5ec77a05-67de-4e84-8327-6565ace66846",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6b0a60c8-32b5-4b92-abb0-95a10327378c"
        },
        "item": {
          "id": "bafca6fb-1477-45bd-be96-2430ea41abc5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1d98e010-833e-4804-ba3c-4bd85499a5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7e4564-7bea-41e9-992a-a604103ac7b9",
        "cursor": {
          "ref": "db4ef1ce-f29d-4ff2-903a-88a8ee9f2634",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1e8efa9d-62fb-404a-a99a-fadc0839c27b"
        },
        "item": {
          "id": "5b7e4564-7bea-41e9-992a-a604103ac7b9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "47a6a2c9-554e-4e25-beb3-3a47db0d91f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9d8baa-5507-4ce4-952d-0a246a94fc74",
        "cursor": {
          "ref": "9374c3d6-69e0-4638-bb19-3601c553dae8",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "419fdf21-c56a-4073-b76e-65615f6c43d1"
        },
        "item": {
          "id": "df9d8baa-5507-4ce4-952d-0a246a94fc74",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d1fee7d1-d2a3-4d03-8146-741de6959a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235d3b42-56a8-437f-aa20-5064e4984dcd",
        "cursor": {
          "ref": "05f1ae29-818b-4ed1-b4bd-4a0179f70a1a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7d231dc3-1321-4fcd-b080-476faebb1943"
        },
        "item": {
          "id": "235d3b42-56a8-437f-aa20-5064e4984dcd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "eef21423-6fcf-4fd9-8512-e9fe3c89fcd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a01e0f-f2ce-443c-ae81-71dd016ed19e",
        "cursor": {
          "ref": "00741a0a-4bd0-4a6b-a49e-cbb5960ccd91",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4930c6f1-3dbe-4ce7-9876-f8c44a11a4a8"
        },
        "item": {
          "id": "a6a01e0f-f2ce-443c-ae81-71dd016ed19e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5635325e-d1fb-4eeb-a418-ac3f3b9bd5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f33602-2064-4e47-bcec-50fcf3e73a8b",
        "cursor": {
          "ref": "6a0dafac-7dc4-4e95-a06b-10a32ce6149f",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "892ac782-1420-4efd-b7e1-8e395fed6835"
        },
        "item": {
          "id": "64f33602-2064-4e47-bcec-50fcf3e73a8b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "10aa6e57-fccd-4120-a310-6d639c89eac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209c0e1d-3ed9-48b6-af34-a50d5e5edabb",
        "cursor": {
          "ref": "2e4bb308-7b6e-4698-b681-2d17479e46df",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "88537479-061d-4661-acd7-b43329eca346"
        },
        "item": {
          "id": "209c0e1d-3ed9-48b6-af34-a50d5e5edabb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "dbc4255f-dad2-4f94-8e9f-6fb67739da3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7381941-35c8-482a-9831-441f165b2282",
        "cursor": {
          "ref": "711eb9b5-6ca1-41e2-8dd2-34acfa7a28b5",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9276ae1c-6ba7-41fe-bb9c-2654a39ecd54"
        },
        "item": {
          "id": "a7381941-35c8-482a-9831-441f165b2282",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d49bfa14-f5bb-4a1e-aa1b-b9edddd82c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051089a3-fe63-4f1e-ad3e-74ce43613f83",
        "cursor": {
          "ref": "5100fb7a-db57-4df7-9d04-c5f8409b4fad",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "50da096b-dd1d-413c-99a6-0d1b44419c0b"
        },
        "item": {
          "id": "051089a3-fe63-4f1e-ad3e-74ce43613f83",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6ba9cf7b-eaaf-4872-b3e9-22a8647f9fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e124cdcf-855b-4328-8273-2aa83eb43ac1",
        "cursor": {
          "ref": "8b8373b6-4f83-4542-960c-e33159e66c81",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0b056a98-abc1-4c5e-a3ab-0d0e489d0768"
        },
        "item": {
          "id": "e124cdcf-855b-4328-8273-2aa83eb43ac1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a3d1bacd-c1d9-4f50-8a2f-d2491245a122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5528a6b-705b-4b49-b8c7-8b4455d70b37",
        "cursor": {
          "ref": "562ca8a5-5ecb-4497-88ac-dd9389f795ea",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a07971d2-0226-4ee3-b3b3-971e0b1bd624"
        },
        "item": {
          "id": "e5528a6b-705b-4b49-b8c7-8b4455d70b37",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "01bffe05-41ed-4fab-a81c-ba3a2052fd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53c8e6d-6066-4bfb-b33c-a4fac057af96",
        "cursor": {
          "ref": "1aff9f9e-5099-4fc3-9077-c99d0708fa45",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c8112147-13de-49a6-b2cc-602b634d0ec6"
        },
        "item": {
          "id": "d53c8e6d-6066-4bfb-b33c-a4fac057af96",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0579f7eb-1349-4282-bd59-2989bd345569",
          "status": "Created",
          "code": 201,
          "responseTime": 2237,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "25d702a2-5850-404b-91df-67bf4178bb49",
        "cursor": {
          "ref": "c498028f-e69d-43fc-8e18-f353831b33fb",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "aa5afeeb-d905-46d7-92d4-7a45d6147a90"
        },
        "item": {
          "id": "25d702a2-5850-404b-91df-67bf4178bb49",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6fbec962-bd7d-4f40-8ea6-c414c8f45ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c64f510-8984-4cec-8df0-356e5815ed26",
        "cursor": {
          "ref": "b4b34d4a-7c68-428c-8fee-07d950a4f45f",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2e5fb796-50d9-4503-83e2-989ac1bbc127"
        },
        "item": {
          "id": "3c64f510-8984-4cec-8df0-356e5815ed26",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "34ee4951-3bee-4af1-bcec-76ac5bbb6790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5305e52-664a-4d6e-a747-925f78895951",
        "cursor": {
          "ref": "ebbdd631-4ff5-4b62-934b-a8b7b62d86e6",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cf0020d9-a18f-4a48-a909-110a4c89f6e7"
        },
        "item": {
          "id": "e5305e52-664a-4d6e-a747-925f78895951",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "df7fc741-ef0b-4ffb-96bc-571e9c3ad5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1834061d-2ddf-4b4f-97c4-3725fe8a392a",
        "cursor": {
          "ref": "19ed98b2-6b20-4d97-ab8a-d86152fa1c68",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b880ea82-01b5-4ee8-853f-7cb7f3934d26"
        },
        "item": {
          "id": "1834061d-2ddf-4b4f-97c4-3725fe8a392a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4dcb64d8-b4d8-4776-93dd-578ea91e4bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34d338d-5a84-4f65-9a11-87f105a8e7ff",
        "cursor": {
          "ref": "b8bc137d-a41f-4864-923d-2ec611c49482",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "716d1165-f609-43aa-bdb1-6283516d4e71"
        },
        "item": {
          "id": "e34d338d-5a84-4f65-9a11-87f105a8e7ff",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1c9476e7-5008-41eb-a4fc-8aee6d672694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4ae0e3-a0e3-440d-a297-e82331b46b15",
        "cursor": {
          "ref": "7d6f039f-791f-4fbe-8098-41df21b2d6ce",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e50762e9-3d97-4ffd-9188-b8a20a5ee3b5"
        },
        "item": {
          "id": "1d4ae0e3-a0e3-440d-a297-e82331b46b15",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "237090e3-972a-4edd-8b59-d4fd6d29af63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4672fa03-6915-4883-97ff-78aa01ee5770",
        "cursor": {
          "ref": "35ac1069-1154-4e24-9b4a-efc333ff9d82",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "28eeae73-e23b-4f49-a668-5aa787241254"
        },
        "item": {
          "id": "4672fa03-6915-4883-97ff-78aa01ee5770",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7e70070a-c6ce-459c-8e4b-51f91a2f8c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9f4e5c-035f-4130-8c17-12748b701003",
        "cursor": {
          "ref": "49aa4e42-0b2b-49dd-b4a7-b6a9684cb0a0",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3807415f-eee5-44de-ba72-22244d3b7f91"
        },
        "item": {
          "id": "5c9f4e5c-035f-4130-8c17-12748b701003",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c43bb314-dc6f-4bbe-b510-832277e27c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de793a92-746a-46a0-86fe-eddf9ec7dda5",
        "cursor": {
          "ref": "27be8ed0-6e2a-46d1-a71a-b0de9a0c62e7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "39aef3f5-7266-4f9f-a3c2-1fa64ba41c75"
        },
        "item": {
          "id": "de793a92-746a-46a0-86fe-eddf9ec7dda5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "276aabf3-bb4f-41c9-88f2-11b8898426a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2793baa8-885c-4de0-b8c7-545b6a838877",
        "cursor": {
          "ref": "208b38c6-63e5-4891-b781-ccfe13ae53a0",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "de8feb76-a398-4cd7-8f0a-275ded8d3f0a"
        },
        "item": {
          "id": "2793baa8-885c-4de0-b8c7-545b6a838877",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "aede047c-d5e2-4421-a652-8602ffe04cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07aa6c95-ad8f-4afd-95d2-a5a4c503bfad",
        "cursor": {
          "ref": "8ed23911-3954-433b-9405-22b8f43e357a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d670386f-7557-4824-9b02-50fb6fb21d5f"
        },
        "item": {
          "id": "07aa6c95-ad8f-4afd-95d2-a5a4c503bfad",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4166dc5b-fa23-4995-b303-5bb237a9411e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f070d0-a080-4a6c-92f3-d2c8f1470971",
        "cursor": {
          "ref": "9c3cfb0e-ed3a-49c6-92d9-4fc5da11326e",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aa9cde2c-a43d-4840-88b2-5387ad263a2b"
        },
        "item": {
          "id": "72f070d0-a080-4a6c-92f3-d2c8f1470971",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "90abaaa5-5ebb-40c2-91c3-3053a8c3cf63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222943d5-d4ad-4a9d-aa28-bd8eede4d925",
        "cursor": {
          "ref": "0d220463-3411-4eae-8f15-873993994e79",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a155f4b0-88c9-46f2-b401-6dc40bcc3d92"
        },
        "item": {
          "id": "222943d5-d4ad-4a9d-aa28-bd8eede4d925",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4b1b2ec6-ebd7-4837-aa9c-4f91770889e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1067077e-41fe-4914-b112-16a3138544f4",
        "cursor": {
          "ref": "541c9676-abc2-4b61-b69e-d3fae70e3fa5",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "19190182-a0b2-4990-978d-396037e7fa3a"
        },
        "item": {
          "id": "1067077e-41fe-4914-b112-16a3138544f4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8539da70-e53b-4f45-a21f-8fbb32ab71b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a216bc5-e560-4b24-a68d-ef7bab652162",
        "cursor": {
          "ref": "a029f9ca-8436-4bb1-bf3e-aeaf0bc4f3b6",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "13011f52-0b7f-4797-969b-e334652922de"
        },
        "item": {
          "id": "4a216bc5-e560-4b24-a68d-ef7bab652162",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cec1889c-cbd6-4ad7-bf68-d69022739db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d733db-b826-4eff-bd02-a4cedf346ce5",
        "cursor": {
          "ref": "1f686fb2-4b2e-476c-be69-cbaef4f729d0",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a33e2b40-a71c-4533-b6d2-1895a8aa8068"
        },
        "item": {
          "id": "c2d733db-b826-4eff-bd02-a4cedf346ce5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a61664c6-bcfe-4b37-bd3d-715021bf8a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767ffe32-cbed-4a3d-88e7-09b1e6b1b15b",
        "cursor": {
          "ref": "951c37a2-8400-444f-b6c3-3b24ea5e1396",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "951d3ee2-b7f9-4912-9715-f27016d475fb"
        },
        "item": {
          "id": "767ffe32-cbed-4a3d-88e7-09b1e6b1b15b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "75d6cf6c-dc96-4dff-ae7a-778c50ef159a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9321eea-387a-4144-ad4f-1c7d0cb0e6e2",
        "cursor": {
          "ref": "9566c3bb-6b7d-47bb-9a04-876cfb61b084",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bbf37aa6-3daa-4e71-ad9b-e935ef001d05"
        },
        "item": {
          "id": "e9321eea-387a-4144-ad4f-1c7d0cb0e6e2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a079a11e-a3c8-4f8e-abaf-b1e35ac2f775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63bfd9cf-983f-492c-90fd-2ee891e70162",
        "cursor": {
          "ref": "28e7a2b7-0c5d-40ec-b9a8-eea7da1cfe0d",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c7231e11-9944-44fe-9fc1-17b9566cefd0"
        },
        "item": {
          "id": "63bfd9cf-983f-492c-90fd-2ee891e70162",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c4a390ad-6fa6-4d96-b37f-feba0fe79351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeaefb9d-c1ae-40b0-ad4f-5bf1e6817de0",
        "cursor": {
          "ref": "fe39909b-8804-4456-b767-d9fc2b9ca850",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9f51e4d6-bfa3-47ad-b273-12eb60aaca59"
        },
        "item": {
          "id": "eeaefb9d-c1ae-40b0-ad4f-5bf1e6817de0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d0837026-c28e-4dac-8325-79e0a808af98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26a851a-ef4d-466f-a970-9c20268d3af6",
        "cursor": {
          "ref": "9875658c-8c66-4caf-9f7d-b3fbbeb7c86b",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7c69a309-d44a-4f93-bd77-9c7aaabd6f96"
        },
        "item": {
          "id": "d26a851a-ef4d-466f-a970-9c20268d3af6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d796278b-5f47-4871-b372-a20d31b3179d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed5372d-f2fb-49ed-b6df-4fef83af1795",
        "cursor": {
          "ref": "72c718d0-0b05-429c-ab2f-b6e5eeaeb063",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5e39eee2-5e00-42a4-a96f-2ee33553d950"
        },
        "item": {
          "id": "9ed5372d-f2fb-49ed-b6df-4fef83af1795",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e721fc1e-8a30-4547-ace2-5dba2594f066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137ef702-43f3-44bd-8556-36c9063fc499",
        "cursor": {
          "ref": "a6864e95-9a3c-413d-8554-d757e06b6152",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "66b461ff-19e9-4737-bac0-6aeca9ba600c"
        },
        "item": {
          "id": "137ef702-43f3-44bd-8556-36c9063fc499",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1d1ad550-b31e-450e-b851-0e130f76cdaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4f46ea-8639-4a4b-92d2-82975fbdf936",
        "cursor": {
          "ref": "d5c0278f-2b7c-42d9-b031-b37132031be1",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "533cd032-544b-495e-ab80-554b658fb46c"
        },
        "item": {
          "id": "db4f46ea-8639-4a4b-92d2-82975fbdf936",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "21018dfc-1482-4ea4-adba-e7080066f199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ea064a-cbdf-40a6-b5b3-0c9fa8c86298",
        "cursor": {
          "ref": "7746758c-b9dc-4e84-bb86-cb2aaac2e812",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "97af9878-2fcd-4386-9b57-587806e2b0f1"
        },
        "item": {
          "id": "53ea064a-cbdf-40a6-b5b3-0c9fa8c86298",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "02506ad9-c385-4868-95f0-7912b0bc0061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931323a9-709e-4616-91d9-67430555dd27",
        "cursor": {
          "ref": "76a420ce-cc4b-4757-be11-10aeb0b5ac6a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "abb9a0c3-55d4-48e1-b354-40ae2124b33f"
        },
        "item": {
          "id": "931323a9-709e-4616-91d9-67430555dd27",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b31007ad-eb52-41a7-b40c-b7f5180c8104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8433d898-4af8-4433-a217-c29c624a0c56",
        "cursor": {
          "ref": "fe109497-98fe-41ba-9138-3541ab1d948a",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3528664b-c295-4615-aa46-611cfa23b9a1"
        },
        "item": {
          "id": "8433d898-4af8-4433-a217-c29c624a0c56",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5baf5ab4-2dad-49b0-b194-b2e35b9a7e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2fab3c-f911-42f6-9a0e-bbae13b8a549",
        "cursor": {
          "ref": "75438161-b6d6-4de1-97ea-d95295114e6a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0382a864-0b8d-44be-916b-de5599f5fae4"
        },
        "item": {
          "id": "bc2fab3c-f911-42f6-9a0e-bbae13b8a549",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b301988c-e6e4-4de0-92dc-e3ff64b5f412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7826d1a0-72b9-416a-80a6-358093e98ce8",
        "cursor": {
          "ref": "67116720-4b04-48c9-8990-40ecd640aefa",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "16154cdc-12b6-4fbf-ba8b-19659dc640fc"
        },
        "item": {
          "id": "7826d1a0-72b9-416a-80a6-358093e98ce8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cf9ba45d-d800-4c0c-ab60-537c786e28a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e57067e-17bb-437a-bcda-e221c1b2969e",
        "cursor": {
          "ref": "17452586-8f28-4c03-979f-eb3c5aa35fb6",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a3d59b60-b894-45d0-9659-ecad4dc50e90"
        },
        "item": {
          "id": "7e57067e-17bb-437a-bcda-e221c1b2969e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ad5ecd54-2d58-4b62-a783-57b965f1bdce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02954c28-b953-4f85-bea8-d5bee04f3e5a",
        "cursor": {
          "ref": "c9bb5371-73a2-4ac9-bd9b-eae0b6af0f9a",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e036f4e5-15e0-4d04-9332-7d3bb5820ea9"
        },
        "item": {
          "id": "02954c28-b953-4f85-bea8-d5bee04f3e5a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b623f70d-41fa-4ce5-8cb6-dcc1214d56c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "882a7074-bfb0-4e1b-b942-54a5ef50822f",
        "cursor": {
          "ref": "8b18852b-4eb1-4621-b98e-7f6c0ff0426a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9a97ce28-0a28-4e93-8c7c-464594e50b03"
        },
        "item": {
          "id": "882a7074-bfb0-4e1b-b942-54a5ef50822f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f7e61546-4148-4af0-8456-37e72d57fcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7e186d01-aec8-4167-b072-216796751a7b",
        "cursor": {
          "ref": "d706f87b-722d-4cf7-957e-17df6d13ceed",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c9a8d523-1c37-4bcb-adb1-b5e4872c3954"
        },
        "item": {
          "id": "7e186d01-aec8-4167-b072-216796751a7b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8c139a4d-5764-436c-876a-32ec04eaf194",
          "status": "Created",
          "code": 201,
          "responseTime": 2804,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "12eea246-5229-4706-9e29-27e637732502",
        "cursor": {
          "ref": "c98046e8-83da-4fce-9934-4a7534f43ba0",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8ca69c6a-637a-4c1e-a230-b73fc17a07a7"
        },
        "item": {
          "id": "12eea246-5229-4706-9e29-27e637732502",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1d230017-4591-4238-84a9-7f1dcb4cdbd8",
          "status": "Created",
          "code": 201,
          "responseTime": 2252,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab022bd-da2c-4c2d-b525-741f03db7ae0",
        "cursor": {
          "ref": "62e8f2cd-73a0-4abf-9205-adce334ae74e",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ef20797b-5590-4f89-8e34-9d6180a17f6c"
        },
        "item": {
          "id": "fab022bd-da2c-4c2d-b525-741f03db7ae0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e2920ea7-a0fa-4d56-87ed-09edeba77698",
          "status": "Created",
          "code": 201,
          "responseTime": 2250,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd1155e-8c9b-4af6-948d-97981b3d73cd",
        "cursor": {
          "ref": "0dd2f550-4960-4795-adb9-4be07ecafc84",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "85a7a9b8-072c-4013-b238-99881ec60572"
        },
        "item": {
          "id": "2dd1155e-8c9b-4af6-948d-97981b3d73cd",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9a17ca53-c811-4e81-8a55-f4d66b3f9b6b",
          "status": "Created",
          "code": 201,
          "responseTime": 2260,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-27T00:42:16Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-27T00:42:16Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "91e2b21b-2347-4da4-a931-6a2d4431e157",
        "cursor": {
          "ref": "ec746c6d-fd1a-483a-9099-d7206edcac4e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5d227cf6-281f-47a6-bbfa-14c86b4a4318"
        },
        "item": {
          "id": "91e2b21b-2347-4da4-a931-6a2d4431e157",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "402d0268-e2cf-439e-a6a3-4c6cc8ff7504",
          "status": "Created",
          "code": 201,
          "responseTime": 2560,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ef9fe9-a6b0-47e9-b418-bc4dfb1cadab",
        "cursor": {
          "ref": "a2295283-a8e1-42ab-888b-ba136b2df47f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6c50028d-cbcd-4187-b751-4347b393fefa"
        },
        "item": {
          "id": "05ef9fe9-a6b0-47e9-b418-bc4dfb1cadab",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5dc824c8-b727-47aa-99a0-97f2ae4de2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ef9fe9-a6b0-47e9-b418-bc4dfb1cadab",
        "cursor": {
          "ref": "a2295283-a8e1-42ab-888b-ba136b2df47f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6c50028d-cbcd-4187-b751-4347b393fefa"
        },
        "item": {
          "id": "05ef9fe9-a6b0-47e9-b418-bc4dfb1cadab",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5dc824c8-b727-47aa-99a0-97f2ae4de2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080f96e0-da5d-4851-853a-ecdd59808e98",
        "cursor": {
          "ref": "09e61d49-c5a3-4ce6-8412-b891e14c779f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b4ea5c02-e15b-4458-bd80-dedd68fe2cfe"
        },
        "item": {
          "id": "080f96e0-da5d-4851-853a-ecdd59808e98",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1e7c6201-27a1-4a9e-9106-94f9bdd7b368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f8c383-b024-4a2c-86af-793c643f0dde",
        "cursor": {
          "ref": "0dedcf49-4d17-4d19-9d2a-5192d06c449f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "94675b16-3ec1-4480-8e35-bf0ee6c809cd"
        },
        "item": {
          "id": "48f8c383-b024-4a2c-86af-793c643f0dde",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7c18ac26-89a6-43db-b08b-63793c86ad76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412a0f7f-3ac4-4bef-be78-03c0c9d550a0",
        "cursor": {
          "ref": "10243e00-0fd3-469d-9e6f-d81aeec1bd47",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2cdb8f3d-be10-48bd-976b-88948bc0e616"
        },
        "item": {
          "id": "412a0f7f-3ac4-4bef-be78-03c0c9d550a0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "be05f375-3445-4d2d-8d8b-781d1a03d427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9845961-c8ce-4677-9755-f5e5d3c37827",
        "cursor": {
          "ref": "dd0c0225-438d-437c-8ae6-977f5e88b2ae",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b216abc2-5584-43f9-b0ef-300d36faceb7"
        },
        "item": {
          "id": "f9845961-c8ce-4677-9755-f5e5d3c37827",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "32dcf28b-bf3f-49a4-a589-37e9f18fd2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2be9ec-0aaa-4fc8-a5ee-f872c595df79",
        "cursor": {
          "ref": "0a2cfb6d-083f-4b99-967a-52675e8180bd",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "09b8df06-bcdc-4567-8b1c-7df539623335"
        },
        "item": {
          "id": "4d2be9ec-0aaa-4fc8-a5ee-f872c595df79",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "04886b12-88d6-46e5-8f55-1b0c2732ab49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a3254b-4e95-4be4-8aa5-ceb450beca02",
        "cursor": {
          "ref": "f86fb571-40f7-44e1-a7e0-52e6f0af3d37",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "30023146-b3ca-488b-8e12-c545e563cb9c"
        },
        "item": {
          "id": "60a3254b-4e95-4be4-8aa5-ceb450beca02",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7f83e15a-8ffa-458a-ae64-e1f7623fc39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3aa6b47-6011-4916-8d6c-94071698e90f",
        "cursor": {
          "ref": "099ba931-5398-4ac7-b662-a6baa2d96794",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1bfaca37-8f9e-48d4-8135-d07dccc151a3"
        },
        "item": {
          "id": "a3aa6b47-6011-4916-8d6c-94071698e90f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e6dd6e6c-e2b0-425d-87b9-3d7e45fbfdc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528720fb-7c1c-4df8-a931-dcdae89b63e7",
        "cursor": {
          "ref": "eeed4a36-c2b9-4326-a16d-d44134898441",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ac10335b-af78-48ed-819a-f2669f783724"
        },
        "item": {
          "id": "528720fb-7c1c-4df8-a931-dcdae89b63e7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8b028aab-4b59-4538-8fcd-a9c22eb76230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00f0d92-fd81-482e-84c3-84565bac235a",
        "cursor": {
          "ref": "8ad60163-8e67-48c2-b835-443c9f2f5d4c",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bc910d93-7a10-444f-9227-358e429791e5"
        },
        "item": {
          "id": "a00f0d92-fd81-482e-84c3-84565bac235a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c97f273e-949d-43e1-a066-7bea5aae05ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5bc1fe-269d-486a-89c6-1b09a890f69a",
        "cursor": {
          "ref": "16c63abe-d2e4-443f-8d66-02ffec3ee180",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "15375328-61c7-4077-8dd7-15156f937480"
        },
        "item": {
          "id": "cb5bc1fe-269d-486a-89c6-1b09a890f69a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "70e13e7e-00f1-4ec9-bcfe-14f0f66603bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d71b8ac-6673-421f-902f-ca7a27ed2d87",
        "cursor": {
          "ref": "9cc5fb16-76f3-4e86-b3a7-2a78a820c0e4",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ee9f821d-20ae-403d-a13f-d3ca35262006"
        },
        "item": {
          "id": "3d71b8ac-6673-421f-902f-ca7a27ed2d87",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8f29dd66-805d-44c5-8136-7ecf318f687c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23928f2-63c1-4aac-a9ea-ced6e1e8e7d1",
        "cursor": {
          "ref": "2b95e0c0-fe24-4894-bbb2-47afece9b39b",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6a50fcbc-95dc-4eca-bff6-ece8aea71dbd"
        },
        "item": {
          "id": "c23928f2-63c1-4aac-a9ea-ced6e1e8e7d1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "027e95d5-041f-4247-a0e8-d176daeada1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50ea357-12ec-4f5c-b977-e1bffeebc7f8",
        "cursor": {
          "ref": "cceec986-da52-4893-b143-9dcf0bee2f0d",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1cef4aad-24b7-4138-afdd-c04c7265b248"
        },
        "item": {
          "id": "a50ea357-12ec-4f5c-b977-e1bffeebc7f8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "00dd4a50-d0db-448e-8dca-e980154b14dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371bd229-83ab-4536-a0e9-47d98581b2cc",
        "cursor": {
          "ref": "03341eb5-221f-46d3-bf1f-5fc2bf4b326d",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "411678c3-b636-428b-af87-11fc3051d0b2"
        },
        "item": {
          "id": "371bd229-83ab-4536-a0e9-47d98581b2cc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2a764063-f270-4ba3-8fd7-d8129162a0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fef921-1aec-4252-9ce9-31f86bb351df",
        "cursor": {
          "ref": "4474dbe4-fff0-46c0-94f7-8acbe03372e4",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3e93b83e-7359-4b9d-877f-9252b807a38d"
        },
        "item": {
          "id": "96fef921-1aec-4252-9ce9-31f86bb351df",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "beaf01d0-c7b4-4a3a-afb3-7db4a33eba81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59320ae0-006c-47d2-9c88-15b61d3fb7b5",
        "cursor": {
          "ref": "9a36072f-526b-4417-bc82-d4c07facb31d",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6c0e023f-0905-45a2-8a0b-217b274dfa41"
        },
        "item": {
          "id": "59320ae0-006c-47d2-9c88-15b61d3fb7b5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c47b29bd-ae14-4da9-8222-2a299e3bba40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd016ba-4201-4f82-95a9-ad40de900e7f",
        "cursor": {
          "ref": "7973682f-7e68-45db-8688-cf407bc4a593",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3c292c47-c019-4801-8d47-22709a8daaca"
        },
        "item": {
          "id": "7cd016ba-4201-4f82-95a9-ad40de900e7f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "61f69bc6-c3f7-4070-8b61-3448455daac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04bb7b98-4d50-4cb9-926b-3c7783a92600",
        "cursor": {
          "ref": "b17551f8-f0b5-403a-94e1-2118d7114415",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ca0cb2c8-bf09-4eaf-a332-9a1b4e99c217"
        },
        "item": {
          "id": "04bb7b98-4d50-4cb9-926b-3c7783a92600",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6665a284-2bd0-4e06-bdee-a889b306d0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df00591-dabe-4ff9-b413-bbfb391bc28d",
        "cursor": {
          "ref": "62bf44ea-8c2c-4aa8-970a-5da264edf7d7",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ed54e558-251a-45b0-a3db-4df9fb93703a"
        },
        "item": {
          "id": "8df00591-dabe-4ff9-b413-bbfb391bc28d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2a3901f3-e34a-49cb-af6f-58beb66c97a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8c2623-8080-4254-994e-3672535776a5",
        "cursor": {
          "ref": "18ec7886-b77f-47c9-849b-953cc9109148",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "84428444-ebed-4c9e-a17d-745b84d6382e"
        },
        "item": {
          "id": "4d8c2623-8080-4254-994e-3672535776a5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1ea8b749-04e6-48d2-a557-7ab69b8cffff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af3c562-996b-4673-a895-fde05c5f4a91",
        "cursor": {
          "ref": "4d4bb16e-9a79-43cf-b457-9015ffa41196",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7f2fbcf5-f429-490d-be65-de67173404ef"
        },
        "item": {
          "id": "6af3c562-996b-4673-a895-fde05c5f4a91",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fddfcf3a-0d86-4647-8da8-eba79e85e55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32f43d5-4c37-459c-91ad-08166ca863be",
        "cursor": {
          "ref": "ed6cff25-2195-45c5-9215-a0a3991b6812",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e93ef4be-0991-49a0-b7a2-2d595461b129"
        },
        "item": {
          "id": "f32f43d5-4c37-459c-91ad-08166ca863be",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ba8bc679-1484-4b0d-a8de-db260bb90db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df860ac9-15e8-42f0-ab82-7744e16b1c7c",
        "cursor": {
          "ref": "a0a4a0ac-d627-498d-9432-5c4d49b8168d",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a548031d-5439-45a2-b0e4-1bcf368846db"
        },
        "item": {
          "id": "df860ac9-15e8-42f0-ab82-7744e16b1c7c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "47fab09e-9cfc-4df3-9a59-6f43788b6984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631c2f3a-e589-49aa-911c-f5a19798ff37",
        "cursor": {
          "ref": "1c3ae477-bacb-47e8-ac92-f6921b57f014",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4b756c38-f5ca-417d-a158-9c72a37eb98f"
        },
        "item": {
          "id": "631c2f3a-e589-49aa-911c-f5a19798ff37",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "12a03f22-fc06-4613-a7ff-9c355afff2fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0833a2bf-0901-46b0-b983-c2ef0de49f2d",
        "cursor": {
          "ref": "906450a5-4edc-408f-bf67-7a1cb38a1355",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0d2770f2-a43f-4afc-a1b4-773ce7cdc9b6"
        },
        "item": {
          "id": "0833a2bf-0901-46b0-b983-c2ef0de49f2d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d69197c2-afaa-449e-99f1-b2f1d6d8a3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce802e22-c283-4633-b032-826857c639d1",
        "cursor": {
          "ref": "3dceff62-f34f-4a00-ab4c-75a72e6c5e6b",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3ff1b93d-4591-4ca6-8248-56179b304bb1"
        },
        "item": {
          "id": "ce802e22-c283-4633-b032-826857c639d1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1770e79e-6239-414e-914a-8d0bc9880256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a795a531-94ea-4ac3-8e23-99c127ca3766",
        "cursor": {
          "ref": "55a304f4-ce56-402d-9765-ac3f15a19d46",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "41af753a-5d21-4334-9824-270df2d4606f"
        },
        "item": {
          "id": "a795a531-94ea-4ac3-8e23-99c127ca3766",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0a60c124-861c-47d0-a1fd-4c541ef0876d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75880ebf-b1c3-4484-b47f-97c1459c9da9",
        "cursor": {
          "ref": "bffc9c28-0e57-41e6-aaf6-8adf47b2c6bf",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "54e4ce8b-cf60-4dc8-98e7-bc04a0ed1a4a"
        },
        "item": {
          "id": "75880ebf-b1c3-4484-b47f-97c1459c9da9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ad2ac064-423e-4162-82ed-f3e3a3299a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5633f445-1469-406d-853a-d0e70801416b",
        "cursor": {
          "ref": "9a2d27ad-59c9-4a59-8f54-09fa55bc0ec1",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2d15d12d-37c9-47f0-89f0-c72503802ea7"
        },
        "item": {
          "id": "5633f445-1469-406d-853a-d0e70801416b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "aa70bafc-8b14-435d-a289-c3f047e221ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d5d0a3-8056-4735-88fc-f3562007e1b7",
        "cursor": {
          "ref": "cb50922d-bd9c-4d06-87f6-87d0333e5e39",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0037e95b-962c-458d-b17a-504ed57210be"
        },
        "item": {
          "id": "37d5d0a3-8056-4735-88fc-f3562007e1b7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "64082c84-3a35-4d4c-a520-ec6e09f844ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35b6672-9cc3-4d3f-8443-34d6589e3d53",
        "cursor": {
          "ref": "a4262101-e664-411f-a100-b97a0d49c771",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a7691ae6-133f-44ea-a8f3-a9787599ef23"
        },
        "item": {
          "id": "e35b6672-9cc3-4d3f-8443-34d6589e3d53",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4188df10-19b7-48cf-a3b9-ea370f992d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cae6fb-f892-43be-afc1-3eb3abeef818",
        "cursor": {
          "ref": "40454e95-b3ac-434e-97d0-c855b0d37afe",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "92b13551-41dc-47b2-bd86-22eb34b5e32f"
        },
        "item": {
          "id": "64cae6fb-f892-43be-afc1-3eb3abeef818",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e7c26764-ef7a-4a05-bf2f-54b5e4b0161d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "aac37242-4fd1-49cf-a40e-a1e9f9a6c593",
        "cursor": {
          "ref": "1a6440c7-7307-4efb-be3b-96b478080485",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bb34317e-35d2-4467-9615-02c205af0986"
        },
        "item": {
          "id": "aac37242-4fd1-49cf-a40e-a1e9f9a6c593",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d75981c2-52ac-4b44-b588-1e87f9398454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b3799397-34af-4576-9088-d697f2bffbbd",
        "cursor": {
          "ref": "1e9913ea-c7f3-4e25-9f39-ec60c06887f9",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6081b2db-3d99-44ac-a89d-3a63a77d4323"
        },
        "item": {
          "id": "b3799397-34af-4576-9088-d697f2bffbbd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9c136d9f-7f30-4ddf-86c9-68477aa40844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3799397-34af-4576-9088-d697f2bffbbd",
        "cursor": {
          "ref": "1e9913ea-c7f3-4e25-9f39-ec60c06887f9",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6081b2db-3d99-44ac-a89d-3a63a77d4323"
        },
        "item": {
          "id": "b3799397-34af-4576-9088-d697f2bffbbd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9c136d9f-7f30-4ddf-86c9-68477aa40844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34fd48f5-30ee-43a0-bef9-a517f1d1b717",
        "cursor": {
          "ref": "7bfbe9f0-4caa-4f78-b109-6007d121cbae",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "955d4d84-7da2-4896-8e77-729201814ff0"
        },
        "item": {
          "id": "34fd48f5-30ee-43a0-bef9-a517f1d1b717",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "65e16286-c1c4-4cf5-94e0-74c22045e6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe782e3-7429-4bc1-9a6e-206861f9a904",
        "cursor": {
          "ref": "5a07c6d5-9bf3-4e61-a459-99d6d2169bb5",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6440f1d3-ca04-45f2-be84-4eedcc646605"
        },
        "item": {
          "id": "bfe782e3-7429-4bc1-9a6e-206861f9a904",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cbddf6eb-0410-4f16-8ad6-b951eeecd4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518b3988-83c6-4e49-819c-e052f1227678",
        "cursor": {
          "ref": "f0adb058-3c92-4267-82b7-6f15229ba66e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "36348ddd-6296-4afd-bd38-f65470b7cbb6"
        },
        "item": {
          "id": "518b3988-83c6-4e49-819c-e052f1227678",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "42c4a2b6-40cf-4798-a771-14026da34f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35244f42-9249-4dbc-b56a-943864716434",
        "cursor": {
          "ref": "0cfe5146-28a7-4f09-88dc-66756528dcde",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c5d65562-cbab-4dd4-828f-17a4bd8bc166"
        },
        "item": {
          "id": "35244f42-9249-4dbc-b56a-943864716434",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d629de4a-c89e-4273-8578-158e5d9c2e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef8795a-48df-4dd8-8457-d661a6b10681",
        "cursor": {
          "ref": "1a44971d-3113-4710-9e37-1a55a250ae7b",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "83bef333-da99-41e0-a05b-cb0e9f819820"
        },
        "item": {
          "id": "cef8795a-48df-4dd8-8457-d661a6b10681",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5adafe52-fc79-45db-ac1b-a19a16de7112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d0cbe1-619f-4239-869d-34ef30192ae9",
        "cursor": {
          "ref": "e78d6d2b-d839-430d-8a65-3eb46df569e4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c84ad165-fb85-483d-a552-927764cf7e48"
        },
        "item": {
          "id": "07d0cbe1-619f-4239-869d-34ef30192ae9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c7f25686-0942-4079-b5bf-59aaad398aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a10006-acc8-4b92-9dd0-fe713feccf5c",
        "cursor": {
          "ref": "212cb38e-257d-409b-90d3-48106ba7e7d7",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e95dc198-e0c3-47b0-913e-3ecb2a1527b3"
        },
        "item": {
          "id": "62a10006-acc8-4b92-9dd0-fe713feccf5c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cd171d1f-4ab7-47d5-aa3c-792ddc7a2b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd90272-a20c-4bd0-8db5-55d6f9d0488d",
        "cursor": {
          "ref": "088487ae-b3f2-4478-a0e7-8f7d608c9df2",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8722bcde-40a6-4ac0-9ab7-dd93018e824d"
        },
        "item": {
          "id": "8cd90272-a20c-4bd0-8db5-55d6f9d0488d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b38957fb-c468-4f1f-9cfc-aa28b306f66d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5ecc95-eaca-4fc9-9bc6-d0191bf32515",
        "cursor": {
          "ref": "e140a07e-0107-49f6-bcf0-3b978b00c47e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8c37ba30-a4ec-442b-ab0c-9cabaff0da86"
        },
        "item": {
          "id": "cd5ecc95-eaca-4fc9-9bc6-d0191bf32515",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d34eca28-a4bb-498d-bfc8-266039b378db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0be34c6-5b05-42f6-b890-96b693ecb443",
        "cursor": {
          "ref": "b44692bd-ccc5-4303-ab2a-6b0170738214",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "02da2feb-0c11-4ffe-b97d-210da4e7b4e9"
        },
        "item": {
          "id": "c0be34c6-5b05-42f6-b890-96b693ecb443",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d632fa42-9338-4997-a548-899e1ff65725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c19c0e6-84a3-4a63-b8cd-05970d49c33a",
        "cursor": {
          "ref": "e4f890be-3da0-4bcd-914f-75e8e57bb234",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7a7b882e-5d92-4db2-a400-e2baac15a734"
        },
        "item": {
          "id": "5c19c0e6-84a3-4a63-b8cd-05970d49c33a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c76e37c2-6f6c-4452-af39-21e2d260968d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6005890-31d3-4262-b82f-66b3c083c9d5",
        "cursor": {
          "ref": "ba3e96aa-144f-4ef3-ba21-b4a17f6c4814",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "eac5d98d-dc35-4d7d-895c-5e92d18d6776"
        },
        "item": {
          "id": "e6005890-31d3-4262-b82f-66b3c083c9d5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8ef0de96-99eb-4fef-adb8-f3fe472fe12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c033fe-a2cb-4943-badf-afff4f90f6a4",
        "cursor": {
          "ref": "a791b548-557f-4ced-89aa-6543089496aa",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "82ee6db1-3fcd-43b0-8a17-fef4a99e9124"
        },
        "item": {
          "id": "96c033fe-a2cb-4943-badf-afff4f90f6a4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e23111b7-0fe5-453b-a70e-f8d4a3064566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a15b06-e481-4177-a095-6d013482fe2a",
        "cursor": {
          "ref": "602bbd13-5801-4e35-b12c-395e0fa01fca",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f757a051-1a77-4bb6-a8fc-1a5925949724"
        },
        "item": {
          "id": "d4a15b06-e481-4177-a095-6d013482fe2a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7754d31f-e722-4bab-a780-1609bccd5744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372cd5b1-6a73-49e9-8fc8-fd01dd3ad860",
        "cursor": {
          "ref": "899104e3-7a6f-4eff-bf20-4eff707188df",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "490d12a5-03ce-4ee9-b36c-a65fdf7a24bb"
        },
        "item": {
          "id": "372cd5b1-6a73-49e9-8fc8-fd01dd3ad860",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8618838a-3be2-4c6e-aeba-7e627f3dcf78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b77b5d-3f49-40d8-b357-8522318d0259",
        "cursor": {
          "ref": "84e8f0f3-16dc-4bfa-b3cc-bfc50c1fa191",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8025f441-ea40-4ee0-88c6-69bcb8f4cb87"
        },
        "item": {
          "id": "45b77b5d-3f49-40d8-b357-8522318d0259",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4a59c219-9de7-4136-8b98-41a81d2857bd",
          "status": "OK",
          "code": 200,
          "responseTime": 871,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "94dfc0c6-b53a-45b5-86bd-ae40d23faa74",
        "cursor": {
          "ref": "6e3b92ef-0bad-4693-946f-c8065b59e1e2",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cf45bf86-8340-4afe-86ed-aadd9dab6e1f"
        },
        "item": {
          "id": "94dfc0c6-b53a-45b5-86bd-ae40d23faa74",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "be948cfd-7c75-469a-a1fe-63d12576b838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828d7825-8453-4a4c-ab24-c800374625e6",
        "cursor": {
          "ref": "bc4ace42-f855-417c-b7ce-ed5c031f1a93",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7b7adeab-bf64-4031-937d-303706e2f373"
        },
        "item": {
          "id": "828d7825-8453-4a4c-ab24-c800374625e6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2fc6f538-248f-483a-b264-8bab36eba6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b0e136-37b3-465a-bfca-3cc120c7991f",
        "cursor": {
          "ref": "fc8b9dc1-7d41-4b7f-b0ce-f990ef87f303",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d46fa822-3928-4a65-a997-c3d5a56085a5"
        },
        "item": {
          "id": "43b0e136-37b3-465a-bfca-3cc120c7991f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2e33bd94-e074-4908-90ac-d4e1822e111c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fbddcd-9af6-4a53-9dc6-124f64f566b5",
        "cursor": {
          "ref": "b7fd9442-4636-44fc-bebe-241cc3797c55",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8e6812a0-e382-47bb-be44-58d8672e139b"
        },
        "item": {
          "id": "e7fbddcd-9af6-4a53-9dc6-124f64f566b5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7ea8e18b-2c69-4870-a547-bd93957bf45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1abdc9-9f8c-4039-983d-261a53b2ee1e",
        "cursor": {
          "ref": "c89a4eba-c61b-4736-b44b-40e97b7ee088",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9937d7b7-f160-44f0-aab9-189ec6ba52e5"
        },
        "item": {
          "id": "2f1abdc9-9f8c-4039-983d-261a53b2ee1e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2c772a44-04ce-4e76-ba32-f2850e51ced2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fdcb7c-da24-4167-9667-e8cb3d1f5da5",
        "cursor": {
          "ref": "0a7318d3-5e56-429f-885e-e7956362f987",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "47898b3f-a16c-424a-9eb2-83a22db7de26"
        },
        "item": {
          "id": "b5fdcb7c-da24-4167-9667-e8cb3d1f5da5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b45410ba-5bec-4c1b-935a-6d79c7aaed70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dea28ef-47ee-4c7c-8c1c-26b64ff9aca6",
        "cursor": {
          "ref": "2b5d6f4a-e63c-43c2-9b5a-a1c23836e490",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7d4c430f-9016-4240-b98e-95e87fc7169e"
        },
        "item": {
          "id": "8dea28ef-47ee-4c7c-8c1c-26b64ff9aca6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c20bbf6c-2952-4cea-9746-9c33443107a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915af7eb-7b48-4217-8c52-692b9f9851e9",
        "cursor": {
          "ref": "4b441717-562c-4edc-9934-ae6c4d6f68bf",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c919b81c-3657-4c8e-880f-50bd9a6e2bda"
        },
        "item": {
          "id": "915af7eb-7b48-4217-8c52-692b9f9851e9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2e9be7b4-9ef1-480f-9b2f-68cf2b69a463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd217c3-f4ce-48e6-a6cd-ebc0c5301cb6",
        "cursor": {
          "ref": "41bbeee0-c8da-4745-9dfd-574373261109",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9476f3dc-63db-484a-9bd1-1e501f83f30a"
        },
        "item": {
          "id": "2bd217c3-f4ce-48e6-a6cd-ebc0c5301cb6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8bc414d5-0a87-45f2-a13c-8aaa037bf865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7bf3505-88af-4502-ad78-cd0c0a97674c",
        "cursor": {
          "ref": "33969c06-b0e0-4534-9cf2-86e0f5868c58",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f61a4db6-45d3-49f4-95e8-6f19a1a88fa3"
        },
        "item": {
          "id": "c7bf3505-88af-4502-ad78-cd0c0a97674c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7b0e012e-e956-4b16-9496-f6b1adb90f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50d73dc-acd5-4cb3-9982-061eb08ac728",
        "cursor": {
          "ref": "5ffa4b5f-eabc-4987-934a-92c3891f0212",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5807332f-45e4-43e8-ba2e-24c19ea2bd27"
        },
        "item": {
          "id": "b50d73dc-acd5-4cb3-9982-061eb08ac728",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "08324b67-30cc-43d3-8bef-f85bb19f1d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56885ae9-7e7c-4045-9e21-eedf19f00390",
        "cursor": {
          "ref": "8736908d-9c63-4fa2-8854-5df6b99073e8",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c668ff14-e4b0-48c7-869a-7615e8bb03b0"
        },
        "item": {
          "id": "56885ae9-7e7c-4045-9e21-eedf19f00390",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "491224e8-619f-45bf-8bf6-90c0fcf907f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b0bd3a-c99f-426a-98ff-4d01edc4cf32",
        "cursor": {
          "ref": "3d76c908-f4e5-4c60-a7b7-a98bf54951ea",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9b512e52-4f75-4b28-a12b-eaf75aae84ac"
        },
        "item": {
          "id": "c2b0bd3a-c99f-426a-98ff-4d01edc4cf32",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "08d3a43d-43fd-4612-97ef-f608b3a07bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda8f899-563f-4fa5-99dd-4e298b451f40",
        "cursor": {
          "ref": "01ac246e-97ae-4ef3-bff4-91e17d926986",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "dfa449d9-985e-4d3e-aca0-64ecc9494ba2"
        },
        "item": {
          "id": "eda8f899-563f-4fa5-99dd-4e298b451f40",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "89af53d8-42eb-435f-a70a-66d9351325c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45dcb0a-6bef-4735-a9f8-4cc14896ad0c",
        "cursor": {
          "ref": "787d11f4-37d8-48e6-afc9-6d6a6bd4f675",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fc71c598-6505-41b2-a10a-973e242367ff"
        },
        "item": {
          "id": "b45dcb0a-6bef-4735-a9f8-4cc14896ad0c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "49b76559-4eb2-47aa-b6e8-319b0c875fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d812a4-2b65-4bd3-bb27-ab2e22387ba6",
        "cursor": {
          "ref": "ffa2f02b-e196-471d-9e3a-22f56e0019fc",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bad68467-919f-41e8-887e-5a85b06cbc69"
        },
        "item": {
          "id": "a8d812a4-2b65-4bd3-bb27-ab2e22387ba6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3b186555-5bb4-4435-b1b1-b4455644aca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a0153a-a013-4173-8b3a-ef17813f6daf",
        "cursor": {
          "ref": "a414ed44-b9f3-47a0-892c-fe52f39e1712",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b31d8824-9a57-4b45-8374-48a5c125d41f"
        },
        "item": {
          "id": "12a0153a-a013-4173-8b3a-ef17813f6daf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4e19e790-ac14-4518-816a-fb84a478a513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8731984-9ea6-47a3-9bef-3ffe576ab045",
        "cursor": {
          "ref": "b80122c7-ad58-4eb5-a7d1-b0abf18e8403",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2249e5f4-33cc-4339-bb64-43ed3e51fd02"
        },
        "item": {
          "id": "b8731984-9ea6-47a3-9bef-3ffe576ab045",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "89ae658b-2285-4e33-9175-30f158c8bdfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2353d4a3-f8d6-471d-bc3d-e927109162b7",
        "cursor": {
          "ref": "e0d6f705-7fb7-488c-b665-3ebf9c374604",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "92d9c00f-ea3c-4955-87c7-8e5a66168be2"
        },
        "item": {
          "id": "2353d4a3-f8d6-471d-bc3d-e927109162b7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "154e3cde-a3bc-4c20-a81e-9da9af1ed7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5036599-c96d-4401-a821-ad514a7c6bc3",
        "cursor": {
          "ref": "0d9168ec-9c07-43e1-aab8-9f3d6533398e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "40f38faf-2b29-4e8a-b1ef-33b8958bf34c"
        },
        "item": {
          "id": "a5036599-c96d-4401-a821-ad514a7c6bc3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aa72b771-91e0-47c4-9104-4698a3c6fd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1375f6c-a0da-4aac-afbf-4ce6f5fe5b37",
        "cursor": {
          "ref": "5e8c64e9-7040-4ecb-bd17-da634467d8ef",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a0a9571f-3073-4435-b6fc-1d6a23e29708"
        },
        "item": {
          "id": "a1375f6c-a0da-4aac-afbf-4ce6f5fe5b37",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cc37d376-370d-4e3a-9b4c-c79b16251465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275768e9-f67b-48a3-81a6-be6c16895a0a",
        "cursor": {
          "ref": "cb8162a6-8a2c-44ff-8a3a-26afa5a5cf47",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cbee69f5-352e-4987-9fa4-daf2ec2e960e"
        },
        "item": {
          "id": "275768e9-f67b-48a3-81a6-be6c16895a0a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5c5771aa-b4d8-499f-bea5-e4f0adcb7d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f47679-b2e7-43e2-b978-a29041a0d6cb",
        "cursor": {
          "ref": "a3cfa572-c440-49d8-afdc-3c756d5ed4cc",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "97f06353-90b4-4117-9caa-1d69432d4e96"
        },
        "item": {
          "id": "35f47679-b2e7-43e2-b978-a29041a0d6cb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "56cbd3ae-efce-43af-8be7-2c1babffb862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d8b2f6-1413-4ad5-a1ac-d92e6d943f23",
        "cursor": {
          "ref": "99db4254-c3ec-4384-97c7-c565e0440696",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "990123c5-c70b-4652-af1a-29dc65f3a58a"
        },
        "item": {
          "id": "b9d8b2f6-1413-4ad5-a1ac-d92e6d943f23",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2db88860-a563-468b-9ebf-939a29e81656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adf9abc-da9f-425e-aa32-fbd88e7c69dd",
        "cursor": {
          "ref": "c6a9ae2a-ddf1-413e-9c2a-b6e6b0adebcd",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5932fe2b-81e8-4c4e-a865-19c7ddf56474"
        },
        "item": {
          "id": "6adf9abc-da9f-425e-aa32-fbd88e7c69dd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "91062f76-baac-4992-9f63-8863bc6acbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3287a3f-8496-4f9e-b120-82d3251c0f2d",
        "cursor": {
          "ref": "6b0904a9-ca3d-49e4-8b52-4cb9d387aa5e",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "395aa8e6-3c28-421d-9a7a-c85f4c903404"
        },
        "item": {
          "id": "f3287a3f-8496-4f9e-b120-82d3251c0f2d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9913baf1-e583-4d61-b2b7-bbd5543a1811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf62b2a1-f5ae-44ec-9e48-8837aa2a6662",
        "cursor": {
          "ref": "ba06205b-e461-4f42-b720-410f5f237e48",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "207bd987-44ce-4bf7-88e3-a40e5e3b3362"
        },
        "item": {
          "id": "cf62b2a1-f5ae-44ec-9e48-8837aa2a6662",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "99a0eb87-f045-4d1d-99cc-5e57abb4b21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41586d32-99f2-48a9-b6e3-2466adfe169e",
        "cursor": {
          "ref": "808dd419-2b5f-45e4-9e86-749ca2194bc0",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7d6300b3-b6e0-4534-b989-02809983e1cd"
        },
        "item": {
          "id": "41586d32-99f2-48a9-b6e3-2466adfe169e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cc94d2a1-33a2-4cd3-a263-e47fd53cc6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d429e712-37f2-4787-b87c-c43b85cd6ae3",
        "cursor": {
          "ref": "8902eb30-192a-4e40-8f4a-2e312c9c27d6",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e4d577ec-456d-4999-951e-3a3510ad4662"
        },
        "item": {
          "id": "d429e712-37f2-4787-b87c-c43b85cd6ae3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d5ceed97-cd12-4931-871a-3e4ccb645305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a437a3-41fc-48e6-bb65-fe18de8ecbc7",
        "cursor": {
          "ref": "c26bee12-b487-4424-b465-38b246c2e148",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ae2c5c84-054a-4c07-a5c7-39bd4acedf03"
        },
        "item": {
          "id": "f9a437a3-41fc-48e6-bb65-fe18de8ecbc7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d7489a31-3f78-4b6e-9b8e-ff61accc2a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e72639-f27e-4a50-9d4e-c29aca845b99",
        "cursor": {
          "ref": "76cb83f9-f5d3-4d64-b924-639acd4f0d33",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "61691b50-af5e-4fb8-a84f-adfc234e5d77"
        },
        "item": {
          "id": "03e72639-f27e-4a50-9d4e-c29aca845b99",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ddb88e9e-ec4d-47fb-b0e4-82bbb4d5ece5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc6938f-aa20-4829-9591-696befdc1222",
        "cursor": {
          "ref": "c31d436e-ff0e-47cd-8dbd-fedb79949a70",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d6502dbc-eaad-4e1c-b819-c85dfd08dcb2"
        },
        "item": {
          "id": "dfc6938f-aa20-4829-9591-696befdc1222",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0cfcd498-6718-47c3-9e17-114ccec0cd15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef119c3-fcbd-4557-9f28-fec25707ab25",
        "cursor": {
          "ref": "2d62e7b4-525f-4798-8cc3-9f662aff9ee8",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ba04a900-2b6e-43f6-98e3-1201fff3382b"
        },
        "item": {
          "id": "cef119c3-fcbd-4557-9f28-fec25707ab25",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6afa8e1c-22f5-4f81-a8ad-ac36260de759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5a20ba-2833-4347-a8ac-7717adf654b3",
        "cursor": {
          "ref": "905f6846-6d3d-4e0b-b8e7-43066ad29b86",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bd148629-376b-4fc6-bea1-b2b4dbf59764"
        },
        "item": {
          "id": "1c5a20ba-2833-4347-a8ac-7717adf654b3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6a5c08bb-c89a-413d-ac17-02f20ef28fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9172f9-650c-4d3b-aa90-daf7b6874f2e",
        "cursor": {
          "ref": "ff3af9b6-1b03-4ad3-ad13-857c70cc52f6",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cca2a2ef-d839-460d-b6ee-e10a6a2559af"
        },
        "item": {
          "id": "eb9172f9-650c-4d3b-aa90-daf7b6874f2e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d2731252-5f1c-437b-aaf0-bced9efd0d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0aab51-174a-4313-8012-2e1944bfa9cd",
        "cursor": {
          "ref": "dc7b5e99-3fa0-4b9e-a660-1cdcc59f5d6e",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cd972f96-c52c-40d0-9c20-88e66171154e"
        },
        "item": {
          "id": "2c0aab51-174a-4313-8012-2e1944bfa9cd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ec8b9091-76bf-4a73-84ab-68e4d79a30ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848008e0-2ba5-4330-bc1e-61829995c00e",
        "cursor": {
          "ref": "14366358-69f7-4708-9da5-16e45696cfa2",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "457233ff-8481-48d1-9660-e10b2908b0bc"
        },
        "item": {
          "id": "848008e0-2ba5-4330-bc1e-61829995c00e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8bfa4db4-3b81-4b1f-8c27-7503e28ec3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d18e5ca-4ab6-42c0-a80c-533cc9d40a2c",
        "cursor": {
          "ref": "31376ed8-2762-41be-a88b-49aacc99feea",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a2a8f1e1-7334-48a2-9b49-4c490ab803ec"
        },
        "item": {
          "id": "1d18e5ca-4ab6-42c0-a80c-533cc9d40a2c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "055f7e45-946d-44be-b205-27866d42581d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdb7052-f3c0-4220-ad28-a81d3ad327d3",
        "cursor": {
          "ref": "52c01a9a-eea3-41e2-bcb3-0b3bd0b3862b",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "caea5d69-92e9-48ad-9a78-7dc22fc8730b"
        },
        "item": {
          "id": "dcdb7052-f3c0-4220-ad28-a81d3ad327d3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9702ccad-ec3a-46e0-aa7b-dd5f44e1536a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ed51b5-db42-425e-b221-7810911c3102",
        "cursor": {
          "ref": "b6571308-75b7-4999-8461-c823f3caeeb6",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "efcba216-a64b-4224-b686-2b2204efab18"
        },
        "item": {
          "id": "24ed51b5-db42-425e-b221-7810911c3102",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ad63ab6d-1ddc-4cae-963d-b9c349f4d4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad982fe-42e6-4174-a562-479772b14f19",
        "cursor": {
          "ref": "dd378f02-5243-4916-be0a-9dfcbfc9afc7",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "63aa6728-d835-4aef-98f6-4e0ba241c89f"
        },
        "item": {
          "id": "0ad982fe-42e6-4174-a562-479772b14f19",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "143f0556-92f7-4430-94c6-8c9dcfd83af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813e7fa7-e87f-471d-9d87-3c945b4908f4",
        "cursor": {
          "ref": "bcf30a6c-13ec-4458-a1dc-fbd95e06167e",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5ca352cd-ad28-47e1-8c64-53477e3ae124"
        },
        "item": {
          "id": "813e7fa7-e87f-471d-9d87-3c945b4908f4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "94d83cfb-3601-46f0-b05c-07506cdea884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34311007-756f-4c9e-b769-ae8a64a20721",
        "cursor": {
          "ref": "b8c037ec-a6f9-40e6-be8f-1f4f35d8cdf9",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "33412d0c-ec1c-48cb-b61d-77449fabbf70"
        },
        "item": {
          "id": "34311007-756f-4c9e-b769-ae8a64a20721",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6268f27d-fbfd-4702-8cb5-1731bd7bc6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216b1134-1365-4abd-b8c9-0b88c847f5fe",
        "cursor": {
          "ref": "62c5de51-2482-444b-a64f-5aebfed524d0",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7bad9224-48c3-455a-8280-dc4d24ec711a"
        },
        "item": {
          "id": "216b1134-1365-4abd-b8c9-0b88c847f5fe",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "171c1a42-d494-4460-b9e0-0a2d3d28369b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fced37-8967-46d5-b852-4d2bcce71f1b",
        "cursor": {
          "ref": "5b7eac79-9d7b-497f-a056-587b66e397e7",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "25cd50fa-cada-43fd-adb1-843d2e240706"
        },
        "item": {
          "id": "36fced37-8967-46d5-b852-4d2bcce71f1b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0cba3281-f08a-4011-a0b0-bacd829f1890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe170179-1c0f-4130-b18d-c8e8477cfa1f",
        "cursor": {
          "ref": "e230e500-5db0-4e54-9004-491f3a37e127",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8f407b5c-42c8-4ff9-a36e-3b9ae7cf89df"
        },
        "item": {
          "id": "fe170179-1c0f-4130-b18d-c8e8477cfa1f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "72d6b811-62fd-4885-be93-1067ba699af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8ff89b-5c65-4a05-b1e1-205922c4495e",
        "cursor": {
          "ref": "ac20e5ff-123d-46d6-8bdf-6fa7772791d4",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e8f0f942-b141-421b-808e-65c7f321f68d"
        },
        "item": {
          "id": "6f8ff89b-5c65-4a05-b1e1-205922c4495e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6cd66939-229c-4c7a-813f-960f51e996df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a30bc0f-211b-45e0-af40-c7a15394020a",
        "cursor": {
          "ref": "a81450f8-d12d-4f78-9d97-2bd08b05eb52",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d0b3f6b3-5406-4ce9-a86d-013862c22003"
        },
        "item": {
          "id": "9a30bc0f-211b-45e0-af40-c7a15394020a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "77625cf7-d44e-4f11-a332-e30859d008b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2dcf48-219f-43df-88dd-83520b89c00c",
        "cursor": {
          "ref": "298a53ea-c24d-4c86-a9f1-f95feb3d0041",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b6feaa16-eeca-45d0-8c7d-7fa6ff2f5e1a"
        },
        "item": {
          "id": "cb2dcf48-219f-43df-88dd-83520b89c00c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eacea161-9385-42ac-8d36-2f2f04da8b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e950e010-c52c-4e06-a648-58b0f2fca91d",
        "cursor": {
          "ref": "9a9339e3-334a-4005-aa2c-4b562ccc4be3",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ce57d09f-d17b-4268-aaa7-2b0f9437ed3a"
        },
        "item": {
          "id": "e950e010-c52c-4e06-a648-58b0f2fca91d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cd7a8f89-c26d-44eb-877f-d5c292ba31ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a473e2c-430a-4a1e-befc-bbc00e526403",
        "cursor": {
          "ref": "d4ec0dd0-b2fb-4414-babc-631586198f3b",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bf24c6e6-b8fd-4399-9c53-77dad77ed355"
        },
        "item": {
          "id": "1a473e2c-430a-4a1e-befc-bbc00e526403",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6e36aed0-7bcb-44e9-91a4-437603f6e243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1197a5e9-7d62-45ee-aacd-7168f47c895f",
        "cursor": {
          "ref": "c1eeca63-37b6-4f33-a1d7-43d07062200d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5595a46b-d980-4cc2-bb10-4c6ea24d7e77"
        },
        "item": {
          "id": "1197a5e9-7d62-45ee-aacd-7168f47c895f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5100f518-2368-4149-92dc-1b02a439c80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04156c3-b2c1-4eb9-8597-40a441ff4ee1",
        "cursor": {
          "ref": "a27bd824-cf44-432a-9089-2d59ca40e070",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4ccc4af3-713d-4c91-86e2-bbccb726b69e"
        },
        "item": {
          "id": "b04156c3-b2c1-4eb9-8597-40a441ff4ee1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "09a01197-4686-4895-be54-185e1a18ade4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4969709f-660f-4f7c-ba59-a88013c6387b",
        "cursor": {
          "ref": "48c0a676-54b8-4c7c-a965-778ea78901f7",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "82d02377-0462-4e27-b106-2ead1502e345"
        },
        "item": {
          "id": "4969709f-660f-4f7c-ba59-a88013c6387b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9eebee80-d553-42be-b6b3-020db485b358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5fe5721-ecdd-4b6f-aa03-3c34d17de9a7",
        "cursor": {
          "ref": "09a8e4db-d413-4e51-80bb-a3c21a2ad74e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e5d09e76-d785-4760-aba2-1588d6c16522"
        },
        "item": {
          "id": "a5fe5721-ecdd-4b6f-aa03-3c34d17de9a7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f5c68926-03cb-4f31-b590-b74beefc86f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64113b6b-4629-484b-a378-3d1f69d1b55c",
        "cursor": {
          "ref": "f3770f4a-8160-45cb-a6b3-8d601abc5d22",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "53642f70-508e-44b6-b8ee-2398da768649"
        },
        "item": {
          "id": "64113b6b-4629-484b-a378-3d1f69d1b55c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0e5d330f-a089-4af6-a565-8b42ef15e44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02981e76-9aa5-487e-b649-041b94908161",
        "cursor": {
          "ref": "870084e4-307e-4c87-8c8c-495afbc4fdbc",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "506f7970-d732-4fc3-b314-b062af0af70b"
        },
        "item": {
          "id": "02981e76-9aa5-487e-b649-041b94908161",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bd042497-5ddf-4612-bcc7-08d1cbe6a414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf70b00-b929-447b-a92c-a6263954b346",
        "cursor": {
          "ref": "8ef7134b-382c-472f-a16e-51cc7553700e",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8affc008-5ce8-44ed-9105-6c4c6721145e"
        },
        "item": {
          "id": "abf70b00-b929-447b-a92c-a6263954b346",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c5acaa70-b757-4ca6-89f8-6162f835a4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ff7aa1-8305-496f-8482-468ea316bbf1",
        "cursor": {
          "ref": "7c84c9ff-704e-4a2e-9cf5-6defdd8201d4",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cd08067d-0679-493a-92f1-254aa37e3be2"
        },
        "item": {
          "id": "b9ff7aa1-8305-496f-8482-468ea316bbf1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6062f6b8-abfc-4ce4-9a37-229d541c8ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57504179-41ea-4715-8750-99eb432f0fdb",
        "cursor": {
          "ref": "7958d4d2-a4ab-4ab3-9427-93e341d787a0",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8dbbd1f3-4739-45c7-96bf-14ecdbb1b8d5"
        },
        "item": {
          "id": "57504179-41ea-4715-8750-99eb432f0fdb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e628dcb7-2847-48b5-a3d1-c398f6f6869f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ba49f2-90ea-4c72-9d09-6f3bdf1609c4",
        "cursor": {
          "ref": "90f318aa-c88d-45a8-b159-7bbb4536aa97",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7608df88-645c-4bbb-a1c9-8ea1791a112e"
        },
        "item": {
          "id": "18ba49f2-90ea-4c72-9d09-6f3bdf1609c4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "01f6e639-ab79-47a4-9562-cb0dc5a2c224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924571d9-e191-40be-bed2-4704a5827236",
        "cursor": {
          "ref": "216c54f3-0295-4603-8c4e-78655e089d36",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b5845c0f-2e55-4b90-8365-46336217c2f0"
        },
        "item": {
          "id": "924571d9-e191-40be-bed2-4704a5827236",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6bf18448-73e4-4fa4-8b0d-ce9fdfe382a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93f1ee8-53bd-4487-8b54-f051601c0873",
        "cursor": {
          "ref": "30a7481c-81f1-423e-b2c7-a480e3307cf5",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "356cad2d-bdef-441c-b1f0-edc9bb7ac310"
        },
        "item": {
          "id": "f93f1ee8-53bd-4487-8b54-f051601c0873",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b44f8d4d-4339-48a5-b02e-9487732dfe4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc32d31-22b6-42c0-9ec9-cd890c11e338",
        "cursor": {
          "ref": "7f982b05-cf01-4b2a-9e4a-ae76b4c40713",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3e5888cb-d270-40f7-9d8d-0110f2f95760"
        },
        "item": {
          "id": "0cc32d31-22b6-42c0-9ec9-cd890c11e338",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cde20b0e-41c6-45ad-9c31-26e5df2dd622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5daede05-8c04-4910-b420-9094efad49ad",
        "cursor": {
          "ref": "afb49f9c-114e-4b71-9513-14054cc0ca00",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c711e701-c84c-4427-a4d4-46535890e999"
        },
        "item": {
          "id": "5daede05-8c04-4910-b420-9094efad49ad",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a9569b07-1154-442a-8439-5363b3880f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97dc9549-224c-47d5-b8f2-9fa11b1e96c4",
        "cursor": {
          "ref": "aa3746d3-ae91-460b-8329-836071e8562e",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2f95ff63-5cae-471b-8c1a-bb7b644ddc24"
        },
        "item": {
          "id": "97dc9549-224c-47d5-b8f2-9fa11b1e96c4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "19d28077-68e2-4bad-bfa0-551f436b0977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2584eb-80c8-4dd8-bb03-4f2081e5424a",
        "cursor": {
          "ref": "4669f58a-e7b5-49d2-9106-9e800eaa0b4b",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "05e6d8c0-694d-4d63-809b-ab3a73cb51af"
        },
        "item": {
          "id": "6f2584eb-80c8-4dd8-bb03-4f2081e5424a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "03e0713a-eef3-4d36-adbb-ea5f32525014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b870b08-b5a2-4c80-bc87-dcd36b4bca11",
        "cursor": {
          "ref": "5dbbbbf6-4c20-4c23-9a98-2944cd5310f2",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "398f17f8-a9bb-46e0-9545-9aec54b16fb8"
        },
        "item": {
          "id": "8b870b08-b5a2-4c80-bc87-dcd36b4bca11",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "be9aa602-fa20-48f5-ab2c-60706ba7059c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab2a3eb-dc73-4fdf-bee3-3369557b7a5b",
        "cursor": {
          "ref": "742e7462-b63c-4df0-b722-93775fd08a4f",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1bb63f11-b5e0-4ee1-b6ee-2f2716715739"
        },
        "item": {
          "id": "eab2a3eb-dc73-4fdf-bee3-3369557b7a5b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "00086e5e-14a8-43dc-a9f4-30691524a714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56150822-ef55-4af5-bc17-cd907fb70853",
        "cursor": {
          "ref": "dcc2b686-511c-4a19-8c7d-db1d78f474e1",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3e0bf4a1-4862-4723-b684-70c7879d1dee"
        },
        "item": {
          "id": "56150822-ef55-4af5-bc17-cd907fb70853",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "04564d7e-1790-40de-86e2-2dde8e164675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868b5bbd-1497-4189-ab42-f86aa4547b49",
        "cursor": {
          "ref": "ff09ce21-a781-4efb-8649-21881d781fe3",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "55ab73f7-adfd-40ab-b05e-61241a707126"
        },
        "item": {
          "id": "868b5bbd-1497-4189-ab42-f86aa4547b49",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a8005c41-7495-4de6-92d1-f01354f341ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767e29b6-b211-48fb-b3a3-a23fa11ae8c4",
        "cursor": {
          "ref": "53291f1e-e0af-49b3-a0ff-f822e01594a1",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "29d3b3c7-6c98-4aa2-80ed-9a1d42983ecc"
        },
        "item": {
          "id": "767e29b6-b211-48fb-b3a3-a23fa11ae8c4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7b841220-67ca-4745-8354-573472db93f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c33fb72-c8ef-42dc-adb3-743bf51ba71f",
        "cursor": {
          "ref": "175437f0-dd42-444c-807f-435502861dbc",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fa25c011-2d7e-4a81-beea-d388f50e79d9"
        },
        "item": {
          "id": "8c33fb72-c8ef-42dc-adb3-743bf51ba71f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "671f2c03-6087-44c6-b9d1-66c98eefca08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed406f18-0b09-40d1-a4e2-8e0de559ad43",
        "cursor": {
          "ref": "c977d673-e340-4280-9e21-7e2b779a12cb",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cf1be353-33ac-4c4a-b073-fb72892a4888"
        },
        "item": {
          "id": "ed406f18-0b09-40d1-a4e2-8e0de559ad43",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "58b8adee-c948-4920-90e5-951b39f29d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d7dab3-8dd3-4ef4-b850-127db3fabfa3",
        "cursor": {
          "ref": "a8ecaedf-8b04-4439-802e-3262f6f5c5f0",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8801e430-51b8-48d8-b894-b8d68b3cf320"
        },
        "item": {
          "id": "31d7dab3-8dd3-4ef4-b850-127db3fabfa3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0d0191de-5d27-4ce1-a381-63d057998774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44a5d3f-0f15-4f82-b185-486f4de0b2e8",
        "cursor": {
          "ref": "9daf8cc4-26db-4009-a95f-418dbe7c6dc1",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d2d0444e-f56c-4513-8bd0-e190e65b0c42"
        },
        "item": {
          "id": "a44a5d3f-0f15-4f82-b185-486f4de0b2e8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4a91b363-e81c-438f-8507-53de03607231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565df0c5-e4b7-4026-9a48-3f68f95901a9",
        "cursor": {
          "ref": "2942a0fa-9df0-425b-97a2-95193fc74213",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1b60fcf6-1f04-48fa-9499-4fe5424880d7"
        },
        "item": {
          "id": "565df0c5-e4b7-4026-9a48-3f68f95901a9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5635fb26-ecb4-4b5c-8ebe-01ff82431e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2814272f-2f66-428d-a65e-2d52ebc8a37a",
        "cursor": {
          "ref": "8a8de315-37b3-4aa4-a339-fe9fe9b45720",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0a8602f0-60f5-442b-9dc3-08c38743f8c8"
        },
        "item": {
          "id": "2814272f-2f66-428d-a65e-2d52ebc8a37a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "43eca24a-617e-42d5-b07d-ad3bee0e86f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ce9757-18a4-4e04-8f07-d75fac2528a9",
        "cursor": {
          "ref": "68365fac-09af-4727-98a4-e4922daf0b04",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1f079543-c5b1-49a1-b48b-bfa3d2237edb"
        },
        "item": {
          "id": "14ce9757-18a4-4e04-8f07-d75fac2528a9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2c425cc3-0f88-4649-814b-3a82bb8d76ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b249b861-0894-42a9-b1ef-cc6a6d6a65b1",
        "cursor": {
          "ref": "5108bd58-31cc-4a11-a103-ef2f739310ae",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f733dd3b-0de5-4568-aa71-3406205a7506"
        },
        "item": {
          "id": "b249b861-0894-42a9-b1ef-cc6a6d6a65b1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4700a9bd-30b6-471f-bd14-704d9923a9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9fd8dc-4542-46ac-89fb-3122114b1cf2",
        "cursor": {
          "ref": "19f44123-eefa-4031-a402-67856d6deb9c",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f6144e3d-9b94-4045-ab20-da27fabf30ad"
        },
        "item": {
          "id": "ee9fd8dc-4542-46ac-89fb-3122114b1cf2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "78822f32-333d-4374-86df-ac4603a671ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "954504c3-556f-4a02-9d24-0bbad5033716",
        "cursor": {
          "ref": "2d45e6d7-4152-470d-9aa1-3aac1c0276cd",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1e9da54d-8fce-4abc-b6da-03c440146605"
        },
        "item": {
          "id": "954504c3-556f-4a02-9d24-0bbad5033716",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d4c1c306-01df-4ffc-a3cf-449c327e7402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6b579ff8-041a-43b1-aeeb-2175de9b30d9",
        "cursor": {
          "ref": "61c03491-079b-4980-a858-aa909bd933c0",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "515797a7-f802-49da-be5f-b279d16c0941"
        },
        "item": {
          "id": "6b579ff8-041a-43b1-aeeb-2175de9b30d9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c4f69265-dd35-44cf-87e4-e9ae0b85d095",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfda5bd3-eff6-4263-adea-b02ffc717a96",
        "cursor": {
          "ref": "bc03e763-c64c-4f65-bd80-3dde3002870e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e3116db3-3071-4678-ba8c-eeb8836f7943"
        },
        "item": {
          "id": "cfda5bd3-eff6-4263-adea-b02ffc717a96",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2128b590-beab-4025-924d-58237145da06",
          "status": "OK",
          "code": 200,
          "responseTime": 1622,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "628bcdda-00b8-45af-b399-4c4c88a18ec9",
        "cursor": {
          "ref": "ba88897c-ef52-4a21-94d2-01cd61bd2da2",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b112ac95-e52e-4bf7-983c-7656b0924e1a"
        },
        "item": {
          "id": "628bcdda-00b8-45af-b399-4c4c88a18ec9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b9b9a1c0-ef31-40ba-aacb-f44f41f37481",
          "status": "OK",
          "code": 200,
          "responseTime": 2683,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80b60e7-48cf-4ef6-8457-f1494b15b7aa",
        "cursor": {
          "ref": "f3bc655f-052e-4c2b-81ec-ad20bed221af",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "36bce24d-d658-485d-9c66-55560b105819"
        },
        "item": {
          "id": "f80b60e7-48cf-4ef6-8457-f1494b15b7aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "59ce77d7-f9cc-4bf9-981b-7ea1b4f595a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "f80b60e7-48cf-4ef6-8457-f1494b15b7aa",
        "cursor": {
          "ref": "f3bc655f-052e-4c2b-81ec-ad20bed221af",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "36bce24d-d658-485d-9c66-55560b105819"
        },
        "item": {
          "id": "f80b60e7-48cf-4ef6-8457-f1494b15b7aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "59ce77d7-f9cc-4bf9-981b-7ea1b4f595a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "f80b60e7-48cf-4ef6-8457-f1494b15b7aa",
        "cursor": {
          "ref": "f3bc655f-052e-4c2b-81ec-ad20bed221af",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "36bce24d-d658-485d-9c66-55560b105819"
        },
        "item": {
          "id": "f80b60e7-48cf-4ef6-8457-f1494b15b7aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "59ce77d7-f9cc-4bf9-981b-7ea1b4f595a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "8cda9c10-40bd-4d0a-bebd-a1eb5d0b8d82",
        "cursor": {
          "ref": "50e5ea46-6619-46b7-a45e-b1d1c4f9463c",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8f5e3a1f-9892-44cd-a785-337ebcc5ab42"
        },
        "item": {
          "id": "8cda9c10-40bd-4d0a-bebd-a1eb5d0b8d82",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3dc104a7-89eb-4b86-8a95-ba13e48a0225",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1f9047fe-6cdc-456f-bdd7-4d8bd7e07d4e",
        "cursor": {
          "ref": "e74fc7f2-32ce-452c-a4f7-9ed09ddd003c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a77f96e1-9891-4c92-b670-b0208b7c26c3"
        },
        "item": {
          "id": "1f9047fe-6cdc-456f-bdd7-4d8bd7e07d4e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f667c852-dc5c-4f38-8450-8c68cac5ed7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "1f9047fe-6cdc-456f-bdd7-4d8bd7e07d4e",
        "cursor": {
          "ref": "e74fc7f2-32ce-452c-a4f7-9ed09ddd003c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a77f96e1-9891-4c92-b670-b0208b7c26c3"
        },
        "item": {
          "id": "1f9047fe-6cdc-456f-bdd7-4d8bd7e07d4e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f667c852-dc5c-4f38-8450-8c68cac5ed7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "58d10157-7dcc-4a44-96cd-89ccbc791ee1",
        "cursor": {
          "ref": "871ebde7-b90c-4cbe-8fc6-14bed9d3c03a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "48d45199-9696-4d8c-91fe-493e85b262ec"
        },
        "item": {
          "id": "58d10157-7dcc-4a44-96cd-89ccbc791ee1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "64a9e20b-61bc-4396-8ed1-b33a364e260b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b2314052-765a-414f-a5c8-3c7a09ef3e82",
        "cursor": {
          "ref": "a3e60cf4-ffb3-47cd-93e3-7dda936cc288",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "998fede1-7aad-4068-bd37-00cace1c0908"
        },
        "item": {
          "id": "b2314052-765a-414f-a5c8-3c7a09ef3e82",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "30133297-0afb-4efa-880d-78e0b037fed9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b2314052-765a-414f-a5c8-3c7a09ef3e82",
        "cursor": {
          "ref": "a3e60cf4-ffb3-47cd-93e3-7dda936cc288",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "998fede1-7aad-4068-bd37-00cace1c0908"
        },
        "item": {
          "id": "b2314052-765a-414f-a5c8-3c7a09ef3e82",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "30133297-0afb-4efa-880d-78e0b037fed9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "47b080b9-ad01-43e5-a253-bec191d0e4e8",
        "cursor": {
          "ref": "1485371e-f2c9-42b2-9ded-8f4ef885d31e",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a08abeca-7dad-436f-aab6-5cd2d5baad00"
        },
        "item": {
          "id": "47b080b9-ad01-43e5-a253-bec191d0e4e8",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "28b21f1e-a7b0-49c2-a0d8-2253670c849c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}