{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a9cf66d9-0c9e-4676-b1c9-47f5f442020d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "58b02a6a-20db-4ba2-9a65-859864933cbc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5b79730-74b5-49f4-a964-7255c5b2d9f1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e46ec359-68fa-4b67-a23c-b446f94513f8"
                }
              }
            ]
          },
          {
            "id": "9cfcd48d-358d-4645-aa8e-817ac5549692",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c3743e2d-f671-4752-a79c-e027c3332f2d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "94c0559c-4092-416d-a291-d1f82bff631a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "30d377af-0682-4609-8d0f-13301a02e94a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "310e9f9a-d3ae-4591-9ab4-f29e36c9aa93",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7986cb47-da83-425c-b19f-37f09ede2cf1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83e8fe70-e6a8-47bc-a6e0-373e6e9021b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82037a5c-3b88-4f69-b09a-a3cec010e3f3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e00e08e3-5df0-46da-8c5f-25b3a0f9b99d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b8ed5e4-cccb-44dc-8df6-4eefa37cface"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "584f9cc4-7798-47b4-b113-2c43aeabccee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aab7a170-0024-476c-be49-a63db39b6030"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f581f60-c4a7-4ef7-ac18-e0d9805ed94c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d141fee5-6306-4757-b357-49018c948e6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12b7ae69-fdf0-48bb-b276-30a0bce0ed98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b7f8e0e-24d8-4073-a07f-0498eb799d9c"
            }
          }
        ]
      },
      {
        "id": "8f07c63d-7529-455f-9f71-f8039333a853",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "242a1068-6877-4858-8eb2-be8377d27f04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bbd573ed-0bd2-4736-bbba-18106fbe37c3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "53256869-6484-4b1b-83f6-306a29071a2e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b9153f-29d2-42ea-b024-c1d6325b86e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12635781-6ab1-49e5-962b-9ed418cb8663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4085c8-ff9c-40d9-9808-545d5637f3d5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd2b7c1-9bac-4492-9487-1651f1610e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "397f9f01-6ed3-4fc4-8def-aaef3b9dda41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b31bbc7-582f-4dde-9236-608e653aa852",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ba61de-221b-4f78-88d6-befc598fedb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdad8707-729e-49f8-a423-e5b3c9b8cbc7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6aba3912-2498-4b5b-aeb3-90f7c5c5d896",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e33e5437-e847-47bb-b1e6-a3230957e225",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1beeca91-c79d-4ef5-88a0-1173ad1cf587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b45e679f-38f5-4e75-a38d-6d37954d88cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814c9e07-69c9-4ffc-99dc-566bb7a48e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f4e40d-e739-4557-a584-96c708009303"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "80902705-a04b-4be9-a8be-5f691a06a154",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96d0dc57-36c7-40f2-8849-9f30aebc9de2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66e22394-5473-46ba-b300-94885df9c9fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fcd9ddea-de3c-46a7-8afd-bafc826fdae6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45c19bed-9033-4d5b-9224-7aee8b21ad81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f88e3938-87f7-4dca-8825-441a32f6170f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80037916-c8ae-4b22-913a-8e60bd6df391",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40e0f335-020e-4cac-a480-84db035cb937"
            }
          }
        ]
      },
      {
        "id": "2a2c8f32-fa82-4453-a06a-d499c9fe5acc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9c0f023e-2f44-4d18-bbb8-1f7863a3580e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9cd2a9e-8bf9-4f77-977d-0d6a2c168fd7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "aa4cce15-80c3-4c1f-8687-84a972b0df91",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9288d6-72f1-47f2-9dc4-20cb266ce116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd852cb-c3b4-4779-b534-212f163661b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de6e4e3-8543-49b9-a4fa-106875c8d137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ceb28d8-2c59-4efa-a6e8-ca6e3eacb030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e254dc6-1c3a-45c6-a3da-e126ed877506",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42533cc3-5557-4e9f-b080-3ae78ca04655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3feb2743-3e51-4ed1-85fa-6ca6c4e532fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cc4ded-8a7c-4e39-8d27-e58c1e4183ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16e090dd-58dd-4e3f-88f7-289bb56e3806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e5d6f8-7afc-44e2-8600-6793d4249d76",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749e33dc-dbc2-4af0-b655-7315c616915a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d166612e-bf31-461f-8801-bae59283687f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db470430-f337-4d06-996c-e23aabc5ddda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf1f81e1-acef-49b0-947d-3c4b63fd586a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977e12c5-43b5-4af8-bc3b-9db8dc476ac9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288cbd27-5f6c-416c-bcd6-8f116e4728bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054945c4-5aee-4fb1-9932-de75831e8bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96616b4a-7b54-4cd4-9a19-26da72001d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "774ff38f-64bf-4df1-96eb-fe0dbf37839f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42b1a76-bb63-494d-9888-fc75ffefbaec",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8715ebae-b35e-41f1-848f-eb59782f3505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8572044e-f498-4ee7-88aa-9e28f47e57b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8801fbf-42ed-4bd1-87f5-f7eed36a1ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c0fd659-3b7e-4075-a1a1-3df91bb3f794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b805b9-93c7-48d8-af9f-5f602c853548",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b046d29-b39a-458f-9220-2d772a1b86e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b886b5-e4d4-42f2-85dc-86ac78e0e207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82301a58-b077-4dea-b056-c82579d78f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "311e1b69-dc07-46f8-8451-1943000d9dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba7eb42-1ee0-44f3-9685-4eac4ff75fbd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1ea119-d22a-43ce-b54d-8a5eadb36d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25b3bc1-58e4-45fc-9313-f31cef9bdd20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c06d2a-e69c-4d84-a26a-346bd2bfe213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60705c51-06e1-4cca-b486-eb5e371b05fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362c67a0-bdcc-4495-ab23-3578e4d0de54",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61acfbc3-ea6b-4661-b493-c776162d9936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d8cfe6-e02e-4862-9589-f5d53b8df87d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf72ae2-db5c-4dc7-b5a8-b4ed47ee787e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed45dbe9-efaf-4729-900d-3c16a268f722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e16fc27-372d-45c3-9ea6-bba454551701",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfcb215-35ff-4c30-b3b4-fbb47bfdd389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc17569-cf57-4e83-bd2a-d8b25050b4e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c0670d-8c2d-4855-ae24-005f6fc32070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09fd53ac-b4a0-40c4-babd-0912d73690ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3880f1ff-8b1f-49b0-bc7e-893ba8f35446",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b038b8f6-238f-48c4-9d72-7e23e7c274ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5bb3a5-7cbc-46cf-b41e-889e83b7f2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f42db2-8a1f-49a7-b9c7-8a28cf148064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbacb751-f8c7-46db-a30d-65b52de00ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8928c227-1f80-4664-8a51-c0f55aef25a4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce98705-7298-44af-9d92-a31a047657a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b14c8f9-9b1d-459c-be11-1098b24dc7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd6655a-1525-44bd-a594-3b80259cbb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e81a69cf-de9d-4c4f-928b-03f18a262144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102e402f-9467-4483-a6ab-7badb9954242",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5ee5d8-8a05-4cbd-a29b-070f4e0c1343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fa9350-43f8-4a8a-9b45-147c05d214cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d316bd9-5855-400e-8ee4-5ebc46cf32ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13f5eea4-8ce2-4c08-aaa0-b081e7a546f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebf9a30-832f-40b5-947c-06d67c326110",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b66450-2c02-4d29-b8f5-a5cd8d3d070c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c6baa8-63f4-44a9-8126-0ad1b7dcb21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39177aaa-3253-4b87-b56c-317637397e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb4c41cf-825d-4974-b881-3c719cc3e881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4ad4f9-a1f0-47e3-8751-351a00cd39b9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a918951d-10f1-4aad-bd7b-485424809d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a13cda-73d8-49d1-9d48-c3af2e9022eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b442727-3006-41a8-8f84-069642ff9b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f70e48c-389d-4c70-af39-2c3fe6956c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ec0d12-0f72-4c7b-87c9-57533b968b60",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc296f1-1819-47c2-9653-64c3e455d910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eee7c1a-a929-4bb2-86b9-0f5cd8cb1d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a563e2-7a21-4b30-9e75-9bee1eef5a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c04f47c4-5856-4f0a-b50d-c8024423010c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d59f94d-a7d0-4296-a856-2478dac4b20f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fb9e47-ed44-4a70-a9a4-dc1c0e1006ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28fadd2f-74f6-40bc-9922-539b18dc461d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd8b12a-0036-4358-82a4-3c21f25179b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d4669bd-5194-42ba-b860-88d3f2382a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc1ba5f-e845-4dcc-8a6a-1f5261e92f69",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f9a4fe-8e81-4199-aea0-b7310ccb5403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9917eb-3f57-4cae-8288-6db1892a6694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acef7bc8-01ce-41e5-952a-3de8b6434b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63a13cd5-90ae-4b0d-a9bc-3bca9f131be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ebeef8-eecc-4e3f-8391-8d1008c7d0fc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be3d8f5-e100-4a33-a724-a5601a1a3fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3373df-50b4-4eea-82a3-7ee9275a1b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2b4b93-97fc-4900-b695-4d0f3958bc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a40846-a78a-4cff-bb14-0bdc5bb5d68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32717eda-0460-4bca-a93b-739ef225fae4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83bb600-03ef-429d-b434-e4155b6f3a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2904a1fd-7ed1-426d-9165-a3c8f67abab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd6460a-68be-49d7-ba18-a52b133a09c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b68d59-4dcb-4429-892f-04772a5c1307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19234906-d918-468e-a3eb-c8028c61f7a1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5981b03-352f-49b0-9fe8-7e28c8ad9168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7525cb39-4d7a-42dc-a082-a6ae4acf43e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dfe906-0db4-42f1-8536-3b66bc4707cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aba7698-86a7-477d-a611-86b692158b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce3a132-c257-4a90-8880-4aeb20b2383f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8826c096-ffba-4134-971b-0efbe574def3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d6a223-2b02-47e4-a4c8-ef4cd530a704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603c7f40-1d49-424c-bbd5-9e968b60d069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a5276c-8ff8-4513-a602-83088315f7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec01ca9-44bb-4b25-8758-d0313fc15500",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81e3fa4-59e5-4dd0-a356-90bae4098c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc00628d-8bf0-426b-9ce7-0f53f53b4607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd70a66-4e23-43c3-8679-6c7863bed9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "40edf1dd-f8d6-45d4-a9ce-2e067759a174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bad40e7-f024-4af0-958f-f00ad280557c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dded8a83-8ede-4723-a4f1-a11827b1135b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9bb20b0-f032-4898-a442-a21a8051c086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51176dca-ca0a-490a-b755-2ea150227d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0370f2e-bcfb-4d2a-836d-54b58a8631e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79eaeb2-801f-4999-877e-c8e4c3e5cc56",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c0426f-6e1a-4a1b-a123-c8a2455a3226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cead174d-6585-4cb2-b0b4-92c1fea36c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ef2a86-745d-4cd0-898f-3d84d166aa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "efc1b954-3550-402e-bc50-ca9b1f4afa39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c8c23b-276d-463d-b104-d96196551257",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2745953-c3ee-413a-83ce-0b9a42231018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6116218-3d48-4253-89d8-af31d10d3bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85b10b5-162f-4a43-bddf-6d255ac16836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3d8302-611f-4912-bdd3-d78beb310f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bbf82f-237f-45a8-be8a-3a0c642ed751",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5198d1-b196-4739-94e5-03a89b43f990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e28416-bb8a-42e1-b878-092d7ff2deac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13abbc63-e91b-4e7c-b706-bcf010e9054a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c88115e6-835f-451c-b20f-35a143582186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9e08e1-3840-4400-8ff6-b1c9ddc560ff",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93a1f3d-98c2-4435-b2d8-5116e0467064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ba9b81-798a-4860-9672-308426415c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19554842-f802-4994-9bbb-86a9f1b6328a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa19818-ca0e-4ac6-bc8f-cd12ea2844f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f40ccaf-b272-4e73-937a-98ce61858b0e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4471cc6-af41-4ce4-aa74-7e2673646e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601e1d09-d41a-4073-8b24-63f4235efef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28216599-7531-4d63-8805-df0000a20fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c028493-175b-4d68-ad72-70fa039fc984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef9735d-83af-4ce4-8d9f-1f9c825ba653",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9342b87-27e1-43d8-a97f-cca9609d017c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635ede8a-e6e2-4bf0-9ff4-a5a583e98c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb5ece1-87a1-4e49-8433-fe86f5e6e809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d4810d-f441-4e95-a3da-eb83e6411595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade4336d-bf75-439d-b37b-833509ba13cf",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0ac51e-a0aa-442b-ba19-65a685952811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c67aeb6e-006d-426f-bb36-0989035ef845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ce356f-3939-457e-8085-edc81828f25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e702582-b9fe-4079-941b-48d08101091a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132dc62b-e555-4a62-8529-14bd521452c5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5424f1c4-a516-4d1a-a5ca-c1ca70effb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e907770f-86a0-4e6d-9624-2a0e114d22d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce24858a-6a9c-4d2f-9bf3-0eab7ceb27d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f016881-f551-46c8-9018-82e68b73a23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aee0b64-8a71-4b16-8e81-71500c4aae01",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8f93a1-f231-4fbc-aa4b-aa8cf249569d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ed7679-5843-42f4-9d2a-d462986adefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ef6421-b1d6-497c-9751-688fd2979fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9963f7-ed14-48a0-b96d-200650d6d193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45cc1d8-76ea-4f4c-b019-57983b04b7ce",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e57df6-721a-4eaf-9aae-febb7a0b019f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2003f532-e211-4e78-85aa-ad3884d34d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0ca2e4-7455-4d89-b453-99fff1eea22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb281ddd-ec2d-40ce-bc94-0e47ba7646e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbe6d0e-51bb-476d-b664-d8961ebb0c11",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19aa65f-2a77-4f6e-bba6-2fe77c5f8a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed86bbe-cae9-44ed-9584-23400ffb5bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5df999-4558-4a5a-b0c4-ee68e40b04c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97f91fd1-5c21-4b33-8e4f-bbd6876a3b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c28d76-03dd-4902-ae5c-f4da4afe60c4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfe7ae4-3fc9-4d95-a5e8-35d4a025455d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba5c561-83d0-4a3d-98d0-ada7246a4c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78915108-76bc-4096-910d-a4fd2d2af99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb0df1e-ecdd-4c50-a8c5-64c1388b8763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f197f366-84ac-4992-847a-9d02c217e099",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53381c2-6c6b-4afb-8a0f-ea8772ae45ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03991f67-df78-4932-9fe4-5faf8b38ca8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a89bb77-6617-45d4-ac3b-eec9dcebe47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a594bc4d-9b7c-4832-8b98-91024508a6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb2a916-d8e7-44fc-bc0b-94c79ac63bd2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57935cd-b055-42e3-98cf-0b5eface56c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46d1e5a-0775-4adc-aa56-ead253420613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6107f204-3114-46be-b76e-fc812deb40fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "374815d2-bab4-4854-af4d-05305f63b0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202f2c12-6f6a-48b5-b9f6-9ca4053e2adb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d93c3c-72ff-4343-bdf8-45ff38007409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152ef0dc-ccbb-4b19-9af6-b114585fdba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27212d8-4ff5-48a1-8cff-dda03def0022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d072a13-60ce-4617-bc4f-371178fa37ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e662f64-13f2-4c62-b64a-d8670d4729be",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f03248-5c1d-4729-842e-990759f2530d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7742750a-262f-497f-b208-3c568b40124c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42210be-2694-4545-9329-c4f3c9214801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "741bb04c-e9b2-43b2-b7c1-ed024829a8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59dfa38-b61d-49fc-9551-c7ee78d99243",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6059709e-ab63-4ba7-bc8f-b133b26514a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef5ee37-1f1e-48bb-b9ff-4673a507dfd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f477e8-f90b-454b-bf5a-84e2d2fe3a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d92dc736-e391-42b3-8692-82d2cf561879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d91112b-0372-4019-9c68-ce7f87842f87",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3eb41ae-5bf4-4012-98d6-f27e73dfa718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14aedad7-e365-4f7c-b3c2-613160cacec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a798ce68-09a4-443b-8b59-3451620ad1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2bb91c-bc4c-482f-b5dd-48345a31a6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05da927-3a04-4ce9-a958-620afc4651bd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe087081-b601-4192-b3b8-cd29a26834d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54609709-7cc2-4e7f-b013-b3e3455ecebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1642577-db10-476b-9896-5a3058f6d814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e9aac5c2-2345-4344-b8d4-2a3eac02988d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168377ac-f766-4598-87d8-0b3a51bf0b15",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3dd271-d55f-4bbf-8309-61e5e3b578e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96122c2d-0063-4da8-990e-33460928cd25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc7fd87-fcec-483b-bfb3-a9e6252483c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a026eb5-e2ba-4035-98ee-8ced80edbbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bad90bd-1cb1-415e-a9cb-bf427f247be5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff487fb0-f59d-46f0-a4f6-f71c8b750b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d6d2d8-99e0-451b-8c4b-a8c08d7f15a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee4c925-fd9c-4bf5-ad55-a26d747de861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c4a9774-5426-43c6-905a-28d55f8d3d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d7ba42-ecf2-480a-8bd6-54eb18197964",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef9c263-1a37-4724-b8f9-d07b3a6f5cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81907a7d-dd65-4467-9d36-870b408c3eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e04fff2-2ea3-49d9-a009-2cc9501f38f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "88d404c0-ca1e-4357-b9f8-806fe8241c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21399bf0-53f7-48c5-bf22-3a5c92a6caa9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e2dee2-5dbf-4f6f-ac3f-6d02f5795bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c14f21d-b3c6-4d44-9a94-3d81c2923eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e728e7fa-555b-4a83-b7c1-d1c62e236cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46ee6e68-db39-468e-a132-d1e6cd7d01e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ef94e9-6380-4342-98ba-68a164acde54",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb59176-5f72-4eec-ac9c-c7a6166e49a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f781f8d-994c-4c25-a5b1-ca5be7f0eb21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845cc4f9-1796-45f0-9ec5-0289f85a16d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1edb8a30-ed3f-4c6b-9107-615003a2e76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091fd06c-7482-4ba7-a78d-187dec1ef78a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6264067a-e091-4587-857c-53e5b1432b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0203cb-c8e6-4fc4-8f61-6165fa1d230a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee959a7-d64c-4c66-8d9d-b9b31a403a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02931594-715d-47ce-b411-be80b778499d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba57167-ead2-4c13-ac3a-9526defac465",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39accb28-7ace-43d6-aa2a-6e87c22c1c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377ea293-06a2-46b9-9c55-b546f56c6f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d267c5d-12f5-4de5-bdbe-33de0665743d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "068b8156-97b0-4027-827a-7b75a9bdab48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155ce862-9f5b-4cc2-b72b-25d16b963afb",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bce4414-c4a9-4522-b880-2352ee5f8f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb29847-ef22-4c1e-b148-ec2b555046d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5d89e8-4f4c-457f-8f60-d85a60b9d1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "906ec77e-7dd1-435a-a944-56afba36be9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f556e4ec-8571-435a-8d3b-786e3801bb19",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581cdfad-eb00-4faf-9d35-19336f68612e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa538f4c-507f-45c8-81fd-87f53d63a0e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b97773-4295-4f94-a13d-abb7fa1fdd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dbb729f-bd69-42c3-834d-c2cd55e7f04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dfa3c9-4a8f-4ca1-bfdf-b598cdf3d0fc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab1f136-5a20-4f05-ad5e-6fc6fdaaee2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08fe63b-452b-4ae6-b1a5-cf75f24e9b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37271d3b-9dff-484f-9bd7-b6c274fdc74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cebafaf4-168b-4127-9895-6fda9dfcf998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fb459d-9e0d-4027-91b0-1a1738d83615",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1113001-22cd-4aa4-848d-f3ad03798032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21dc34b8-8761-469c-9afd-cee947bda94c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf488a1-afb8-430b-928c-c3864fed41c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "167e0276-24a0-4768-af20-e1a8cfa188ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01aef48-ba92-4598-ad1b-12e7b041568f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a674d8eb-ecda-48cc-a167-c65be3158c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9a1b64-2075-40ea-a606-6e20ccab6efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd850d00-2871-4a4f-a86a-e039e02b22ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8426ff75-934d-4611-bad0-8ebb536d94ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91fd07be-5163-4610-a07d-bb6d2645aca7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5affb05-7dc1-4038-8785-d07e7f77c2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b736ec-037f-432d-a20c-5628cc1d7667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf28806-8130-42b0-9987-09b46f19769c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d793361e-ede4-4632-b80b-2d4f3e52bee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54d6c12-0da9-48fb-8a33-8d615bcdf752",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5ee8c2-e2be-4bfd-b321-0e71c44e9782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd0de1c-5ae6-490d-adfa-d1870e9322a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef04ffd-7424-443b-8fb0-6a8fed7c43c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc1058a-eed9-4e2a-b508-58ac00eb9290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d53adfd-112d-4887-b980-bac5633f5a59",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884251ca-10be-40b9-a86b-3378af0a6611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e00e075-417a-4c17-b1e7-2b0e56dd590f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f6cb77-7a0d-4b86-89f2-e75121d6b877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a458fc9-7ad3-4334-9040-0eb8e785b986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99861973-996d-40a2-b972-209eb16853fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2a95da-d77e-489b-9f5b-1b88d4a8dc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13844048-4cb2-4090-afe6-04262c70d7d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4524c0-0bbd-4899-8a9e-15ff396ba7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a6e1366-7ddf-4de0-b2f0-5a2a836f5796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a663ca-a91e-4342-83c0-91ce156736f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11abfcf5-ea44-4369-af75-8ae547906d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea32140-deab-4aaa-a230-93466a558978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc307aa3-52fd-4a2a-8f4e-3fcb6fc620a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "be9ec0e8-f648-415f-bcac-6fb09e22f638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ed6c5a-7a6d-4e82-9fbe-ec6ec32ba6bd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03581ec0-a12c-416b-8f9c-adb5133e755b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628defdf-6b26-4fdc-9b1a-786553b284ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbd752b-646b-42b8-b479-c1c7ecfee168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8bad1ea-d9e4-4699-af2c-2ae5b40898fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdea495-843d-4caf-933f-14a08a8c6cde",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0777847a-e4ed-4445-b493-490dd9cd5008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ffaaa5-28ca-4e18-a97c-4ad677caea41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf75a78-660c-4719-ac6d-807b4361175f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2fa591f-c47b-4b9f-b79a-f5e0097d346a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9b2857-633c-4ab8-a5b3-739a74e1d927",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8656fb78-78c2-422a-83bd-cc0d46244449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d1b7bc-7bba-40d7-809b-a64b5a52a583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b2d0b3-8aab-4a41-b776-1ff9bb01f0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a950f3-accc-4381-a303-130e27adf5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd985b9a-b1fc-49aa-8f39-bd3235b6c261",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e252c5-c90e-4d94-99b9-93b02b7ba3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824c7918-b35d-4256-a2d7-7ab713eced22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d391cf-681a-4dd9-9569-01a85b898682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4f75e5-572b-4938-8d34-45f805127fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb67411-3c03-427f-be7f-a625c8397784",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd17ef61-8026-4816-8670-1a8228b51bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe4a4a6-941c-40df-80ca-9aea1c2d3fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5291b36f-80c3-4c5b-b757-6d44babd2513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b65640-d977-4414-b45d-6974c90fe817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0538fa-e836-4505-8ba1-a21ef540faf1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0595464c-4941-487f-94e1-b8b8d34086cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3d6645-c41f-475f-b578-b65251830a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fff1dd-76fd-4fa1-a80b-7e0673802135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ba5d51-bd21-46b6-bd47-d55af0cd5c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b269a5-3318-4d6e-ae8f-906be3c9c77a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1257f9e-abe4-470a-a70c-2a41862f1d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f2d93f-f495-4daa-b5b6-925072625aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add9d5f9-6ea2-4784-8ef5-167125437187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdabfa8e-e42a-43f2-88a9-d784c14bc008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4aadb2-1e39-4350-a638-e34e74acc6fe",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33273503-3966-4481-9283-17803abfc89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20061d6c-7a0e-48be-a909-708bde061196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20a04c6-8f98-432d-b3c5-4427d4d07043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44fa194d-2326-45db-abff-2be50a8c148c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dbfa64-75ee-4cd2-9aff-0df79871d513",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5c1085-21bd-49d7-9754-90b723f0a217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf9234b-3af6-4173-ac71-2e8412b29e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652ff01d-e19f-46d8-b393-24b7818fab34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0698aea-e8cc-4254-a0fa-ae813516c318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa84efff-b9bb-4f90-bbf5-9441eaf97c13",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99062e04-c9a2-43a7-bae4-3fcc1a66793f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0b8bfc-704c-4347-a2d1-93ff05da8385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e76d34-269f-4060-bebd-fa8650e44011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b19a7b-62f9-4fae-b80f-a65ea900da44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24eebd57-1c92-4abd-8146-432528714233",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efecf184-f9db-498c-aa68-ec1c8c401590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449da8d2-f9f5-4c0e-99ec-a312fdedafa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59f7560-61c1-4025-81dc-752f516f8229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72fec1d3-1ef9-4103-aa7a-e4f3ee84d8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48378d28-f04e-4d5f-89a1-738ee4fa7b1c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42680e01-5ce3-4948-99db-203e64e9926b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6224f3b1-74e8-4a9a-81d8-19e4aa764176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea04fc2-3a5e-421e-8ca7-2d7f7e22b602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a181731-95c3-46d7-8079-2943a9747119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fe8117-f461-4732-8b3d-6aaf252a5c5f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201c6512-f907-4cd9-8256-4cd17ddbf0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7688f904-6693-4690-8c34-d6d4390fb605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daa8746-6256-4c08-92bc-6e4faeb717aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9c8e45-5fc8-404b-a8c2-e8eca8b4099c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b5e3d7-ec43-4583-80ee-9ec31cc36b42",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6fb07f-13ac-4175-a54c-cb1507df9fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9e99b6-0754-44ba-8201-1408b8b8efe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33490293-2824-473d-be3a-f0b9ae1a04c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "67b1852f-5a0b-45eb-9a23-8d5499756e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e37260-1a28-476e-8ed4-06686ee124aa",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf40d746-5c65-4f89-832b-765f1d521490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2045cb2-62af-4975-bc4b-c5309ea8105f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42960f2c-5017-45c4-b0c6-7d2b3dd01791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfeb2099-445b-4e68-abdb-d7384eef2fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b001af6-9e15-4222-9a97-46f2816e888b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d018f31-5acc-47ef-aba4-f2e30039c445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d60979-624f-4400-bc78-375ed7abb747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438dcaaa-56d3-4d48-858c-02b917bff802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0327b339-6649-482d-bfe7-bf04c150804c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6793cf-676e-4379-8640-7022f94013e8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c4580b-08be-43d9-8ebf-9baf35a8ce2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a02b36e-d1cc-425d-aca7-40d6c867094d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dcd89fe-7f95-4ab2-b81d-8600615ea5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf91e8d8-b01a-4713-9f2c-1e3e33d34a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6a30e6-634a-4fa1-974f-4f7fb7b0881a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba96055-78fb-4717-85b0-852dc494b77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0e5aa0-4749-4e6c-80bd-e8024d3a6817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d377b009-cdc6-43b4-bb8d-500d6f6ed37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82d0bf13-227e-448e-be15-a98f7598481d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2276136-65ed-4f22-9c6c-c1f5d0b1a69e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20806dc-4f5d-46a9-8609-4b9cdd1ebce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb26f6d7-b80c-4dec-b701-c6b163ce36d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94dc058b-5e7f-4eae-b7fb-c860507d8f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6074fba-84a1-453d-818b-0f727b472598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c2d16b-daab-412b-aadf-b9704b7e0098",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b169d9-c7c0-4fde-9e9c-e45157be472f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0888537-6a51-4876-a993-0c06de9a4003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e31af00-dc6a-4f6f-b199-07155b16ad7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f255b3ed-3c73-45ef-b147-164eba0d3a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bace064b-f0f7-43cb-a43d-02710e43e35c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1734857-5753-4765-96c9-0fad9e299100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42cb7e93-fe21-47f5-96ad-3d74f89f99c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1529e9d3-b3fc-4f75-a6cc-83eb44db5146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a791df9-d7f0-41fa-8448-377ab10d3413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21800a1d-0787-4d54-aedc-735db01d42c9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5ad426-6b4e-4ab8-ab75-b4bc8589922a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1705c278-9873-446b-ac4b-ae133e90bf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c423e42c-8b77-46e7-9d99-56d7f0ef0553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac057eec-1bd9-4b5d-9edf-c4cb1c9ab467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09cb30c-f14c-4fdd-b223-666981d263ce",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d67181e-790c-4c45-a7ba-daa5bc8eb4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911f6b1d-d027-4655-8ebf-cf4307725fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8950fb41-c5cf-4ddd-a814-7ed5a00ad169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "704acd15-5ecb-481a-96b8-bd0e8ee80170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41535442-e2a4-4033-895f-31dec5c3ec5c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26fb542-47a9-4fd8-9e2a-1081a557f067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edcc6780-3318-48cf-84b5-32d2330a9e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e135234-c18e-41ef-8363-2f5f98a81fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7896a02-ca95-46c4-85c6-c1e86cd88597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d92ca5b-0b94-408a-a056-601e76d6abcb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61113ebb-6c22-4102-881d-472927a208ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc94571-2ff8-496c-9c27-f547425ca691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bee739e-2da8-4492-ba7f-c2a97bc2cfd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82982460-c80e-4b00-9c89-dde314e7f238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b42ed39-0049-4fbd-ae20-28dba2364352",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b6f7d0-acb7-4725-ba4c-3d5dabbc599a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70dc96e3-8ec8-47cb-a90a-dba18c73acf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b04fd5-12f7-4f26-a07c-9163b18ed27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7580ec3f-7995-444c-a525-c03d61382025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d04733c-6e82-4996-a892-a8a806c31c3a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5b44d3-99e6-445a-b9f2-d4bfe937e096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b8343a-be5a-45d5-a681-cdc4c2e750d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f18364f-1b7c-4ba2-8dfe-0cf2bbf1f0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3085f73-0781-4e72-b571-3529b0cd9a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2489fff2-5d8c-41fc-af4f-13c7f5f6898a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452687b1-1945-4279-a681-d1271bdd7499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39103dc-26e2-487f-9265-0822e2d0664f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a539a7a-cf09-4eaf-b724-c3e153fb9578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8192d423-b255-459e-aca2-7cf68600ad51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b91b972-22f3-4be3-9a51-644ab4cee455",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88181c7-be0c-4759-b502-b3c647fc560d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73597ad-5b99-4aad-8ba7-bedae39bf632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d401ac-2434-467d-af1b-2d756607c29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "200bd207-71a8-490e-a380-b9529eccf482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52dcc67c-e2af-412d-9494-e991cd7a03cb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4ce574-28c4-4dbb-9894-68ec3f13418f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88561307-8f6c-48ec-9e89-9b7df7741a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04235c7e-1e76-4ae6-a371-d86239447a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac950836-4eb8-446d-8aa4-2acd156239d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64ec11f-fde4-4962-92db-e9afc8ba96f9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f185ae-4290-4656-9d95-dcc84bcdad7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a2bba4-e22f-4a56-8830-b6b27d9e588b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421ee681-1722-4548-a5de-5c75b0603c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f44d77fc-1c2f-4680-9eb6-bfdf0a4182bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37412e4b-e9fc-41e4-a7d0-f62f3a7f5172",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6afbb98-b485-4928-97ea-b56cd21eef0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1899bc3-afbb-4109-a6e4-d97975b5cf8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b2f5ea-41d9-4980-b7ac-fb225ee0b15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3458c611-b8b4-439a-892d-1984d45b1b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eacd79-8382-4912-8b31-8922fbae3f28",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a05a54-0a21-4eb2-840a-5c45c22ec26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bac3fcbf-2eca-41cf-8aa8-e1517a0b78de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20bf601-bd7f-4759-89d3-33bec7b2897d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "50b68249-16d8-4d6b-9d94-a193037a5d10"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b313cb3b-dda6-48e7-803a-a92052da1ade",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e02a95c-96f7-4136-9e99-ab11f8931b7d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0198fa-2aa1-496b-9ad4-be92d131ea3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "096bbf9c-8449-4e09-9e02-ef41b4d56d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eabf4a1-603a-4193-8098-22a1df2ee9cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cddaf71-9836-4215-917c-ba6e8631682e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f0deade-e3b4-4011-8ccf-0a2546a09f63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a8cb292-aa67-4610-b4ad-80665247f0ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d447ef4-a507-48fa-9cbc-762898ddbdd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f25cebc-a7db-4d70-90c8-b91e6ec9080f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "38610408-1425-44fa-97cf-b42964ec7049",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "54264064-3d4d-403a-bf30-09d9279c1a0e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e4faf22-777a-461f-abf4-956712710ee7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "606e725d-0ed4-49f5-afd7-04b41c3b3951"
                }
              }
            ]
          },
          {
            "id": "bd963e9f-7653-426c-85e8-4ffad8448d68",
            "name": "Positive Testing",
            "item": [
              {
                "id": "60d4eccf-241e-478e-a798-8590e92f94a1",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "d841fc07-f3e7-47d0-ae49-122f96744228",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2bb0dd-ddf2-44e5-bb23-fbebe22a0515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b712726e-faae-4337-a6bf-68a5c590552c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61954d7-93cb-427d-be31-87ff57b089b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cba6278-e4a9-428c-a9dc-2e361c45be66"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "226fb0be-42a7-41e2-9eb5-7df9d6dba659",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee131e4f-341f-4504-b956-850eb9631df0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b12f1425-4aba-4c69-864d-deac8a938bda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77423e61-a2c8-4d61-8893-0ca3de54637a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "980a2e22-8be2-4da3-bef4-6df70d2563c5"
                    }
                  }
                ]
              },
              {
                "id": "af3d4dbb-5542-4124-9d82-32805735cd77",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb56de46-ac57-4798-8802-44dac8cc0ff8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d756ecf-6d1b-4d2a-8067-60c06ed75c2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "991484a8-b18e-4335-8a8a-e842e5c7446f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ea9a1b5-e926-462d-a463-b2c2a28e0eee"
                    }
                  }
                ]
              },
              {
                "id": "578861a7-0702-4217-b927-b05d0a1b7409",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4a9ca27-9539-44d6-96d2-ffc038469df7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46fd363d-d81d-4249-b511-0d8f70acba77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcbb9a38-cc28-4fa8-915a-bc4ef212c7be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b47a79f5-a4a0-4a10-bb5c-232a94151365"
                    }
                  }
                ]
              },
              {
                "id": "2caab40d-4a27-436c-8126-c6f2579c612e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4d1f909-8fb8-463d-b2f7-52871ed7e386",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9633771c-694c-45c7-b5d3-6ceb8e83be25"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c17a0c6a-b44c-4c15-b2e1-98915ff38c64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c1892d5e-312b-41e8-8f93-29dfbb90d32e"
                    }
                  }
                ]
              },
              {
                "id": "5db81235-fa93-46b6-b844-ed5fbe14eac4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "655bd2aa-b4ec-4cd8-ae88-a6916ea48988",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce0d1596-c08d-4462-9632-3be7cf76ace3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1698a5b6-f36e-46d2-8551-aace5b4b67ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d54ee226-f3d9-4c5a-8363-563162f90c90"
                    }
                  }
                ]
              },
              {
                "id": "7a80d88a-b038-41e1-ab3d-88d89792a9e3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7f8e5c3-61bc-4bc3-87cd-38225cee8923",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9453e5fc-0d9e-47d3-82c9-306a8efc036d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23ca112d-6d77-4335-b1f8-d47271d7d912",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "996a55f0-e907-4790-af2c-37208a91f95d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5253fb68-727e-434d-becb-c39b7bc1e5fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61ff7b28-f38a-4ce9-a236-264b24bb32de"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9aef7f0d-3701-4daa-ba43-d62170c711d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bad6cd7-af35-4368-9647-278f54f8b9b9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81903a0c-8427-436e-aad6-7aeb9e897aaa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e42a0a04-2fda-4408-a1e9-ea32470dba68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5940e0b8-0127-4d33-a5a4-1844fa21ff2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd16960a-4ec9-439d-9424-9b0bb868fde9"
            }
          }
        ]
      },
      {
        "id": "4f62842d-073a-42f7-a8c5-bc6828ab5d21",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "120f32f8-b7e1-49c7-bf42-516f1f6a3761",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4f3a70b-488c-4075-b1ce-4961098cf8a8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9b1c3d89-af64-4a27-93a5-c0c5785a3b57",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6505c1-bf1d-48aa-b16b-0059bc163bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb77d4c-83b7-4048-9ad7-ac117e7fddb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7e6189-2e7f-41e9-b7f6-ef53be933e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc7b264-e7d0-4f81-b410-6055254a44f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a74f1a5-dbcd-48c1-86d1-57a1cbb675a8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb365d4-a65b-4fbe-9b2a-1563ece1966a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b705f4-749e-46c0-a6e6-eee9576ed8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062869b4-f3f5-48b0-b36f-45b476db40d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5327f582-f4e7-46bd-a6bd-db06d631a4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f564fabd-f0a8-49e7-8390-0817d13f0705",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c853a346-770a-4d9d-8379-992fef38a515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db4e5461-076a-4128-8067-b8a16d727e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006a6dba-12ab-4e1c-b0a0-300ff7d3c9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19a39ed6-696d-4e41-b672-bfa88078cbde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5b93a4-2418-427e-a4f7-e2ba2d84602e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040b16dc-924e-4604-8c06-5ba3f850c647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70a816c-bf8a-440e-87d4-758630818bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd73a700-5c9d-4e22-8811-a0aa79737ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcefd9ea-41dd-4824-80fa-759d817f4d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f13d1e-09b5-4627-8e16-c027c3279c72",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b441801a-8661-4b3d-9fef-1a47043c78d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e182bc53-4219-478c-83cd-b30ea24b6e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00415cdc-8802-49a2-a871-056fcc3e9265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e6a93b-d176-48a2-960b-d97f93eb7d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ab49de-e733-4caf-b08d-d65429f5a663",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70dbb519-6c59-4518-9ae5-5e7bda6113e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a307e11c-dd92-490b-8f0f-0c012dd919c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c8b2ba-0d0c-4688-9f64-236c197bef4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fea7f57d-6466-4e29-8eca-ad764dda5a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8939d31-60c7-4652-b9e2-be96c76c6a4e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced300a4-41d3-44b2-9b07-4df2f40e4630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a26703-9852-4621-af39-5877ab49d79f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198e1dc8-40ce-458c-9010-181fb8ada670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "123816af-5e21-4209-85dd-40e224af5f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edcb248-07d6-48b7-bce0-f41236b3bb12",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce6f21c-e83f-4aef-a818-83a689754a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d9c50b-5a76-4c1f-9529-aa87842edcc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb5621b-b3e5-49d0-a517-4a6a067d9b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cecef3f2-7497-4953-91eb-6e9ed8187876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8fbaed-0d55-4fb6-8414-76cb1478941a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d0c054-4def-45ec-a734-48aec1a1a22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9439675c-2f08-4da7-8d86-5cd0d5d57433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8deeff-04ee-4f40-94e0-76d6be949622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edf310b4-4b65-4b95-bab8-b530fb50b9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33de7b52-be48-4e83-b585-657a9e5ec246",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4f9962-cecf-4f02-b2ca-bde51bbd0b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7544a022-3165-4a66-b886-ea59b1805d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fe8ec0-7b3f-4176-8437-90d35d9c5966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42d26a14-0db2-4de5-b2fa-a6f9089e9f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1b4edd-9d62-4228-8039-9918e33bf476",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e73ec1-3e5a-48ff-8d25-c4688b0fc2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1bac2b-bf0e-418e-967d-6eb101622235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d150c044-87e5-447d-a12e-34e224ac46fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "487ee021-5f23-469a-87d5-7cd5c22cea8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992131cd-fe4c-46cc-8606-7ab14e6090d8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407da388-af05-455e-8813-9c07048a668f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1634aa71-12ba-4839-97a5-95fbcb15138e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02467b40-e6b3-4af1-be27-da15b883c32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19b1ea49-f026-41e3-8a9e-ace61a33411b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e58257-afcc-4b00-b214-21d23fb5a1ab",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6e7d8c-c86b-49da-beda-1c5ec36284ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d981dc-bb19-42f8-9341-53fb75d3d594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd57171-addc-4ac4-882c-050f2f1197fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a50c1f4-a2a4-44e7-8126-75b237f25dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421c9865-621d-48e0-a3a8-4ee6052f8006",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9898249f-3ea1-4f19-b695-731e0986e16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d55c4f7-ba02-46b4-b744-6eca562577c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de03b280-1336-40c4-bb61-87eb58b6c8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "80c9de7e-6d87-4ad0-a7df-658873bf1a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee49e626-7520-45a1-92ec-a7a43549a646",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4365df-c187-4e1d-9728-2b1580b86483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f76e99-287c-4186-a615-f0accd8379cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9688001-ca30-4bec-a699-931f3fa98318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ad86fc-023c-400a-a960-5d16349e1d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391be5fc-a1b7-4958-89e0-30e5369efcd3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5e1009-7371-4ec8-8e00-a784fb9afbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68888553-8220-4ed0-b78b-c1bf818adcb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c349a5f6-7c28-47a9-99d9-3d6c27e14b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "88592436-13cd-4772-b38e-738203a16753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1533d0-5ee5-4fbd-bb72-71827ac5909d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea516f30-41c5-4f47-961b-9975f46e457d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47eb8ec5-63a3-4325-99a5-b99a81d74742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48559c73-ec19-4ee0-98ef-743f1086bbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b858484-41ba-46c8-bb8c-3ed021084412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7217f26d-906d-4931-837a-e0f682750e80",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78149a1-b9ef-4403-9f3b-eb3b00cc5229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ae647c-21d0-4ffa-9887-e32e05647db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe6f790-a7a1-4f87-a33b-0b9deed75d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5445ff-ffb0-4227-965d-7ca877aa6f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba05ca3-cce6-4e5a-a0d4-026cc170fced",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b486619a-1fa4-4851-94f4-0645c9d2d1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d5572f-4b0c-40f6-85d1-4b121a480672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae860c78-77b6-413e-9aae-e15c69efedd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2beb4bd9-f9d1-401b-bc78-88ffaf6afb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0049f5a7-cd53-4548-bee0-137133694922",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88402bc-94d2-4027-9701-c40997e8aa8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c52c121-343b-4eb4-ade6-3b8d5ef043c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaf9a29-ad2f-4df6-a6b4-aac0fc7c1f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "826d00ec-ed84-439a-8101-cf60f469c689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527a2f73-7d17-413c-9713-4d444817fc56",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea7c1ff-f001-47e1-a9cf-14f0b8dc7bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e199690f-fa5a-4948-be14-b6bb82f7fb8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5cd46b-b0bc-4566-a1de-744b9e39226b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5310b95-f3b6-4165-88b6-52e604a567be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50781f01-c8f9-4154-bf5c-4bba7d2399b5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67a75b1-9231-4291-8587-438fcad0a128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581a792c-617d-4921-ae18-ba9e9302a227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8a3eaa-b4ff-493b-8676-531af904df04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "592b6b19-3c20-4716-b1f7-3cc361842b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c448e5c9-db22-418f-8bc4-c588a503fcd7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76437e8-38b1-4148-b3b2-cf94f467ca9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944ebbda-25de-4368-9c8b-2fcb993bc994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b08809-3002-4ba1-b3b4-00e69793ad66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "155ed7af-4f59-4ed2-9798-be47c7b30835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13a92da-f539-40a4-842b-507961bafc7f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ff4563-5dee-43ed-94c4-67cfe398fcfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "092a62d5-e34f-46c5-8a66-f1e377e5c1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1af8f59-1c22-4438-a9e8-431f829989d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac05c1fa-e2b5-4f26-bcb0-c7c05b21045b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f36e54-c885-4e58-93a9-d9b117f68fec",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad5d2d5-6b0f-4749-9311-a83575b68f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e8290a-8938-4174-af49-b97131ea8dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8243c257-d689-4a5d-9fd0-64cd6c16b1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e8914b3-c824-489d-89e0-3b6af4a7157a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccccf96-33cc-4e1f-b5e1-e510271a0ac6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a594cc0-a160-442f-bdc9-87f5a5611cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad13bee8-2fa6-4474-afd4-f187346994f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2448afbb-95f7-4fb4-a706-235f218eb2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40606930-3088-4e03-b980-7c2ecfd465e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a45fe1-e016-4828-9a4c-764c2c746c68",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccc1d42-572f-43d9-bbf5-72bf7c0ef313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83824946-a18c-4433-ab70-f79ccabe806d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b639bb3-3f8c-4a7c-bc4e-99b5fa4081ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d503278e-e331-42d1-8c1a-40d657416259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b060f2e-b3ce-47c7-b54f-46da93a7799c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de45768c-e477-474e-bfb3-42e6a7469647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801fa10d-45fc-49ca-995c-fd67d5535b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f66e8a9-c5e3-48e2-94b9-7eeae7a85cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "621b5914-cb16-4f12-ad3a-396dffeef0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4cc28e-c512-46fb-a993-8d954a389291",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e153fe-8842-4ec3-8dc9-d428e40f761a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d16bcf6-226b-445d-96e7-7528db230413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a085121c-2505-43f4-ad3c-c3414839405a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e342c13-0dfb-4400-a164-47aa3f0a10da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914d91d0-1a14-49b9-8e79-c08bac921ca1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f29c77-4cc3-4ca0-a6ba-0de846d32a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf530cb-4633-4397-9b3d-603c2e68e057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e0f274-b0d2-47a8-a945-1dcec5b83889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faacd250-068e-49bc-8c13-0762f4963b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c501fe0b-8882-4709-a60a-5bc89435da60",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544449c9-d3a0-4a51-b087-25202d3d5440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923adfab-46ea-454a-b401-e0646ed047d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2360d01e-fe45-44d2-b7af-4c6f215564f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16761235-a845-4419-8064-0e4cf292fa75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77372442-a197-4faa-9013-3d87a2b25a03",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb830bb3-9ffd-4759-8b55-2440be26221d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e28d1263-33e2-4668-af63-79b2a739acee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d386991c-0f69-44ca-8e9c-d662656bf63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f15a178f-ef54-44bd-9f5a-9a9309252d08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c86f2a45-1aee-44b2-a7c4-d5cad701add8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d420263e-c906-4b45-ba78-3c212d87c168",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580082b8-e1ee-4a2c-b3e9-0829355bb9b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "34a91ef2-736d-4e8f-8c73-0a11fbfc7860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "811dc73b-9ff9-4907-997b-924aa119ea70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4044cf7-89e4-43cb-897c-6004db715207"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30869586-9758-4a35-9e00-25cc1b33825a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92f9bb98-984e-4298-bda0-1d10aa22c9c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d41038a-ab19-4eb5-9352-432e23eef8b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "789f1902-7c09-4a58-9ccb-5b4538b3470e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e17b1003-3365-47bd-8e82-ec2cca298ebf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d57d0187-95f7-426d-bcce-f4aa4b57ddcf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d4912d0-e068-4ec7-b29b-5e3da9d78145",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "176f0689-b40d-43ed-a7cb-6b4eae907d3f"
            }
          }
        ]
      },
      {
        "id": "37e52dfe-8ae3-4aa8-9163-a00c8d19ec30",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "18381028-6f9c-4cf9-99cb-2cf65340e7b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7762c838-83f7-44da-b425-11044a2d681b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "79f2b8c9-f3e5-4ebe-b4d0-37a1d4b5c000",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7741472b-b355-4adc-bb50-438e2fb250ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f384ac1f-3827-46bb-b326-dfcd6cac2724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b91432e-7deb-43ea-844d-4bf4533d872a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5841ff42-9a46-4200-a170-c19807e11e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964d26bf-8f24-4e1f-addc-dec9e70488b1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05d0b8c-07fc-49fd-add0-9adfe0087694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032e44f9-cf02-4679-bae4-68a96cf781a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec998101-cc24-44a4-9cc2-a5adaf5f62c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8261b545-f5e2-4aea-8b91-67eb35628e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905f6ff3-e096-4049-8b2d-a5e28e68b4fb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9881fd0-e0a6-436b-93d9-28291c42f097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e281020-9e38-480c-9a4b-82d8eb477ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e15127-80bb-482d-9eab-d1e4548a7bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "932bfa12-4e58-4844-88fc-fcbac912c270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91973e9-9eeb-4888-92d3-206048b6a73f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d137dd-2e41-4fc5-981b-48158366a689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89735983-9fcc-4d8f-b0a8-5928ad0a2715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03461a4-3f52-48be-8945-09c74a93834c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a670b16-afb2-4af3-a6f4-67fcaa26da4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b0c6ae-5f3a-4f4a-9b9d-b1def4497f4a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31b1098-1d4a-4772-8297-50da290d6218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4c1fda-3d9a-4a7d-b09f-4c743ba72a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e4bc03-048d-408e-b428-0fb599ff534d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a552c6b-feed-465d-8ffe-eee3e267edfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790f68d9-a2b3-4ad9-9597-a4c4e49954ea",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3197719-3bdc-4242-9f73-f3a56ccab3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d3fd7c-3b16-4063-bd01-483ff075e19a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5446dd-93f0-47cc-a009-8aeea8a22bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "194fbf0e-e8c8-4d05-b989-96b2037799b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c230bb6-fdca-4999-8bae-f70417cdf7dc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9139a86a-6939-4617-9d49-654ee3ab891f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987f5172-9d02-4a08-a32c-92ccf5181855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82b3d0d-7e52-4042-8b50-a7a4993d2ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e805023-e1b5-4008-bef3-1a801e6c1b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8818a527-ae28-423c-8bb0-5330f440a345",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec674e1-ed38-4134-8329-bda335ac6f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b36896-d47e-45d5-8a13-bcc2f1561ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e310b4a8-a81e-46ec-aaf0-31a58f2ff7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dac93021-3d25-4a5d-8db9-04f868a9f798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0378682-444b-46e5-9bf7-237bab6a575c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cbbfeb-8eaa-4fc1-88e1-9688aed01391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd49ec5f-cfbb-4ed4-97d1-cc08f3d8ba81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7639513c-4889-40c0-8a71-1044432d6f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b68b9f1-fd49-4c95-a493-b7f0231a155f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2852fbc8-b92d-496b-a2f8-54f3d95b0f0d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da74a75a-47a9-41f6-9cca-f2b3a9b4ff7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ac9420-6923-4778-875c-183d4e0dc865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82d0e79-00a4-4f91-93d3-a5f0e143f48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79efe50b-bf69-467f-97bc-a5672fc816c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644b4ca4-3d0d-4bb0-8f72-4ef88d0abd66",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77cf3c8-eebb-44e8-bcd1-9af45027c394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd547d35-7a7d-4e49-ae78-5ab37fd688a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491d7a3d-d4bf-45a7-8293-68bb6f663319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1c2324da-82b4-4b42-ae9f-e70ea310200c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b7692b-24e5-429d-8127-67700146f748",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9f750b-6534-4541-aad0-d5e024d59a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37642cf1-fee1-489d-a27f-e52b60c8b0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a81ba5-5036-4de3-abc8-a3f866a87646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "675e1271-7dd9-4981-9ba1-0d266253e305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed0ac7b-6b20-43d4-af8a-fb6a150e9f66",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933a4577-f216-4a68-b636-a30367465873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6270fe6-0e98-4ccd-acd5-7daff74570ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af7a5ab-f5ea-4347-90c5-eb713c9cf6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6723c110-3bda-46ec-aec7-5a8af17bf304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83bcfd8-9fca-4419-a34b-5bed1c2402a0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5103fdda-db80-443e-ac2c-065b3b222458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee18920-48d0-4cfa-a454-8dd19481cd33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a77f7f-2272-4c58-9a8a-63051d5d57e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b424b2a2-02da-4dbb-a854-fc3aa1344881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee32a8d-1328-465d-827c-8e767509ea21",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d499acf-2a55-4ec6-a49e-e0af7866e394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d68b97f-601a-4c89-b3ff-dbb11e2e657a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11a41eb-7bf1-48d9-84e0-976aacd6e0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "044fa418-5443-4c58-8f18-f43391d7380b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8852a56-4f73-40b1-9dd1-96e3f88dc68a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344459ae-4bd4-47b0-bdd5-39f6e9e0304c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06e97ee-c420-4438-8716-715b365d635b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6347bf8-8370-460c-96f2-5f1b5506b01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a65fcc9-dc5c-4102-be5d-99cee8cdf6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e334bf-80d0-4cba-ba4b-ba9c3d47f808",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43226621-13bf-43be-9b81-f988a162c921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264dc57c-041e-4441-a267-0271a7911240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba607aa3-7f6b-4a75-9b0b-f9b943454eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "db365e28-fc5b-4d06-9b12-24b98c12b64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648d4a9f-3ab6-4ea7-8844-43fd41722556",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8305ea5-4931-411e-9620-4506467e318a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5992181-ace2-49c3-a268-f5dc1fd796a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37aa2c71-373b-4f39-add0-78290b25889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "67c0ca89-cfa9-4555-a650-3c68c64314e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2a286e-83b1-4d12-a6a7-c2a973191fe7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31300110-2b0d-407c-8f85-6c982e6737af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6fe1375-2c7a-4846-981c-13a59fdabe93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e356d75a-bef8-4674-96d8-e5427d984f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1097d083-3ce5-47ca-bb6c-2a25a65ab5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb8d914-150e-4c5f-bc97-6a23c2d78aaf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb5833b-8c0a-43df-a614-70cd948f053c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7536394b-765e-48b2-a0d9-820cd8738b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a806e33b-aaa1-4923-85a3-21c373e10e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a66e845d-d4d3-40de-b816-fb272473f53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5fcea7-bd50-4f8a-a86a-b4a9c27208d9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348906d7-9dbb-4d55-8c3f-8292bba1d9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4e8e6e-cbdc-4c21-862f-a99c8ab8f1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d073128c-0c40-4c7f-acb0-863f0ffb6fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1308a1c-4068-4dc1-bcdd-76619512830b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e35209-e549-4d2c-b3e9-2c85c1796dce",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad97cc71-4e76-4ea6-a76c-8f7ebd33c8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799d07f8-4217-409c-89ce-3016bd3f8f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7325067c-0335-49bc-a847-40e21a0c4495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e3b9ce-598e-48bc-9cdd-72de88fc3b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac88878-3932-4dd1-a31d-11a0086d3ba9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710c7902-7da5-4e4f-90fb-11db3db28417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a7a4a2-42fc-4312-91e7-2c9b15ef08e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cbbc47-e6fc-4e14-8f24-86b35427368f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "175530c6-82f7-4d4a-814d-b98a17fde33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97566a97-8744-4ff9-8014-d207fa4f4d84",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf181a1a-5b5a-457b-911a-4da017037ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065c9753-4eef-4fa7-8382-b340d3d8adb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d74eef-323c-45cb-b44f-6f5d3277f471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dea8cfa2-b748-4bac-9404-560b09a7d146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a211c656-5ce5-4486-907b-18afe2b561d0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd26fbd-b8f0-401b-9a67-dd10ce015995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4dea1f1-e537-403b-8ed5-8bb9a698df6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d15d2f2-1131-402e-b8e4-905ddf26ccf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aebacd3-918a-45e2-9511-3ae88fbf6c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f43d05e-f946-4b8e-97bc-966f1aebda88",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1efe8e2-0ce4-4d1f-9bc5-baaacbbbb0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b0d8d2-c8eb-4b5b-a986-93e6194b5b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5667375-e106-486b-89b2-1efd4e41f1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "deba1124-2ce7-43b5-94da-6f943f5431d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ae8427-d0fb-432b-b7ee-9b820ac0e0d7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d6b5ff-1cf6-4972-b76d-e4498d961404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126e1427-e2df-4aa0-af0c-3ef6ec5699a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41a4673-4c7c-4f50-8d30-b07a4a39cab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d342f8e-d631-429e-a2bc-472575400943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4846583f-421a-4a5f-bce8-c1c64cd67a35",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49321893-a795-4783-87ff-4986862aff2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac03c31-8aa3-48e0-b2bd-234671feaf5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637f9a78-470b-4242-8477-ed0502f8e8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eed978ce-ef76-40ba-82fb-e1114a53c2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68583e95-d11f-454e-9417-ad33d806ddce",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e103608-f5a9-4783-881b-7f78071e1c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8430f2-bb76-4f72-9494-c77edf608745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264f07ef-a425-4dd9-ba9d-03850d00b998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a79fea2-bd5f-4d4c-a34e-c2359dddfed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0fab7e-fb28-4e81-b973-35a6b7ec1d3c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d366b289-3c5c-494f-b055-37f869f9ab78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c5d0ed-abd1-4957-9823-62d59abc777a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e009b890-b538-4cb9-aaab-68fa926ffff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d353e56b-ebf2-445b-a3c8-504d42d57e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267e9209-58fb-4b4e-a549-f37d4dbe90ae",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75517a44-701b-431e-a6af-19ccf8a36d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b7e99e-7071-4258-b5be-3ef6567c734d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072b45d9-7881-405a-acdf-63f665d2cfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a3aee0-0756-40be-9e21-753a0cc0820b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3093d223-59ee-4750-92b6-452bbf589d21",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb5a83b-6e2e-4ff9-aa48-0f50ee7425a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5dc6594-e48f-40c3-815e-10e73ee0e47b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d13f0b3-fe1b-4a7c-a00c-b579fa0c5e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6545003-699c-47f9-ae46-7bab1659394a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1597b2-5b1f-446a-a9bf-742daa11ba7d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d14ac73-b257-4f51-9f1a-e686d701bc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b07957e8-bd47-43ac-a032-422dae0e54bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21ec954-1ebc-4c39-9beb-6583a8a9d2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f29918de-2a62-48c6-ab8f-6d5d83c68e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61da75e9-ee27-491f-bd02-ea71488df669",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7239dcee-7a7d-48fd-a966-03c858ad5399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4862d30a-2e23-4868-b94a-953a21e2bde8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4486a578-802c-41c5-9d6d-d9e53d4f3163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25c2c16a-13e4-492b-8bc8-a24e30271ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeca805-cf6d-43a7-9e52-45dd9d26f821",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e896b8b1-8ba5-40b3-b21b-f02d17ba120d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce124d1-94dd-49e9-9c37-2e0b71072262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e7a8ec-5695-48e1-bf52-38bf4e6d170d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b704b3e-1cb3-4c3f-ad8f-2cee5c315016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2999dc70-a706-4b53-8f5d-a34b576bf431",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af33f94-ddab-4828-aa5e-827ab022a362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966fb7cb-361b-4dd7-abf8-0a24c3ca975a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c79c87-84a9-482b-a036-c42a7fd4e066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82abae13-5e30-4aed-a608-f084cb4013c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef28f558-1868-4156-829f-33e48c8fdca6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6db040-7b0d-4655-81f8-f5422590bcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f71a91d-b356-4bef-bba6-d3bc6dea286b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2803955-23e9-4f6f-93bc-c356d44e6f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb83926-29f4-491d-aa78-492c59d0f878"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "28dbde5b-d5e5-4633-8489-a79fa4ad08dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae042df8-66c6-42d3-9a8e-bc396f3e0f0e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b5f9c6-243e-4999-9811-d14c4e064646",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "139e9c9b-fe4c-4eb2-9907-297b9eb521dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436518d7-1f2f-489d-927d-e83a9e2b720e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce5c8306-cc21-4b3d-ba42-bb571757c6fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcfb882b-3385-466a-9362-67dae07eb748",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "500b425a-a2d0-4298-9fb4-ac5d31ef991d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c60189f8-6f4b-44ee-9311-cdc4d70eb244",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cc6cd49-f8a7-46e3-ba66-fcee71582dd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54cbd998-f224-4f0b-aa9a-6dddd3dc7897",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aa0fd003-33a9-4610-96e2-1dd2bc3762d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f88be619-997e-48f4-b77a-ec139de7a274",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f940f13-758c-4022-8997-f3be574e1c12"
            }
          }
        ]
      },
      {
        "id": "4bd17dea-ec4f-4bf8-b890-baa3b977e041",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6bbb60c5-dd0b-4202-94e2-5df3da295bc0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1235bef2-feb5-4aac-91b2-4109ebd3d560",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d31b8246-5787-4012-9947-5c744561f14a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1019d8a1-4ad3-4f9e-b331-f0a70e62e6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f590a2a-58ba-42c9-ae6a-b83981fee771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd47b5c7-5fa9-441d-97fd-94cd45486d19",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53399842-716c-479f-a00f-46c0db49246c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3df0fd-b45a-4749-9148-7c7fc10aa560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784e4a40-e388-4a78-b88d-e85767f79614",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbf353e-d2f8-4d48-bcb9-030e7a3f581a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cb8b11-0b81-488b-b646-9db41fa3a2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bd6b35-4093-49dc-90b0-6c6b3e0a4621",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f850e9f7-e6fa-4866-a6a9-81eff3623712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feeace9f-76b7-4279-bbbe-b54a07b1d816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9326c1f3-5d85-40eb-8e1f-cfe806e68e43",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe77b2d8-ca6c-43a3-b642-ddc5325c191d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6abe9b1a-b61b-47f7-9fb9-8e0f04c9516f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2833a68-bd9b-4fd1-99ed-83e9351e746a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea80057-238a-4259-a484-7ca481660afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e5206ca-9de7-4f22-b053-b86a06f5cd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551cfc25-6ee6-4e7d-a060-634bf5380786",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342bdb06-fa04-41ef-bfe1-3394e5cc205d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45b6539-a183-40bd-bdda-dc514f20c3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4204858f-0dbe-47ca-a20b-8229cc4de673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a1fc1d-39c2-4c29-9765-264e52ae638b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ecb808-7470-409f-81c2-da104f7c21f3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ea651a-45eb-4f0a-8c91-b0fc2cc057e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dc474c3-e102-4a78-b61c-40b7d705d62f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fe3058-aee7-4e12-b0eb-0bd729a44e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a9d61e-79a2-4355-adee-785e63a6a2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0909288-ba8a-406b-a6d1-a5c860b80a70",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd60b66-de0e-4415-82a2-0bf665c4e770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb748b00-7791-4bee-ad7a-1f319d109129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83dc1a0-48d1-4a6f-9bfa-4138f85163d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc915965-e89b-49b1-8c20-564978bb7bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f02999-4430-4233-a7fd-e1b47f6cab75",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0366fa38-2e6b-4949-981d-8a284a83df27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75492c35-8cbb-4521-9ab3-3773bf6c57f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70662cd-2ad4-4ecf-b942-04eb80bd2151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa557ba4-749b-4573-90b1-de10dd61770d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f1ff4b-d65f-4c4f-8d81-2199aa13a15f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f1a08f-0532-41a3-af40-9e356f4e3719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4aa8a2-93d7-4e69-80e2-b06dc11ea49e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b67876a-4a64-4c63-82be-8bda59a8e251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08dc7767-3df3-463b-8497-b0110465afb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5652c631-3fd0-4262-9b44-7ea95712b7cc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623248a9-85aa-4688-b925-14c8bb8e282f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27cde20d-4477-4256-ba7a-140d786a9928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c437e5d-f0ad-41ae-8059-f0d45847685d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4f88a2-f0e9-4aa3-acc4-e2c5c684b5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d30673c-e448-4c1e-a9d4-da75d8c6898d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbaefe9-3cd9-4bbd-acee-8a2f4d68ef19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "167fdcb5-7ab0-4465-85ad-d77d3d6fd0f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e23cf7-c2b3-4bee-8558-75511f417668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72973f4c-824e-4855-b8ee-2da70ced88bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ac9c27-c527-43c2-8b69-a7f1d5171462",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc7b60d-2314-4eaa-8113-d91e24c38df4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa8698a7-eef5-477c-8870-9232a29c2baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9626741d-1e4b-4dd1-8a4b-9524884666b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2cffe7f-c7c1-40eb-9418-cfd1ffd1f07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54eb150b-e907-443e-b5c9-0cb5ed019b93",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138f5b94-78ab-4f35-ae98-43a3c59d2b45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed5bbd5-09ea-4293-a219-990e46e6d6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01352a00-1135-4706-9d25-6a4eb12b0286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4147460d-f232-4b0a-8093-afe63e92104c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a98aa34-e164-4b41-8d60-d96344774037",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a86693-4123-4869-aa81-5d150233c4f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71422711-936f-4036-af1c-46ae3f5ae603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "425be986-3e6c-4ebd-9771-d67e4e9a1f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b316dd76-d44f-4f88-9a03-89ad2a0db898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5eafbc-41de-4d82-bb96-576c908eddcf",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf0691c-de47-4bfe-b6d3-bcdb8a5d1725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9821001c-5283-425d-85d0-766108eaf80e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70888a1-3744-4837-a767-c2719a6356e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a301a4b-52de-44c4-bb37-d1d4251fb3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94ea009-01da-4175-9c70-46b8956d79ce",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d60d3e-e285-42ca-b648-5ab0484e5005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2de738-09f0-4033-a9d2-cf52375b1f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0cc87c-f34d-415a-b923-0bfb48d4f712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f008a079-bad9-4f6d-93cd-4b0e16ceed9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2e388d-9f94-41dd-bcc4-250c6433df47",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e074b8-432f-45fc-afe3-9f14c0778983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871d1a1b-f4e4-427e-8c03-416e4ef3dcbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a94225-4760-4579-976a-45cffbc426ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673552e4-ad6e-4dfb-93e2-13e3db274f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fc2d15-8ad5-43b5-a8d3-e2b5b0059096",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73a58ea-2655-46a3-b58d-00b0fc6e1915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b1691b-dd1e-483e-9777-218b54960bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc2bf05-c47c-42de-893d-8199a1c4b124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc994d0-aade-44ee-937a-55010273f099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f014b3-28e5-4a41-8f8e-040003659f04",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb69869-1199-4392-b5c0-3b43bc72ba66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966d692a-d54b-4a2e-8512-1f7cda849473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7481927c-6c3b-4e3d-9afc-a244de0c1a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f0ab05-1184-4aa0-93c6-788b45ed82c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b32c78b-3b88-4bd8-8fd2-74e32b8595c2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44bf9240-c465-4944-98ec-48d6e241231d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e0c3c17-f60e-444d-862f-d3fa7761ef6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8864a131-3ddd-402b-9c78-7e73931ec635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0f2ff7-f00c-4349-9b23-24653230682c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99d6c58-eba0-41cb-84f4-0962c8626d8c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcef641-359c-4d2f-8865-983dd21696d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f749562-5996-4618-b418-ce7cc93aa9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fa62ce-0316-4012-ada9-61074383ece5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89fd2bb2-79b3-4734-a2cd-c9f6cbde8dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0b04ef-0678-4f2c-90ea-b205c5c99c65",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aff5962-b7d3-4078-b254-030f52ca9758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29e7eb75-ae26-4b39-ab2a-1f6289c54a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "829afea3-d06a-4ec8-b21b-3bfef65b86db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06266ce0-07ff-4fc0-b221-d6163d66b72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d23831a-6f81-4b0d-8035-679f0cb8cdfa",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69485142-68f8-4361-9ee9-3480e2e401a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32779a25-7a94-4e16-a807-f8bb8df178d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dd7e80-662f-46b5-b37b-2a27cdac2daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5775ab6d-c83f-4187-9fad-89cf035cdc8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63923eb-626d-45b6-9c96-5edf1eebfd1a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2b78be-1706-4d45-be92-ff3eb8a3290e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba112c17-a65b-4b38-87d0-80bce0d154ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd828d8a-08fa-48e0-ba1c-86ca3b3b3610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a738796f-1aa7-4e4a-a60a-a67a6d488416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88849640-55c9-4b75-b5a2-03771de8e42d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508090a6-19a4-4e50-9899-05ab2b4ac64e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5017c5d3-a915-4b9a-8081-6f7b1950acc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "464726ed-5a60-4b60-baea-5d3a24f2a1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e06c43e-d639-4f1c-8a44-7e39db9d5fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfd6e48-4dd5-4a58-a4a3-af06b6bd2886",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf53ea0c-ac11-4aa4-9f8c-9fd0eaa79374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00dc87d6-925a-4e78-8b3d-8a402c9ea576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc6dc68-0c88-4a92-9ce4-ec90ac27001b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f46d3e0-2347-459b-bfbe-1216ccfa38e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b1ccb9-5060-4eb6-b772-03dd6da4ba3c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f18ddd7-93f2-4bee-aa93-11ab83aaca23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "346c935d-6807-46a5-a941-b15307b1ed79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5b7c6a-b5b6-482e-a1f7-3d81c868e63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dfca9e9-b2e5-40d6-8e8c-f1b25a38ce5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348a32a6-8600-4758-8824-b0f09478a772",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88904e0-076a-47c0-bf0f-22a94e9cb9e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "874bb786-a51b-4920-a760-f1b5d1c048ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71802c0d-78ea-4b3a-a7b4-cf5e81a09d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac595c00-b883-4ce5-a939-8414495590fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c2ac6d-9d5e-404f-8f3a-96785517dad7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633c657d-d2ad-458e-a048-51be797d88cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c45540-dfce-4049-8772-5d64ac210bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e10609-179a-4b46-915c-88619373695d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6903fb-fa6e-44cb-80cd-d9e224977a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da859f8-5bf2-4eab-a3da-d0c5a0c90400",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2af990-a243-4ef8-99fd-f3d1270baa8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2421950-40cc-4aa4-8670-b1fc15c78d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "504da83a-a642-45de-a6c4-07a4f561600d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bcd8daa-f2b3-4af3-afba-e071c05e9d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a909823e-0d93-4895-852b-d796cbde0d89",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6b4993-74dc-4a69-b270-e25348a164db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b16a351c-2c54-48bd-9421-5a6ebb0cbf7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8aee9db-f320-4d25-bd9c-368a36a8cbbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ac120f-34d3-4eec-a23b-6c770764c2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a644b32-6cf0-416f-b601-f82d9b095249",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571a650c-e21f-44cd-ae4e-fc756ce12367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f142474f-1a22-4174-a80a-30aa9c6a872a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7c806f-3db9-4f64-9b12-ee9753b19f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda6a2c3-73c5-4b42-8a94-87f0c324980e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d2decb-f139-4ecd-810c-cb3ad51c9a03",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769b0fd4-2675-4159-996f-8092d9df2cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847e902f-17e6-423e-a43e-66ee5ba64e6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5974f81c-4e93-4cea-969e-aab2bff0fc35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3016a41f-e988-4800-a186-38f04540a274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec2d011-8423-4636-bc40-8bd78e28dbbc",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad93e5e-8fd2-47d7-a8da-51d3f6922b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff61d10-17a1-449b-8a46-c2180b22e499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44e3a75-0a9c-4201-9362-e41dde502f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1feb5f-7ffb-4aaf-aa29-c70f00d8a10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129e6ab9-481c-4a04-a01c-46baddbe9615",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6785212-579f-4f70-87b3-d6253dd66fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd89986-5ad6-4e6e-bd4b-98b918ee8334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ed3e02-3fca-40b8-9cd3-1cb0bd5865ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f48711-6dca-4232-88de-d3f1590d046a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b064b6a1-9566-4753-b00e-e482bc73ebeb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fb6b15-7384-43e8-bd7f-7e52174db977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf46f76-44f4-49a2-a7ee-7ff8a7612987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6be8a6d-c1c5-4ce3-8f08-6563a26e1895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc22efe-3cca-434c-94d5-c2242f001582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb956e6-7a58-42a2-a5ca-cc2f35054af3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d665ca-1561-422d-985e-39a83434a215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57357f52-2f52-4246-b51d-b1e9b7c58f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd454d8-4d80-442e-a0c0-67d46530de4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a789afd6-ae82-4214-857f-a6c878d26d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd09ac87-0e64-4af9-be44-ef6d4934bdcc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5068afba-f911-4c33-8e72-5ef05640c834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a886cd-bf10-481a-a347-c6cea82b5258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46c02b8-4988-4415-b595-3f3127b60097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d06bdc6-fd7c-4246-ad5d-de175c48d0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52834ea1-2fa9-40df-ad01-aaca4aea8a34",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a944cc5-6c8d-4dd0-8a11-dee6f8b4433d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c44468-1ecc-4e83-98b4-61b2d480ba5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81101cc2-bb85-4b3a-8b10-5ee99816c0e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a8d2f9-f8c2-4d29-9995-28d6b9626673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73516683-bf7f-4521-97cb-6dfdba73dfae",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cb6604-8b29-47d2-bace-fb8f244188bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8940add-b94c-4fa9-b448-accd574f6867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2519ec8-f2cc-40bf-b6ee-0ad9cc353dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7ec36d-9297-45bd-a038-1087c62042cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7895a476-ab34-4de9-a391-ce0d5442b933",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d811edd6-70e9-4da6-9893-a55c28c9fb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc3d6b4-c2e2-47f9-8472-d743f249aa0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e553c6-816f-4e8a-ae76-e8134b49ce89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55bbf79-c15f-463e-bc8e-282d42fbdd41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec917ece-0a4e-42a8-b855-c02cc14f4b55",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96e7bd8-40cb-4312-882c-a38fa3da5d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a914d12-707d-469e-80e9-3b21d4ddd5dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5bec92-51e4-41ef-aa62-1ae47a4808c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a49e469-1bb4-4ce6-8cff-ae42d92d5551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37af6b4d-6ca1-4fd4-b06d-b2311c9f0f0d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561cf53c-289f-4d46-8820-616ecddc999a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d4d6ef-8cdf-4d9e-8039-3468845f06b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d614459-6eba-478f-9625-d09596c11795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e3a560-0475-4d65-87e2-1807ff7f7c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef33476-5970-40d3-bed7-acacd67afecf",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d03491a-8223-4f4a-9d82-315e9a88549e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebaa19d-3d7b-443c-b493-364442a79ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77de44e-1256-4e5d-a212-a1e6e170a1be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8fe30b-6f9f-4252-8ff8-345cc48dfbba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6cde46-1427-496e-9bea-c7af519f55ef",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58970f2-1b52-4718-ab5b-b800798aa57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b086debb-5644-4bfe-9767-38f10e5776b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e85762-6ba0-4a13-8e7f-46ef64a1d7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91cc060f-08ab-4f78-a4dc-e562cf6ab780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cda895-95da-423b-9314-cb8c6720e024",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a09424b-a7dc-43f2-814d-0042c533b499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be7123b-0ce8-4592-b004-6b58ae15d453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e397653-4176-4ef7-97e3-450d65d0469f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ee6155-b516-4889-87d0-18c3400cd0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1518c6f2-2a67-4d48-a6af-cf2274acb8ac",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e3abc7-abd5-46b3-a2fd-cef6e2ce1864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2ff7bb-0d9e-4512-b2aa-2593c8f3369c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0eb6d6f-89af-4a11-9547-38f5d8a7ba89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb21617c-6670-469d-8c97-3733e7212b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c0d7dd-6782-4c1b-98e2-fdf5c76e59b6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbac48c3-28f0-4d97-8943-ea829d5e6929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31452c46-2945-4171-801b-929a495c0ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1f68c1-32ee-4d5d-9dd5-508cd9e89305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3e2e7b-5e4c-41d9-8e63-40473fb22330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9759897b-d365-4321-bcb4-8eb9d2ecfb72",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757473bd-484b-491c-9cc9-9e5dccdf20f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff09cee-5a44-4b57-9011-5c1536791617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4eda3d8-0053-4ede-9aa1-5f4c4e6fb9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd6eeff8-afc9-4c0a-81d3-60f44c328310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6275163b-222c-4ba8-a28a-49fc73af4f50",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea8d57f-ce0f-48e5-9aaa-1c8cebcc786e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630cdeb8-95e5-419d-87f9-c794994dcbdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7740371f-9c6a-4a30-a4bc-bf4d30f8356b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0124179b-ebdf-4ed7-84d2-14a73f54248c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78446e9f-b9b5-4c16-98bd-b2ce7786eedb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513c37aa-eaf9-4994-878f-9ef4c46fc862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731f3c12-4667-4e16-8cfb-9e8bbdc18415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99db51ee-afda-4ecd-9d88-caca4e5b583e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f5aa23-4397-46de-bbd7-6d70ab15cfd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5724b0-bb8d-46e9-97b9-af0dfc15f032",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fde5d7b-7ce2-4714-a55b-37db4509afbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f9d28b-e962-4e42-a022-0ac3f51d6bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa6fa80-5eb4-4f1b-a7bd-aab5c32dec75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e560a8-54d9-4c36-8ef6-770c730a2d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c55a39-95f6-43af-b858-2fc1f4f99240",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81b1ba4-51ff-49af-9d2a-387f3f5fe87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbdeeda-796c-4110-9a5c-60291096c1f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de7b7bc-4afa-4373-9514-589defe04f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce340f67-8425-4eed-8af0-97c46b664231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519c48ad-b368-43c7-9ac0-d5ad79b06898",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ea13ff-b681-430e-9277-0c84e9043ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c885850-25e6-444f-a3c6-7826d4cbfd32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7947b9b7-97e0-4238-8d2a-951d901604a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565f687e-0672-4a1e-b749-0a926a0bec3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c316601-d0a0-4045-9a81-24ad2f953969",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c1e677-3517-4213-a695-c832dffefe13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a014697f-0535-4358-96cf-ffe66bdf0230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "947c5836-055b-4a28-b8f5-a2047c9bd776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd217ef-ee0b-4f73-9aef-cd473e07bb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11095f23-45df-4713-afbd-61286c535fd7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bea9317-8deb-4ff6-8cee-23a3d7669dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301e401b-b5fc-42d0-a067-3434712eb619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f795afe-bd3d-448f-a8b1-4007c4f79e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21684c33-dbaa-4646-860f-1a3e1e931735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8367c1d-50a9-4bc5-be0d-b8f6b599d1d9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a25fb6b-0f5c-47d6-b42f-ec57b7337400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8017e845-9a49-4356-9e15-2e90bbd0182c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfb9437-fb2f-4c78-b909-21389a246bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404b76ad-5484-43f1-83db-267ccde124c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbef2bfa-a01c-48fe-ae9f-fb2d5e1be01e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aff71c4-5dea-4654-9f29-84c6241e4acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f273a1b3-2835-4d30-b57a-f8c9722875fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e13c5c-8551-4cc3-9ae5-28cd7001ea85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17234b41-ed30-402c-930c-e6a2e890c2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef75bba-5397-413a-9db1-db64484ce26b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5659d70-de7f-42f9-9157-c36c75875220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e2148b-8f9d-4edb-929e-ce9252ebede8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5746481f-adca-4ab8-8028-b038b1357d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d83cde7-02e5-46d1-930f-8c3f25408f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91157d02-3d24-4530-a0da-6f2155132907",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e132d4-7d19-4421-a722-fd8b5ede6ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0952ed0-0040-4156-8509-a48340d6ad07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89211129-bc86-4ddc-b735-960cd6cd07ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1412c3b-cef5-42b5-8a4d-78c7c229bfb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46888c03-bbb9-4916-a9ca-8149f2198205",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b9a3ee-636e-48a4-a372-2af9e92aa0a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26e3168-1acf-481e-bda8-deb6b8e823cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e659ed59-964e-4169-a4b6-e654153330fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46acff37-e2e8-41a1-bb7e-bcbe4b342a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f281081-529e-4b56-895b-c7740c379307",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13379efa-a6a8-448f-a7db-34c88335902e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bb0f0cc-9f80-4cb0-bf2f-16b22c506b56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63bbdef-de42-4a94-9fb1-9225d58390d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc5e5ee-9882-4052-bfe4-a454d6b3c1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f2d013-617f-41ef-a53e-e8bc941c751c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f34014-98f2-4cd3-a79d-bb0306551aa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b027637e-52a2-4468-a55d-0526bc2eb437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2680e5d9-5736-4bdb-ba90-372a9b69b88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89bbea3e-6339-49de-8acc-5175f3301066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759fcdd0-0058-454a-b3c2-ead78b18d183",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edfa81f-ce4a-41ea-8791-30bdf5385b2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87464ff9-5824-4aa9-822b-abae61dae1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ef1ba1-08e0-43b7-9741-04b306bd4aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128c539d-c01c-4c8d-9c63-6d6f1eb18568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5363900d-0f77-4b5d-9e46-8b5644de302b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30e33d3-d9fd-4610-afd4-b1675ea534fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6b0aa65-2ee2-463d-b524-10edd2f35ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b9956f-81de-439e-bbbf-5f4c830d2092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a71e02-028c-44f5-b802-ea97a28acbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda75b1c-28f9-4d59-b3a2-e4b1d9569d6e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd386ab-3afe-43b7-85e7-dfb044504681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "260443bf-e3c0-4cbf-b914-e92ca486670c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f397c87-9f21-42b7-a217-4320ef8b349e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b690142-5b7c-463d-98fe-4b95564b42c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7854a10-d6c9-4672-abae-f90afe585bba",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304d96b1-87d3-4ac7-bfdc-2274bfb327d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86ae9ec2-f99d-4bc7-b5eb-4ef309640d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19f3e13-50e0-4b72-8a0d-cc56ba971cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3136466f-33cf-4345-aa3e-0f57369e4a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cf5f02-66f3-4bbe-919b-afe2c4e78fe0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38cc225-b95c-4f9c-8870-fb59dcf3c3ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0e2283e-2a14-4e98-a388-982909bdfd00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb32a91-31cf-475d-9d4c-f5c5f2f27a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6b74a2-d57f-4f28-bcd9-399977003d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479b3a4b-7cc6-455e-acd8-6b8c63e0f887",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab6e745-e16f-47a3-81f8-ea797eaa3506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49592409-4bb7-4080-96f4-2018dbf3f837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "340d9b22-b29d-486d-b39b-e2add346adab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071d3e9f-a03a-4c06-a885-b95b6d3e8334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4470448-b988-484f-bf4d-5a9efcf8e002",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b90707f-8cea-46a3-965d-8eedab2d57e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2bcd17a-0e10-4886-ac19-bf9740e1a9c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc0c5fb-4c7a-446e-907a-b49a7a15fd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85896a22-8812-47c4-b635-5264bf768275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e82eef-9656-426b-b65c-84e2a68696f6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2292953f-d80e-49af-9b43-58f3981f5a55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3111b5c9-0f11-4a51-bf70-d1b5ee9ab8cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c485d85b-57db-43d2-bba2-5449933a25a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2bd4aba-ba39-43a1-9f11-2e2c976cab10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0d53d1-309f-49e9-a647-f88225821861",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb6d814-cac9-4380-b788-b0991ef82051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17277a94-2b6a-4cb3-b9eb-e8915f080286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49688d6b-ce0d-40e2-b339-336d155d24dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400a2ab5-a3d9-456f-ba4b-67cf23e3655d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a493b8cb-0c1c-4332-a812-ef4de614be04",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db44e990-b957-436f-8a2e-df6e749b4148",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04fa1f4c-b819-4b05-99dd-b95ec24808e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301a4acd-d0ac-4099-928a-f37daa540451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d979b75-199d-49d4-a401-2a1387db0ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c89453c-f2e5-4d72-acae-55a07589edba",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364fbaa0-24b6-40a9-9202-4a585a1d5c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf625023-f03d-424b-bbc9-b7cc7eaa6df6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40053999-24c4-419d-82f8-7f9423987b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b6c44e-6f6c-458d-862c-0ca591fa479f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c2f543-70d9-4984-bd99-587383880924",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4a0a17-0ca8-49dd-b352-0246292c8f85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "196c2d98-b348-4cf1-abe4-a8be08687997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3fdd1b-36d5-4d8e-9572-71ca7b9fc297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4611b541-4670-4589-befa-439cd4786f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df809a6-86ec-4de7-8d7e-131ba2c3ebce",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81e8c6d-bbb2-4607-9a15-45716ab163c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b66c884-d25d-4584-9247-7df89ff10bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2955388e-82f1-4110-8750-61f1006c600b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aebad039-932f-474e-a4af-54a74919022c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7503f32-ffb8-4bb1-a8bb-e3ac5d1b2a88",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddc088e-3e02-4a28-a79d-f23b644e5f31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae0db18-0319-4163-b6f8-938410c58d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "392bcad8-4637-4185-9a20-e8af52c99482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7954cf1-97e7-4de0-acf8-3723ff29acb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cc830a-ab43-4a5b-862f-d8da5825b46a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eca2b1c-a134-4b1b-9bef-2e6679303498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa0ed120-679a-418b-beed-ca1fc5174a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51a3322-6692-45bf-9b3f-06962ccb9ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b88bb53-53c2-45e4-857b-ab1468641971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d421ffe2-1630-4ce2-90d7-3ab86000d93c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5343e929-5e6b-417d-bcc5-fe693f161f30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "131e36ab-51fe-49bb-b0b6-8286c60152db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9b8daf-de54-48f1-a7f1-387f741fb2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4812105-8d18-41c6-be12-1861a01435cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3c45e1-a469-4121-8473-35a8b6f9dbc2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931e1981-ff0b-4687-b5e8-4270b4310a17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15dfea3e-37e3-4fc7-a920-daf886aa5b6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a12cad-db5a-44ae-8165-bac88857286c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e65becc-0ac9-45ca-91cb-18fc4fcee659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee71c16-df27-4806-b9d7-f8ade0708c3e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82db198f-049a-466c-b0b4-d019e7aeb702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d40280b9-dd78-44d6-ae74-45492e7e0316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69514ea-9be5-4ef7-9607-80b8904b6213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c947fe-982d-46d7-9f9c-6f51420f8916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c373c3c-863e-4171-9e52-580033e4f5de",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8bed7d-d7da-466f-a5a8-98074e1afbe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0226496d-be04-4cea-814f-3fe1bd71a3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd477e81-23a0-466c-9edf-7fcc4cd22d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4b2961-58d2-4872-b4e2-b9e0e71cf114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1667d397-05f8-49ce-8ef5-ee0486ae4069",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b745f1b9-e999-4968-bfcd-0e848dce2ca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d922c88-c156-4f5e-92e8-ddf0e3954f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931b6ac5-8d8e-4b02-968c-4b45aa1b5bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a61c1b-5d06-4dab-9530-da93666ee6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863f1ec3-fd33-41cb-ad18-8d8792648ceb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f84859-2638-47ed-bab7-f01a3137daec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7ebc02d-aeb4-41d8-b017-c115fa95083e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2171465-35ea-46ef-8748-999c8367ec8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa057103-6f0b-4aae-9d2b-8820e36e85fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f926849-5b05-4208-9609-085ca5d19116",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198fcd97-1a62-43e7-8634-235fcdf83d7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efb6be8c-83f3-48a6-8d39-43d809910d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7edd2b-80dd-4f4f-bf8f-883bc8a96217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb522a7-6d05-4be6-8233-fa7c4956ad41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f2a4b2-cb46-4923-96af-d45fe63e391f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c2e0fe-49f4-4f34-a7fb-136b762dd706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c260738b-4b10-4d99-9e32-09cff835e6c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a62405c-8a4e-4c58-8c6e-9452e468b673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05117ea-5ef8-4f25-aac4-037de3b97fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002482cc-a0f0-432b-8266-40b401ba703a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a4dbb0-16b8-4818-b18c-2c0b37522fa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d10ff0a9-a80c-446f-85d9-edfd2de33f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64cba17-119c-47d4-b071-b0b3a7561f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da382a4-0ba6-4598-9f25-20ea76c37b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa848a5-626a-44e7-a650-b8f8daf007aa",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2064de3-a607-446d-ab0b-9712f8ef3d0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74beba4b-7a48-4de5-a780-9e5254501344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31777e66-e1b0-4d85-8c8f-11d357385706",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97490f8e-a8b4-43c3-be5e-4530325e2b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0e3dd0-182b-4109-9deb-bda877992c8c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740f868b-2404-4a92-a488-e2f00407b007",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cfa8bb1-4540-4541-bacc-8b84e93ca442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a67ea79-67ca-4344-8470-c7ac9a408bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f869d27-bf29-41f1-b851-b1d44fb7dc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad94ffa-5d38-4760-8252-4367e9571705",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605382cf-768e-4480-9806-13978b3f50b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "771dd7e0-eba1-43cd-afb5-550177b5b4da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7819cba-5b70-4afc-a20a-240ab43b2d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b839d0-bfef-40e3-8dbf-7a776276c2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333d4dd9-6d13-4ac5-b679-49e9ea39f284",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bacbef3-9793-4c70-816f-0052288151b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f4d492-311d-4884-9dfe-3773f15f53fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4745a2ed-016f-44fe-aca7-b037be05e4f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031189f6-2591-418a-965d-38c02a98a4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4786e0e0-5746-492a-be2d-53175357b2c8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db37c9b-b234-4d5c-bf5b-12ad26749008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe385377-d16c-407b-9c67-dc6b4fe0ba3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89bbb42-5509-49eb-be87-27e15815eaf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484143f1-6bb5-41de-a375-081e86535d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9ab277-f42e-4240-b7f8-7012e4f18c16",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3411faab-3915-4c74-aede-23ae306e9e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "130c09e1-a6dd-494b-92e0-25db26da274a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764545fd-32c9-425e-9052-b59ac4b220ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d0ba44-2a1c-4637-98f7-7b32898e9e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e972e65-8d45-4b91-8ca0-891cfa1e2ce2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3896571-aa9a-44c0-94d8-6d52c78d05ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75dd008d-6ec3-4461-8b2d-0fced47a7f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e09a47-9ef5-4b2c-8e72-09f9d9cfa059",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e7d29c5-4be6-4c02-96a3-396ba219a9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43606fa-0269-4948-bd56-8a435a019094",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dce5db0-07ef-4e50-9631-6de8e2809ecf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f59e1e7f-0278-43bf-bc1e-0cacb422c764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "483718a4-8182-4cbf-840d-d653bbd423d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3ea523-fe13-4ff0-958e-c2e738c0326c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5204de9-d8d2-40cd-8848-cb82b8a9243a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dcf082ab-9c62-4833-9b34-b43de678cd96"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "586dcb77-77f6-4488-96e3-3ab66e29f50d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e9594e5-dee9-48b3-b5b4-1eff18631751"
                    }
                  }
                ]
              },
              {
                "id": "e1f31a2d-2568-457c-b8c6-058437641dbe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "311183d8-10c8-4ab0-9767-9147f08af3c1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a85e438-3be6-4e94-85b2-ccd7b005d05a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ff9ca2a9-cbac-408c-8b33-ab1a8bddec79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5480b26f-f173-48e8-866a-ccd3d40d4596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbf3a5b3-f409-4297-885e-88b476906e99"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd9121e2-1357-42b2-8aed-45d41949cf9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "620b1c6e-7222-4855-9090-76334d9c8a6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c90e220c-9ca3-409a-944e-ae1d6398540e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd120ef8-4585-4202-b4c4-bb02ed8dcf41"
                    }
                  }
                ]
              },
              {
                "id": "dbb478a9-dc55-4197-857e-e8ce0bb73bb6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "54142deb-e336-4700-916d-039f029d8452",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a61737-e26c-4376-93be-b4741c3dbce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8d1413ec-c636-4691-a6a5-fbfa80f6e444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bedaf3-468b-4d2c-a5e8-aaebaf27718a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1576531b-0066-41df-bc74-c03f80a0563a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "10819eeb-b178-4a13-8ae5-1a48a712d6aa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f0b4ae45-df0a-4474-b580-2042263aa7f5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51de1f4d-1d79-4da3-8e22-fa4e521c2a7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1f5d8bf1-ee3c-4991-bc87-d04209a78bc2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c1473b6-e4ea-4e1d-a7dd-91322b1a9721",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17691f63-76ce-4b4c-98fa-9aa50c5eae71"
                    }
                  }
                ]
              },
              {
                "id": "05bbf883-a997-4e7a-ad19-fa394918b804",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40ed838d-dd81-47df-aeb5-c99aed85c61b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "addf1960-db22-45f0-aba1-85ffe11a0d2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7efd2a12-fa7d-4f6a-ac72-6f2f8ad06435",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60514452-a67e-4e79-88d1-f33bf01fde0a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce645719-a2fa-49fb-ae0d-127d03c80247",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "97469255-cf23-4036-b519-ca7d6c443beb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7bc0bc85-45fd-42d4-983d-90c5b4aeeb15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac92d83a-30af-48ea-8aeb-93c689ea552e"
            }
          }
        ]
      },
      {
        "id": "780cafc8-7b93-445b-b162-80197e77e07c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b15bf830-df9b-4ebb-91f0-06fd6560466f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbb8d79c-db4d-4996-92d3-248a1a785554",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7e2b8bf-7944-4b9f-a802-7846c5da67a4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6887c789-7c8a-4934-b76d-cd01ba23a6e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a9968ed6-8df3-446d-a007-a20ede310a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7175f4f8-d820-403b-b32d-9d6a6d1b17bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f524dff3-01f9-4c31-9f00-460876ad72c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57e6f041-c0cb-487b-85bf-ce1659dbdbbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25a40038-c74f-48f4-a393-41c232adba63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0c98da8-84d6-43d8-85c7-60aa3f67923a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97c86071-17a2-4c22-ae51-300e892079b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90830ebc-11a6-45c4-a4ce-c0919d85f720",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f7b2b946-b4c7-48a1-ba3a-60ec9b4a824a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9ff173b-4b59-49b8-8e1f-f9da4c57159e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e38cbfc6-3aab-4598-92c6-9b653b84b5f7"
            }
          }
        ]
      },
      {
        "id": "623609dc-8a2b-4cd9-b7b5-358f813bf8fd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2fc8bec4-e247-4951-8a5a-a56ae4d9d013",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c0136e5-223e-4cb2-9547-c8c18dfc466b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9f5755e7-56f8-4247-86ca-3c39bc5d3500",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fedf729-8fe9-4ee0-986a-3bedd54bed51",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "694edae4-1657-4b05-9254-91afbcdc8955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e1311a-ae35-4acd-aba5-61b574c508ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "787a8c9e-98d5-4e81-8e15-5da4a7aa9340"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd22cd3e-7587-4215-949e-fd1604512060",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e2c0f71-3372-4303-898d-48dfffdf9453"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd2cd589-fafa-4295-9c67-f32d2eeb8968",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92fabd24-846f-48f0-8851-5003bfb24364"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5ffdefb-a149-4c78-87f0-4d6b93c9a689",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e2cbf00a-4094-4e61-9a9e-352799d8f293"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88bad6bb-1699-489d-a475-78e291d6789d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93b10adc-245a-472a-bcbb-673fc4b48a74"
            }
          }
        ]
      },
      {
        "id": "eeacc2f4-1da4-4a2d-bfd3-2cbe5310c5f2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c87e5651-dbd7-473b-897f-56118cc4db81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce245a6b-694f-4a71-998c-383b6fde1578",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2c408d8-8f2c-4d73-9ae2-8fab440a32d7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428cb763-8eeb-4b3f-a299-e60fdf2289fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac189924-2ceb-4289-b30a-cfdcf0509c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c676bb0e-5c7d-4d3b-9b7e-40926fe57c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1711b241-933f-4d55-acad-d4ba7d2da161"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0177aec4-f741-4a71-a15e-88e933aaadec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fa38b9e-a350-436e-812f-d3ceeeb539df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4dcd8133-93d2-4af1-968f-ad059ce32345",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08dbc69a-98f7-4241-a221-742a99188d01"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aec625ff-22b4-4230-b031-c01f92ed45d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ad4b8d5d-59ec-4bb3-a32e-5a910c83dcef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3dcb99e0-ad6e-499f-af8a-f96a575521fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b110278-3c22-47d1-9ce8-9efff831612c"
            }
          }
        ]
      },
      {
        "id": "8f046e19-0d7b-4135-8e90-3be85ab98ab7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f9649b4-f089-402c-a4b4-8251da7626c3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e2c68dd-67f8-4cb4-ba9e-0e998406d793",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "91f8ba80-2508-47fb-8e6a-36bbfd593896",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ca23495-1f75-40a4-af09-f90426c1e07b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c0511bc-9453-4335-9440-23752fea30a7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 60.94736842105267,
      "responseMin": 6,
      "responseMax": 539,
      "responseSd": 79.8748628865488,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707698086764,
      "completed": 1707698113597
    },
    "executions": [
      {
        "id": "58b02a6a-20db-4ba2-9a65-859864933cbc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2a97e550-7227-4f2e-b690-bf63f01d1d85",
          "httpRequestId": "f923c267-487f-4953-85d4-09f1aa7057d8"
        },
        "item": {
          "id": "58b02a6a-20db-4ba2-9a65-859864933cbc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "19e79fdb-17e2-418c-9c3c-b0ee584bcb52",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 0
        }
      },
      {
        "id": "9cfcd48d-358d-4645-aa8e-817ac5549692",
        "cursor": {
          "ref": "ddcc41d2-93ac-4d50-b0cb-305635b8ddbd",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8017ab0d-3370-43aa-a101-a4e17f4ef4fe"
        },
        "item": {
          "id": "9cfcd48d-358d-4645-aa8e-817ac5549692",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9c65f0eb-2e0b-42c2-8cb6-f6f3e3379ab2",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "7986cb47-da83-425c-b19f-37f09ede2cf1",
        "cursor": {
          "ref": "247a36ea-3896-430f-abee-fcd13b6c3228",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "628224fa-5ea4-4231-9ebb-7e6f6b8f3075"
        },
        "item": {
          "id": "7986cb47-da83-425c-b19f-37f09ede2cf1",
          "name": "did_json"
        },
        "response": {
          "id": "1da564aa-2cf4-4a9f-9b97-b39b1509cb27",
          "status": "OK",
          "code": 200,
          "responseTime": 267,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53256869-6484-4b1b-83f6-306a29071a2e",
        "cursor": {
          "ref": "53034a1c-69a0-43c5-9eca-5685d363e5af",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ebdb3dce-8e74-45a5-82af-a2d10b6538ad"
        },
        "item": {
          "id": "53256869-6484-4b1b-83f6-306a29071a2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ef39b5d-d89e-4e33-9250-66f68859d8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53256869-6484-4b1b-83f6-306a29071a2e",
        "cursor": {
          "ref": "53034a1c-69a0-43c5-9eca-5685d363e5af",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ebdb3dce-8e74-45a5-82af-a2d10b6538ad"
        },
        "item": {
          "id": "53256869-6484-4b1b-83f6-306a29071a2e",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ef39b5d-d89e-4e33-9250-66f68859d8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4085c8-ff9c-40d9-9808-545d5637f3d5",
        "cursor": {
          "ref": "40049c51-616a-4a79-89a2-fd39d4401480",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "30a05d55-fe5e-4bfc-868c-b671f4cbb350"
        },
        "item": {
          "id": "6d4085c8-ff9c-40d9-9808-545d5637f3d5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ab010c86-7928-4886-8b85-4f66aa207267",
          "status": "Not Found",
          "code": 404,
          "responseTime": 87,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b31bbc7-582f-4dde-9236-608e653aa852",
        "cursor": {
          "ref": "6b7af8cc-7191-4aa4-a3fe-d31a16c91423",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ce7c1e1b-538f-4750-956a-54164ef8e020"
        },
        "item": {
          "id": "3b31bbc7-582f-4dde-9236-608e653aa852",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "390a3466-a568-4a25-8c51-02041f7959e6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33e5437-e847-47bb-b1e6-a3230957e225",
        "cursor": {
          "ref": "917488ac-5f75-4601-9dcf-e141611e5f58",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cbec2fff-397f-405d-834e-b4d8e1556ce8"
        },
        "item": {
          "id": "e33e5437-e847-47bb-b1e6-a3230957e225",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "afc1362b-60a1-434d-a9db-5c7cc12d5f25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d0dc57-36c7-40f2-8849-9f30aebc9de2",
        "cursor": {
          "ref": "7f879581-4d24-4623-b9e1-7cb8c3420076",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "632ae5c0-9c21-447b-a3c9-f420c26bcc03"
        },
        "item": {
          "id": "96d0dc57-36c7-40f2-8849-9f30aebc9de2",
          "name": "identifiers"
        },
        "response": {
          "id": "15b33e68-19d5-42c9-8687-25466e306cdf",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4cce15-80c3-4c1f-8687-84a972b0df91",
        "cursor": {
          "ref": "8fb766de-75cc-401a-9b52-ce4dd8c0bfe1",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e129d7fd-eed8-4156-a1d0-81959aa31d9f"
        },
        "item": {
          "id": "aa4cce15-80c3-4c1f-8687-84a972b0df91",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "72867f70-deb2-4ee5-8f0c-2f0dc24369cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e254dc6-1c3a-45c6-a3da-e126ed877506",
        "cursor": {
          "ref": "46746c85-4b2a-4b7d-8606-fec88789248f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fcd79fff-dbbb-47f2-96ad-d07fab645097"
        },
        "item": {
          "id": "7e254dc6-1c3a-45c6-a3da-e126ed877506",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "90a1b209-5ee4-473c-a476-b366b2d2138d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e5d6f8-7afc-44e2-8600-6793d4249d76",
        "cursor": {
          "ref": "415515e4-5aba-45f1-b653-3c7d4c4e722a",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "88a5ca2c-389c-451c-ab85-8b5618ee73c1"
        },
        "item": {
          "id": "18e5d6f8-7afc-44e2-8600-6793d4249d76",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7afaebbb-a1e6-4622-b80b-feeee0b3eabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977e12c5-43b5-4af8-bc3b-9db8dc476ac9",
        "cursor": {
          "ref": "c356bc31-30d2-4862-adfa-bf3fc2e90930",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "47edeb96-7067-4f12-8553-8ea2d46ae87c"
        },
        "item": {
          "id": "977e12c5-43b5-4af8-bc3b-9db8dc476ac9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2a7950f9-4f62-4855-b180-0b1c378072fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42b1a76-bb63-494d-9888-fc75ffefbaec",
        "cursor": {
          "ref": "6bfb124b-d0f3-4597-8e1a-3ce55507efda",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6f555b0a-6489-4cae-9206-d769c324b74f"
        },
        "item": {
          "id": "b42b1a76-bb63-494d-9888-fc75ffefbaec",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "faac16ee-74d6-498c-8896-5d5f3b884044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b805b9-93c7-48d8-af9f-5f602c853548",
        "cursor": {
          "ref": "01f66df4-3852-4f04-8e3d-80cb469d981e",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6d99077a-0875-483b-86e8-ab219d4feb2b"
        },
        "item": {
          "id": "65b805b9-93c7-48d8-af9f-5f602c853548",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b0f862a6-1bae-4469-9364-1f0de8c478ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba7eb42-1ee0-44f3-9685-4eac4ff75fbd",
        "cursor": {
          "ref": "15c2c788-9729-407b-a6c3-f1768698ac59",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a3437e61-8561-443c-8aaa-89d3aac93609"
        },
        "item": {
          "id": "2ba7eb42-1ee0-44f3-9685-4eac4ff75fbd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e13a311d-c8b2-4f54-b4ae-b29ae4bff522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362c67a0-bdcc-4495-ab23-3578e4d0de54",
        "cursor": {
          "ref": "58bfe729-5275-4ff7-b028-2c84f98a541d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "af98d7aa-f011-4e10-9c96-0c5ccd1560b3"
        },
        "item": {
          "id": "362c67a0-bdcc-4495-ab23-3578e4d0de54",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0024a652-53c5-424b-855d-a927b58f6192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e16fc27-372d-45c3-9ea6-bba454551701",
        "cursor": {
          "ref": "fef23a98-0b85-49c3-9fed-a4bbac078bfd",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "eec7b83b-99ad-40a4-b688-53a7c0b0d3be"
        },
        "item": {
          "id": "0e16fc27-372d-45c3-9ea6-bba454551701",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "60e80c89-f4a8-4907-82ed-03dff6ff697e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3880f1ff-8b1f-49b0-bc7e-893ba8f35446",
        "cursor": {
          "ref": "f3750e6b-67b2-4991-9e28-74c448bf89bf",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9c0fe176-2287-4ae9-9599-6c928969d9bf"
        },
        "item": {
          "id": "3880f1ff-8b1f-49b0-bc7e-893ba8f35446",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "442ba7ed-46d9-4196-9a41-0868b7e15cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8928c227-1f80-4664-8a51-c0f55aef25a4",
        "cursor": {
          "ref": "a7f87cc8-9e43-4a4d-a5cc-def5953e2dc8",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a0a8f072-e9cd-415d-8030-b8e033387f21"
        },
        "item": {
          "id": "8928c227-1f80-4664-8a51-c0f55aef25a4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d7b00ae9-ae8d-435c-8c20-d4b688cb9728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102e402f-9467-4483-a6ab-7badb9954242",
        "cursor": {
          "ref": "79751db4-f6b0-40a1-ad4c-8ca6241313fe",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9187747c-33e4-498d-9024-6ab26e82ae7b"
        },
        "item": {
          "id": "102e402f-9467-4483-a6ab-7badb9954242",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "33772083-3213-4a28-a7f8-c188ae853722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebf9a30-832f-40b5-947c-06d67c326110",
        "cursor": {
          "ref": "90a9acf5-1970-438c-9c26-f86038d25334",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b6e68b5e-e0cf-48a3-afe0-608b79fbae73"
        },
        "item": {
          "id": "5ebf9a30-832f-40b5-947c-06d67c326110",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c4f10d8d-9b5d-4e7c-882f-f1981ed5ac31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4ad4f9-a1f0-47e3-8751-351a00cd39b9",
        "cursor": {
          "ref": "33c588ab-5200-42a6-ba17-dbe53b190e94",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "30b75a0c-49b8-4d4a-a055-937513774365"
        },
        "item": {
          "id": "6c4ad4f9-a1f0-47e3-8751-351a00cd39b9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d0076198-1171-46b2-a096-ebe7f2d89a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ec0d12-0f72-4c7b-87c9-57533b968b60",
        "cursor": {
          "ref": "b048c714-41e3-4412-a997-885386be34cb",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "265ba75a-026e-4375-808a-62234d4f996c"
        },
        "item": {
          "id": "86ec0d12-0f72-4c7b-87c9-57533b968b60",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "170f47aa-1558-4a31-b861-f6883dd399db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d59f94d-a7d0-4296-a856-2478dac4b20f",
        "cursor": {
          "ref": "99e9aa35-34b5-4c02-b924-a1f33729cfa6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ec84eb1c-6bd9-4968-8294-5f2c08f5e770"
        },
        "item": {
          "id": "2d59f94d-a7d0-4296-a856-2478dac4b20f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8488e217-2889-4594-8531-19c27268fa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc1ba5f-e845-4dcc-8a6a-1f5261e92f69",
        "cursor": {
          "ref": "b4cd6be9-1982-40d6-98fe-0fcba9a28791",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "89f6add8-e05f-4089-aff1-5b3bbc93a82e"
        },
        "item": {
          "id": "7fc1ba5f-e845-4dcc-8a6a-1f5261e92f69",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6a464535-99a3-4daf-a75d-5906e4f39577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ebeef8-eecc-4e3f-8391-8d1008c7d0fc",
        "cursor": {
          "ref": "9ba228c0-6bf5-4772-8cb1-73ceaac11d62",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1af521f1-64e6-4189-b0c8-16f3b6ca6295"
        },
        "item": {
          "id": "a5ebeef8-eecc-4e3f-8391-8d1008c7d0fc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d62c0e61-03aa-4a9e-823d-eb2709cff0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32717eda-0460-4bca-a93b-739ef225fae4",
        "cursor": {
          "ref": "5a5728b4-1c27-4598-9e79-33235f2d1a45",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "19a231f5-b31a-4617-a8c6-e09a53ea567d"
        },
        "item": {
          "id": "32717eda-0460-4bca-a93b-739ef225fae4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "06c41bd5-fc0f-454f-befd-f5db256e3152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19234906-d918-468e-a3eb-c8028c61f7a1",
        "cursor": {
          "ref": "c865157f-c4b2-4abe-8cbe-07241be06a26",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6cf5bb9d-3edd-47a1-9244-19c8af10b92c"
        },
        "item": {
          "id": "19234906-d918-468e-a3eb-c8028c61f7a1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7a18e2bb-879b-458e-a613-33b2f0651e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce3a132-c257-4a90-8880-4aeb20b2383f",
        "cursor": {
          "ref": "5fc62dc4-2868-4208-86dd-bc8329df5826",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6a544f55-f140-471b-923b-67d93a1bf891"
        },
        "item": {
          "id": "9ce3a132-c257-4a90-8880-4aeb20b2383f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2e5c8a70-88d7-4ba0-9c47-96155853d0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec01ca9-44bb-4b25-8758-d0313fc15500",
        "cursor": {
          "ref": "2232879a-f02a-47bb-8119-d42aca33ffd7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e8d7822a-0444-445e-b6db-ecc6ef0022d0"
        },
        "item": {
          "id": "7ec01ca9-44bb-4b25-8758-d0313fc15500",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "773e3409-a1f3-4c67-9091-8da5eedaa3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bad40e7-f024-4af0-958f-f00ad280557c",
        "cursor": {
          "ref": "52f6fd32-2195-4200-926a-01c20255b41b",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "efd99a4f-a551-4cc8-8c8f-837707722060"
        },
        "item": {
          "id": "5bad40e7-f024-4af0-958f-f00ad280557c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d4781869-d397-4c93-bbb3-30759c64fc35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79eaeb2-801f-4999-877e-c8e4c3e5cc56",
        "cursor": {
          "ref": "e567b954-edb8-4327-a37d-f9505bb6d071",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "37b6f4be-78b6-42b9-95bf-c124890e07cf"
        },
        "item": {
          "id": "b79eaeb2-801f-4999-877e-c8e4c3e5cc56",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e9f64695-94e2-45fb-8f04-3f2b7fa4350a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c8c23b-276d-463d-b104-d96196551257",
        "cursor": {
          "ref": "88cb2df4-b5ba-485b-8711-f54c62d7bf97",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "85a06c9a-d3a5-4350-af4f-8004332ff6e1"
        },
        "item": {
          "id": "d4c8c23b-276d-463d-b104-d96196551257",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b6431d31-90f9-411b-8a54-b4c19ea8ed5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bbf82f-237f-45a8-be8a-3a0c642ed751",
        "cursor": {
          "ref": "6d73a579-2a98-4890-860d-c079d0b14574",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fb69f30f-5e65-49a1-9819-2a5f9bfa2eb4"
        },
        "item": {
          "id": "41bbf82f-237f-45a8-be8a-3a0c642ed751",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "974f0e42-1f81-48da-994c-ca5818bdf6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9e08e1-3840-4400-8ff6-b1c9ddc560ff",
        "cursor": {
          "ref": "e22f3dbf-ba3f-46f2-bf4e-e5e722594754",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "60d1ffeb-2053-4647-82c1-84ffb77e3a15"
        },
        "item": {
          "id": "3a9e08e1-3840-4400-8ff6-b1c9ddc560ff",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "491f0c3a-6508-4c02-acaf-abbadefd6353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f40ccaf-b272-4e73-937a-98ce61858b0e",
        "cursor": {
          "ref": "c02a20c8-fc22-43e3-8c6f-c8c5b12ef8a7",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8ae23267-6152-4990-a426-2f3dcba5acf1"
        },
        "item": {
          "id": "1f40ccaf-b272-4e73-937a-98ce61858b0e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "87066052-8649-4c2d-bdf6-eb7fc9ff23e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef9735d-83af-4ce4-8d9f-1f9c825ba653",
        "cursor": {
          "ref": "79741118-7c07-4ab3-a1b8-08eec9c68301",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "38d06f20-16ff-41a3-8041-072bae8ad1fe"
        },
        "item": {
          "id": "eef9735d-83af-4ce4-8d9f-1f9c825ba653",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4c9c7239-ca78-4b0e-8e18-cea45c335b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade4336d-bf75-439d-b37b-833509ba13cf",
        "cursor": {
          "ref": "901b2787-27ea-4abb-8c9b-064e3d2ca9a4",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "20b682b6-33df-4fe8-93de-f8c10ac56ee0"
        },
        "item": {
          "id": "ade4336d-bf75-439d-b37b-833509ba13cf",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "29ceeb13-6556-456e-a9a6-d79270f55255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132dc62b-e555-4a62-8529-14bd521452c5",
        "cursor": {
          "ref": "592f0e01-806c-4c7a-aaba-412ac3ba7397",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8752c94c-4184-4b6f-b290-d11a7f317f5c"
        },
        "item": {
          "id": "132dc62b-e555-4a62-8529-14bd521452c5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d6e20b04-7afa-4c9b-a5db-3f1d27a8c32b",
          "status": "Created",
          "code": 201,
          "responseTime": 539,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9aee0b64-8a71-4b16-8e81-71500c4aae01",
        "cursor": {
          "ref": "09d929b2-67d9-40d0-ab64-9d951622ea7e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5a88739f-4afb-434c-828d-d4a50f2bd74f"
        },
        "item": {
          "id": "9aee0b64-8a71-4b16-8e81-71500c4aae01",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "153a437f-0d12-475a-937c-7246d209b3f4",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d45cc1d8-76ea-4f4c-b019-57983b04b7ce",
        "cursor": {
          "ref": "8077bbed-bcd5-4611-ae4d-afa5342c8e6f",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8db4535a-8333-4172-8ad3-32d5ede797d2"
        },
        "item": {
          "id": "d45cc1d8-76ea-4f4c-b019-57983b04b7ce",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e5e5e5c2-6401-4243-a8fe-cd5a5a657c4a",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ddbe6d0e-51bb-476d-b664-d8961ebb0c11",
        "cursor": {
          "ref": "f55c2e98-8eaf-42fa-9bc9-28f9c86ba9ff",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "033d5678-8919-4aab-9619-ebb9b9acccb0"
        },
        "item": {
          "id": "ddbe6d0e-51bb-476d-b664-d8961ebb0c11",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e520dcb5-e308-4385-bc34-11bb6eb6bbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c28d76-03dd-4902-ae5c-f4da4afe60c4",
        "cursor": {
          "ref": "afea94ee-9d70-45c6-822c-943933ab6c06",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "93ecf58e-e83c-4912-bd25-828d64ba76c2"
        },
        "item": {
          "id": "c1c28d76-03dd-4902-ae5c-f4da4afe60c4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3cc0e484-7738-4deb-9b19-aaeef9c97eeb",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f197f366-84ac-4992-847a-9d02c217e099",
        "cursor": {
          "ref": "1bf32c82-451a-45a9-809e-7f38b56e1a16",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ddb487fa-985c-4306-b79b-41d04a2bf097"
        },
        "item": {
          "id": "f197f366-84ac-4992-847a-9d02c217e099",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "be78c30e-df5b-42e7-bb1a-95ff0a70750f",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4fb2a916-d8e7-44fc-bc0b-94c79ac63bd2",
        "cursor": {
          "ref": "8dd7cba5-0afd-4ba9-bf01-0743b9afd338",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "332642d1-8ad7-48e9-a173-f9001d804d5d"
        },
        "item": {
          "id": "4fb2a916-d8e7-44fc-bc0b-94c79ac63bd2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "50eade58-ac0e-494e-bd50-1250be731639",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "202f2c12-6f6a-48b5-b9f6-9ca4053e2adb",
        "cursor": {
          "ref": "fcc14ef9-3bd6-4198-9290-0eba631c04fa",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "955b8ebc-dcbc-4574-8bc2-c92ae7f46a22"
        },
        "item": {
          "id": "202f2c12-6f6a-48b5-b9f6-9ca4053e2adb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fe66348d-72e1-49c0-b125-12a8c50b0a65",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2e662f64-13f2-4c62-b64a-d8670d4729be",
        "cursor": {
          "ref": "f43bf814-aa87-41bf-ab1c-0fb1efb6b699",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7d4da351-530d-44f2-9e5f-c1551571a43b"
        },
        "item": {
          "id": "2e662f64-13f2-4c62-b64a-d8670d4729be",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "31c4b90a-1197-4541-9569-fbff4b68fa7d",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d59dfa38-b61d-49fc-9551-c7ee78d99243",
        "cursor": {
          "ref": "eff42a43-7080-42a4-8591-4d7087517ec8",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "68ee0877-066f-4f2e-bb63-cd4ce46381d6"
        },
        "item": {
          "id": "d59dfa38-b61d-49fc-9551-c7ee78d99243",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "37536fc9-a8a4-447a-ab90-98d1064eea3c",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6d91112b-0372-4019-9c68-ce7f87842f87",
        "cursor": {
          "ref": "4835619c-ef17-48ee-bd6c-9fa7caa6dd53",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "26c55bcb-64fa-42fc-ac21-3ae385472e9c"
        },
        "item": {
          "id": "6d91112b-0372-4019-9c68-ce7f87842f87",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e7944b67-7b66-4db6-9c34-ec8b09168de5",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a05da927-3a04-4ce9-a958-620afc4651bd",
        "cursor": {
          "ref": "22da5c98-0474-443a-835e-02bd5261f2c3",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "41ce641f-8f6c-43b7-9e4c-8f50c7fb6788"
        },
        "item": {
          "id": "a05da927-3a04-4ce9-a958-620afc4651bd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "efb76327-14d2-483f-b111-e246596105d7",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "168377ac-f766-4598-87d8-0b3a51bf0b15",
        "cursor": {
          "ref": "a93ac7c8-3191-445c-876e-e1ddd487004b",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "66646343-183f-4a72-8bac-d4b2af8028bb"
        },
        "item": {
          "id": "168377ac-f766-4598-87d8-0b3a51bf0b15",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "906d46e4-6b5a-43f1-b39a-ee59bffc8964",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0bad90bd-1cb1-415e-a9cb-bf427f247be5",
        "cursor": {
          "ref": "14a6f8cf-5da3-4461-88fa-975d89b35289",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0e923759-d254-47ae-9c8c-e1d82a9d8a2d"
        },
        "item": {
          "id": "0bad90bd-1cb1-415e-a9cb-bf427f247be5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "af209258-dad6-429d-8b0f-e334b6d3fccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d7ba42-ecf2-480a-8bd6-54eb18197964",
        "cursor": {
          "ref": "2395c152-8b45-4b8f-b284-f30f30535cd5",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dd9fda62-3e20-451f-b056-a85087faf8a4"
        },
        "item": {
          "id": "20d7ba42-ecf2-480a-8bd6-54eb18197964",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d1d42961-0111-463d-a3c5-a89ee0b2438f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21399bf0-53f7-48c5-bf22-3a5c92a6caa9",
        "cursor": {
          "ref": "3f66d647-283f-4e2e-94de-f26936dbd413",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fa8a86b2-f4d6-4da1-a0e5-fa6d481ef73c"
        },
        "item": {
          "id": "21399bf0-53f7-48c5-bf22-3a5c92a6caa9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "224dc98b-f0e6-4a85-b76f-c2aa9bead6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ef94e9-6380-4342-98ba-68a164acde54",
        "cursor": {
          "ref": "bea50d2b-d0f9-451b-ab5e-d787120ef004",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "236890c5-4771-42d8-b757-24b9e7f70af9"
        },
        "item": {
          "id": "c7ef94e9-6380-4342-98ba-68a164acde54",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a8b29499-2457-4c03-ac85-24b0029a15a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091fd06c-7482-4ba7-a78d-187dec1ef78a",
        "cursor": {
          "ref": "6bc75239-f1f7-415f-af43-3a2261add794",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "95c8639f-a27f-4e1e-a3da-45ac2e1dc031"
        },
        "item": {
          "id": "091fd06c-7482-4ba7-a78d-187dec1ef78a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cfa08cde-12b9-464b-96d1-20d9781cd4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba57167-ead2-4c13-ac3a-9526defac465",
        "cursor": {
          "ref": "d6106441-2e33-4a55-9d63-5972e7d2fc0e",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fe70e445-8e1a-462c-8000-0322c1ee990b"
        },
        "item": {
          "id": "dba57167-ead2-4c13-ac3a-9526defac465",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5e1f3b09-72b7-4e13-b85c-ea0d1a1d6a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155ce862-9f5b-4cc2-b72b-25d16b963afb",
        "cursor": {
          "ref": "76a26fcb-8c37-42c5-ba93-bc4e0f35e2c6",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e8cbfe86-a3ae-4ba2-b2f4-7aac2aed3272"
        },
        "item": {
          "id": "155ce862-9f5b-4cc2-b72b-25d16b963afb",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "db4792f7-838d-469e-9310-114a102d8b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f556e4ec-8571-435a-8d3b-786e3801bb19",
        "cursor": {
          "ref": "1c52fe58-8855-4696-b00c-c20474069640",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "12786e85-f263-47e2-9e9e-41d46270fa3a"
        },
        "item": {
          "id": "f556e4ec-8571-435a-8d3b-786e3801bb19",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "af68b718-613d-4118-b488-0c8f1fb5f2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60dfa3c9-4a8f-4ca1-bfdf-b598cdf3d0fc",
        "cursor": {
          "ref": "54003a9e-dd0f-4e41-8617-15748513fc13",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9a308c87-1e37-458e-a75c-25e35986beea"
        },
        "item": {
          "id": "60dfa3c9-4a8f-4ca1-bfdf-b598cdf3d0fc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f93c3339-eb6e-4bb7-9efb-0c9c12ba147a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fb459d-9e0d-4027-91b0-1a1738d83615",
        "cursor": {
          "ref": "03f2dbac-f041-4d69-b076-57707896fafa",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "264b3ed2-c93c-4d60-aadc-819052b2a6a1"
        },
        "item": {
          "id": "50fb459d-9e0d-4027-91b0-1a1738d83615",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "10bdf2a6-6edc-4968-ba3e-b15aba4f0377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01aef48-ba92-4598-ad1b-12e7b041568f",
        "cursor": {
          "ref": "08da621f-4bb8-442f-930c-5aa8106d7b0f",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bdb6775b-debd-4497-bccb-950ff137208b"
        },
        "item": {
          "id": "e01aef48-ba92-4598-ad1b-12e7b041568f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "257b4b3d-154f-4172-ae04-eec963514c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fd07be-5163-4610-a07d-bb6d2645aca7",
        "cursor": {
          "ref": "8b31b3d4-8833-48c3-9ef9-e9fc787355d2",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fcd48c29-f2db-4b92-985d-294b28a95e64"
        },
        "item": {
          "id": "91fd07be-5163-4610-a07d-bb6d2645aca7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3b7c1047-a4c5-49b9-8659-70533dedf6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54d6c12-0da9-48fb-8a33-8d615bcdf752",
        "cursor": {
          "ref": "1b53dd21-77bb-4da3-abcd-cfc6a8cefd45",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "42564e73-b0fe-46ee-9f8a-f959c328627f"
        },
        "item": {
          "id": "a54d6c12-0da9-48fb-8a33-8d615bcdf752",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d31bdf52-13fb-4baf-9f11-edbcf96a4171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d53adfd-112d-4887-b980-bac5633f5a59",
        "cursor": {
          "ref": "cee7b87f-a595-49a4-b0f3-023be72cf6cc",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "694c01c3-89f8-4061-a052-fefc225bee4e"
        },
        "item": {
          "id": "2d53adfd-112d-4887-b980-bac5633f5a59",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "81c73e02-140d-4e61-87c7-118c3be09eca",
          "status": "Created",
          "code": 201,
          "responseTime": 387,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "99861973-996d-40a2-b972-209eb16853fa",
        "cursor": {
          "ref": "de608975-9162-4e21-acf3-95cb879e7f44",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3299bd1d-126a-4e83-8f15-c1040bc57eaa"
        },
        "item": {
          "id": "99861973-996d-40a2-b972-209eb16853fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "561350f1-feb3-497d-bfaf-0f7a3c017d1e",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "92a663ca-a91e-4342-83c0-91ce156736f7",
        "cursor": {
          "ref": "497e7dee-2eab-42ac-bfa9-35a690d8bc9f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "33b7ba1a-3936-48ce-879c-c0055a23043c"
        },
        "item": {
          "id": "92a663ca-a91e-4342-83c0-91ce156736f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "67ce1c26-971d-4cc5-8d16-e54e13743059",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "23ed6c5a-7a6d-4e82-9fbe-ec6ec32ba6bd",
        "cursor": {
          "ref": "71d161a5-2d68-4e22-bd64-66982c805aea",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f659ffd0-6151-4fa4-ab42-d8753287f826"
        },
        "item": {
          "id": "23ed6c5a-7a6d-4e82-9fbe-ec6ec32ba6bd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fa0fd4af-e23f-4786-aed7-1331670bf2f7",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "afdea495-843d-4caf-933f-14a08a8c6cde",
        "cursor": {
          "ref": "0b8fc952-768a-4ad0-b4f1-fe515a1dfc91",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "40a32635-3eb3-4af0-aa19-73a5b29330b6"
        },
        "item": {
          "id": "afdea495-843d-4caf-933f-14a08a8c6cde",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b8c71d60-3ba3-47fe-b541-596eba2272d9",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ba9b2857-633c-4ab8-a5b3-739a74e1d927",
        "cursor": {
          "ref": "0156293b-2ab9-4b78-b38f-11d38a859b89",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c5e2ad78-6a6d-4a8f-80ab-03b77bc28af8"
        },
        "item": {
          "id": "ba9b2857-633c-4ab8-a5b3-739a74e1d927",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0e1889f6-9ebf-4740-b86b-7762b32a6415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd985b9a-b1fc-49aa-8f39-bd3235b6c261",
        "cursor": {
          "ref": "43fb2d00-1adc-4e3e-b0ea-8beb6b71c925",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a6dd5c73-5b6b-4bda-9a2d-c71bbf53a06e"
        },
        "item": {
          "id": "fd985b9a-b1fc-49aa-8f39-bd3235b6c261",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "14dc6454-a572-4f7c-86cc-d261a1375e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb67411-3c03-427f-be7f-a625c8397784",
        "cursor": {
          "ref": "d1e7e6ff-b917-401d-89ff-ee92605dbd72",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cf4b1c57-bd69-47d5-a324-bc085506dc03"
        },
        "item": {
          "id": "9bb67411-3c03-427f-be7f-a625c8397784",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bbe1b971-458e-45fc-adf2-f0fc0d2d1539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0538fa-e836-4505-8ba1-a21ef540faf1",
        "cursor": {
          "ref": "41b2b48e-48b0-4f3e-89c2-834880590a84",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d11de74f-4c86-4c45-b8e3-6a4d70716a4c"
        },
        "item": {
          "id": "6f0538fa-e836-4505-8ba1-a21ef540faf1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bc205ba8-5e97-4044-84a0-be8e45a8bc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b269a5-3318-4d6e-ae8f-906be3c9c77a",
        "cursor": {
          "ref": "83e348ce-37e9-4577-87b5-3551aa542bb4",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9b76a533-1c70-4a5a-8133-9b32b42f98c5"
        },
        "item": {
          "id": "09b269a5-3318-4d6e-ae8f-906be3c9c77a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "61f545bc-1572-4212-acb2-57bb70bbf32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4aadb2-1e39-4350-a638-e34e74acc6fe",
        "cursor": {
          "ref": "8aede637-230d-415c-81de-a580c14c0fc1",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2bb936b9-8e97-4bf2-a431-0022e3b7e66c"
        },
        "item": {
          "id": "9b4aadb2-1e39-4350-a638-e34e74acc6fe",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "431c3818-5ef6-4ad3-a128-be24802df646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dbfa64-75ee-4cd2-9aff-0df79871d513",
        "cursor": {
          "ref": "30de5735-5fae-4f45-b3d8-86c4f4969642",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7b3816f0-4da9-4283-ae62-b6888da2e093"
        },
        "item": {
          "id": "f4dbfa64-75ee-4cd2-9aff-0df79871d513",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "de0eabac-63f4-4339-b400-d23b3d63a3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa84efff-b9bb-4f90-bbf5-9441eaf97c13",
        "cursor": {
          "ref": "21306823-8f43-4ba7-9d95-963fa18f1896",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "19eda66d-08f6-46d0-8c7a-816685cddc7e"
        },
        "item": {
          "id": "fa84efff-b9bb-4f90-bbf5-9441eaf97c13",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "59e51118-67df-47a4-9cd1-d9006235c99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24eebd57-1c92-4abd-8146-432528714233",
        "cursor": {
          "ref": "2aefa116-6477-47a6-af74-247e5cec5119",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9f2664e4-0278-4bff-8ce5-5181c684791d"
        },
        "item": {
          "id": "24eebd57-1c92-4abd-8146-432528714233",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "67bb65a6-85ef-423f-bce6-fe6f01be63bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48378d28-f04e-4d5f-89a1-738ee4fa7b1c",
        "cursor": {
          "ref": "be16ac24-fc0c-41fc-9f21-b0fe13f82f79",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7dbda237-ef8e-4ab8-8fd7-6b29cc78d6a5"
        },
        "item": {
          "id": "48378d28-f04e-4d5f-89a1-738ee4fa7b1c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4bb6dd77-c347-4df0-bb6c-5c1fd983b8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17fe8117-f461-4732-8b3d-6aaf252a5c5f",
        "cursor": {
          "ref": "3de67226-f187-4712-bd65-c63b782e9e5d",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "747942f9-b2ba-4e32-b8e7-0f8f0d8530a6"
        },
        "item": {
          "id": "17fe8117-f461-4732-8b3d-6aaf252a5c5f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "799e8fcb-06fa-4eac-bc37-1e0cedfc5985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b5e3d7-ec43-4583-80ee-9ec31cc36b42",
        "cursor": {
          "ref": "e5350a9d-3911-4077-a138-8ede615bdf67",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "574c8e17-51ad-4d5d-833c-29334cd1474e"
        },
        "item": {
          "id": "25b5e3d7-ec43-4583-80ee-9ec31cc36b42",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "034c1ae1-b21e-4648-845c-1d65f4f7d39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e37260-1a28-476e-8ed4-06686ee124aa",
        "cursor": {
          "ref": "7d1f5f8b-71d2-41c8-b9d8-b8561bec34fd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "643e80d9-cae6-4663-b3de-9509507f1af1"
        },
        "item": {
          "id": "97e37260-1a28-476e-8ed4-06686ee124aa",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c180d786-766d-498b-84ab-4731d5f6b793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b001af6-9e15-4222-9a97-46f2816e888b",
        "cursor": {
          "ref": "c138853c-be42-4fbf-a73b-60ac4c929a79",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "74715aab-eeed-4919-afcc-3d00b206b17b"
        },
        "item": {
          "id": "7b001af6-9e15-4222-9a97-46f2816e888b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b7a64194-838e-480f-94d7-5e53da7d81ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6793cf-676e-4379-8640-7022f94013e8",
        "cursor": {
          "ref": "8ab0e8ab-de40-4155-834b-bc33fe88914c",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "43c633e6-efc5-415e-a8a7-5ba505822c8f"
        },
        "item": {
          "id": "9c6793cf-676e-4379-8640-7022f94013e8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fe8b6f69-69fd-4af4-9a83-8c3c94d891d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6a30e6-634a-4fa1-974f-4f7fb7b0881a",
        "cursor": {
          "ref": "71ebb5fc-965d-4689-b196-0501a533238f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a1cd5dba-1831-4916-a937-d83122366f75"
        },
        "item": {
          "id": "ec6a30e6-634a-4fa1-974f-4f7fb7b0881a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6e89e8aa-52e7-41d1-95ed-2afbb3900f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2276136-65ed-4f22-9c6c-c1f5d0b1a69e",
        "cursor": {
          "ref": "ae7a25c8-8b04-4106-9adb-41edc537c1ca",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "19da3e08-37f9-4182-a623-91e016de3841"
        },
        "item": {
          "id": "b2276136-65ed-4f22-9c6c-c1f5d0b1a69e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6e22e38b-8f30-43b3-9ff1-32d6d5e9c87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c2d16b-daab-412b-aadf-b9704b7e0098",
        "cursor": {
          "ref": "45738572-5459-4fa8-80a9-6418144f369e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ce1e0312-c5de-4108-91d6-def28ad0903d"
        },
        "item": {
          "id": "d8c2d16b-daab-412b-aadf-b9704b7e0098",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "881ccc22-8375-4a24-9c4b-97729a45cf04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bace064b-f0f7-43cb-a43d-02710e43e35c",
        "cursor": {
          "ref": "94b32d30-ce3b-4a29-9279-0d1dfe4f043b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6ef89917-0d51-4107-a86a-23cdf28b45ed"
        },
        "item": {
          "id": "bace064b-f0f7-43cb-a43d-02710e43e35c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6e6d39bd-5617-4fa2-b61c-212d84d27d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21800a1d-0787-4d54-aedc-735db01d42c9",
        "cursor": {
          "ref": "3c04ce4d-d3d3-4c12-b503-080c1fd975bc",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1f5bfe28-d09e-4936-81f1-6a334133ba58"
        },
        "item": {
          "id": "21800a1d-0787-4d54-aedc-735db01d42c9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1eb5ccfa-6075-4f1f-9dc2-7016a50d6c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09cb30c-f14c-4fdd-b223-666981d263ce",
        "cursor": {
          "ref": "d8380db0-7aa7-41fc-b1ce-6b55c5b95d7b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9dfc762d-b5aa-4a03-9947-d86017ed60c4"
        },
        "item": {
          "id": "e09cb30c-f14c-4fdd-b223-666981d263ce",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6fa17778-7077-4b8d-bd63-b3461b62e72c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41535442-e2a4-4033-895f-31dec5c3ec5c",
        "cursor": {
          "ref": "cc0bb6a3-7490-4d1d-b06b-3959663f9016",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f3db308a-ffcd-455c-9684-2006659d1359"
        },
        "item": {
          "id": "41535442-e2a4-4033-895f-31dec5c3ec5c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "aa370506-d6a9-4802-a5e1-a511ef0f3459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d92ca5b-0b94-408a-a056-601e76d6abcb",
        "cursor": {
          "ref": "b82492e2-592f-4f97-9889-f730032e2aa4",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f7197faf-6c87-4c15-bd6e-4c7074408694"
        },
        "item": {
          "id": "6d92ca5b-0b94-408a-a056-601e76d6abcb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cadff3d5-391a-4c9a-94db-2dd419385609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b42ed39-0049-4fbd-ae20-28dba2364352",
        "cursor": {
          "ref": "19646b4a-fe27-4865-819e-6ad177189d85",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "23fc16eb-a10b-45d8-bf68-e5205254e654"
        },
        "item": {
          "id": "8b42ed39-0049-4fbd-ae20-28dba2364352",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "22406598-b29f-4914-8c5e-0f822303c3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d04733c-6e82-4996-a892-a8a806c31c3a",
        "cursor": {
          "ref": "f85256c2-07d5-4495-9629-130523b9b218",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "aaae5e77-48dd-48eb-93e8-65cf844b02da"
        },
        "item": {
          "id": "8d04733c-6e82-4996-a892-a8a806c31c3a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5db38074-6bbd-4dd8-874a-23a36f314e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2489fff2-5d8c-41fc-af4f-13c7f5f6898a",
        "cursor": {
          "ref": "cdd63f85-7c18-43c7-81d3-4777130d151a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cc6e7f73-ccff-443f-a8e6-25c3ad6ff73e"
        },
        "item": {
          "id": "2489fff2-5d8c-41fc-af4f-13c7f5f6898a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3bc4ec42-e066-4277-a0c1-0e1b0671dfc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b91b972-22f3-4be3-9a51-644ab4cee455",
        "cursor": {
          "ref": "1bc742c3-4e1e-4ca4-9f05-e155a5e5b9af",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4398e80b-c579-4e32-b817-5a88b5e84585"
        },
        "item": {
          "id": "9b91b972-22f3-4be3-9a51-644ab4cee455",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b3080aec-d9ca-4de8-b140-eea743e87eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52dcc67c-e2af-412d-9494-e991cd7a03cb",
        "cursor": {
          "ref": "933db67d-b0ad-4dc5-b729-a8ebd0827b46",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1314b921-42ea-4f93-a254-5dbfb5e281f1"
        },
        "item": {
          "id": "52dcc67c-e2af-412d-9494-e991cd7a03cb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "536925dd-f168-464d-805f-72d26f1c04bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64ec11f-fde4-4962-92db-e9afc8ba96f9",
        "cursor": {
          "ref": "d11ff4ae-2d6a-4ee8-bb9f-3a74d5244693",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "59cf8b06-e60d-4929-b9ef-40ca10503f61"
        },
        "item": {
          "id": "a64ec11f-fde4-4962-92db-e9afc8ba96f9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e490fe8a-f722-41cd-9d78-9aab27e1ec6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37412e4b-e9fc-41e4-a7d0-f62f3a7f5172",
        "cursor": {
          "ref": "8cdce239-cd90-40f6-bf37-e18a29507d8a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7b65f990-f502-479a-9d7e-1cd6a6029871"
        },
        "item": {
          "id": "37412e4b-e9fc-41e4-a7d0-f62f3a7f5172",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3551a24d-2dc5-443d-a03d-f8c18adf1ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eacd79-8382-4912-8b31-8922fbae3f28",
        "cursor": {
          "ref": "144eb95b-581b-4c14-bbe8-c1acf78ec7fc",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a109a8e2-75fe-44c1-83b0-218500cfcb8b"
        },
        "item": {
          "id": "e7eacd79-8382-4912-8b31-8922fbae3f28",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d434e2c8-ea49-4f1a-9a0a-645dec7c46c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e02a95c-96f7-4136-9e99-ab11f8931b7d",
        "cursor": {
          "ref": "59cfce35-05d7-460b-bd35-fe46aec5e140",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ac36a681-dd00-4152-9e62-27fbf8439269"
        },
        "item": {
          "id": "1e02a95c-96f7-4136-9e99-ab11f8931b7d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8587f5c4-74a5-419d-b497-1596d30a5c6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d841fc07-f3e7-47d0-ae49-122f96744228",
        "cursor": {
          "ref": "a2619563-61be-4e1f-a486-5ebe13dd7205",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "abcc1403-417c-4ac6-b25c-f59f5b196aad"
        },
        "item": {
          "id": "d841fc07-f3e7-47d0-ae49-122f96744228",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4ff02fcd-86f6-43e3-9e9d-073be8df87b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "226fb0be-42a7-41e2-9eb5-7df9d6dba659",
        "cursor": {
          "ref": "3162840c-b4e2-4d18-acea-ca8f7a94e12c",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ba82009d-a032-4595-abc9-1e255845f70a"
        },
        "item": {
          "id": "226fb0be-42a7-41e2-9eb5-7df9d6dba659",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4552f005-d10d-426e-85d0-0443cd98f099",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3d4dbb-5542-4124-9d82-32805735cd77",
        "cursor": {
          "ref": "c11fb8ea-ebae-41d0-bc8c-50c9c76973a5",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "42363dbd-5dc1-45a4-944d-110d327d00d9"
        },
        "item": {
          "id": "af3d4dbb-5542-4124-9d82-32805735cd77",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9fd67423-32e9-485b-8a29-7a5ae30fa25d",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "578861a7-0702-4217-b927-b05d0a1b7409",
        "cursor": {
          "ref": "4124140a-3646-4e9b-93c7-4c418e990d51",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5e0e3ce9-163c-45e6-aec1-495936548026"
        },
        "item": {
          "id": "578861a7-0702-4217-b927-b05d0a1b7409",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6e132fde-2f8d-438a-8744-3f43326f83b0",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2caab40d-4a27-436c-8126-c6f2579c612e",
        "cursor": {
          "ref": "f1bf8474-538f-4ea6-abb4-821d4dc938e9",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "86a2647e-0df6-4b61-b5ae-b26bbde6a3e1"
        },
        "item": {
          "id": "2caab40d-4a27-436c-8126-c6f2579c612e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "552af91a-e5c9-45db-82f3-b298845b0981",
          "status": "Created",
          "code": 201,
          "responseTime": 449,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db81235-fa93-46b6-b844-ed5fbe14eac4",
        "cursor": {
          "ref": "b7f88887-326e-4067-a1ef-baceeed04a60",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f9f619f8-12fb-4367-bf28-ccbb6a3d65f2"
        },
        "item": {
          "id": "5db81235-fa93-46b6-b844-ed5fbe14eac4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f8a28b26-c6ac-460c-8773-d3cf75ca8047",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-12T00:35:00.310Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-12T00:35:00.310Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7a80d88a-b038-41e1-ab3d-88d89792a9e3",
        "cursor": {
          "ref": "eccbd521-0da9-48b3-b61f-992a12947904",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "df48ac6d-18b0-4e9d-af3e-945b6c2e3c34"
        },
        "item": {
          "id": "7a80d88a-b038-41e1-ab3d-88d89792a9e3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "28017764-ee74-478f-8c13-e708b2e061cb",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1c3d89-af64-4a27-93a5-c0c5785a3b57",
        "cursor": {
          "ref": "970cfb15-505f-4de8-bd93-d02d5e163f96",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1c0bacd9-2a99-41e7-8882-c8808eee61fe"
        },
        "item": {
          "id": "9b1c3d89-af64-4a27-93a5-c0c5785a3b57",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8f3f1810-569d-420c-9424-9d7e30260f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a74f1a5-dbcd-48c1-86d1-57a1cbb675a8",
        "cursor": {
          "ref": "8823eade-5116-4dac-abf9-c6c622e2cebc",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "86cc8131-5595-4474-b7de-d73445b79931"
        },
        "item": {
          "id": "2a74f1a5-dbcd-48c1-86d1-57a1cbb675a8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b3c83de8-33fe-4e19-9b90-69b861235899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f564fabd-f0a8-49e7-8390-0817d13f0705",
        "cursor": {
          "ref": "0e64dc49-ec97-45f3-a572-6be075cab912",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9295cc06-e17c-42c4-9ec6-b44fa079e592"
        },
        "item": {
          "id": "f564fabd-f0a8-49e7-8390-0817d13f0705",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7d8f5cb8-4313-4d6d-9f21-9355236f1325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5b93a4-2418-427e-a4f7-e2ba2d84602e",
        "cursor": {
          "ref": "b39cfb87-ad89-40ff-9609-e9cde898620b",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d0254c14-33e5-4396-bf56-d2cb87c33a6c"
        },
        "item": {
          "id": "7a5b93a4-2418-427e-a4f7-e2ba2d84602e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "296cd2f9-a3a5-48cc-93da-7cc2a14c25c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f13d1e-09b5-4627-8e16-c027c3279c72",
        "cursor": {
          "ref": "87c926d0-92ef-4f41-b524-044e5c9d79c7",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "70ce3c27-4eea-4a46-9cee-a716f0bbc706"
        },
        "item": {
          "id": "83f13d1e-09b5-4627-8e16-c027c3279c72",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dafa3fda-e0fd-4fb0-8704-7620d792aea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ab49de-e733-4caf-b08d-d65429f5a663",
        "cursor": {
          "ref": "585bde1c-2e2e-43b3-a66d-a6d8eb415282",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1f137a83-312b-465f-ba51-8f554e6a348d"
        },
        "item": {
          "id": "c3ab49de-e733-4caf-b08d-d65429f5a663",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "97810e53-5bb4-4716-8c2a-569dcf1a62f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8939d31-60c7-4652-b9e2-be96c76c6a4e",
        "cursor": {
          "ref": "cf1b2051-2a8e-47ad-b05a-021d9ae17980",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "770c9739-86f7-4e98-bf4d-01837c4b0626"
        },
        "item": {
          "id": "a8939d31-60c7-4652-b9e2-be96c76c6a4e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d2cdace2-1655-4685-96b2-04817eca480c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edcb248-07d6-48b7-bce0-f41236b3bb12",
        "cursor": {
          "ref": "d0fca671-ef76-4f76-9e4e-9f4e59082e5a",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8a49aa94-e38f-4ec5-84cf-b49b87aa8d37"
        },
        "item": {
          "id": "1edcb248-07d6-48b7-bce0-f41236b3bb12",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8c7c43c4-e1bd-4ca6-bef0-4fb17c2d2709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8fbaed-0d55-4fb6-8414-76cb1478941a",
        "cursor": {
          "ref": "86f34dfa-341c-4ee7-9b6c-77b8e19b50ec",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7ec5f44c-c29b-45e5-af0b-cd156c51390b"
        },
        "item": {
          "id": "4a8fbaed-0d55-4fb6-8414-76cb1478941a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0b7286cb-2715-4770-98c5-417fb0733ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33de7b52-be48-4e83-b585-657a9e5ec246",
        "cursor": {
          "ref": "77ad0350-3a8a-4637-8705-34b7257bfc8e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3d8a82d9-24e2-44be-9899-6493546a86df"
        },
        "item": {
          "id": "33de7b52-be48-4e83-b585-657a9e5ec246",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2125efe4-533f-40c7-af75-976d97745c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1b4edd-9d62-4228-8039-9918e33bf476",
        "cursor": {
          "ref": "51544df2-b195-445f-a2e5-9a106330fd67",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "70d92b2c-197d-481d-888d-c3c54f688d44"
        },
        "item": {
          "id": "3c1b4edd-9d62-4228-8039-9918e33bf476",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9b3ebc63-f956-4591-ba8a-6c795d0461aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992131cd-fe4c-46cc-8606-7ab14e6090d8",
        "cursor": {
          "ref": "4587323e-53a8-4e5c-9430-fdfe0012fa97",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8e49b697-eea2-4549-a84c-06d2d5cae99b"
        },
        "item": {
          "id": "992131cd-fe4c-46cc-8606-7ab14e6090d8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ffaca6b6-3f8c-4b99-906f-249d22e24efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e58257-afcc-4b00-b214-21d23fb5a1ab",
        "cursor": {
          "ref": "4083bd42-335c-401a-8c3c-5d7336d2232c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5ec8b599-e123-45ea-b3ba-62afedbb65fd"
        },
        "item": {
          "id": "04e58257-afcc-4b00-b214-21d23fb5a1ab",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "530f8da5-ffd7-451b-aba2-929588c51029",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "421c9865-621d-48e0-a3a8-4ee6052f8006",
        "cursor": {
          "ref": "950f88bb-2711-4c4d-94a8-9170238d0828",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8a564281-38cf-4bfe-96ac-ff76c4dabe83"
        },
        "item": {
          "id": "421c9865-621d-48e0-a3a8-4ee6052f8006",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4f00af21-a228-4d67-9476-e4ef4fd39c97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ee49e626-7520-45a1-92ec-a7a43549a646",
        "cursor": {
          "ref": "9f9820c4-1b53-4a55-8407-ef9ee236085e",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a87c06ab-fc5b-49db-aacf-290d84990e0c"
        },
        "item": {
          "id": "ee49e626-7520-45a1-92ec-a7a43549a646",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1bda049a-d8de-415c-8d27-8c13940c99e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391be5fc-a1b7-4958-89e0-30e5369efcd3",
        "cursor": {
          "ref": "e5721344-f474-45eb-a2aa-545c53a29018",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b000da3a-7bc4-4013-be75-7b52f6244f71"
        },
        "item": {
          "id": "391be5fc-a1b7-4958-89e0-30e5369efcd3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a01cc2b2-99e7-4e59-905d-46510a0d4239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1533d0-5ee5-4fbd-bb72-71827ac5909d",
        "cursor": {
          "ref": "f07a851e-5151-4421-b6a2-38ecc1e844be",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7e1d2178-aa7f-49dd-9608-665fc6664d1e"
        },
        "item": {
          "id": "ca1533d0-5ee5-4fbd-bb72-71827ac5909d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "063077ae-ac83-4fa5-b64f-0d5bb98551c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7217f26d-906d-4931-837a-e0f682750e80",
        "cursor": {
          "ref": "1bd308d7-38eb-42f0-ada1-3f01b82b0d66",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0913702b-9a6a-411c-9e2b-9d788d1460d3"
        },
        "item": {
          "id": "7217f26d-906d-4931-837a-e0f682750e80",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6bcb742e-ad3c-4ea1-abee-8689734da27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba05ca3-cce6-4e5a-a0d4-026cc170fced",
        "cursor": {
          "ref": "06fdeb44-1351-4f7e-9904-690a9dcff44a",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1ec6c5b3-0336-4cea-a3c6-978e09355ca1"
        },
        "item": {
          "id": "1ba05ca3-cce6-4e5a-a0d4-026cc170fced",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4ff8f136-0de5-492f-9a48-607c4aa8a262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0049f5a7-cd53-4548-bee0-137133694922",
        "cursor": {
          "ref": "4b0a3a76-1cee-46e7-ac2a-7fa9bf6c92ea",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "eb3cb3fb-5a2e-47cb-ab4f-f480516229ee"
        },
        "item": {
          "id": "0049f5a7-cd53-4548-bee0-137133694922",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "367c8fbd-24ed-40b8-a258-cf10f6d28c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527a2f73-7d17-413c-9713-4d444817fc56",
        "cursor": {
          "ref": "cb21f4e5-b0a7-440b-9783-e652ac3ce54a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9460fe08-2d57-4b7e-8296-d7a52cb42ed0"
        },
        "item": {
          "id": "527a2f73-7d17-413c-9713-4d444817fc56",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3a1ced82-e429-4904-9c4e-69b9ecd6eca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50781f01-c8f9-4154-bf5c-4bba7d2399b5",
        "cursor": {
          "ref": "8b82d934-ebce-4de4-bec5-b1e386072d5e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "81bdcd9d-8d90-4b8a-b915-d72d25ef55bf"
        },
        "item": {
          "id": "50781f01-c8f9-4154-bf5c-4bba7d2399b5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "86b42a66-ca86-487e-a839-bcfe0b918b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c448e5c9-db22-418f-8bc4-c588a503fcd7",
        "cursor": {
          "ref": "c1ca1389-b52c-4556-b1e3-60b07c814499",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "79dc4988-3baf-45c1-abca-702dfe015767"
        },
        "item": {
          "id": "c448e5c9-db22-418f-8bc4-c588a503fcd7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3a67d17b-016b-4fac-8e93-77926aa6253e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13a92da-f539-40a4-842b-507961bafc7f",
        "cursor": {
          "ref": "8a99d60e-97f4-47d2-92a9-2e1ff061669c",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8fc254b0-a3e2-4077-b36a-2913f0a2c3ff"
        },
        "item": {
          "id": "f13a92da-f539-40a4-842b-507961bafc7f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4d44a6dc-93ac-4956-b18a-5db4c3fb71ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f36e54-c885-4e58-93a9-d9b117f68fec",
        "cursor": {
          "ref": "1985bcf5-0622-43a4-8723-37acae42520e",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1c7c33f5-cd1a-4739-a517-8301c6652494"
        },
        "item": {
          "id": "97f36e54-c885-4e58-93a9-d9b117f68fec",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "17aadf9c-19cc-457a-8def-b2b36550e95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccccf96-33cc-4e1f-b5e1-e510271a0ac6",
        "cursor": {
          "ref": "9a024e84-a845-4cce-bfaf-f05f8436f973",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4cb1bd18-f71b-4fe5-a878-a56c8922fb3a"
        },
        "item": {
          "id": "6ccccf96-33cc-4e1f-b5e1-e510271a0ac6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4b3a8281-86c2-498e-8e9e-96632d79ca58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a45fe1-e016-4828-9a4c-764c2c746c68",
        "cursor": {
          "ref": "33523712-c721-46d1-be95-c7864d66f4b6",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "100e7e85-8674-42d3-9818-f28c19aeeeb4"
        },
        "item": {
          "id": "c1a45fe1-e016-4828-9a4c-764c2c746c68",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "34a223fc-3289-484b-87e3-ee2f73f68baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b060f2e-b3ce-47c7-b54f-46da93a7799c",
        "cursor": {
          "ref": "a7133b16-32f1-4487-a01c-c3a7ebb58eda",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e5eac8df-b132-40c5-b4f8-91e1474dba44"
        },
        "item": {
          "id": "3b060f2e-b3ce-47c7-b54f-46da93a7799c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f72f1e25-636f-43b8-8444-c36bdbca11d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4cc28e-c512-46fb-a993-8d954a389291",
        "cursor": {
          "ref": "24c57c7a-a095-4f54-bf55-66f0185bbcb1",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0788f8fd-2dd4-46a9-be85-873ce77b8544"
        },
        "item": {
          "id": "1a4cc28e-c512-46fb-a993-8d954a389291",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "21e07c05-9f36-4eec-988d-4d1ead4088ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914d91d0-1a14-49b9-8e79-c08bac921ca1",
        "cursor": {
          "ref": "c5291e8a-85f2-4ca6-95f7-91e821208d99",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e1df8892-ded8-469b-a927-1d62055b74d7"
        },
        "item": {
          "id": "914d91d0-1a14-49b9-8e79-c08bac921ca1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fad1fc25-0474-43df-8062-e3be54a6f95c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c501fe0b-8882-4709-a60a-5bc89435da60",
        "cursor": {
          "ref": "17b8e320-4129-4ff5-9e68-6b1258de888e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "58fb4bbb-a516-49f5-a65a-b5e5457d9eec"
        },
        "item": {
          "id": "c501fe0b-8882-4709-a60a-5bc89435da60",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4e19bfbb-d941-4e65-9c82-28208087de74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77372442-a197-4faa-9013-3d87a2b25a03",
        "cursor": {
          "ref": "bf33fb99-5147-442d-a4ab-bc5894dd1c39",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "547ff004-8d82-4e85-85e8-a646b86e78cd"
        },
        "item": {
          "id": "77372442-a197-4faa-9013-3d87a2b25a03",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "eef3bead-0951-46da-a817-ef6880e90185",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d420263e-c906-4b45-ba78-3c212d87c168",
        "cursor": {
          "ref": "57237395-7d11-4824-8121-abcb08fea708",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9bf3ac55-d409-4b23-a945-04fbfea136b4"
        },
        "item": {
          "id": "d420263e-c906-4b45-ba78-3c212d87c168",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "56ba5761-d854-4791-b623-385bf960c5d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f2b8c9-f3e5-4ebe-b4d0-37a1d4b5c000",
        "cursor": {
          "ref": "85ea35e7-97bb-4a73-a7ff-35fec9e24902",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4744760b-2cc5-442c-a837-e973fdf09aaa"
        },
        "item": {
          "id": "79f2b8c9-f3e5-4ebe-b4d0-37a1d4b5c000",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "11527c6a-7ce5-4aed-868b-73335799b16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964d26bf-8f24-4e1f-addc-dec9e70488b1",
        "cursor": {
          "ref": "6105f3e2-4623-4150-8181-f6cd4b03b766",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a4ef02b6-71e7-4fbd-baf4-3f19d4130eeb"
        },
        "item": {
          "id": "964d26bf-8f24-4e1f-addc-dec9e70488b1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "76545450-5077-4ef3-bc80-7d5f5ccff841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905f6ff3-e096-4049-8b2d-a5e28e68b4fb",
        "cursor": {
          "ref": "d76a70d2-27d4-4799-94eb-de24c349d648",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c46adb4a-7baa-4f26-a2f2-4f98ce56325b"
        },
        "item": {
          "id": "905f6ff3-e096-4049-8b2d-a5e28e68b4fb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "60021510-41db-456a-9ada-e042639e56aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91973e9-9eeb-4888-92d3-206048b6a73f",
        "cursor": {
          "ref": "94f52073-5764-4030-bdf4-0c90d3eef59f",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "18b17543-2fc9-49fc-b3fa-f11001abb1b7"
        },
        "item": {
          "id": "e91973e9-9eeb-4888-92d3-206048b6a73f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ced14897-0929-4806-befb-4a0ff31080d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b0c6ae-5f3a-4f4a-9b9d-b1def4497f4a",
        "cursor": {
          "ref": "8c51109f-22c0-4908-9ef9-1b3fe3389e6b",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e6a118c6-4619-4827-873a-07c790130d8d"
        },
        "item": {
          "id": "69b0c6ae-5f3a-4f4a-9b9d-b1def4497f4a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5c48d6e7-32f1-4b5f-9b22-4fa84a716654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790f68d9-a2b3-4ad9-9597-a4c4e49954ea",
        "cursor": {
          "ref": "22874a3d-be5e-4b66-9df8-428fb9aa4cf8",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "855a23c3-1aaf-4a69-b75e-caf74693d404"
        },
        "item": {
          "id": "790f68d9-a2b3-4ad9-9597-a4c4e49954ea",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "01814c6a-47ab-4f4e-9d72-1254acade8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c230bb6-fdca-4999-8bae-f70417cdf7dc",
        "cursor": {
          "ref": "bf4a739e-2515-4184-9881-4f6d8ba1b531",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "de848496-ce25-4624-8aac-c3cf3b3f206e"
        },
        "item": {
          "id": "4c230bb6-fdca-4999-8bae-f70417cdf7dc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "393aebca-c2b1-42b3-9c99-e18f40cdf98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8818a527-ae28-423c-8bb0-5330f440a345",
        "cursor": {
          "ref": "a56fd28a-c2c6-4c11-aaa5-1a014680adc2",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0a1289aa-34f7-486a-a8bd-2f9fd172ac31"
        },
        "item": {
          "id": "8818a527-ae28-423c-8bb0-5330f440a345",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6a012223-bc11-4354-9c05-8fc56e02fb44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0378682-444b-46e5-9bf7-237bab6a575c",
        "cursor": {
          "ref": "158677d1-db9e-4827-9bb8-5d2a9a521648",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b6508561-ffe1-4b9e-978c-af5266ca3707"
        },
        "item": {
          "id": "c0378682-444b-46e5-9bf7-237bab6a575c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4daece49-6b91-4509-8e61-d5c7c020fe16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2852fbc8-b92d-496b-a2f8-54f3d95b0f0d",
        "cursor": {
          "ref": "f683e7fa-7513-4100-a006-6d43dc46a838",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "56b534ba-98ae-47c2-b276-1b1d8c9449f4"
        },
        "item": {
          "id": "2852fbc8-b92d-496b-a2f8-54f3d95b0f0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9a9ca88a-e3dc-4173-bba4-bcaa37e3627e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644b4ca4-3d0d-4bb0-8f72-4ef88d0abd66",
        "cursor": {
          "ref": "29c36e81-1939-419c-8241-d4824cf4f278",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1ceebad7-0daf-484f-b49e-e8297fbe5bcc"
        },
        "item": {
          "id": "644b4ca4-3d0d-4bb0-8f72-4ef88d0abd66",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0572f0f2-a057-4ae5-8adc-55d428b9a38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b7692b-24e5-429d-8127-67700146f748",
        "cursor": {
          "ref": "77dc3dab-abff-4061-9ee6-8b76589422f0",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bd8536c9-8a41-4880-bb78-b96d19e864a0"
        },
        "item": {
          "id": "c9b7692b-24e5-429d-8127-67700146f748",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ae6b1275-0361-435f-8a30-a4e5dbdc0a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed0ac7b-6b20-43d4-af8a-fb6a150e9f66",
        "cursor": {
          "ref": "f41295da-3cee-452d-a068-5265001be1c8",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f52577ce-db77-49db-8646-dfa83d9d1c9b"
        },
        "item": {
          "id": "fed0ac7b-6b20-43d4-af8a-fb6a150e9f66",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d4c17056-0d8a-4c37-af38-34715da96cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83bcfd8-9fca-4419-a34b-5bed1c2402a0",
        "cursor": {
          "ref": "842ef8e9-51d0-46d7-af80-07046fcf9ce6",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5dac9642-5a33-4fc1-8183-1d3e37c970f9"
        },
        "item": {
          "id": "d83bcfd8-9fca-4419-a34b-5bed1c2402a0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4d6c3dbe-f6ca-40a2-a978-90648bec9a4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "9ee32a8d-1328-465d-827c-8e767509ea21",
        "cursor": {
          "ref": "92c0358b-9551-4ea2-8dd2-41ecaf332be6",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ff19aec7-14de-4038-a095-5876071d3b1f"
        },
        "item": {
          "id": "9ee32a8d-1328-465d-827c-8e767509ea21",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "93ff91d9-4a45-48d7-8cf2-f9f257691421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8852a56-4f73-40b1-9dd1-96e3f88dc68a",
        "cursor": {
          "ref": "21732d45-8d62-4796-8aea-08480cb6a022",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "28be9c4e-41fa-4832-adcc-1d6f851e11c7"
        },
        "item": {
          "id": "d8852a56-4f73-40b1-9dd1-96e3f88dc68a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3cc2df12-3f3e-4e23-aeba-f45418c99f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e334bf-80d0-4cba-ba4b-ba9c3d47f808",
        "cursor": {
          "ref": "5c555ac3-ddc1-4e55-94c6-7d13dc980296",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "345f3f61-28ca-4b37-b0a9-80789e4eda04"
        },
        "item": {
          "id": "38e334bf-80d0-4cba-ba4b-ba9c3d47f808",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c9999e9f-00c6-4411-9904-66e239108208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648d4a9f-3ab6-4ea7-8844-43fd41722556",
        "cursor": {
          "ref": "1ed547c9-9bac-4e4d-bf45-96d8cd8dd2a4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "580e35ed-06cd-427c-a16f-6696ea53e5d2"
        },
        "item": {
          "id": "648d4a9f-3ab6-4ea7-8844-43fd41722556",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cc1bb4a4-9f70-4f00-9b93-1dc81879a296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2a286e-83b1-4d12-a6a7-c2a973191fe7",
        "cursor": {
          "ref": "bd370699-7925-489d-b7fa-e753e46dd173",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4a6bc8a1-92b9-4ac6-ad4e-b764a27340ab"
        },
        "item": {
          "id": "8b2a286e-83b1-4d12-a6a7-c2a973191fe7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7c2160e4-ab33-42b4-b57a-af4a44f65412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb8d914-150e-4c5f-bc97-6a23c2d78aaf",
        "cursor": {
          "ref": "8ab6fc42-ded0-4ec3-94b0-1e8d761b077a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "966599b5-0672-484c-8115-514c34b03b43"
        },
        "item": {
          "id": "ffb8d914-150e-4c5f-bc97-6a23c2d78aaf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "39ac8dc4-fc22-486b-80fd-a3cc46168574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5fcea7-bd50-4f8a-a86a-b4a9c27208d9",
        "cursor": {
          "ref": "f8d19595-516c-4df5-ab44-11c82323c84f",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "97e1cd4d-5935-4cd0-a1c4-621dfccebb70"
        },
        "item": {
          "id": "bb5fcea7-bd50-4f8a-a86a-b4a9c27208d9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f5bb36b7-27bb-47e1-8c50-b83afbccaa43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e35209-e549-4d2c-b3e9-2c85c1796dce",
        "cursor": {
          "ref": "2e6004fc-7a44-43b1-a853-3e4e30c06f12",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0ca2ed64-5a89-469e-92b8-4cee9e563102"
        },
        "item": {
          "id": "90e35209-e549-4d2c-b3e9-2c85c1796dce",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5d3a6068-43f0-44db-8417-cb42f4075b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac88878-3932-4dd1-a31d-11a0086d3ba9",
        "cursor": {
          "ref": "3b0d53e9-a281-4cb5-836f-bb917ef3b61e",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5f7ef08f-9075-4ca3-88b5-2cd161243b2f"
        },
        "item": {
          "id": "4ac88878-3932-4dd1-a31d-11a0086d3ba9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "484cb36d-f653-41a7-97ac-8f6329c7976b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97566a97-8744-4ff9-8014-d207fa4f4d84",
        "cursor": {
          "ref": "12920ec1-61f8-4a90-a2f9-64bf35367d27",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5da7a5d7-af51-4bdf-951b-21691aa4c402"
        },
        "item": {
          "id": "97566a97-8744-4ff9-8014-d207fa4f4d84",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ae2a4e40-fd9d-4c7e-a50e-4f0f0f158f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a211c656-5ce5-4486-907b-18afe2b561d0",
        "cursor": {
          "ref": "3142b093-8404-4f19-9717-5da6201d5d06",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c20bfa90-7008-44f0-a2d4-8fad593aab01"
        },
        "item": {
          "id": "a211c656-5ce5-4486-907b-18afe2b561d0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "de6e5833-42c7-410b-b52c-08013b1387f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f43d05e-f946-4b8e-97bc-966f1aebda88",
        "cursor": {
          "ref": "4c8b7829-733b-4300-a461-508e80c55231",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "663279ab-d5f0-48e4-ad41-6698705e5ab0"
        },
        "item": {
          "id": "1f43d05e-f946-4b8e-97bc-966f1aebda88",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f7ab358b-c247-4aa2-9c68-4237db2db37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ae8427-d0fb-432b-b7ee-9b820ac0e0d7",
        "cursor": {
          "ref": "684aa323-f030-4101-925c-f6845b22952f",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "887fbd06-b9bd-4d3e-86c8-c9e08a863732"
        },
        "item": {
          "id": "d3ae8427-d0fb-432b-b7ee-9b820ac0e0d7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bc550113-b316-4f89-8ecb-9954ee011bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4846583f-421a-4a5f-bce8-c1c64cd67a35",
        "cursor": {
          "ref": "25887349-16b8-4084-a401-5b5f9a577e5a",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "94989bb6-99e5-4242-9754-e6f5fc69fd72"
        },
        "item": {
          "id": "4846583f-421a-4a5f-bce8-c1c64cd67a35",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4a23987e-03c7-40d3-9e21-48aee4de6452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68583e95-d11f-454e-9417-ad33d806ddce",
        "cursor": {
          "ref": "5e2440dc-6de2-4a93-a810-1868aa36cbf3",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "34e502c7-bd2a-4a56-a088-8ef405a143a8"
        },
        "item": {
          "id": "68583e95-d11f-454e-9417-ad33d806ddce",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c7a28514-4f68-4132-94b1-1ac204f7de77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0fab7e-fb28-4e81-b973-35a6b7ec1d3c",
        "cursor": {
          "ref": "a6628bce-84ca-41c9-92da-e1f1d55bafb2",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6f32d1e6-fce1-42a0-a005-afe3aae0100b"
        },
        "item": {
          "id": "de0fab7e-fb28-4e81-b973-35a6b7ec1d3c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9681f9be-d2e4-4f13-bc96-92803d55aa1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267e9209-58fb-4b4e-a549-f37d4dbe90ae",
        "cursor": {
          "ref": "10aeb605-527d-4ddf-81ff-c8dc744ad559",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1dce4f98-50d5-4323-b248-aeae9d7bc063"
        },
        "item": {
          "id": "267e9209-58fb-4b4e-a549-f37d4dbe90ae",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1e0775bf-8d9f-4d7f-b6f9-220cc138012e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3093d223-59ee-4750-92b6-452bbf589d21",
        "cursor": {
          "ref": "15e561df-fafa-48f6-a631-808490c6e552",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "73a94d89-bfc4-4602-9fb3-baf8768db29d"
        },
        "item": {
          "id": "3093d223-59ee-4750-92b6-452bbf589d21",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7bde91dc-a3ce-429c-8b68-1df46b63ca56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1597b2-5b1f-446a-a9bf-742daa11ba7d",
        "cursor": {
          "ref": "b6c3b0db-8f93-4a25-a9f3-3dbb526811f1",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "097b6142-e173-47c0-8011-a405b79d24b6"
        },
        "item": {
          "id": "8d1597b2-5b1f-446a-a9bf-742daa11ba7d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "714f7e5c-e230-467c-a802-af9256562ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61da75e9-ee27-491f-bd02-ea71488df669",
        "cursor": {
          "ref": "50167dc1-e65b-4290-8314-22aa13663118",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bcede9bb-47b2-451a-9b31-560eefe742d6"
        },
        "item": {
          "id": "61da75e9-ee27-491f-bd02-ea71488df669",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "df6f5f65-ea0c-416d-a186-9d5210ba3220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeca805-cf6d-43a7-9e52-45dd9d26f821",
        "cursor": {
          "ref": "a63f38c8-3362-46fc-95bd-4c24967aaa93",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "05f33de4-059e-4eb7-b927-01ea5995fff6"
        },
        "item": {
          "id": "aeeca805-cf6d-43a7-9e52-45dd9d26f821",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "868aa554-25ff-4791-ada2-929c3ca7b262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2999dc70-a706-4b53-8f5d-a34b576bf431",
        "cursor": {
          "ref": "325645c7-87ec-48d1-9579-fc8302dac99c",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "77839500-61b0-4bf6-adb3-9472ab49145a"
        },
        "item": {
          "id": "2999dc70-a706-4b53-8f5d-a34b576bf431",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0b76fbf1-6851-472b-a199-f0bc395563aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef28f558-1868-4156-829f-33e48c8fdca6",
        "cursor": {
          "ref": "1c9f821a-e3c9-46af-b003-bf103d93c6f8",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "66f4894e-81e2-43eb-8871-5e6ce8e0a8bc"
        },
        "item": {
          "id": "ef28f558-1868-4156-829f-33e48c8fdca6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9336ef72-fee3-4035-9a10-6c8cce75ff9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae042df8-66c6-42d3-9a8e-bc396f3e0f0e",
        "cursor": {
          "ref": "1766e0a2-3f37-4307-a933-57bf6ce92e6f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "15210c53-3f21-4e46-a7b4-df2a576a350a"
        },
        "item": {
          "id": "ae042df8-66c6-42d3-9a8e-bc396f3e0f0e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d387951d-c51d-4c9f-8b13-0af9bfd36e3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31b8246-5787-4012-9947-5c744561f14a",
        "cursor": {
          "ref": "e19353fc-3ce1-415e-af11-97776612910e",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "48a1a27e-f573-469a-82e6-c7d785300dd0"
        },
        "item": {
          "id": "d31b8246-5787-4012-9947-5c744561f14a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "86236144-971d-4e0c-9ee8-a60cd701acf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd47b5c7-5fa9-441d-97fd-94cd45486d19",
        "cursor": {
          "ref": "d6eb301f-72ab-43a6-a60a-7e13658c0071",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4bd6603f-d846-4795-8b79-6442f4b24cc8"
        },
        "item": {
          "id": "dd47b5c7-5fa9-441d-97fd-94cd45486d19",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cc12819a-f23b-44cb-9a64-a2a5e824dcf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784e4a40-e388-4a78-b88d-e85767f79614",
        "cursor": {
          "ref": "fbff9bae-d0b0-4d51-80c6-4efee9e738a2",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "de140954-b9c3-4ca4-b6ac-f50db9d94921"
        },
        "item": {
          "id": "784e4a40-e388-4a78-b88d-e85767f79614",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "706afa45-d398-47a5-a130-c7ba172b18d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bd6b35-4093-49dc-90b0-6c6b3e0a4621",
        "cursor": {
          "ref": "2ef5024b-47bb-41f7-84e6-adac067b53d5",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "09cee9a7-b73a-4554-b715-b50414afee01"
        },
        "item": {
          "id": "c9bd6b35-4093-49dc-90b0-6c6b3e0a4621",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "68ac1d36-bb67-46fe-b644-da3f7ad76dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9326c1f3-5d85-40eb-8e1f-cfe806e68e43",
        "cursor": {
          "ref": "37e6a23c-77c0-456c-83ea-19bf7b9c585c",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f4ab7e7c-cd6f-48fc-b26b-237650d2b31a"
        },
        "item": {
          "id": "9326c1f3-5d85-40eb-8e1f-cfe806e68e43",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f337e171-0ea1-4907-ad1c-a7febd35dd63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2833a68-bd9b-4fd1-99ed-83e9351e746a",
        "cursor": {
          "ref": "3ee82bbb-3ff5-4d23-8987-6af69f95772e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1b71415e-2f8f-455b-aafa-4359a47b5b79"
        },
        "item": {
          "id": "d2833a68-bd9b-4fd1-99ed-83e9351e746a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9f095836-e23c-4cda-a948-5deada06882d",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "551cfc25-6ee6-4e7d-a060-634bf5380786",
        "cursor": {
          "ref": "f576c56c-27c5-4b64-867d-f1cec71bf000",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5b458e34-dded-48fb-938d-a9c7361fcbac"
        },
        "item": {
          "id": "551cfc25-6ee6-4e7d-a060-634bf5380786",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6a62dc7d-5e64-4e40-b7c0-9ce0f43ede6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ecb808-7470-409f-81c2-da104f7c21f3",
        "cursor": {
          "ref": "92f3dc7a-f3d2-4d6f-86d2-b51394abee1d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "07b8f2ee-06a2-42a1-8402-c3e798c40c24"
        },
        "item": {
          "id": "16ecb808-7470-409f-81c2-da104f7c21f3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1a29ea3a-9ddb-42c2-b976-647fc40fc123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0909288-ba8a-406b-a6d1-a5c860b80a70",
        "cursor": {
          "ref": "d6f830f3-c331-4b25-a6ea-59c36e93ef33",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a39a2253-b6bd-4bea-a6f7-d656002c95a8"
        },
        "item": {
          "id": "c0909288-ba8a-406b-a6d1-a5c860b80a70",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "21a39c65-3e52-47e7-95df-48abed9d1b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f02999-4430-4233-a7fd-e1b47f6cab75",
        "cursor": {
          "ref": "2f86c897-a595-494d-ac77-2f063bc48e6c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "47ab66a9-fc3f-4a52-a8a2-c57d2e586bb6"
        },
        "item": {
          "id": "e1f02999-4430-4233-a7fd-e1b47f6cab75",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0a7be5e1-4152-4f2a-9a67-454418c77bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f1ff4b-d65f-4c4f-8d81-2199aa13a15f",
        "cursor": {
          "ref": "0bb58215-0a60-4aff-b9e8-9375475192a5",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4075fea1-e754-40d2-a8f7-84e4e656e2fd"
        },
        "item": {
          "id": "53f1ff4b-d65f-4c4f-8d81-2199aa13a15f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6eca61fa-7438-42fe-aa8b-8928d11f5404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5652c631-3fd0-4262-9b44-7ea95712b7cc",
        "cursor": {
          "ref": "fe3afec4-bd26-4f89-8183-5d4a47185cbb",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a6ff7598-1bf8-4ec5-b237-f8949e6cd647"
        },
        "item": {
          "id": "5652c631-3fd0-4262-9b44-7ea95712b7cc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ec8f13e0-b3da-4604-9743-7e0112c861a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d30673c-e448-4c1e-a9d4-da75d8c6898d",
        "cursor": {
          "ref": "544b83cf-1036-4417-81fe-e31be31f5d29",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dc690180-0d2a-4de8-93ea-49f2ed08ab50"
        },
        "item": {
          "id": "3d30673c-e448-4c1e-a9d4-da75d8c6898d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6837a05c-8df3-4cba-8022-63a8c9b5bf4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ac9c27-c527-43c2-8b69-a7f1d5171462",
        "cursor": {
          "ref": "e33dadc7-d06a-4d92-b18e-4ce0979f8d37",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fe200caa-22ae-42f1-8504-5dfd3522e462"
        },
        "item": {
          "id": "b8ac9c27-c527-43c2-8b69-a7f1d5171462",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a7442b81-a7e5-4262-9d8b-26f1843b8edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54eb150b-e907-443e-b5c9-0cb5ed019b93",
        "cursor": {
          "ref": "d8485031-3b73-417c-bd90-46cdc977c2ed",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2202e341-7fc3-45ba-b154-4ca293b6e653"
        },
        "item": {
          "id": "54eb150b-e907-443e-b5c9-0cb5ed019b93",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d266a45b-50cb-408d-a0e5-31f61fb3aabe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a98aa34-e164-4b41-8d60-d96344774037",
        "cursor": {
          "ref": "1c524d1e-7230-4562-a659-e8f94862bf82",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5afa4c53-3519-4b4c-a0fa-ed81f21f42ff"
        },
        "item": {
          "id": "5a98aa34-e164-4b41-8d60-d96344774037",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1d6da4d2-ec01-40fd-b78f-a58627e75d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5eafbc-41de-4d82-bb96-576c908eddcf",
        "cursor": {
          "ref": "74805d30-b460-46c5-afae-ffd810873658",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4203cdac-d717-46cf-956a-7df408112d9c"
        },
        "item": {
          "id": "7c5eafbc-41de-4d82-bb96-576c908eddcf",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f7757fa8-6508-432f-ae2b-0e9dbd20a318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94ea009-01da-4175-9c70-46b8956d79ce",
        "cursor": {
          "ref": "3b450978-3b2e-4eb1-992e-93b846f8b799",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "64e18d9e-c067-4cf9-bb0b-e9a024610c30"
        },
        "item": {
          "id": "e94ea009-01da-4175-9c70-46b8956d79ce",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3845a759-abae-4437-a5fe-b706bb857946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2e388d-9f94-41dd-bcc4-250c6433df47",
        "cursor": {
          "ref": "6356e001-6271-4fc0-bf49-870cfb86b03a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8ad99a26-723d-47bc-940c-417ba726f118"
        },
        "item": {
          "id": "7d2e388d-9f94-41dd-bcc4-250c6433df47",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8be171a7-add3-462f-adbd-406d66af9dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fc2d15-8ad5-43b5-a8d3-e2b5b0059096",
        "cursor": {
          "ref": "d98e2eb3-3df4-42d1-95ef-fdff38afac59",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ce3d9f73-57d3-415e-af9c-b1cc7158f8fa"
        },
        "item": {
          "id": "c8fc2d15-8ad5-43b5-a8d3-e2b5b0059096",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9efcf4d4-2bab-4f69-9a8d-3c01f0f8b21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f014b3-28e5-4a41-8f8e-040003659f04",
        "cursor": {
          "ref": "f565fcfb-068f-437c-8832-a170ee8e2434",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d53f6f3e-418b-4b8f-8ca0-33f24b276c41"
        },
        "item": {
          "id": "99f014b3-28e5-4a41-8f8e-040003659f04",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "14b33e4d-c510-4859-bde6-9d0fee4a1134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b32c78b-3b88-4bd8-8fd2-74e32b8595c2",
        "cursor": {
          "ref": "fbeb8cb4-fe6b-4436-9c40-0c59a58fd28d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4bcc506c-597e-4231-8e29-199005f6e515"
        },
        "item": {
          "id": "5b32c78b-3b88-4bd8-8fd2-74e32b8595c2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0c8cb3d1-2c46-40be-9bc5-29b9410b9e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99d6c58-eba0-41cb-84f4-0962c8626d8c",
        "cursor": {
          "ref": "7dc5cf5a-bfd0-4485-b4dc-99ca827d745d",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b48ec820-766b-4d39-845f-22faf4bccfa5"
        },
        "item": {
          "id": "a99d6c58-eba0-41cb-84f4-0962c8626d8c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4ab62917-5143-44d1-ae9b-6482ba534438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0b04ef-0678-4f2c-90ea-b205c5c99c65",
        "cursor": {
          "ref": "c9ac7637-c504-41f6-853f-5ef75f649513",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7a298031-adf4-4b39-bcf7-65e8afbd68da"
        },
        "item": {
          "id": "5c0b04ef-0678-4f2c-90ea-b205c5c99c65",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0db7d4e3-c4e2-40a1-9262-f3887bd8ecd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d23831a-6f81-4b0d-8035-679f0cb8cdfa",
        "cursor": {
          "ref": "4a257824-2b26-41f4-b9bf-5fe31e09a4c2",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c1a4ff27-ba45-462d-bbd8-7943f3d71262"
        },
        "item": {
          "id": "6d23831a-6f81-4b0d-8035-679f0cb8cdfa",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d7783114-2b6d-4b71-82e7-f91a666b9d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63923eb-626d-45b6-9c96-5edf1eebfd1a",
        "cursor": {
          "ref": "1ce64034-a499-45da-a088-59f06167711c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6d4e33a3-013e-4d9c-9e15-2c4af3f4ae88"
        },
        "item": {
          "id": "f63923eb-626d-45b6-9c96-5edf1eebfd1a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "35443e87-0c71-487c-81a1-3a3d914710e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88849640-55c9-4b75-b5a2-03771de8e42d",
        "cursor": {
          "ref": "d3d04653-ccf7-4e46-8a1b-72798ebb99ed",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "106ef210-f091-4263-ade3-10ec4b1bf6b1"
        },
        "item": {
          "id": "88849640-55c9-4b75-b5a2-03771de8e42d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "54d05911-3ce4-46de-9cf9-90c4957c23a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfd6e48-4dd5-4a58-a4a3-af06b6bd2886",
        "cursor": {
          "ref": "159d2560-b84f-4de6-91aa-9099431cb288",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f0ccc0c0-38b6-4d8a-9435-378e952bd52f"
        },
        "item": {
          "id": "9cfd6e48-4dd5-4a58-a4a3-af06b6bd2886",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1a0f7039-a9f7-410c-a151-9f6406c7cf8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b1ccb9-5060-4eb6-b772-03dd6da4ba3c",
        "cursor": {
          "ref": "19a48be7-8191-4cb4-9ac7-1b0cf571e8f2",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1f245c6e-1dd8-4b3f-88d5-bdf9362fdea9"
        },
        "item": {
          "id": "d0b1ccb9-5060-4eb6-b772-03dd6da4ba3c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4853354c-5a3a-42e8-80b9-08dbc8479491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348a32a6-8600-4758-8824-b0f09478a772",
        "cursor": {
          "ref": "43781c9a-02d9-4933-a950-96e0d557beab",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "204f6c10-c3cb-466f-b709-4e3a254a97d2"
        },
        "item": {
          "id": "348a32a6-8600-4758-8824-b0f09478a772",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0d0149ec-112d-4ee2-b17f-dba053ed8455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c2ac6d-9d5e-404f-8f3a-96785517dad7",
        "cursor": {
          "ref": "3311d472-5c8c-4fea-b0e5-36ae02b6c1f2",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cf9bf201-5b02-48b6-809a-7f236d74d958"
        },
        "item": {
          "id": "e9c2ac6d-9d5e-404f-8f3a-96785517dad7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ae93b998-3b60-4cfc-8788-5b350bd95a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da859f8-5bf2-4eab-a3da-d0c5a0c90400",
        "cursor": {
          "ref": "cb559ede-d8c0-43c1-a67d-aafdd65df9ed",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1a3d135f-a850-4314-9331-5ccce1384b3e"
        },
        "item": {
          "id": "6da859f8-5bf2-4eab-a3da-d0c5a0c90400",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9af7bca4-da0b-4ef3-bdc9-1bda9e5b7bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a909823e-0d93-4895-852b-d796cbde0d89",
        "cursor": {
          "ref": "b8f7396a-2dcf-4e47-80c9-0b2e8bd86187",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "712b9fa3-8e5d-4566-a9ef-5d5c39f2b52a"
        },
        "item": {
          "id": "a909823e-0d93-4895-852b-d796cbde0d89",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a6d2d80a-dbad-4e96-ba2c-24c9bb179e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a644b32-6cf0-416f-b601-f82d9b095249",
        "cursor": {
          "ref": "f7fdba91-bdc0-4cc9-89b4-d9a87011d105",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2de5b129-2226-4b4c-bbfd-2c81977e9538"
        },
        "item": {
          "id": "7a644b32-6cf0-416f-b601-f82d9b095249",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3b2db5ee-508f-472c-a360-8f63c142850a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d2decb-f139-4ecd-810c-cb3ad51c9a03",
        "cursor": {
          "ref": "4ffe263d-8c20-4ad6-9770-3ff2a7b76ad4",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "01cd8cdd-8342-4daa-a9d9-8e2d4b8591ef"
        },
        "item": {
          "id": "56d2decb-f139-4ecd-810c-cb3ad51c9a03",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fdbfcdc8-9891-4da9-8d4b-fd0e99fdc3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec2d011-8423-4636-bc40-8bd78e28dbbc",
        "cursor": {
          "ref": "a83bd7a2-25ec-4531-901d-b986f84fd2ae",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "eac40b5d-72d1-4cb9-a18e-9c7eafc6f3b3"
        },
        "item": {
          "id": "dec2d011-8423-4636-bc40-8bd78e28dbbc",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8f29f6b6-a28c-487b-bfc8-6150d91c3e1a",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "129e6ab9-481c-4a04-a01c-46baddbe9615",
        "cursor": {
          "ref": "574d3e5f-e865-40c6-8100-974257fea82f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1557e723-db71-4091-9ef5-744868ad6570"
        },
        "item": {
          "id": "129e6ab9-481c-4a04-a01c-46baddbe9615",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f1ec58d4-4d26-4b7a-b639-489e04a5781b",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "b064b6a1-9566-4753-b00e-e482bc73ebeb",
        "cursor": {
          "ref": "585a46cd-67a5-4d94-89a0-9fb0098ef8c4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "53bba54a-fced-47f4-a79f-4a26298ba82b"
        },
        "item": {
          "id": "b064b6a1-9566-4753-b00e-e482bc73ebeb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "294fed0a-4492-4f7d-947f-32f791092403",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ffb956e6-7a58-42a2-a5ca-cc2f35054af3",
        "cursor": {
          "ref": "020ae599-452d-481b-a741-53f14f3f29d2",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "db5a935c-4ead-40cc-8b4e-ebf55f0de374"
        },
        "item": {
          "id": "ffb956e6-7a58-42a2-a5ca-cc2f35054af3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "91b16293-b122-4943-b4ae-5136ede577e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd09ac87-0e64-4af9-be44-ef6d4934bdcc",
        "cursor": {
          "ref": "f2ab7226-1949-421c-9fe1-a6ae8bd8f0de",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "45f781e9-c209-4ed2-a1ff-646be02c3443"
        },
        "item": {
          "id": "cd09ac87-0e64-4af9-be44-ef6d4934bdcc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "23473c00-effc-469c-860a-341e4ca4d381",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "52834ea1-2fa9-40df-ad01-aaca4aea8a34",
        "cursor": {
          "ref": "af1da491-bd03-432e-9dee-b3b1d41394f1",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "11ce89d8-d0ff-498d-8724-cc5df2fad3fd"
        },
        "item": {
          "id": "52834ea1-2fa9-40df-ad01-aaca4aea8a34",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8e4840ab-b325-4f86-a249-2115a45ec331",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "73516683-bf7f-4521-97cb-6dfdba73dfae",
        "cursor": {
          "ref": "68120def-f0f9-4b25-995d-8fef7ec0af41",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cb9c63f2-095e-43b2-99f8-2b0a7c40b056"
        },
        "item": {
          "id": "73516683-bf7f-4521-97cb-6dfdba73dfae",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "eb259609-d454-4821-91a2-dc2703f2f3c7",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7895a476-ab34-4de9-a391-ce0d5442b933",
        "cursor": {
          "ref": "36174c3a-726c-4de2-ab8a-fc92d3463d9f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c181bdb8-d415-4e1e-80f7-54060d49bd99"
        },
        "item": {
          "id": "7895a476-ab34-4de9-a391-ce0d5442b933",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ff397bbd-ed8a-40fc-ad9a-ad2156b4ed07",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ec917ece-0a4e-42a8-b855-c02cc14f4b55",
        "cursor": {
          "ref": "2409f480-f63a-4e35-8cf4-db4d58bac428",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "731401cf-d6cd-4b28-a270-b0ce0853c883"
        },
        "item": {
          "id": "ec917ece-0a4e-42a8-b855-c02cc14f4b55",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bdb7fb0a-1b49-4408-b585-fb6084802917",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "37af6b4d-6ca1-4fd4-b06d-b2311c9f0f0d",
        "cursor": {
          "ref": "d8caeb14-3835-42c0-87e1-f8cfa1b0f1e0",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "987de9c6-5e48-41fb-be24-83ef4065c04f"
        },
        "item": {
          "id": "37af6b4d-6ca1-4fd4-b06d-b2311c9f0f0d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "daa76efd-58e6-41e1-b170-c7fec70ea4eb",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1ef33476-5970-40d3-bed7-acacd67afecf",
        "cursor": {
          "ref": "629e6677-9a60-459b-960e-2387ddfce9e5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6f9ede99-e9db-4b52-ae1a-1963a608076b"
        },
        "item": {
          "id": "1ef33476-5970-40d3-bed7-acacd67afecf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0a44db0d-e346-42d6-b52b-e7a90b19cb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6cde46-1427-496e-9bea-c7af519f55ef",
        "cursor": {
          "ref": "e9e00c7f-b410-43e8-84ba-7e0889bed53f",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "97674dac-7e9a-4f07-a05b-7069ff9ffae1"
        },
        "item": {
          "id": "5a6cde46-1427-496e-9bea-c7af519f55ef",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "86eca23d-40fd-45cc-9775-d78b4988f52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34cda895-95da-423b-9314-cb8c6720e024",
        "cursor": {
          "ref": "166b9452-5aae-4489-8096-2e98d05f4c97",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cdc55418-bdc5-459a-a3bd-77459915a162"
        },
        "item": {
          "id": "34cda895-95da-423b-9314-cb8c6720e024",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e661f552-be4f-4572-8bd4-1700280f5ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1518c6f2-2a67-4d48-a6af-cf2274acb8ac",
        "cursor": {
          "ref": "755a008b-f73a-4908-9f59-b537c37d2b22",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "67895fb8-b0b6-403e-9bbf-1493eb82cf5f"
        },
        "item": {
          "id": "1518c6f2-2a67-4d48-a6af-cf2274acb8ac",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cbec98ce-8c00-47da-8ded-7318334e53a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c0d7dd-6782-4c1b-98e2-fdf5c76e59b6",
        "cursor": {
          "ref": "757e1eb4-0509-436f-8408-7902fb1f445f",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ba5faf95-c57b-4b21-ba8c-ca447b397e9e"
        },
        "item": {
          "id": "b2c0d7dd-6782-4c1b-98e2-fdf5c76e59b6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "be7019d8-df8d-4bc8-9067-e984aedd2e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9759897b-d365-4321-bcb4-8eb9d2ecfb72",
        "cursor": {
          "ref": "7c80dce0-ae6e-4a96-83e8-58a4657c4fd0",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4ab89943-5883-4854-98a8-88a3054c147d"
        },
        "item": {
          "id": "9759897b-d365-4321-bcb4-8eb9d2ecfb72",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4005e0d1-2682-4609-8714-d52f5e557d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6275163b-222c-4ba8-a28a-49fc73af4f50",
        "cursor": {
          "ref": "484573bb-80ec-4e77-bcf7-e4b73520bb40",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c6a00030-b082-4596-ac79-00fcfae6e40d"
        },
        "item": {
          "id": "6275163b-222c-4ba8-a28a-49fc73af4f50",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "51aa83d4-8d78-487d-82d8-e361d453b879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78446e9f-b9b5-4c16-98bd-b2ce7786eedb",
        "cursor": {
          "ref": "eb95a8e2-315f-4246-9633-413813c0cd67",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "edaec66a-fe69-4b7c-9323-e4c65f9d142d"
        },
        "item": {
          "id": "78446e9f-b9b5-4c16-98bd-b2ce7786eedb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "bd540c86-6e60-4fc0-9f2f-ad1235504edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5724b0-bb8d-46e9-97b9-af0dfc15f032",
        "cursor": {
          "ref": "e24fd513-f8de-4fd8-bbd2-0d52d587d604",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9228f3ba-e7e9-4bb6-8e8d-08423950c6ec"
        },
        "item": {
          "id": "1d5724b0-bb8d-46e9-97b9-af0dfc15f032",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ed9f0238-c0d9-4d7f-b6d8-cdf91703243f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c55a39-95f6-43af-b858-2fc1f4f99240",
        "cursor": {
          "ref": "8688b64e-f1b9-440b-9df1-d439c9233861",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2e09b611-747f-4aad-b0ab-f98f0049bde4"
        },
        "item": {
          "id": "54c55a39-95f6-43af-b858-2fc1f4f99240",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "611165c2-6cf8-48d1-a870-099d97b59ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519c48ad-b368-43c7-9ac0-d5ad79b06898",
        "cursor": {
          "ref": "6cbe3021-400b-449c-a6b0-5902846fc47a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8168afeb-65f4-4670-9c9e-288041fd3f36"
        },
        "item": {
          "id": "519c48ad-b368-43c7-9ac0-d5ad79b06898",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "30d7aff7-129c-4b8c-a813-9b54a165553a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c316601-d0a0-4045-9a81-24ad2f953969",
        "cursor": {
          "ref": "7c8262ad-f2b5-4338-ab1b-b4df4f899939",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c443b5ec-9228-41c9-934c-01c74fc7553b"
        },
        "item": {
          "id": "8c316601-d0a0-4045-9a81-24ad2f953969",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e13d0a30-9aa9-4857-9809-3dde2ac06a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11095f23-45df-4713-afbd-61286c535fd7",
        "cursor": {
          "ref": "bdce9900-61d1-47fc-a5ab-46002f4d5551",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c36f91a0-c9a0-4888-9ee3-8afe393c7ff8"
        },
        "item": {
          "id": "11095f23-45df-4713-afbd-61286c535fd7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a8bc3571-51ea-4f10-a3c7-2a0ba5446d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8367c1d-50a9-4bc5-be0d-b8f6b599d1d9",
        "cursor": {
          "ref": "70e19dd0-a204-46a7-bf17-d0eb6e139126",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "533d8692-5159-4421-98d8-2100c423b396"
        },
        "item": {
          "id": "e8367c1d-50a9-4bc5-be0d-b8f6b599d1d9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "057e46f2-f64b-493c-bb3a-f9b96321445a",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "bbef2bfa-a01c-48fe-ae9f-fb2d5e1be01e",
        "cursor": {
          "ref": "fd6e5e1f-c60f-4857-b0ca-4b1d79a3b723",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0d3a6dac-c019-467f-adae-616d7b9f883c"
        },
        "item": {
          "id": "bbef2bfa-a01c-48fe-ae9f-fb2d5e1be01e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d632fb2d-3ea6-477c-9556-f8fe26fe5844",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "bef75bba-5397-413a-9db1-db64484ce26b",
        "cursor": {
          "ref": "0600dbbc-ee93-42b8-a65d-92966c857bd9",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f6410bcb-122b-4909-8c5b-2edf66271d52"
        },
        "item": {
          "id": "bef75bba-5397-413a-9db1-db64484ce26b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f683efa2-1d5e-4f97-ad3c-e7062d4287af",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "91157d02-3d24-4530-a0da-6f2155132907",
        "cursor": {
          "ref": "df790733-88e7-4edd-863e-d7d47f2ad3a8",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e2f111e6-726b-4d87-9349-9172864468c2"
        },
        "item": {
          "id": "91157d02-3d24-4530-a0da-6f2155132907",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "146adb2d-b037-4a4d-9f41-aeb24669eb63",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "46888c03-bbb9-4916-a9ca-8149f2198205",
        "cursor": {
          "ref": "2a51e1ed-4678-4025-962a-fb77b22db528",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a01f5068-bb60-4bd9-b9ad-97592b8d019c"
        },
        "item": {
          "id": "46888c03-bbb9-4916-a9ca-8149f2198205",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9fb7e41f-d707-44df-a097-1d65e8351b08",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5f281081-529e-4b56-895b-c7740c379307",
        "cursor": {
          "ref": "fa069db6-289c-4edd-85c9-a006a66e81f8",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "84715eb1-a21e-4af6-b396-f52cf9053b7e"
        },
        "item": {
          "id": "5f281081-529e-4b56-895b-c7740c379307",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2da42819-840c-47b4-913c-f2a2efca21d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f2d013-617f-41ef-a53e-e8bc941c751c",
        "cursor": {
          "ref": "a2641bba-caad-48c5-a612-4b8ddc3f343a",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f947e3b9-d12d-4178-87cd-b8c9226763ca"
        },
        "item": {
          "id": "61f2d013-617f-41ef-a53e-e8bc941c751c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5baf23cd-89a8-46b9-b068-beadd2a0172e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759fcdd0-0058-454a-b3c2-ead78b18d183",
        "cursor": {
          "ref": "18a766be-6bdc-4235-a168-175cd06abbeb",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cb218b6f-a281-4638-bea0-65196cf6ad8d"
        },
        "item": {
          "id": "759fcdd0-0058-454a-b3c2-ead78b18d183",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5df2d435-ca2c-428c-abbe-3a14d9f1de68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5363900d-0f77-4b5d-9e46-8b5644de302b",
        "cursor": {
          "ref": "a1a993e1-6106-4cf3-994f-d45afbc462e3",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d9df36f1-c5df-4bba-9b2a-f4696054d274"
        },
        "item": {
          "id": "5363900d-0f77-4b5d-9e46-8b5644de302b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5b7932ea-292a-4cb3-96ce-ca8e1fd9dbb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda75b1c-28f9-4d59-b3a2-e4b1d9569d6e",
        "cursor": {
          "ref": "1d05c0ea-2afb-41af-9afd-2b11fd9396e3",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d33dfa19-211a-4718-ab51-802a311de626"
        },
        "item": {
          "id": "fda75b1c-28f9-4d59-b3a2-e4b1d9569d6e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "18c0ee78-2d5c-46d9-a82f-7ddfa9fe7d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7854a10-d6c9-4672-abae-f90afe585bba",
        "cursor": {
          "ref": "c134a609-ca32-408c-a570-cfa025c485dc",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c39d9508-9b2a-4dda-aeb4-49e18e96a1a3"
        },
        "item": {
          "id": "f7854a10-d6c9-4672-abae-f90afe585bba",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d9eddc56-d1dc-4f2c-8f7b-18d656fb5acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cf5f02-66f3-4bbe-919b-afe2c4e78fe0",
        "cursor": {
          "ref": "23859e41-e028-45ca-84b1-175376886bc3",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5d125098-428e-47b0-9ac1-da6a6a8e67c1"
        },
        "item": {
          "id": "f3cf5f02-66f3-4bbe-919b-afe2c4e78fe0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e6ba5906-0b18-4012-bc88-6d77c4470494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479b3a4b-7cc6-455e-acd8-6b8c63e0f887",
        "cursor": {
          "ref": "5c057f06-032b-48bf-8e8e-e162e108e23e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "02c6319e-2f99-4689-a858-92bfd051a08f"
        },
        "item": {
          "id": "479b3a4b-7cc6-455e-acd8-6b8c63e0f887",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7316c435-598c-4085-9326-78a3ebf67bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4470448-b988-484f-bf4d-5a9efcf8e002",
        "cursor": {
          "ref": "0cf9fa83-7ed6-4b43-abc3-b530c6a8693d",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "153cfece-0bd6-4828-90c4-cdb4b2fb74b7"
        },
        "item": {
          "id": "e4470448-b988-484f-bf4d-5a9efcf8e002",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5dc8cee8-bd93-41a1-bc0d-43864cc53cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e82eef-9656-426b-b65c-84e2a68696f6",
        "cursor": {
          "ref": "c7957443-e4cb-4fd1-8346-a267ad5cf3cf",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "668066bd-afcd-43af-a060-1693e446b5f2"
        },
        "item": {
          "id": "70e82eef-9656-426b-b65c-84e2a68696f6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "08b9e119-d8b2-4814-a997-07b6df039d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0d53d1-309f-49e9-a647-f88225821861",
        "cursor": {
          "ref": "8a98cc48-0d82-4e52-908b-daa1422807f2",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3659cbd6-8068-4a23-a22b-f24a3d2582a8"
        },
        "item": {
          "id": "fd0d53d1-309f-49e9-a647-f88225821861",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ddb3ccef-c3e2-4ff8-934d-7d50ecde020e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a493b8cb-0c1c-4332-a812-ef4de614be04",
        "cursor": {
          "ref": "1a6c0303-6343-4850-8cb7-d3617b8c15f2",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5cffee34-1393-4b3e-8271-81d459171867"
        },
        "item": {
          "id": "a493b8cb-0c1c-4332-a812-ef4de614be04",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d6ba3ed3-4eb8-483c-ad57-c23ff6311f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c89453c-f2e5-4d72-acae-55a07589edba",
        "cursor": {
          "ref": "6a7a7c86-291e-4cf2-be1e-7b740aaed96d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "e8c91917-c4a2-4bed-8f05-16bb6853d763"
        },
        "item": {
          "id": "6c89453c-f2e5-4d72-acae-55a07589edba",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4bbc4356-a387-422d-b2b5-d5e9ba1213a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c2f543-70d9-4984-bd99-587383880924",
        "cursor": {
          "ref": "f619db8a-b2d2-456e-a8ed-91e16a3a0a80",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "47781f34-0b68-4b81-9428-cf03b2d41aae"
        },
        "item": {
          "id": "b6c2f543-70d9-4984-bd99-587383880924",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "adfc7075-bca9-42b4-bad3-8ca3c26d2d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df809a6-86ec-4de7-8d7e-131ba2c3ebce",
        "cursor": {
          "ref": "28517332-3bfa-4864-9468-df67b9182415",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "75ec1128-3080-4805-824a-139c30854f0c"
        },
        "item": {
          "id": "1df809a6-86ec-4de7-8d7e-131ba2c3ebce",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8740a372-8d03-48d1-994a-f9c3936d4cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7503f32-ffb8-4bb1-a8bb-e3ac5d1b2a88",
        "cursor": {
          "ref": "2ee2570a-0086-4167-9c47-8fc5e66715c7",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "92cc89f9-d0a0-4a0f-b293-5f3b69cbac12"
        },
        "item": {
          "id": "f7503f32-ffb8-4bb1-a8bb-e3ac5d1b2a88",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5a550366-4038-4224-af4b-032086ffb30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cc830a-ab43-4a5b-862f-d8da5825b46a",
        "cursor": {
          "ref": "27b9b4e7-38ee-445f-aacd-f10ad0af0dca",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "24aa44e5-c7a4-4638-b914-1c64a383778b"
        },
        "item": {
          "id": "99cc830a-ab43-4a5b-862f-d8da5825b46a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8f4515e1-7203-4dfb-b7f6-9cd28b499701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d421ffe2-1630-4ce2-90d7-3ab86000d93c",
        "cursor": {
          "ref": "09f9d329-b147-4bf8-a7bb-d96d815ab144",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "68518dbe-1be8-4b59-b92c-4fb4265550e2"
        },
        "item": {
          "id": "d421ffe2-1630-4ce2-90d7-3ab86000d93c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e0fecad1-2b7f-4a06-9417-8c39953ee48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3c45e1-a469-4121-8473-35a8b6f9dbc2",
        "cursor": {
          "ref": "4d7ed4f0-680f-40a2-9b33-ebabb477e4d2",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "4402f01f-1341-4cb2-8103-6f89cf626d98"
        },
        "item": {
          "id": "3b3c45e1-a469-4121-8473-35a8b6f9dbc2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a93e84ec-13dd-473e-8c61-2ed66f97ad93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee71c16-df27-4806-b9d7-f8ade0708c3e",
        "cursor": {
          "ref": "ed982b2f-39ca-41f8-aa74-debc7e5b6dad",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "901aa7ae-3453-4250-ad7d-dd04b80a2190"
        },
        "item": {
          "id": "7ee71c16-df27-4806-b9d7-f8ade0708c3e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "db2a2dc9-5a87-4b85-b396-af1d5078d3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c373c3c-863e-4171-9e52-580033e4f5de",
        "cursor": {
          "ref": "3d2b48ea-7071-4016-aac3-86be5213a28d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "aa007b7d-9745-4d1b-8165-abea87e91ed5"
        },
        "item": {
          "id": "8c373c3c-863e-4171-9e52-580033e4f5de",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "347213d3-9c28-4137-a357-4f8630a623c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1667d397-05f8-49ce-8ef5-ee0486ae4069",
        "cursor": {
          "ref": "37cffd56-9290-44c5-8020-6bdaf6bc92d2",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a4edacb6-12f9-40e3-951f-55481ea22e2c"
        },
        "item": {
          "id": "1667d397-05f8-49ce-8ef5-ee0486ae4069",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ac9b9474-cbe7-4e56-b84b-1faefa86f942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863f1ec3-fd33-41cb-ad18-8d8792648ceb",
        "cursor": {
          "ref": "70d3400c-091b-4400-be89-35d81c8b2c74",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a51a5ad3-4251-4069-a647-55c84dacc677"
        },
        "item": {
          "id": "863f1ec3-fd33-41cb-ad18-8d8792648ceb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "01591076-3614-404b-9602-b402d0e3e294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f926849-5b05-4208-9609-085ca5d19116",
        "cursor": {
          "ref": "07af87d4-fef3-4ac1-a6bd-5d7b02bb687a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "46b0017a-91d3-46e1-a1be-60c848163891"
        },
        "item": {
          "id": "0f926849-5b05-4208-9609-085ca5d19116",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ae7f15c9-4591-4d38-a6ee-8e593d76fbbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f2a4b2-cb46-4923-96af-d45fe63e391f",
        "cursor": {
          "ref": "185207b6-d7fb-4bcb-9db7-9f1f6d2366e1",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1fab8108-6fd5-4e25-9f7d-7fe2a4b73ea3"
        },
        "item": {
          "id": "d4f2a4b2-cb46-4923-96af-d45fe63e391f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8a8ae4a7-cb92-4aa0-ad80-20d960a091c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002482cc-a0f0-432b-8266-40b401ba703a",
        "cursor": {
          "ref": "6220a807-db81-485b-909c-5244379a4092",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d8caacf3-e258-4a67-9743-c3a4641b1307"
        },
        "item": {
          "id": "002482cc-a0f0-432b-8266-40b401ba703a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0cc4899f-8d59-45a7-b929-7eedefcac449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa848a5-626a-44e7-a650-b8f8daf007aa",
        "cursor": {
          "ref": "9bcc7588-4c95-49bb-9f37-8b89baa70c7b",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0d16898f-8176-40bc-8d71-05c65a0ce02c"
        },
        "item": {
          "id": "efa848a5-626a-44e7-a650-b8f8daf007aa",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b1e9c10f-86ea-4399-bc46-395d41e98ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0e3dd0-182b-4109-9deb-bda877992c8c",
        "cursor": {
          "ref": "4c09cee5-52d6-47f8-8af1-c4d2f157931b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "cb2cce71-e1d9-490f-ba8f-5c2d8c7c57d2"
        },
        "item": {
          "id": "bd0e3dd0-182b-4109-9deb-bda877992c8c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e4fba853-d53b-411b-a51c-cddc15caf68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad94ffa-5d38-4760-8252-4367e9571705",
        "cursor": {
          "ref": "97b5f80d-37cc-4fdf-83db-423bbc0d33f3",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "555669be-48b3-481c-8399-58f5ed7a1b30"
        },
        "item": {
          "id": "7ad94ffa-5d38-4760-8252-4367e9571705",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a7473822-10b2-4b2b-a4f4-0a0c75b280dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333d4dd9-6d13-4ac5-b679-49e9ea39f284",
        "cursor": {
          "ref": "37258871-9e0b-4b29-9f67-efd3bfd5e7a5",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d15109d6-25dd-4f0c-abdd-0cbb531b16e8"
        },
        "item": {
          "id": "333d4dd9-6d13-4ac5-b679-49e9ea39f284",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7b810a08-5228-4f0e-92d5-256a41f8295d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4786e0e0-5746-492a-be2d-53175357b2c8",
        "cursor": {
          "ref": "bfee417a-cfe2-4fdc-a3f9-270d58986aae",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7743ad15-d193-493c-adfc-af5763ed12d9"
        },
        "item": {
          "id": "4786e0e0-5746-492a-be2d-53175357b2c8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a4d36977-8dfa-4b73-98e6-5f48b65e668e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9ab277-f42e-4240-b7f8-7012e4f18c16",
        "cursor": {
          "ref": "371b7b4c-eec4-4055-a0cf-b39de62ec3d4",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "54234628-8b0a-4d95-badc-ab842633da0e"
        },
        "item": {
          "id": "8e9ab277-f42e-4240-b7f8-7012e4f18c16",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "aad06ee2-3303-4496-94c0-5c81c119f2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e972e65-8d45-4b91-8ca0-891cfa1e2ce2",
        "cursor": {
          "ref": "cb02d8be-c54c-4628-8c6c-96fec4ae046b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d6d6c094-182b-4e98-94a1-0fb837f0954e"
        },
        "item": {
          "id": "8e972e65-8d45-4b91-8ca0-891cfa1e2ce2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7343619d-6d1c-4e20-9d27-21141fe170dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43606fa-0269-4948-bd56-8a435a019094",
        "cursor": {
          "ref": "383d01e2-4c9e-41a8-b700-277725a36011",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a1835a41-acdd-4fcf-af47-31cfb3f97816"
        },
        "item": {
          "id": "a43606fa-0269-4948-bd56-8a435a019094",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1a4cd5fb-f7ba-4ae1-b04a-d67d5f31b46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311183d8-10c8-4ab0-9767-9147f08af3c1",
        "cursor": {
          "ref": "5fa25510-69c6-41c2-8d37-6a3d000e2ef3",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9c32dd8a-b5d6-43e3-a631-027db5ee8ddc"
        },
        "item": {
          "id": "311183d8-10c8-4ab0-9767-9147f08af3c1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fc2f8860-0eee-4577-acab-045274279522",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54142deb-e336-4700-916d-039f029d8452",
        "cursor": {
          "ref": "cacd9b1b-f0fa-4aa5-b06b-48bd67306635",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e058f274-d6e9-4c3a-a386-018799de6890"
        },
        "item": {
          "id": "54142deb-e336-4700-916d-039f029d8452",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d07bf636-a37c-48a3-bca6-11bd54777d47",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f0b4ae45-df0a-4474-b580-2042263aa7f5",
        "cursor": {
          "ref": "b51161fe-a478-41dc-8330-edf297359087",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7e8eeb5b-2396-4a50-8f29-85cd15cfc3bf"
        },
        "item": {
          "id": "f0b4ae45-df0a-4474-b580-2042263aa7f5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a6f15302-f3a0-4790-b2eb-a6c6c401f23b",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bbf883-a997-4e7a-ad19-fa394918b804",
        "cursor": {
          "ref": "0a85f9bd-26a0-427e-ac0b-89333e6aac2d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ad20ec27-a498-4235-887f-ec6c24295a77"
        },
        "item": {
          "id": "05bbf883-a997-4e7a-ad19-fa394918b804",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "560936c6-f0a7-4ce5-932e-b616d684c43f",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e2b8bf-7944-4b9f-a802-7846c5da67a4",
        "cursor": {
          "ref": "d91c332b-0efd-4a75-9135-ca982f3997e9",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "83a04efd-f84b-4495-b976-c71584223993"
        },
        "item": {
          "id": "c7e2b8bf-7944-4b9f-a802-7846c5da67a4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cb1f76bb-f8a9-425d-850c-4afba5105415",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e2b8bf-7944-4b9f-a802-7846c5da67a4",
        "cursor": {
          "ref": "d91c332b-0efd-4a75-9135-ca982f3997e9",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "83a04efd-f84b-4495-b976-c71584223993"
        },
        "item": {
          "id": "c7e2b8bf-7944-4b9f-a802-7846c5da67a4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cb1f76bb-f8a9-425d-850c-4afba5105415",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5755e7-56f8-4247-86ca-3c39bc5d3500",
        "cursor": {
          "ref": "35a7259e-53a0-446d-8f45-df581964d6d7",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1a2d7242-6118-4b29-90e6-541ab910527f"
        },
        "item": {
          "id": "9f5755e7-56f8-4247-86ca-3c39bc5d3500",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2f2abc2b-81eb-47a6-9d87-582c59c4dbaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c408d8-8f2c-4d73-9ae2-8fab440a32d7",
        "cursor": {
          "ref": "b9b620f1-a1a6-463b-bb33-f08334218e04",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "bcd83a7f-8fa4-46f8-a1e3-d1f51ef4a997"
        },
        "item": {
          "id": "e2c408d8-8f2c-4d73-9ae2-8fab440a32d7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b75c16f7-c6cb-4758-b8cb-5fda5a1ae9c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}