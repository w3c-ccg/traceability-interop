{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3e943688-ee90-45c6-bdbc-fe36f7b0425d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "78b16153-5aba-47f5-afb0-5cc3babe3acf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "05c91e45-fa88-4319-8cab-c82a2c7516a9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "132f9862-5dc4-4713-b9ee-8439cbd64916"
                }
              }
            ]
          },
          {
            "id": "4d9fc081-13d6-40e0-a63a-acd0c33789d8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92005f95-fa51-40f8-98d3-127af14e668e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "51471978-9a62-4ce4-ad2d-b24ac59e61b4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7b646def-8d4c-40fb-9aae-8d5f242b187a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9c482e33-9fa3-442f-8fd8-6e80520f66a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c6c4818b-0c69-42ef-b0c4-c77b3f5de0c1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c03354d-5d56-4508-809c-0b8cb0faf8bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c24c1ea1-481b-4fe3-b037-785849a570f0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4ec2e04-c90f-4588-86fe-620b60009858",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d45ca485-1e9f-45b8-a15a-ae0c87c8a8a8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9fee8e6d-cb3c-4b37-8a41-ec57f1785b9c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "03c930d6-f7a8-40cd-97e4-2d409a628971"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "726150a2-67c5-4a91-9a81-8b1ee1bdeafb",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "dd0f75cd-6359-4e5d-b878-cc573cf3a552"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e31a63e-1aee-4155-9542-226575c1ca82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e54f471e-3299-405d-9fd1-12a0dae73c04"
            }
          }
        ]
      },
      {
        "id": "31d91b6b-6241-4cbd-9f89-648b1b4240ae",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ecfccdbc-aa1b-48fc-a5cc-10d552a4d353",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0344cab-3310-418d-a2af-03a8d2367bb1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8bab6c9e-fdbd-43ee-ba79-df72514be781",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f63a2f-673c-4658-bd03-45293037e601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26493d91-b586-4410-94e2-8055fee423af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b949f499-6589-4333-a959-a38d21f685b3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691b2c08-1b39-4dce-a3fd-31f19873f8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "689f2e6b-047b-4001-8fac-94c5a30a14cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fc84bb-14de-426f-a62d-bb3fe348d268",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2429e9-9a6c-4842-a706-39e7778426e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54c73045-fa22-459d-81db-3bbebd6a8501"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58b3a12b-46b4-4d6d-82b7-a70c4ffd19b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f53d019c-fc47-415a-90d8-e517f89cf227",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8f5bc8-ce2d-4527-856f-dc9285224a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88c6e38f-3089-4bab-aa63-7295270cb1c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103b4b7c-f4ec-4e78-abb1-97438d694cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04a3cfc-6d23-4a12-bb10-446ef18cd3e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fa3cbd63-a10f-45f4-bdcd-278ef894d540",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f4fc8057-1e19-4e0e-9272-216ffa6ea0f5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb68f017-7bc7-4561-9e2b-9ed3bc49e8d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4824c8d5-822e-4807-aff1-c93acc2fc2fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc4ac508-994f-47f4-815f-11e4a30c1416",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "70aacee7-e510-4eb5-8fac-a18eaa6c3041"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a8a65e4-efcc-4c56-961d-a3e3698f85bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c61c4cf3-556c-4a4a-9baf-82a8c2d18a9a"
            }
          }
        ]
      },
      {
        "id": "770d01a0-e41c-41ca-aa65-5a4c55107a00",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "33f25e37-2c22-4574-933c-8a44ad17cfd2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc3e535a-e116-4fd5-9b77-38019f8bae6c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5931cecb-9c2a-49d8-945f-f22b767bb7be",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf38472f-b1a9-46f1-9dad-91f2f59cd62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71927781-2b3f-42f9-bc6a-fd907e39549a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07043ca-c629-4553-bba8-e3036e1ce571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64dc87f7-23ea-4bc4-8a5c-13e3e87490e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c274e293-df1a-486b-b798-11b1acb7dddf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e93204-2af7-41d3-9210-eeecc50ef927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0f12de-c380-4b95-8294-9e8d2fe568e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2c2fe9-d859-49b1-a1c8-7a2d8d09ffc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bbc2c7a-5ebc-4653-bc90-9bd21150f880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52375e6-928c-4342-858f-7dddb354c3c6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc24151b-c27d-48ba-88f9-f30ae5a283f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43bfb584-a579-4c18-8afa-f46725dc986e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5845ec72-5141-405a-9645-442459e282ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e41646a-3711-4c2a-b782-7663fb9cdd41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4ba4d2-829e-48a2-994d-86dfc57ef1d7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f31f29-af54-46d0-bf66-bce0cbea4745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5580890b-5452-4f1a-9543-da2ec70bbc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7dd22a1-b259-4544-91ce-3d1e954ec15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49eb0ff7-526c-4aca-95e4-2989a40566ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d14520-5b35-49fe-b358-861d42f84b88",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7212bff6-d825-49a6-9cbe-d2f2a6cc9101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d14907-131b-403d-8a7d-bf38441b4fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc1e6d1-3826-49cf-9b93-c0cb268ebb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "561250f5-d05e-448a-939b-cf6269753196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e32018-5694-412b-8338-4fe4400b3680",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941e059c-faf9-4170-88d1-6bc8542f338c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826df058-9a1c-43f8-93c4-5fddd6865308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b872b873-b8cc-4f8a-a476-541b8af630f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fdab27a-b682-472d-862f-cd420a8ad649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfaa507-b1fe-49b0-8d2b-a70ca27de9b5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7026a7f-342e-42d2-9ccf-35dae5f450e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036d4be2-5512-4b3f-b592-c1ec71f4f064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414ee0a7-0dda-4a43-8ab0-ecf732c2c7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bad98942-5073-4529-b26a-bc60d1449719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3c9cf8-bc42-461a-8bcb-9ae7db296d6b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940e3a77-b069-46b3-bbb6-8e0c90ccb8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb3fcda-6231-4eaf-8df1-77d92451f824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a913cab9-796e-493f-b14a-b849467305b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e77c9424-041e-47b2-807c-60586249b80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bd6a10-41fa-474e-b45a-cb5be0c3a977",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01e436a-a800-4653-b008-9bbc116472ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff01756a-f362-4779-a759-0bb8d269a4e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e42567-edf8-4893-81d8-a574519a070d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c1ce1f1-ad16-4780-8e98-2293b07f1627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6391b45-44a6-4778-92cb-355823a2595b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc0d9b6-a601-4596-9e5f-16a8d6a56b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e3c9e5-672c-4881-806f-12bf7e8aaf97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0d65df-72a4-4589-a54f-3714294f2a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9b94b32-5840-4f9f-8bd0-b2eb4054b206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c124827-5743-4c6b-b6c1-f8ce02669d48",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffb227b-639b-4ef7-84d8-31a6a62af348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb4e8e1-a29d-4cc7-aacd-3937d59e4176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eece413-d6e1-4e02-a931-95c49bc57474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a5fbe52-b6ed-4688-8570-2dd6b13e779f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0862a92-93e5-4177-aeed-84ebddea9ff5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb4131b-aceb-464c-83af-d22e9f60974f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ad5751-749b-4807-8e27-f952b2774f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bee6e0-9040-410c-97d7-72d2a287027f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1319904a-e967-4e69-86c8-7d187c05d009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae85cc9-af50-44eb-8904-71da5c92c6ea",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c48e90d-2580-4fb1-a79f-1a3769703407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62e4aea-1913-4417-9b5d-84da603cfd90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73168b79-43f3-4f90-8c53-fc4f2f5346ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "128a99ae-17c0-43e6-b202-12cf18599ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51618771-9677-4dc2-9587-dec8fea52a7f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12b9020-23cf-49d0-9c99-0b60f88238a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e4519c-f23a-4e27-9dcd-123e94bd5a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d6efdf-4823-41e8-9a0a-752ed729c1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78c046b1-e6f0-4cfc-8248-b39e36928949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5019c745-cd5f-4691-8e0f-60c5fc81f653",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e3eb95-2531-4736-8dbd-5e371a816b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b02d16-8967-4a14-93e7-0b54d83f9cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354e4853-d72e-4451-a098-cf96b2df6395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94ee966a-a69a-4cec-bac1-91ecaa9e3c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5691bb97-bc1f-425a-bec1-675d768fac7f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b2bd04-830a-48f9-90ab-5df1274b2811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7cf8760-4982-4f22-afb5-c332cbdabd22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4754c7da-4cdf-4d48-830b-46969dd0ebf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d21624e4-164b-4384-854b-f74747c662e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07b195d-2924-4560-acf2-4dcc7465503f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38557c39-6a9f-49ba-8ea9-8e68eb8cd269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1acf18-419c-48a4-b4cb-35eb9ef5286b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ecb035-9793-409b-847b-5d6e94f1ebf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "676a75d0-b1e2-4a03-8de0-2fb0df2e8055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f12dcb9-0e22-4e6b-bd51-c7ef7be3bfac",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1d6da5-ad11-44b7-9f47-7bacb145a795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7a8d34-611b-4003-97eb-254f9383fd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5aa4c9-0356-4443-8558-cf171e3a7a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4d5c6d-c8b4-46e5-a7e0-40b93bc5a190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5141d2-4604-4a0f-8a0e-485cc80a6803",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce4b837-6319-4dcc-88c3-10e230318451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccfdc65a-2f6a-4711-a3bf-9ecdcaafab84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480da09e-85fa-4cc1-bfef-d998b26e780b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea67b2cf-5934-43f5-8b9e-d1df870af579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ae1269-b5c9-432c-9bb0-ec172338e3fb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7ac8e8-6727-4bef-8e13-e3ba22031027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb3b31b-d58c-4edf-8773-2e0ff359e46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5016114d-8012-4d7b-94b6-038d164fd380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "545844a0-79fc-4633-872c-41002167695f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b9c8ed-60e4-4c97-baaa-582b17b19308",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198146df-e3ad-4596-b3b2-bd64339152e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af8a116-dbaa-48c1-b526-fd5563d1ad2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7324ff-79e2-40e1-83a4-62f15424839a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "893bbd47-df15-430d-8efa-f6c29c5c4228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cbb506-d125-4a05-b3cd-2233b7c65306",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5a1059-26d3-4598-a9a0-d8ca9d794d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5cf8a4-ce7d-4f48-a4ba-ccfc0457aa49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356444c3-ba6a-464f-8fed-11bd057ace8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cff06c58-c65c-4329-8f56-7682b4889580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456f9832-0115-4363-8a7b-5df1fed8dffd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d4c38e-c056-48dd-9a18-71cf8775fcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2ef87d-bbdb-45f8-aafd-a88636921c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb26fd62-f24f-4bdd-a4c5-9466d0ad34ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d0cbe92-3460-4146-abbb-13e0dba67c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176a3309-b59b-4b05-9a90-d16c8d12bdff",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5b2712-7d28-494d-abb9-b7f3fa89e2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61407e8-416b-4715-b1f6-5b9ac06de18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e30915a-a8ef-4f4a-9538-ff7cab78df16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0690ffef-b037-48d8-8892-436ad3da9ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f94cab-4755-4e06-9487-4b1a37e59b43",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60dccd0a-4cfa-4a25-ae2f-b8bfc0e712de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8bf0ca7-1314-4067-a369-c923f50beebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f967550e-a021-498f-b0dd-ddfb80a1f8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c87c62b7-0d2b-4476-b376-ec603bb124f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cadd336-9567-42fa-86fd-39c986d6d4f5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1372ea-770a-49ec-8e50-5f23c57ef15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3df234b-8f7a-44c8-9ae6-e6078beeec2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a412033-2d66-42f3-bb0d-2acc6684eca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57d402fd-a8c3-4de8-8e7b-5a04a8aedb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa87134-3656-40d3-a3e6-b40bf4266d59",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918fe46f-6c6a-4dda-a0d4-65222f8b354d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802482bd-1163-41c5-a130-033c0730b202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84b1006-fb62-4831-bdf9-6342f8240ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5823ed-58a2-4d68-a082-e3d7af59b68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9b3b05-095d-4dde-802f-2155e48e2ef6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96083c01-6b04-4b0a-bd55-c54a80d372a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949b0af0-ed63-4146-b33a-1d318fbdc2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb6f459-f63f-4563-b5d5-6cf37dacb3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e71f2d-fe92-421c-a027-adfa52a2097d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c4252f-1cee-4186-8562-aabfc79a193e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10599fc4-dbe3-4843-99db-df2b83d5c812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bec238a-7d2c-43fa-a53e-63142e4bead7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6177c4f-8b52-4f30-910a-536dd23dc7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e21d51a9-3cec-410c-85b7-0fe99c0dd5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b19d9ad-bf5e-46fe-8824-1d98fbac97e3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ef5db3-1080-4778-bbde-2eeb45863d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de65e36-1d1f-4a5c-8b42-a7923b14855f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb14d09e-60fa-46b0-bf1f-ef2c17163825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd96863c-277d-4855-8063-88a9d2f7a874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae344498-6f37-4455-9376-e3651848f11c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03551a19-752a-4fd7-894e-52b1c6217a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3540eb2-375c-44ba-ad2c-094c0341fbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c10f47-ed40-478b-be73-7e22308de038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c13c195f-2f60-4bdb-96db-f2d3dd3f0412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6af285-8076-4860-ab5f-451ab0052b4e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea5ade4-0c7d-47b9-a0ef-c44001d99fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d626a2-11ab-444f-ad3d-d4f0a4f304c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607aa9d0-5537-499d-8e26-1240f8a90238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8014a5-fb6c-4786-8ba1-0d41e4a4b7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b384e072-e591-48b5-89d3-dfaefdd1019f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5300c21-14e2-4479-8a56-5cc620faccff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0026f39b-aafe-4da0-8dec-517bd49d2a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb9b524-1886-4f94-8982-2bb45f8b576e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "141cb9be-7f32-4d44-8821-f1b945e56cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9e6b40-0ca3-486b-81aa-febf3869bd36",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3560b514-fbc4-4097-8a6b-bff894bc329b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a519be-1440-4502-96d8-c58be06c9261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bdfbe7-b02b-4935-8b7a-5a557108f262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01d9b3f2-3715-4fa4-80c8-00a6f3b57a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c24d7f-54ac-4511-af3e-7b723689a232",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d0b912-8d60-4302-894d-dbfe2f6f3f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a63d57-64a3-4d1c-9207-48ab48302da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ba66c8-f749-4773-8f01-647d2a427ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d14e95-7e7f-408e-9845-189ad4fb4758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe65218f-f29c-4900-bd4b-d25397d73138",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6722ad-ffe3-49a3-8c20-59e388e3f31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d031752-b7e5-47af-9deb-937cfc93ef7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f05b855-e531-4e9a-8359-cf7f405fd444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab84cbef-996c-4ad1-8351-d3737575a4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8757cef7-b554-43a9-8eec-d4f838ebaedc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec27d22-c2de-4c79-9a56-a795f5ca5201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6255509-639f-49d8-a995-5b5b10da0cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5e035f-a3cd-4db3-941c-42b4674ee286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48741455-bc98-4167-87cb-34791be23ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63f4be7-1bec-46d7-a93a-34229e6f03ac",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d8263c-e447-4ae0-aa19-73754c9d476a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3148df1b-c0ed-4fb4-a93e-1e837cd5672f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6aa90f-08c3-4eff-a9dd-b24d6dfdbc56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2805432-f395-4bb7-b6ed-b3d6f2385822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59b3897-09e1-4551-9803-af1dee567e7a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ea7bb0-dad6-45d6-9e5d-dbe6d62eb3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b01438-8470-47d5-a240-7c92f892e2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a22d0f-0bb6-47c9-9c48-744089f9ee60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd7421f-2feb-4ca2-b9fe-cb9b9f17fe2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf02aa1-7b47-41de-bcb9-18e379c9a4c5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bc64b8-dbf9-4c3a-982b-1db914543e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15bda802-cdf4-4fd9-8df5-8bb553134978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8918617f-a771-4011-acf6-c4a6653d198e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cde1f1c5-be8f-493f-b2bd-61dcc7b39ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56817f59-c28b-4ef7-80e2-f9ef10593863",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaf5e55-1940-4a26-a789-f6a1b704573d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d144d495-3ee9-47e8-8f10-9e6f81be3800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70604ff-faf5-4c44-b896-e8a8033ebd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "829fb110-fa20-4f30-8506-82cb8d167a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba75f776-9df1-4584-8cda-4184ffacb35e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e787e6-5b15-4c7a-926a-1b66ef3ada52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26093ffc-6687-492e-90bf-697735bf4ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd0384e-57ac-4c94-9d70-aac449dbc865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3638e4b0-0a6e-41f6-975a-41ef50d1c83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9c552d-347e-413c-91de-0be3185226e4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48df876e-235a-494f-ae1b-b320c5cfead0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2af4eb-ebd4-4067-ab16-e33703262d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6589dc9-a373-4d68-9872-da9a3910d7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fca249d7-794f-4332-b8da-bc2bc1895eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720dd6c8-09a7-49ea-8394-047ad3bf619f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1698a24-df46-422f-9212-26088c302667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb4a4de-e981-4601-9778-9bb80caeb9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e851c3-0fc8-4802-961b-d7149bd8ef32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2b15c0-82ec-47d5-bec2-da626a34f910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17584e0-20f5-491b-8b6a-bb2a83146db7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f09d26-1e26-470a-88ce-d9cf46bbfb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ee775d-9e3d-414c-b41c-92c39737485d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444b3c76-543f-4d12-8e27-f994c19dd0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf716a6b-976c-4212-b723-51a57fe8231a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cf0312-40ff-4340-b110-9163af81eb57",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f4d25f-b706-4848-a2bd-8f63c0755f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fade7e-96b2-435f-9a81-d939b4404986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12cfcfb-a8d9-43cb-ac03-a583a8bf4dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0106078-21f7-4455-bbbc-639424e07f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30154272-04cd-4bd1-a7b5-f332e49eb47a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b6e301-a308-4901-a3f3-d5478471c7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f860a7c7-78ac-4422-9e09-24a56a6c2fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4cfa3f-25a7-4815-af17-57dc8ccd57ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c38e63-f797-449a-a571-f4a9d63acbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5539f83c-a114-4f9e-a8ab-b95416012000",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71b4eb8-69d9-4b3c-9b40-c735479fdea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287c51b7-c8ea-48ed-9a06-df25c53b9b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db940eb-c0a5-49ac-91fa-083d847be543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bdbbf5d-1095-46f3-b193-94af7c96b3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487fb197-ea62-4244-b174-edf5692accf1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064f5f6c-eb4a-4206-8aad-d3a6edd4a311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2234492-3baf-4bd8-9505-8ac4a67c12e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2001d855-e3ff-41e9-9cf5-1c887af91eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d94425d7-77b1-47c8-8d33-e4fa0a03a1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967a2552-4b14-498a-aed0-11eb181b06ad",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2ad824-e088-431d-ad12-8e0d8bf5ae6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b499ad8c-5621-4c6d-92fa-8e6066b137e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33672332-cda8-4190-9a52-e342b980f6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7847209a-4b07-4caf-befd-ad113d6d5976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a3de44-892a-4c23-b278-6cced5c028a2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e86bd2-2784-4408-8119-ee5be7ec240c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c666b47-8c5e-4675-ad70-32427e52f197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ac72ee-43fc-4603-b154-951dcd2a2195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "72c9bf7c-3cc7-48b3-ad7d-29fa6a8e9601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a46ce0-8a01-4589-9aab-ab354550df7e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0aa1b51-a28f-4584-bb10-00f90f008e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056ae0a7-0151-414e-a766-5e427db75b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1307b6ca-be8c-4755-badb-408c188154cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "86735d2e-3185-402f-a66a-3fed1d5dd268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5230a00-3c8c-4624-9d77-e83c3e5d1335",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387da656-34bd-4843-8367-f98e1d26a3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f27647-84f8-45b7-831d-53685a2c61a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3f2f60-5631-4cc6-ba4c-894619543599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb737c8-5fc7-48da-b8dc-896c91f42261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d73d15-5a01-46e3-9934-77b1af9f3ece",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c986652b-71a7-4aa3-a7cb-6dcdea44cf79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55634bbe-4beb-4eab-ac43-99038a7fbbc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4143208-379f-4127-80df-c68ba80fd181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d010ad1-2205-4980-8aff-ef171517b337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b8b4e2-b77b-4e4f-beee-57cfa8b51fd8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc863e2-c65f-4813-835b-a565be5a5ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9baf44e-9d05-4216-b533-7a74b226bc69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c22a33-6b85-4374-8cd5-4b58eed5ed89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c126b5f-aa5c-43e4-81ad-7d0572d94f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee096b2-29a6-4497-a5fa-080b3d512fb9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754d49f4-12b9-465e-9548-354ca1141448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b7cb78-e2ea-4209-97dc-8c8da1f53bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4f68bc-4f03-4c46-9787-92c77da47dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a6bf863f-8c25-4ac7-95dd-026d271f736c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4183bf2-64fc-4aca-8743-1d68555cbffd",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32502b52-a4de-4d1b-9b95-ae6701cc732e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08cd7e1-6f95-487a-9d3a-7b06b394acc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18467838-5843-4fd3-aab0-21f8ee8acacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f60599b3-197b-47d4-9fc1-8eae4f6e74ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010c32a3-4511-44c6-87c0-65e2c3fa2a7e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310b927d-9c90-4e34-ae88-cd43747ee8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94102eb-3552-4e1d-a739-4b97308c9072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc13f52-999a-44a1-9636-8023ade586e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "af42fdbe-d3e5-49e5-a3fc-66b24ffc1509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225fdbab-4219-4267-ab0f-be704d590fc7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f75d8b2-c9e1-418b-bd64-d37dcd095c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e9be3c-af30-419e-a744-b4d38dac8e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d03e96-79b3-4df0-bc89-1eb4d6fae290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4960126f-8676-4f2d-a6f1-a26a3a3c0a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5c73bf-3f9f-4ac9-977f-9ae5ffd8efe7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e818a7c6-9004-40e0-825c-a422ec27f2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6629e4ce-17f0-4ee0-890b-671e125f53d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86b88bb-98bb-465e-b45e-e1c8bbc16a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e704433b-63fd-41c6-a0ea-058520c58983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2e38fa-0624-44d5-8443-6a380c9feb01",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dcc944-f295-4eaf-b8c8-d4de2bc62b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f308e7-3a4d-4494-aea6-1117d101d00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989802bc-aa2c-403d-bf60-a9b9b84353e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd86755-edcc-4bd9-875d-ff3be7b8aed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e5c800-220e-4fde-b431-7d302ebfe7d7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0414eb5b-e927-4efa-8591-b9d16fa933c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085772d7-f585-4012-be27-3dd21fceaf08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57100ca9-3431-45f1-9443-eba16896492d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "17a4064f-8447-4cad-9c47-a2f1192f9b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003747fb-fd7f-443e-b77e-94ce08993f35",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99300c38-14bc-41c3-bc7d-c69f8a01fa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0408b7-9576-4b44-acb2-62684e05a54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef2058b-bf1e-4956-9f16-480e1ccab226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc18902-bcb5-4338-9890-69b8671ed99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a449d6-b1bc-4455-8e74-a616daa650cd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acb1253-2d51-498c-aa3a-13669111eebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "564e945f-d19d-49a3-b48f-96e147b55ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cfb4a3-856c-4a01-9db0-af2ed7a55432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b95ac2d0-3ee5-42d6-995d-2fcda246e701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdd02e8-562a-4e9a-9fec-95c5446934b3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76897a7e-b15d-44e9-90e1-36bc53ce55bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e56cfec-f5b2-4b44-9239-563a8cbe48df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9916872c-c09c-43d9-b1d4-0fd810a7d343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9db66e-c48f-4071-a323-2cf1bb781ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3aba4d7-76e5-4500-a1e6-26fb43701723",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd83284-61c8-493b-a788-46f667e84ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7059bfe-3581-482c-a1b5-88bc17b6975a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6281b2-ef2f-4069-a41c-8da1c04322ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd28b0b-f6f7-4112-8f51-55785227ad50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbd0397-3ed6-4a09-8747-be73b6c7b4ba",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d590f5f-eed5-4f06-b178-d610b2acf7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fc52fc-f46b-4eb2-9cc3-01effcdd68da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcb5114-9005-4645-bdf6-44067f4c7f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f595bfbb-2cd0-4d97-86fb-34373edbd5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943fb461-14f8-4343-b2db-2e0a6c35b14f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e712bc6c-0ee0-4721-af0b-4d2577d995b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e1b4fe-1fef-4e27-b5e4-216df847af95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa70e0ed-c0e3-44b7-9814-3c9821ec0f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "552aeec7-f38f-4bd5-a56c-6e78bbafaf0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c1c9ee-8155-4016-a326-4c026273db75",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af82f609-729d-4472-8a17-c31e5ded93d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a91d6e4-a71d-4815-a469-64dec907296e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2d8a88-d6f9-4575-91fd-f0e516d91afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "da85bda1-d549-4177-827b-c577a97a74d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b225b5c7-dc7b-4c40-847a-b5c1252fecdb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d19de28-2867-416e-b44c-53ed72711237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8fa498f-e4c0-46a2-9015-6cb3344b7e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c18766-c526-4f22-b966-a480fd5816d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7968e799-0adb-4ea7-823c-6fef4a5a8039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd51b9d8-3949-458a-a180-be77a60d1f35",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb886f8-0a8c-4200-b67c-323a937422dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696d1b54-e1dc-4b23-8b66-ed5e48c2f6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670ee717-2792-4de1-8000-8aca8aae85b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7d3c04-a6a8-4c46-bceb-ba6a84438b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f7aa5f-cb0f-4405-b8e7-7183b91042f2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6504b6c9-e579-4c22-8ffa-b325ca5e1179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0ea5c1-4549-4e82-9e4a-a4ec5cfbdb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16649db4-1723-4c5f-9a9f-cefc06040625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24a70032-e0cd-48c6-97ca-1abb5b8e0f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15db25a3-3722-47ae-9873-e3f29e6034a4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b2be03-fe08-421d-8e1c-30217fba38a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9c1cce-24b3-4bb4-ac25-a488c572ab92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e487a59d-9b20-4c09-959c-895027f7f795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3708df-699e-4107-92c6-825a8b0fbf6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e37559-b32e-4374-96ac-bcf9b0ab1b43",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6db72e-d206-4d35-a046-5b9aaac9817b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6573152d-0f54-4da2-819e-57d1a33cc487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b249e8a-7aff-4b58-8b53-765033872eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4d78d9-a7f3-41b0-b9f7-36e0d542f026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb166089-b81a-4101-9140-a0dae30e68ef",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381b8d49-abe9-4a45-8b41-07ba1179ca55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba656c8-a550-46eb-8d4f-df4c2e1498d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adda608f-35da-4ff3-85b2-f6f11fabb9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4322f3f-8be5-4df1-bd48-e925eafb5cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f384e2-cb2f-44c8-b7e8-493ca5ffdac9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d972d0-d1be-4967-976e-611cddef0dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd238a7c-af69-45a7-b1d5-6a88f373de5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c5f335-7fe2-450a-9e5d-ba580a3e7757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6fb94d-95e2-4af4-8457-8f3d037ff6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132c04e0-495f-49e9-b31d-1f82906d7d59",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efe4912-e786-48f0-b0f8-81534f50f266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040d5d83-5ce9-4544-ab04-c77ef4ec0e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2101f8-54f1-4fa4-8865-0f4cb92da5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94b6c85b-fdc3-4483-a262-d880bde1f05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ca1997-b92d-4c24-a906-e293a7f0421b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bddbe1-cfdd-4baa-8865-bdd408a66475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c2247a-28ad-49e9-ba95-6459fd478496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60c3a62-a882-455f-816e-afdd636d5a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64bcb73b-0369-4923-aaec-3c8455069527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36741b44-7b3b-4d4f-a8a0-f2e06e499da5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93260ff1-f99d-4940-9c80-ccd5abd3b209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b350574-8d37-45b9-a1db-c4d445066535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f872379-eec9-416c-afd5-c0265bbe4024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "723bc6b1-6680-439c-82a6-128bab5e272a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661e97b2-27ac-4693-a0dd-d6a9cd2f92ea",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ccd29c-494c-4222-9b1a-b803a2b80554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e65232-4217-426c-9725-6057b57e104f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd0841d-0bc9-4d0a-8a86-819edcfbe4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5444d38f-f73d-452b-8076-3db3898e9d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af8c2f1-35d7-442b-bf22-02797c9a3388",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74899a8e-1158-4c4c-8f7c-cf05bddf35ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bc4c4d-43d1-4fe4-b209-ff335eec00a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c3a4b3-d896-40c6-bb65-83680488f083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c80666b1-04ba-4bce-8b95-eb9857027d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470fc3f5-9cbb-4c4a-ae2d-bb03741daf2a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d6e5e9-26ca-416b-8695-60ae6f6270bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44bcde7-6b75-4fce-a40e-56c969f39494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aab0eca-f609-4aaa-9e13-389e603aecaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17eb382c-6ee3-4a19-abc4-9a8a72e30f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b200cbfc-f494-4e2f-ba6d-52f3bd695465",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30189cb-3867-401b-9202-e74777ee04c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86520123-6cee-4992-8d89-73272e7e0ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f52af1-bbfc-4acd-8899-980a31917eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6b9b78-8ff5-4760-bc9e-fa9a3ab543bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36a84ad-4062-41a6-9d2d-832b569bd800",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5f3327-faab-4b45-8178-95ab831c6145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea65af4a-562f-4e2f-96c1-8927c26b5782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987ba905-c515-427e-aca3-fa9f6ca2580e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0c4c1e-6cd6-4af3-b600-9d5650fb1dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d7e665-a497-405a-a3fe-db9f8950f3f2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7f10d9-07a3-4832-b623-041cdda37b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c205912f-6f76-4201-a17c-98218dff8ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fafe41c-2a8f-4228-be71-6dad143d0e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a638ae7e-72aa-411b-af13-e319b738d742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa18da4c-f39e-42f5-814e-624bc92d8d48",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ae84d5-320b-41d8-855d-91e3ab51af99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed9c7806-ea69-457c-9d08-e4009b412c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b1b5dd-5a3c-4a30-a3bb-b180028b7ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06e499bf-6b6f-49c3-b748-34e40de4ad11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca3f56c-25a4-4428-bea9-ced50ed4f380",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05641481-810a-4cfd-88da-29e6cb2d2f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6138cf81-ca72-4297-840d-ba7a758cadff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899459cb-f082-46b9-95d1-d73dab1f431b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a5eeca9-c83e-4d70-83ca-be47c0324af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7054b5e-fb64-4cc0-8bfa-f9e406d810c5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47830dfb-269c-4cc0-925a-1a0f07d33a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521005db-00ca-46ab-bbfb-56ba92ec8cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c7e9d9-78fa-4d9c-bc6d-bdd5c0dbc7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "214ee69f-47ad-4485-9d09-019bc5b277eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d569f8-f0c8-4619-9c75-2e99f66c6414",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dc3858-6172-4be1-9dcb-a6cf510ac41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c295c76d-fb0e-4954-8179-07bfa2fab2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f18da4c-da3a-48a1-868a-38ceb7952db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc59b4c-b3ae-4153-9684-564cc82d59d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fb1546-1ba2-44d4-a570-90461d89b1cb",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bf3ce8-0e9e-440d-8909-2faf9a40e160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e31653-a34f-420c-bcd0-dc23bdecae48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4487d14-f89f-45d6-8a41-4bb637a03b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c15c6f5a-c245-4d4d-a975-8fe9832df77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a13e1f8-fc90-41f4-a310-ec800a598043",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff12743d-698d-4cef-bd51-16404c4d6126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377d48e9-a34f-46dc-b3d3-7aa23da54112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9852bd84-7c31-4186-bb60-cf1413fe543e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c022b71-9f90-4309-ad87-c928bd234b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee15fac5-dd2d-4c38-9c17-f6ffb3d11272",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb7aacf-2c87-4cf2-bb5c-fcd276a0a980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7fc8f8e9-000d-46d5-a4d4-a6dd7e279771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a6b140-dc4b-4bfb-862a-b5e0fc6df88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "99ca7f3c-22ca-4672-8566-24ad19779692"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c2ee85d5-f99a-4081-ba2f-01d1d5c8dfaa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "136aa10c-4ff1-48be-81cf-6d2e114ca34b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331978d9-edf2-4c2f-96b3-faf1db339f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1afa3311-31f3-471b-904e-ecc3472fbd4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1706aa-af42-47c1-b813-8192ece4dfe0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94954988-5602-4531-82d9-9c3d644d8511"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f56cc5b-2497-46f4-8c8b-4c007f048272",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2d8f522-e415-4871-b01f-fd0d19c207e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b7fa925-7189-41f2-a319-c74422bcc22d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11f9ba90-18f4-4032-9b99-230db3d4bae6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "348daa58-b0a9-4f1f-b666-bbe7d720c2c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "058ed1c3-2cee-410e-bcf1-e167b8d6c6fd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b2a5fb50-d586-43fa-8842-ef27af6632ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b2b0d695-4b51-4312-b26c-61d0a9a3b655"
                }
              }
            ]
          },
          {
            "id": "a098e9d8-0aa6-4400-8110-5e496247cf8a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1e7e6715-01af-4a8c-84cd-edb3b4603baf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f1ae3e4-7854-4ffb-8048-058d23b55040",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4659362f-bd1a-4406-8c84-4e8f894efeeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51e14b76-ff9f-4363-b27e-1ee1536353ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "521794e4-3062-43cd-9ed9-d3b08066ed52"
                    }
                  }
                ]
              },
              {
                "id": "59ebf16d-8c86-4794-bcaa-57f195d83c1a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db3d47a0-2054-44a1-9745-ddf576a4194e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b70a566-6d21-4f3c-b35a-8e2c72fb761b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "857a96dd-37c0-4e61-9375-74fba4146c57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80dea23f-470b-4bc7-875e-f53d71045596"
                    }
                  }
                ]
              },
              {
                "id": "e5a3dcb9-0b9e-4918-a870-cf86cecb29ef",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "891c7ff1-9c5b-464f-8eb3-3d4ce5fe32c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b463a281-1511-4890-9b84-c6a24053f9d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64b63a2d-cd15-4f7f-adcd-7e83efa9b1c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b385da2-f44b-4efa-8780-ee7eac20a899"
                    }
                  }
                ]
              },
              {
                "id": "eebabbae-a2f1-46db-852f-c12de7a90ada",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "672134ac-049a-4384-b6db-90eb80ac0bfc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15da4ebf-e59e-4573-b455-d8cb125fab9c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4423dd79-0eab-4bcb-a868-c5ce6d0399a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "738130a4-5796-44c2-ba94-72875d541816"
                    }
                  }
                ]
              },
              {
                "id": "c9e2b5a8-c0be-4499-812d-deab8540cc7f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ec3194a-4625-4fa2-a1d1-d375ece5cff1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bff6f109-44ba-4a48-b595-cedbc28c6226"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49e5f629-b2ad-40ff-b4ed-b2ad38c772a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "87acae3e-545b-4302-8bfa-3e69ef957631"
                    }
                  }
                ]
              },
              {
                "id": "8e445274-eaf1-4205-819d-f4d4eef519ca",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44183be5-8e8b-4267-8305-ecdbe39ad995",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe9a5cda-7913-44a5-8c13-fe7c766259d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb047167-fff1-4844-8c1f-896ff53ff0ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd79295c-9e18-494e-9e65-545370b76e2c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "06ea6a35-4fc3-4913-aca7-9c7812a0ca9a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11788f17-c241-4e38-adf5-31218a7b7be5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2d14cb3f-8462-4b37-a20e-fb8bd5ad3199",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "865c50d6-4bd3-4252-b3db-d2e4d986061e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d44b7548-9801-4893-8cfb-5c0ca7411bf0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2c9c24a7-a6c8-4f33-97d2-c54297a5edbd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8475def-e060-4f83-9600-850903f4d43d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fcda30d0-df06-4a90-9152-a9ff6960e6bf"
            }
          }
        ]
      },
      {
        "id": "a8598ba9-1931-4dab-84ea-4ee671f22ed8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7b8ad503-0099-418b-abd1-14499e570c15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c096d80-e1dd-4a35-837a-183df5d515de",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ffcd321e-fd1d-43d9-a3c4-0afe776a7f17",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ab4caf-2ea6-47fa-982b-5b6da40bafb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a8aef4-be9c-4103-b16d-de7770c5c967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899760f4-41b8-4511-b1f0-12c759d36ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f15fc92-c932-42b0-baf9-ef2f08742779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fda283d-a089-4676-825f-e649072c42b1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327c72ec-849a-46e1-b2b8-13afb9bac93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8fbc67-83f1-4900-8fe3-a507f8ff2b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8040f5f-93ef-4548-ad55-72e63c0b8ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6462ee-d01b-48cf-81e8-651ef0bcd6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94318be8-a638-4c10-8b70-7efac8cbfc4f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02a129c-695b-4e4c-b211-406d5db4225b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a724376-3fae-4a46-85ee-9021d94346e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d593f0f8-de7a-4c7c-bea0-85e31bf1d5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "029b51e2-8364-4feb-aed6-b2e7846ebbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3989ef-0976-4684-ba7c-612148a375e0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6985c63-5b3c-41e8-bc85-0add2c904b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9497f201-1518-4287-beec-ac19be4dc78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bdcb2e-515d-44f0-a85a-cedecb609c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19283340-454f-4d08-bd7b-7ea38b7388c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52885cb6-90a1-4b93-9e80-dda5390f1351",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1f1931-daac-477e-8051-c57350fb65ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71354e6-ee53-40c3-80a5-84549c1974ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e74512-b843-4261-ac7a-db7295754c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57b02874-fce9-4c1c-ac6f-4f5a30f93734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e525806-1843-4e5e-995f-bd640db0f6d5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a9e38c-d237-4596-b585-fee4be1947e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c03043-01e7-4e0b-9e92-2e23736cb6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25202211-abcf-4764-9d7b-511768f4f353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dae16b4a-6ffd-46e6-a75e-9d2d24f4f91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2248bf1-30e9-41ad-b0c7-502549f5a93b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962ba0bf-f9fe-4cfb-b307-e58824f93bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d021131a-ca4b-4192-90fd-0ed1d365cd53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816564d0-9768-477c-9af2-afd9abb41e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd1e6f9e-88eb-45f2-9446-56ad0c6a9e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf5d333-2475-444b-8111-21131b11add8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf151596-8b1c-49f0-9ca2-460b8f100588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b680a0-82f6-4f4e-92ea-4305abb1a33b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fdd682-ef94-46a1-89a4-7614c645a8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f90f9c1-1290-4635-9310-17d433a447b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa01488f-94e4-4030-9d9a-f014e01fc723",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaea1f5-045b-486c-a05f-35395a613190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d2a446-c09f-4007-b627-2d061f5f58c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d183b3-96eb-4f01-b6b2-08432498bb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36f748f7-8909-463b-a55d-55648d62f17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cbdfbf-0ae2-4e9e-be49-51677488f351",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298ba11e-acb4-460e-93c8-97f20d8ecf30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9054a80b-dfe8-419b-bccd-225282ee163b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4332727-1e55-4391-b2bc-bc114a31f54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fae03ad5-75f2-4ccb-89ee-cacc7e9d3d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68d6125-0ea1-4036-8153-6d9e7bf2f3b0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0297fd-bc70-426d-9aae-64b93e29d0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f392e80c-66a7-46b6-a3dd-4e8bfcb4d809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89132193-27de-4400-99fc-60d86b385898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e08266-43a5-47ab-a96f-caccae70d641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb371d9-dca0-4c2d-a140-613d9e055e65",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d95b78-1de4-495e-bea3-f7f82309511f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c576362f-8f5a-449a-9d07-3367e23a3eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e4cd38-f309-4b3f-ab11-0247d808cd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc19f54-f95a-42af-bb28-3d1e9d9e8d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17a8d01-8230-41c7-97d7-83fc04dc09ed",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd50806-6305-4d28-b43b-67de7a5aa91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be2dd8e-2ad0-4ca7-9910-07c8a02cb868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fc41d2-e4e0-4856-a630-4582d509cabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fbf300a-92f0-4872-90ff-7afae27ed320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd965dcd-4432-49b0-b5d6-9fe66e99e26d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a33884-18fb-474f-8562-320d11475d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e64487c-2345-41ff-a249-48344680383d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6a90b4-235d-40a2-8040-ba2af3b1fa17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f27481e-f246-4739-a096-10023680940a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbce447-31c0-4b79-9ccf-c5829110e72f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb644ce-b720-4ec9-9871-57de7a59dff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345aa5d0-04f3-4d57-99a7-384594df1cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f8fc17-56c3-4139-8774-1e2466080927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e06082e9-7e12-43de-abcb-1de9f1975b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1475d0a-9b6a-4aa5-922a-0d692fd8a553",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e1d2fc-02b7-4c4c-acf1-e1b69fc29ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d084cabc-c739-4e1e-a8e1-82439ae9b020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bc4adc-7906-4a32-a3a0-2a63142ab016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "97d4fde6-dbd9-4059-9926-5c45b92e45a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884be20f-8767-44fb-9bed-ae6b296630bf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8a4e6f-ce5b-44e5-a538-e17b8ca83d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509b489f-398b-47c1-86bb-a42ec8a87d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3de86b-7279-4b6b-b2c0-f2161bf9d1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0bca2a4-3bf5-4aac-866d-597d5fc8c3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b6ff45-d4c8-4127-8a5b-94e972b001a1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e64feff-75e1-438c-9608-20012e0d2865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21facc90-544f-49e7-9ad4-b0134e7accf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac06f7bb-47ad-4d98-bec8-405f18ce9bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b96d2007-8258-4b8f-824e-c77ca57a5573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249f9809-79fa-430d-a1bf-ee2e8990e7c7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ed80d9-2b77-4976-bac4-f1e68d242e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0df094-3dcf-4447-82b9-130d2f12be2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cc308b-132f-40c3-b360-501bfb5f4cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bd10f0-3f3e-4822-bfca-cf5ed191514f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7119ff55-0d2e-4a7a-9247-eaa2a72f6605",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dae045f-cfd9-4920-8a56-8e81df25f1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737b6d51-ce8f-4cf3-b605-39fbff679a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e2eac0-6737-4cd9-a56e-94ae5bdfb3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "654eef40-04d0-491a-ac52-9f7211f544ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d800b4d6-1ce8-47c5-9582-b5e992d49393",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c46035-6dd2-41eb-bd03-6f264403fa05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dafa2ad-d07d-4cfd-8cc5-ef73e72a549d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8e9fc9-00b0-4b6a-b9be-b2ad86699ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b06f5a-925b-4cce-a4c8-608f31e9f922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5803304-5669-4152-9936-f84cb4a668ce",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bcd4a0-507c-47f1-8bc8-9fe4659853d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6fde0a9-24e5-4c51-bb60-69b8c88c194c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932b3ef8-2e99-4b10-9206-0cb0b0ad49a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "999f32aa-4150-4063-b1d4-36b39019c046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3bfce0-3058-4631-b077-ad843640b828",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acad94ad-e6f4-4c0d-9580-46ffaf6c19f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda6ae9d-fa41-40ac-a29a-11a5434949dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fb2d0f-460a-4a1c-b782-3d90d48432f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4008b918-1568-474c-a316-3ecbf889a693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6d42d4-9c59-4e2b-ba05-40b9eadd0cec",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442333d4-8e98-4be0-917b-287800f57d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97154a7c-9b69-4f1c-90fa-6aaa24383f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee5fe3c-5fa6-4ed2-a7ab-71ce61169c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "422f2380-d468-4c30-bdf9-dae18ffef30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1e690d-a541-44ed-98e8-cc325487d864",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2c6636-41fd-401e-a620-049d44af98c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6f24df-a4de-4a6d-974b-ff15e9a8b5fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcfa3ea-71a1-4574-b205-e7a3818e4d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0608e530-6ac5-4762-8e72-fea9ebdd62de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a0167e-deb1-4515-bd56-ae0012ec79c5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a02c976-7945-40a5-9593-0c88495b4791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6cc891-4afd-44a6-89cc-2d9eb939ac4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be82de60-1c05-4119-98b2-164be6b0eb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63cb482b-a414-475a-90e2-0ddd10d3c07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb7ce7e-fc20-494a-b6bf-9646eda205b5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f495a9c-421a-4ac1-85a8-97862b9c4093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6904bc47-aba3-4602-9096-6ca4a4e50ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9a54e1-5141-4510-b03b-78fc31761887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e7cdafa-50c2-4f98-8239-186085fcbca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e66fa0c-1ee2-4f2f-a177-b19a1da9d8b9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1623d71-a85f-49fa-bc5d-2b1d5d48d1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575207bc-04d1-4c5e-b916-4713006170eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae5089c-a9e9-41ac-a323-8988a91de5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9dbe81-c486-4662-ab75-5c4f28488425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff477cb5-e354-46de-896c-ab90d2656ed6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deeabb7d-61f9-4208-85a6-c2434dda9466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b7d9143-5f52-482a-8f29-7ef60c4c8b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc15eee1-5a21-409f-a000-db1c28cf3623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "320bcac5-8bd9-466f-90e8-67f15bf030ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cede3509-ee2d-48eb-835e-644497ed0dce",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "209c5ba1-2c68-40c8-b63d-1ead155fe7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa5796c-a089-4730-b746-f0c88fa0bc3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694a717f-21eb-4be1-ae41-7bae512437dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87e71743-71d8-4a43-b351-d9cc0baa9226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceddb373-7df5-43b3-8db8-71205d745b41",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578b85c3-09d1-4b94-a9bf-849c3ccbfdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8432f370-5d37-4625-9f69-32c077168a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b541d89a-5c8b-459c-a1d8-bcc3c61c3e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfacaf5f-9109-4721-8f78-8760a434e9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c233fe8-1a76-4477-ac29-7924c3130d82",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e418b8-590f-487d-91ea-56c8a9a0a192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e89c4a1-a455-43c8-9424-73c8c3d5353c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ccec49-8201-43ff-ade5-d889d1d7bc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "febb376b-8538-42bd-9f16-ecf5ed5a30a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ba43c66d-6421-4e2c-aedf-88938618188d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a66bdf30-9a07-48f5-af77-cf90d50219db",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d847897-c119-4fa7-97e9-bfb63844149b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "39351cc0-a1c8-4d63-8683-348a3b6a639a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c76834a-ab30-43c0-81b8-1f21a15be719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "693c9988-64c4-4a0a-87ce-5125dc71a9de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c544fde8-b421-4cbb-b931-54202eca0645",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f7d1d9f-1913-4c1a-b7f2-fc7fad04496c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fd61e2a-807c-4959-8896-cc3925b7c544",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae31a037-59d9-4396-8095-3c0632874132"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a01155d-bdb7-4e89-927e-f15a8101fb49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "31a9154f-b566-4d56-adad-33982e808001"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0cea6eeb-7605-4fd0-bb9b-7ffccee4ff80",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e37e8e22-d0f9-4597-92a5-b01e9478b625"
            }
          }
        ]
      },
      {
        "id": "6a5fa960-b7b2-487e-ae77-ac2a3f661b04",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f9aa2eb5-c628-40a7-95c2-41d8f38ee241",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5fcc7acb-efdc-4961-be5f-1fb8920394ab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "533af4ff-312b-494a-8a29-882876a412d4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214901ba-5ca0-4680-8298-549c1bd4310d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400e9e85-e723-40f1-aed2-a57243b92baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418f41a6-fab4-4930-9e09-d803bfd15f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cff3500d-b934-45b9-b285-3c99e8526cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaad57b2-6eb4-46fc-a4bc-e1d877332de0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb87e509-cb8c-42da-a9a9-ea34905d6bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e646cc09-3bbb-4393-a5cf-6890f89e3ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7513bc52-7f05-42c5-b3f0-7402ace3ebf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eecbcf3-fcb3-47f5-8db9-8b2aaa8f32d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7691244b-3e12-434a-abbe-52bf0ca1e151",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e129a6-b9e9-40de-a438-640d4a9a1266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febca758-5252-4339-8bbe-62cbf4437f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0140e2-39ad-4b36-bbe7-5a780f696716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83a77f61-8dda-45b6-85b8-e3a35f1608d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b50768-f8fe-4b89-b5bc-034ff8bfdedd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c85b47f-8c89-4c50-b22a-7cb6d05702ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb29197a-64b9-4a3a-867b-c4f8a90737f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e509a8-30a1-4d6f-845d-f516e9310208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97f52950-0497-4f76-ae50-daea9e757fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1538dfbd-c8b8-4fe9-99aa-98f407e4def8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037bbd9e-dd61-4d2e-a9e3-f6107d08495d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14b678d-8ceb-44d2-b869-5bf8a1f18b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc67ca9-4c2e-430b-8e0b-673cae25c951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2211ec-082a-4286-a9dd-625bbc3fc45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7955d1e9-74fe-4288-96a2-ca36917db094",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4011a3ac-d909-4c49-8ca9-b6b7a564648e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e9f7e3-3c37-4c41-b22b-5ada8b3ff838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c1ff9f-c232-47d5-aec1-b59e763cec2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41b2e6ec-ebc4-4a8b-bf8a-e602dc168486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc86c3d-9105-4e70-aa1c-107d075f3b9f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b77c3f-5362-4069-b262-a6deddd3662b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0bdebb-0deb-4fba-9982-3e0ec5a507e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef16034-7e26-4e36-a522-05d3e7de8d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bab378c6-4608-4208-b101-50c5ed799ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b36257c-de9c-4d4b-ad56-bb701141e091",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbaf6f2-14fd-40f6-a406-4553d6c42c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae24d0a-d2cf-458b-a17d-5115125410c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b05d61-2cb3-4a6e-b8ca-568ad12c996e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c88a9730-1c41-457d-85ac-c98ad706e0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0027034-a3ec-4953-8907-a2694af2875f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec5f12e-5317-482c-8e8f-bc2171a5af7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "491b307b-c4d1-4fbc-9127-5c4aca986e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abaa0aa4-fec4-4965-b3f2-ee446d7da22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a54deb42-2216-4ca8-8139-2d56d261ab4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22af1cb-ac15-4b16-9015-a80ed433776e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8610e5c4-39e6-4228-96aa-afe05c8211e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7166731-18a8-4b96-9791-8e2e4b477e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881e92dd-85bc-48d5-b625-94f9692046b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90af3ee6-f9d6-4be4-8104-98f4a1f14306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0ef95d-de86-42c2-9962-cbba5ad6afb1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d656f0-981b-4c64-8b90-b7d56cbcb4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65dc79f4-fd46-43bf-a4a1-6a2dbd2afef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02b4157-3319-4505-8490-88f2d7838c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0a98aa32-48ff-4243-bda4-b676a81828f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb1fc84-de7b-4afc-9c90-bb24ca49b24d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee89ecb-c9c1-4d7a-aa45-db3b1a425324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b58cd286-efe8-4796-84bb-719a283f7bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9743dd60-5d7a-4f5b-8203-ee706f57f52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b150b51b-b662-4a19-984a-652592af5d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d6f63d-bb8f-4265-9161-8957be45c66f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9ba015-805d-4527-8afb-2f04ba1ca308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04488c07-8bb9-42b0-99b1-af7febdd29fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e485e017-de2d-4285-b2c7-20e1f43cd676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c9f997a-7305-494e-a8fa-63869d0996fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8d01a4-099a-4cca-a3ac-d24a328c791e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94816f5f-5b16-44a7-ada1-8f41ecbf65a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f128a39d-4832-4c5c-b7d3-77a984034ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e454d941-0011-4569-98ab-4e2d09d16c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "47da98b1-17f1-4345-8498-32e931204f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a70bae-b620-4be3-82f7-e4e9d7284833",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aefcb20-ff76-4dbb-a2d3-e94ee1f62d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a32bfb6-bde6-4fa2-aa13-082e13c3a65a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba507762-4ba9-46f3-bc9e-176d9d4b425f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b43c6e3-4eba-4ab7-a921-e921efe5b2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d968d6cc-865b-4258-964c-8e3cdae9c7e9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e27998-d67f-4ef9-af3a-48950c546326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a827c2e-df40-4ae2-bd5c-48360f444368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcecee9-63bd-4952-9adb-e6ec19826e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2df31553-f3bf-419e-8683-bc6cf954d1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad6bc9b-2a4d-4a6e-88b3-61a2f8edeaf5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2419162-3392-465a-8b99-aba8ae545465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213cf7a1-3b7d-43c8-bd4f-de27267731af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22f1318-9eb7-4ff8-8345-4debfb37fc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "67da6c56-d122-41a2-b5b7-e62939a91f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5dc291-a20e-4e64-a560-259285483b81",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfaddc3-37d1-4cf5-bfaf-55e8bd3af37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71d60ce-2ff1-422b-9719-9a9e9ade4a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf92667-8a72-45c7-b74d-34b745a1df8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ced5008-3890-4eca-8719-2e5d261c228b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2417daf8-8080-40d8-b5b7-ab9ddb4112ba",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1d3941-a1a1-4651-9da4-3ce3bf52436f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d25c0d2-62af-4820-ab0f-696430b8235f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46471054-7129-49cf-9f70-4a6805474416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e26a267e-0ff6-477f-878f-6665d888c495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb0ddd2-5079-43f5-b1d9-9fb7585d8ddc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09072c79-c0a4-4545-b785-3e268a1975ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03760e45-443f-4939-9547-48cc0d64a674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221d1f1b-c3e5-4133-8848-e28418821b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46e57886-019e-4102-98a6-795ec71919a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d4483c-a120-41b3-a555-dabe0fead31d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e13ab9-c30c-4f0b-8fa9-5adb5949001c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be5ff6f-fbb7-47ab-9ae9-0648e5fcadac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28673bda-07c2-423e-b02e-96975c5881df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf017468-bc88-4c05-b80d-38db0f599225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76c88f1-1c84-4686-afa0-989d57b1e961",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cdb8a0-ef95-4894-a311-fca6cbd3054c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ad48c3-da1f-4c93-9cf6-71405e3b2ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c984a99-4be5-4c97-8c5b-d0b8bb8e4775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b044d39-71d2-4c61-bad0-913401a7cdf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a2511a-3542-416a-a2fb-65ed2a0138ba",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d6b3c8-d29f-4dc6-9e19-821414dd26f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4cfbdc-de91-48f2-a9ed-2ac443206182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b955ca-ea7f-42d8-b9a5-35b40468d564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c63e0d71-0396-4aec-a4ca-92ebb332797a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f07d671-2f5d-4a54-8ce7-1513cb9d7231",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d310cb32-8070-4b16-adaf-ce56af37e7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa56603d-4e65-4e88-a347-d30014b14ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3231be89-ef48-431e-88ca-15af99bbe7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1cfb6ce-41a9-484b-8cbe-473f7b227eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb38e032-2533-4850-a185-ad5e5c3fe5ef",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d80329-9916-4ad1-ae35-1ddac54e935e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c36066-04ef-4657-be42-b4b66a246dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9a67d6-0b3b-426d-8b15-7a0210c2f24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f6baed-a5c4-4ad7-af15-785a7363a798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d232083-071d-4222-b413-713452fae651",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96272d3-39a7-477f-b5d7-4315fce6240b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e70b4b35-1cd1-4d7e-85d0-d9051e60f876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd58cba4-b24c-4f3f-bef0-b44ad5774b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62c1f8ce-fff3-442b-885c-cbaddbf63834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b4a853-b301-48ba-8ea1-5eaea983ba8b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41406ac-73ef-46aa-91ae-f9fb6a34727d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3679db48-a014-44d8-bc54-5c299dd20896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e59f10-b1c0-46b2-8650-f1accea6fb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ed0ed9-b945-42e9-9ccf-ebb08479b63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd406064-aa12-49bc-850d-54e587ee870b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49127ba-62e2-4592-94d9-6dd1ce4f5d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8cefa6e-6b95-4634-8011-df01201b7996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464db08f-ce06-46da-aaaa-deb8d4dc7e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd0ac90-2f5d-4bf9-add6-8bc971362bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d544064-ef2e-4528-bf95-a474a5c39cd8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e7de16-4f58-4def-8b1a-7c1946e0e01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61fd0d0-e5fa-44b3-889f-1fa58cf6499d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1090fa7f-0680-4894-a27f-98e835f831e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e512587-76a8-4050-b0b8-c95fbab0d322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5fa2af-e0f0-4205-9d40-2b8194f90396",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a875c2ea-71e6-4a89-a618-863e22596b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381757e3-9659-426b-9f48-5f81530dab48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0293fb76-70db-434d-972b-ea184db8f211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4608222-8e79-4c64-aa93-daa24e2f6318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55e2f90-4f01-4895-9ade-c3315167c96d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d70908-d373-45be-839f-b15daf13e7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499bc94f-194a-4f89-96ae-eb7f0ff65ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfb63c3-c47a-4716-a293-30bd42935398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95d1f4a4-8b26-4ac7-ba36-32a978858863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904071fa-ef15-488e-bde5-514821e641ab",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b919201-42d3-4ffc-879e-c2dca71fde59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20982417-8692-4815-b3fa-d21c700327fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07671038-3085-4df2-a622-c59ffe4290a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beffbf52-9a27-42e8-857b-15dda5dae327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3227e6a1-fb5b-45c3-b510-efa028794651",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b124af5-c5f3-49dc-92a2-a614e8600b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0be183d-c181-4000-8645-a0c858313f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4871608-4383-4d30-8b65-4e1a8ca60f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10baab63-ca87-40be-a8e9-163a0112d42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39807cf-33e0-41d5-831f-3947197702e4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27741778-2f98-4c5f-a797-764d012e1e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709f5a3d-8050-49c3-bf8f-7c18154c38be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee0fb75-d1b2-4d5a-8b2e-5178ee1e6d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa81142a-8399-4646-bf15-852202b2a70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7a6f56-000b-458c-8a7f-74750bc3de54",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb9a7cc-1dac-42fe-b80b-390ffe554259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf687d6a-939f-46e6-8f8b-bba3f2cab034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dc7c29-6d8f-4552-8fa0-ea7e2903f50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01127c29-03ba-455c-8a74-b1c1221e27fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb75c453-fc8f-455c-ba5d-bcea005ad078",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96fcaf0-0510-4750-9f80-81a6df531407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647d3fa6-fad1-4154-8422-81cfe2ca7f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5a59d2-766e-4de8-9ba6-0966ae1c85d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6772f29e-4a62-453b-ad0e-8c80c4da9775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ec63a2-14c4-4d03-97dd-2611dff6f411",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608a22f9-2fbb-4478-8cd6-e27bfd4a0092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e5a402-1a39-44df-8c3a-e268b45ec745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63136d40-0ac6-4bd3-9ac2-008107de73fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08e55156-8cdd-42cc-8846-b3e7d60782ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34d714b3-cc28-4ad3-b39e-fbc489161b9a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6747e20a-50a2-4870-9855-febe4c074823",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e6b89a-4099-4e4e-9e1f-fde726ddc060",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6bbdc6ba-a973-4b8b-8f95-0d2ec367c35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66cd0f6-f8df-47bf-9dee-b47798954262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0c20e99-4ee8-46f6-92b0-4ec5ccc5f7d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98c02075-bfe3-47cb-bbf3-78188e8ba41b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f462a90-8f6e-4987-a05c-b73f533b467c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5b0e515-674c-49ed-9cc0-12fa110659e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1efb0049-0471-4987-8b87-c14aac873d34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f69bcd68-2b5e-4b51-bc77-ffc5c93c57ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "015c068e-8da5-4f2f-b83e-8a6de1d8adf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a82e164-8521-46e4-a62d-50d44e3af90c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04bb581c-0873-4e65-805f-3600d3e16ce2"
            }
          }
        ]
      },
      {
        "id": "6513534a-920e-4a7e-b03e-96d06df0ecb9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "024f0c16-5795-4c02-bfac-6a1eac301436",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51130a51-fba3-443e-ae07-eb3039677f94",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4b7187cb-0821-4990-a0ed-4599bcb18de8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3991ba-dd2a-442a-a355-39f2733ae002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397dd428-42dc-4b95-8c36-26252ee71213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae243018-e18a-4629-a154-21772f9532ab",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad440f96-f4d9-4b79-894b-a2a16533577b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6fbbc1-b21f-44df-bb4e-983554b3eb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf04db9-a4d7-48e7-88f0-cec750874c61",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc2f746-26a8-44b0-8098-0e3b9ed4b915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d386230-7047-4157-a5b8-207edd0a4087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f816715-d53c-4627-ba2b-550cba4cc154",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf87a20-24d8-4946-b63e-d3177e8c5b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be3eaaa4-2241-4688-889e-e2e473f43db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3780b054-f290-4ff2-b1a2-8ea279de7dcb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6897c760-a2db-40b6-bf5e-034ae5221d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb563b1-888c-42f5-9e69-e0fd8c4cd585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d64048-7269-453d-9127-5bf39632e320",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860e0718-a883-4979-9d5b-f0eb60a6badc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24cf5b42-df62-49fa-980c-77939dc073ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfd8d1e-429d-4444-b6f3-a6bfaad1f0c2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5df72b-f7db-4dd0-b3e9-e67fec051789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91121f25-8265-4c6a-8b95-1831b4a157e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4d4d7a-175c-4c2f-a3dd-e314aa20213b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12e3fb9-9506-4e97-8a85-a714c6e8dd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0071cd4f-8405-40fc-9c1a-ab18793fb025",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d69954b-a48f-4fe4-8d23-43d11cc31ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10289777-95c3-4385-bccb-157132795810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aee1725-730a-4122-a2ad-4d10e64c3422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c50c761-3300-4b7c-8df6-8f4495256597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeec178c-5deb-4d22-95cf-980b0af97a0b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b0ea66-5aed-419b-b690-01822aa45a6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "803b7fa2-215c-4ecd-94ba-14797800cc0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "415345ca-0fec-442d-90e4-9b2038ec0d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1744aa1-6b71-42bf-a24b-7e0778992a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd162ad4-3b5e-4568-b59c-9cebbdb4beda",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5090442d-b468-411f-baea-9a60d0ed8e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55bcfe0e-cf94-461e-9022-274984da8a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a3326e-0128-46b0-97c0-be63d9faff6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346279b6-6ed0-47df-88c5-2f2b55d0cc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd73796-07b3-49b1-912f-6305e1ca78cf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4cf141-6997-4042-8c11-214cef41316d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178c4485-a34c-4842-ad38-f39d9d91bfd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f4e6dd-7341-4020-b22c-f303c55a658f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee818e0-7613-4ccd-8316-8efa95b60339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860ca3fb-e121-4317-af82-601f9206fade",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b70d76-4f21-480d-85dc-a2829d992b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11255cd-4d8c-4ea9-8c6f-55871ffc7000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452b8ed2-8279-486f-8175-5e46de48c7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8df87d-9271-41bf-a113-b2a61740070d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b4f892-9a26-44ab-9352-e7888e50bed7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3918da29-6ca3-4081-aa96-f581da20a60c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f924af1-2ddf-4fe7-93ba-ad5d92d7978d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3ef103-dc6a-4080-83b6-850aa247dc57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae532427-9070-4d5c-a1d2-f4bca655f465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96449f1-a6dd-413b-a5e2-73e77f4c84f4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd15d49c-3c34-4a42-b417-7eeb379a814c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4dca0e2-f8ff-4e76-bc29-58691e987c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02b987f-916a-4f34-a472-7a07e9427ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6dc489-efb6-40a3-9d50-d8100005ab73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5767e9a-2433-454d-b5f4-456d613f65d9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff571be-c663-4841-a486-83b382626938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e0f8935-5139-4757-90e3-6cdebc84a100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725a302c-af47-4120-a817-1683e21b7f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0e9b55-15a1-4c59-a062-d4dd2009d8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527d42d8-8c99-4faa-98f8-be555bfd8d24",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a56b27-7003-4a21-bdcc-320309995ce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ac5ba51-f87f-472f-9452-941803bcdbbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263eda96-693d-4b4f-bfe9-8b1df6b1176e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45457ec0-2003-4e10-82fa-d8e0afde9af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3d2286-7d07-4c45-96a8-b8db058c14d4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbbbadf-d8e1-41ca-8611-cbc1871dff3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062a8875-b21b-479f-8683-4a7086773bc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def5c270-08d8-43ff-934f-1ccd83b2c59d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49976582-1376-4069-bc27-ba7dd576d22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98df9794-3f96-4a50-bac3-53e5fe6d6145",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1b5c07-98a9-4e62-bc75-39681e31245f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a1a12a-e239-48b6-87a3-a2fbe7b229ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffd14b6-aad9-4a96-bb94-131635144ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d80a52-0f67-4a06-8861-d0820959834f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24b28a0-c1b1-496c-a3de-1c25f1c1a0a0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f81894-969e-4515-9f48-bc580012f79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a2fae6-8fdd-44ad-aa45-79eb65ea0754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db92820a-57ce-4b61-804e-f4edf8030b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849b0cad-0d32-42a5-a7c2-275cd9fbaf61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57e450a-5f53-4484-abf8-8e4b44e504e9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f270dc-a1ec-49f6-beaf-89df23d3721d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4444d1c-0b18-40b0-9d69-2b25bd40df92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4cdff2-5354-4d9c-96e7-d8d9f71cfd74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc35bb46-f79d-475f-9b05-77e4348261b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b582563-1efa-4f15-83ae-bb00253d41f7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e87383-0734-476c-92eb-8108e6e6e181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e43533f-f5ba-4ba5-8af3-be0b7f9b0b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc49cf71-ce27-4642-98f7-4d66860e0b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce99db44-93c7-4608-ad7a-a9e7e3f411b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4619858-7726-444a-a5cb-f27677fe77a8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12568eb8-6e72-4aab-8fa3-5924b5e8483c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6d546f-ef64-4ef5-a572-85daa752a0a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1734ba-1b53-4416-8eec-cac69d7076e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2424c023-ea8b-41e7-a252-527eb622f0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315e5e3a-7cc2-41ec-a190-0a914843b99f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b59846-e194-472c-afd4-a69c180743f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789fb24e-43db-4070-ab64-e534f19082be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15a0d38-ffd8-4a18-b6be-75bcc3b0e0ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb256dfc-22f4-4d32-bff7-4e271e067d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeba3e89-4bf9-4fba-b617-77bd86f612c4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307918be-6c7d-4f30-a03a-a3894f160c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "020ddd94-52e9-48fe-ba81-e91adb2db3e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "108de201-0fac-413d-9e94-c6c2c682e404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b3fb3e-42f9-425c-8035-c67040976a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d671e45a-3019-43d7-841e-fef4cd66908d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c655a0-0230-494c-893c-7280d45c66e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eb52bbc-7a18-4750-ba47-3d10d0a40889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc148427-dcf4-46eb-967f-edeb52bb802e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db6ac62-c875-44f4-acce-452eec7c0619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1dd8f1-1366-4f3b-b7fe-bf9e8ef6391b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b31f05a-c12d-463d-8e04-aa42a8e67548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef883d44-d389-424d-91e8-287cf26462a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52e10d6-88b9-4836-b1eb-22509b78fbc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0f40e0-e146-4dc5-a62c-c94c5951c296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e0f721-c062-4dd6-941c-4cc85e8e1d9c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c98e0e-b29d-491b-9743-328c2ad4b75b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "300718da-9675-43b4-b4d9-1e2a81f0a8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f62f3d5-57af-4518-a3f8-7a7645829ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d929ae-0718-419e-a011-b9e8f5358551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577ddeb0-14d0-48c7-b52d-9d174e68185b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2af098f-e1fe-411f-aea3-56c8b7924e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f5c617-b271-44de-a7ca-745a0928ad2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778d989a-c043-4ed4-94a9-bb6d21bcc0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f502a5c3-6cb2-4346-9ab1-446d35418206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e01f618-2fc5-4f38-881a-5f5401aed442",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcbe0f5-2a46-45c8-be6d-869a92be8db9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59cb91b4-6f2b-48a2-a6b1-a698839629c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61e2159-4a5f-4dee-a3e2-47018d8424f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0d2897-1b59-47f2-9773-45bed7888fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b99872b-be97-4afd-97b8-30784e7b19cf",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd88888a-a564-4b38-a0dd-9935142f5523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0b1630c-1cc0-4401-a0fd-736b8324e9ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa5e486-5154-49e8-a385-1f5383660672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10274bff-820f-4925-a1a8-3dd14631e646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c0eb24-3024-4359-b428-a4980c8c8269",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504121ef-afa0-4954-8429-3c2a9286f9d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed9ee7ae-f766-4707-a868-c3e5567c483e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50473a5-b6ac-4744-9555-80806199e97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1955e45-98d7-42e3-9bea-b4bbdfdf4f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114ed647-e871-4134-9c6d-488932b2611e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bb44d5-3553-411c-88b5-d0fc82daa0a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8640cdc-0c37-4935-a7a8-773dfabc7c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec95492e-3051-4288-8d42-be80bc2d5993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b5676b-9c11-4fb8-9f92-5e1a2e6749b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89840058-9365-4984-a568-3fdb20322836",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb894a49-6fb7-4326-97a4-71c8f35c16c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93119be5-acf8-44e0-90ec-774e6b460f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef55f9c5-aef6-46d2-bfc9-0cef140358db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2124c315-89b4-4490-b8bf-e7884ea40045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f629e9be-0996-4879-bbef-54cc5b4cd460",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b134dd-64eb-42c2-b780-4e678489b9de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed6af52-a55b-44be-9ada-80781470e1ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efa31dc-704a-4c42-9478-967a95512f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66ae434-3258-4423-a41a-85c6e9fb46c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ea03a9-d48a-4904-818e-462dcc97c478",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7749509e-2eee-4623-8c6c-6c291bb62ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a86b88f-f46e-445d-bed4-380a156c2bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d157a38c-1435-4f00-86ce-52aa89438b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cfb4f2-568a-4bd9-afce-303d8026185b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc25e02-0a1a-4490-9807-8f56a23fda22",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43908cae-93bd-4705-8229-eb08e299f083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e06974-7ffd-4f55-9764-ee7d1fb4e30f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7eea2d3-3e3a-416f-bdd1-25d93ff4030e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0375790c-4853-42b4-bc7d-03351b7c67e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e348250e-981b-4649-b27f-4a7ce79beed4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2b0977-9bbd-4864-8642-ff71b5bfb05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdb7bd7-9542-4acb-8d06-82de3da67c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3cc3fd-a1c6-44f9-9ab6-656f0100360a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1ec20f-00e6-4b55-aeeb-80b31406c095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde827ba-c1d5-40f7-a0b7-44c209608ddc",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773bf99d-edc2-4a3f-8461-245557b38279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d9d4b2-2d9c-494a-8832-0ce059aaeecc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac69fe43-7af8-4908-afdb-0263d3368058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0bc8613-9133-4e15-a368-7daf7f31276f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0e6872-c919-4e33-a7a5-b7aaae57df26",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2346ed8d-c410-44e5-9e15-039a632edc44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28848fb4-3f8e-4296-beb6-2f38941e08d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6ed638-9390-465e-afd4-1b0a3c53927b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96867c36-160b-49ca-9974-8f1f88d0beac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed78fd2d-3424-4b75-a0e7-0b782b6b5f04",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749b7a85-a25e-4a0a-b472-b8c01d19901e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216c1a1c-7bc5-4abc-a2ab-085f3fd04998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01639fef-7364-4229-ac31-d59d569a0e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7552ad-8ed3-4376-a097-eca5a5d86fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d3427e-3856-491a-b166-6040ae5b35c1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8244f9-15bc-4638-a9be-db0231517133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cecce19-0e51-4a73-a8e1-ad3472c0557e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc0e903-327e-4412-a076-f6d3028ce648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2599bb0-2ed4-4562-b288-32de341dbd2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b4f0b1-e200-40e2-a41b-8ec228fb700a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df45da7-0b8c-472f-b7ad-8f731e144174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f8612b-77f0-42a8-9237-e717aad5152f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f9183d-5d78-4a27-abf7-2adb3adc91a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a076077-4908-4770-a437-d832819034f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cad75d-ecad-44b3-b1cf-f2492aef8229",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24beea09-429c-403c-ae13-d7099ba8ffc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "971ca425-8b79-499d-bb62-c0c55925b5f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d15533-811b-4fb5-b5db-5459aaf547bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0013758-6076-4f21-9a21-df723873135f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bc662b-41eb-44e7-9fa6-0c35bdc12bdf",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93ab463-fbea-4e6f-9911-44211a5aa68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d32222-9715-4942-8ea7-f69b8955498c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe6ad8a-332d-44c9-b595-430d2fd01812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50afcd64-266a-4aca-af22-66249a01f0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d6a081-8962-4aef-938d-6b105d102cdc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e9465e-b323-4430-81dd-20e862f4d639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f84c134-99db-4a7a-a1bd-1d72ebf4c24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880f35b5-a6fb-4c10-a9fb-025ebc6c10b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7042a91-5895-4d85-a4ed-e81ae65c03f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8bf3ac-8461-40ae-9033-7d645cd9dc49",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f572a748-4036-4ace-aecd-5fb6c478bc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c24777e-f46a-4910-965e-d0633cfb08d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730d581c-65eb-4e60-845d-af85f7c09393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1419ab-f20d-4d84-b6ec-b60b1f0532f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0663cb-8edf-405b-a6b5-060083321d61",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64693e7-31f4-4b71-99dc-854abc027b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717f9041-05c8-4b69-a10d-2a57d9af4db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3462f2a-41d2-43f1-850c-8848ddfbd92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad43f790-10f1-409b-8fef-991e14c3c3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abcd5ff-1c4a-4a58-bd10-d08f636de18e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723d4d7e-a707-4261-a1ae-9a514f407b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1becc83d-33a1-47db-a1f0-23f2495de712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f355970f-712b-4614-912e-725aab8d01dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e7867b-3916-47e3-a653-4f8e5349fd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c0260c-6750-4876-8e7b-ab4ccb55c545",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64281e12-6df0-4e97-96e1-290ca740d426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04ba858-07ba-4a8c-b5c9-c4c4dfcf4af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e369780d-32aa-4fcd-b509-bf1265df09cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879c80f2-5e22-4a45-af19-ab2241b47b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8051d454-51f6-4266-a0d2-864cf47b689a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd6ee75-09e5-45cc-897c-6e5991c5e9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da1cb28-6533-40f0-9c33-ef750247d26e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a84b4a7-38f7-493f-8256-ed04beb9b58e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9129169d-326f-4246-8d2b-152f0634118e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50f5dda-0113-4be1-8531-f707b842003b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f84742-c5dc-4d86-8a6d-26382507568b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461944cd-c760-447e-ba12-e19b7ecb87ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fffdbc-6344-4691-8f19-ebd95afe7da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da28c7a4-1b2e-4766-94f9-c29cca1c959e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f90ac49-52f5-455c-8c66-cd4a3e1fe69c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fc105a-0b31-4739-9829-c6aab6357dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edb3079-e6ab-467b-b176-6f05304b835e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc89e75-26be-4008-9d63-ae3eacb8003e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44850f4-e427-4ea6-a1a3-64debdedf78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6dc401-7556-48c7-a329-a11b19e4ed18",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece90282-b58c-41d7-8d1a-4eccd36656fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6156c9f9-3271-4c02-b95f-478524634b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e011c52b-d0fd-43cd-a84a-21b224f44263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ad5ece-6d30-4f72-89e8-8930a1c154fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1035f5-f964-4dfc-82f8-d5418d6db959",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9a54f9-147a-420c-8a03-6d54dc489877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caedee6a-6228-4c67-8bbd-201627dcdada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "726ffd98-f87a-43af-b66d-49ea7da74acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5993b930-fa94-4d04-9b7e-66b3f3a2167e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb60af5d-f7b3-4a02-95c0-4ea1c11173dc",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6aec08a-05f8-40f9-9b31-bf529e0583ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9792486-39e1-4ae0-851a-de543de8a53f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca34cdb8-f73f-4132-9ea6-ef85b9fb2627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc787ae-ab69-40ee-aa36-986d81692ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb13d43-4025-4e6c-925f-dfd82c39825b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c58bc7-9b17-44bf-bc40-763366515798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084c7336-c0d8-4f37-af5a-4efa774914d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f6307b-f7f5-4fa3-8d6b-86fa841c2c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ca9f20-f117-494e-aac7-3e7a3940c063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575b5867-2005-4fc5-808c-cd14d4785067",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1e6b6f-07fe-46fd-8b7f-2c22835d0d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eaa535f-febe-4a2b-bf4f-65937449793f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc698f9-ab4d-46b4-b59e-f757f1d660ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9040e47a-1d20-4330-a724-d51330d93025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419d0615-a2e6-40e0-8452-c7f5f3e64e0c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4053531f-6d3a-40d8-a9e1-9cfdb00b2789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c653427-73fa-44ed-b644-a89091e3a1eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeab3c0b-d31e-4b95-a34e-f1fe0b107dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6793fd-b9c2-473e-8fe8-da3eb7b52fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b89dee-a63e-4303-9725-464218caccbc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365cdee6-a819-4f67-9b9d-63b45ebb1901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf2d5a9-38b5-4ec5-a8f8-aeb259f8df02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f30f81-e7e2-49fa-ba82-241f0c013444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c83cb92-cfe7-4958-87fe-3cb1b06a814e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3c0d73-916d-4a29-8701-5086493da068",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96fab68-47d7-4620-ab06-5def5df3e0a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55fb6fc-ec50-4a95-b336-601023011d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e659c1-d3c3-41f5-9e39-6d41b8a1bf2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296367d8-1764-41b4-bbcc-677ebfe8e723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2c4b0e-49d4-41c1-bf87-a20772395c01",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbd519b-d648-4b09-8bd9-7ccade0d6fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b16a1a-1194-42a4-b369-5b1fe1484488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79386878-1a79-4168-a716-a18ed80ffe85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbecee91-1139-408f-ba53-4db5ea6885c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30b50bc-dd79-43f9-88dc-c5951ed5069d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e1eb02-3974-4af2-8bc3-f52189bd675e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab2358a-f99f-4fd8-8105-f73c759b5353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c68faf-acf5-47fb-bab8-692756f8ca4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5965a5a-dc68-49f4-8c3f-ca5515bec292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f30cdb4-cbff-4f7b-96d5-280da55e18e2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6975f5e5-1c1a-48ab-9197-475f4a40f3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9980b561-8c94-4e6d-bd0e-c38fd4bfe265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d111f63-4df5-40c8-88a4-36140fc77cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecac5af-b986-4221-89cd-7a127830c1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a57dde-0eca-4d1d-82cf-27f287233c9b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377deaaf-e77c-40e3-898a-edd706ee3489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb7c11c5-854b-45af-929e-72331e60beb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0eafb5-16d7-4aab-8d2b-6a22f8148fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811a7b44-2b6e-4533-b062-e3936d547b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4ebf3c-6088-499f-95c4-5f8c1e65d5fa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecea4d9-2562-4ff3-b569-3cff10d9e3c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b199a86-2aee-483f-9455-34dce551b9ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbbaecd-0713-4304-a1ab-3806cfe0f56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24eddfd-8d24-43a3-93e3-4dead515db82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17633fcd-d1c8-4b10-8d7e-b9b9b5801c72",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d997ae-9ad8-4e6a-92ac-30880bf201a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "667262ef-b47b-4b1c-8956-9487b1b9b1e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f34828-4d7d-4fa7-8999-9ce796ab7c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4486fe69-12aa-488d-bad5-1ee78d5eb793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41421c6-bfdd-4bb5-be2a-891266fd7b2a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d787793-d221-4ee1-8eb0-d37bde35465c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b796cd5b-cc0b-45ae-8640-f4a57d57f8f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbe8fe8-5804-4d93-a15c-21cec50cd461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f42059-dadb-4d8d-848f-86c0fb9dde73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93678d8f-d90f-4bac-afa8-f012d6b08bd6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7e2c68-b3d3-49d9-a36b-31c23fbdb88d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d7d9a19-43e9-43f6-ac69-3d0f2e6b13bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abf2d3a-2a75-4146-9fec-03320cae6485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ead986-acbc-4c4b-9a68-8f76a15cbb31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c499fd-b29f-4fa1-97ab-d8f38c81fa8f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9daa9c-8f98-47a6-9d19-a7c484b5ca21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b02d1e0-6ff7-400f-8da6-628502b54474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc09d88-8162-4678-ab8a-7d404a1758ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa8f5b1-def6-4e75-adf3-9edef3908b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156f754a-c416-421a-bf96-10f613a58cdb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a41fbdb-477d-446d-a4f1-e5fbf5d66c13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d858a4f-c613-40ae-9cfe-991b3d52a2ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d15662a-eed7-4c4d-b564-e16de9916d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f05eec8-f8a3-4ba3-8a7c-51c14d6137e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139688d1-7207-46d8-89b4-b58214f7980f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341b5f5b-6de6-43e2-a13e-884d18256518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec2bd3f0-9603-4201-9ffd-5ce85ffdab06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b22170-55e5-41e2-a060-05ba0619ae5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89839ac8-43db-4526-a39f-5ebf32c8f9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cbc01e-9153-45aa-b7ee-200170d15f2d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a9ad76-4f8b-4d16-991f-3e00fd26a649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b493029-1523-419d-b9e2-54224adc192e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b9f0bb-94c9-42b2-bbd2-dd7a0cae0fe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e726e7c1-b68b-440d-9231-a698936f3c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad570434-af7a-41da-945a-ea5fb4b865f1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcc8639-53d5-491e-8581-4d775758343b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42924a12-cf86-4db3-b542-cef3782589cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2900789f-5c72-4798-8670-834f7c06e2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e13868-b6e2-474d-9bd1-64ebdde1df7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3832c3-b822-47ad-819c-3e59df4193e9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26d110f-d2ea-4d60-8016-86d2e962f63c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "785ec58a-d535-4ff7-87fb-e59dd213a864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcafd19b-561f-4b83-a4b0-efa07588495b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4042e9-8321-4f48-b384-89783377cf01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1be9d67-764e-4b24-abeb-1e717079cf41",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc050ba-211c-44da-af2e-106ee5ee1ac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19772478-b7b0-4b5f-9b33-6404a99308ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70cce6a-14db-4191-bd8b-e0daa87743e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9018b1-0bfc-4ed2-b813-6f1761e25c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a634fa9-0e1a-419b-96e2-fc810e2123b9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3afe5a-4175-4dd1-866c-6dc51f2211a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "108d7809-bc33-465e-943a-27f5607a6341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e5e1c2-8540-4474-ba78-d69c5f6cfc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf55ba6d-bd24-4eda-ae5d-16829df6a535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a661c88-7f8b-46a9-b287-5f8bd8b0f048",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3948cace-ea31-4a47-b48f-e986d34f0131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df30f7ca-db6d-457d-8dd1-aeb2298ff6ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fccb6f2-b307-46af-8dbb-730b861311bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a87e57-fb84-41c3-8840-ca19479bfa3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d41b8d3-18b3-4e0f-aed9-d66c1d11ec72",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d6cbec-b0fa-45e7-b3f2-117b21fb84ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf2341f3-22b6-4323-8e9c-31a2b7adfe2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046b5a61-7fce-4547-bf89-c04adf2bee9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9669c57-923f-4a08-aa23-bba7c1210763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60513bc8-afe1-48b6-a1b0-7b7cf14c527b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb76814-2cdb-42f0-af74-345593431600",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88f40bf1-2bfa-4abe-a10e-d0aaaac6c381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52b6085-8678-474e-af19-177add1df97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe5a14d-7f9b-4ec9-b65a-4ebc23a97df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0342de95-d2d9-41d9-a8ce-555b1307d94e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87543ea0-419d-4ad0-a664-ac70d60adda1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c154e95e-df3d-4e42-9e0f-3ce3206605be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2658e1-3fb3-445f-a5ba-0b427b22acf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de898b7-94b2-45f9-8e62-767ae16efffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe253dbf-9a1d-4c58-8d31-50091c195029",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db479a5b-c043-4d4d-af66-da3cd7a9a25d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7955760c-7b79-4b05-a669-17a418a73a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2eb6da-eeb8-4b8f-b4fa-700c3da59916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577b2579-97b2-428b-a81f-87b32b2c8783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fe8ba4-6a30-45d5-8d80-5c75f751a8df",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f6d279-c125-4ce8-b39f-f5c226b87fa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3288dc6a-e273-4c58-ab9d-76c7c10d8575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d67655-b0b6-4a30-a2c6-c505147eb88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a516b25c-7cd7-441a-beb8-ed47fe8bc3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b004a622-3bc7-49e9-bd45-4278f433edb0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f7923a-da8e-4d2e-96ca-99807f606a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "731c1775-734a-431c-84bd-9b122831ff06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac1446a-438e-4165-a00d-b088e17b175e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e99c5d-cccf-4fb1-9ea5-baa4b62ac41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915fae62-d5a2-413e-b1f9-8ed1fe63587e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f88bf88-d75f-4905-a6ca-b896e87cba93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72babde6-5a1c-456f-8696-930512470469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cbdbcd-134e-4057-9d7c-a6b9b1608119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8596a016-4521-46f1-b342-a71eb7c6e488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd28c252-95b2-4e8f-aa22-23b50785da25",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298fc936-d864-4e1f-9425-d757357cf70e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aa1d3ff-e530-438c-8b30-ccdf2f5af5ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df51a1d2-b67e-40d4-8113-4f4053f8fe2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19026be-31d7-41e0-bcd4-84b0f570b4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5695be7-f182-4d16-9648-b1a90b513127",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b2d7c2-6834-407a-a0f7-47d88376bf36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d629eb5b-9462-460b-8d6b-dfa9d9af6ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac385814-e442-4eab-842e-4737e03b9e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3b7e66-58f5-4fcf-936f-7e0f60c4430f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16adfab6-880a-4227-94d8-767bdc390c0d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8621a0b8-a928-4764-8c90-e740d089351b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77e438ec-1e52-44b5-a490-89fd1e46a675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "664d2c4e-f221-4379-b680-cd1e1c59d79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "debc942b-7e26-4256-83d5-577cf20e0371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16de8df9-4fa3-46a4-8738-4ab4370c6ebf",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8ca42f-125a-42d4-a1ff-7d011cec7c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fdea176-a9ea-4aba-8af8-b9f5a55672a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de735ef3-8cfc-4888-b3a6-93b86052fab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1beb8bf5-9562-4a98-8eac-8e2df6b9ff61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a65022e-8019-4efc-ba07-c482c6e01488",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89eca4a0-8ef5-46f0-9560-b25630e8e00e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a764afb-7fb3-4d3b-9c03-0208416329e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e957a601-24a0-4bfc-939a-baf60df00a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ea8eed-c2f1-43b9-8bb3-8a57c128cb00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355a1c46-aab7-46b7-82f9-c5457e773f4d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e33fd8-24a3-4d3a-9c0c-07602809f36f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d24c8d3d-30ec-477d-9187-4fdfe48ef926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52acc38c-e012-435c-83d4-09ae261f2013",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e92d503-57a3-45f8-a9be-48835356b2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d7d47c-73ce-4087-b5e9-09cf95c62ef6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defff110-a621-4b38-b407-0bc2b2b21e78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2db8f8ad-ccef-403f-81c2-993543e9afe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef796013-e032-4e7a-8697-17cc9c23ea63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43cfbc5a-0a40-46ad-b61a-41d492313bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44dd3f83-acff-4bd2-a10c-97d862ffc0bc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df92c7d9-9f6e-4872-9299-3d4a6e396526",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2196f204-d5a1-4dcf-9fc5-d0e7b1745912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dacbd1-07d8-41aa-822d-637d299d8f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b916d1-9fe3-4c54-a568-eb6abbd720b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05de191-b80c-44f6-8f69-de2423a448cd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2e1209-b472-4559-91c4-72257ba40e61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e858f4-8c9c-4641-a8fe-cdd300ab0e14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548a7e8f-4dc5-4f74-a740-b780f9904161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551b792e-d2bf-4042-bf11-8a37d5811090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b6c05d-03ac-4ce2-a9f7-b7c7b8fb6027",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac9eee4-803f-45d8-b3b2-06a9fe418f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d63b2fe6-c863-4a56-b757-b8a7b088ad1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dcc95a1-140e-41ad-89a9-ffd160abe212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f20ecf-48e9-42e4-8cdb-0961e43f2ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b80055-b51c-47a5-8d4d-fce7aebd1ea6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1528314-032e-41b7-b119-4353e1a9b267",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccaea004-4ce4-4d53-9483-b8f462f91d8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712de89c-9f33-4d7d-a684-0b9b1607e35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dacc26c-216b-41f9-afdb-0eb6f5a845b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996c94a7-8510-424e-9f4e-970d4230e0f3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f79e1d2-b04e-478d-b752-c3e1e76c5df6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95c8ceb5-7ea6-4370-80be-df1a5d586d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a04b39-9d55-44be-801a-13abfd66aaa3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8631b007-e9c9-4859-98db-8322d92cb0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ab87f5-8880-4d40-b838-8a321cb7db66",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d7208a-f7e9-46ec-bfca-685ae5773da5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5925b22d-eeb2-4fc9-9e04-2fc2b5f5ba1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdc0980-4828-4594-9312-ca6e17a4be2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ffbc130-ab41-4096-a8f1-4c54bcc041c2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcd99425-0e7b-4708-ab01-92b38537f060",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb1a832b-f850-422a-90e9-6a50c6e9494a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60c59e01-f53f-4be6-98bd-65687f7d72b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00c2ddf6-132c-496d-8bec-4d97bd9f5ed9"
                    }
                  }
                ]
              },
              {
                "id": "79e2d265-19ca-442e-a42b-392017edb508",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8b18870-3dde-4de4-b607-fb223e0d9f43",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870e8ee0-e2a5-428b-843d-620f08b10a70",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b6a551a2-153d-402b-9576-d2f6f90d7824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdafb15-7829-4aa8-8e8c-a437f2f70e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da2e1635-31bf-4817-b5cc-c2baf68737c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa22d74f-115f-41d4-8615-a3e59831de50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91a73932-05cb-4bde-99a6-966257a64680"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c4a464f-56e5-4c68-b740-f076d78bd1e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2dd40a70-5b2b-462c-905f-58ac8e230214"
                    }
                  }
                ]
              },
              {
                "id": "c3d31f42-af9f-4735-ade7-2868520f6dd1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "49b88b73-9777-4b61-a688-bb3df9b9896d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad0d7bd-cc04-4efc-bf76-87ff55464a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "af951287-ac64-432e-a1f2-0175b77ae4a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4930202-9efc-4fef-84bc-27b9b6ec35b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42aeb9ab-a761-41b8-957c-da0333a8b701"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "20239076-875d-4c94-89c0-e5d67d4b92b8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d475e2be-c7ea-49e8-baf3-f83234253888",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a9061a4-b85a-4f6e-9206-44a73b09bb59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4f51a1ef-d010-4ac6-bb55-82406f36de63"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84807f7e-6419-4643-af06-941ddb326d52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c9713eb-aacf-4643-a8d7-43d6f4104a68"
                    }
                  }
                ]
              },
              {
                "id": "c35311da-5221-4205-9182-664d4bb8075c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ab38e7a-1909-4af0-9072-b0195c0add52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "69fafb22-88c3-4f15-93d2-b0dc8b80fa39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43d8140f-8089-49cc-91db-483b19b18f64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "872f18c2-430e-4618-86d6-c7829bbec6e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc8091b7-7f8a-4c27-925a-71f43724fb4e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "11a5c792-53c5-4fb9-af0f-2999d4e66058"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e08afc68-465e-4bef-8886-1ce7624bdb3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "78125620-65da-45bc-b858-e8810c12ec5a"
            }
          }
        ]
      },
      {
        "id": "4cb283b9-482a-4d28-9fc4-01a75a207544",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2dd29941-f2f7-41f1-890f-a096aaccf318",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06dc7e2a-db87-4697-be1a-88e189560cb2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75247b60-30fd-454b-93b1-4c30ca2b79ff",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25eb5c9b-84fc-4089-a671-d6a553e19eae",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9d51a4c0-eed9-4615-b331-4b4f789928d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5390af2c-ebc6-4319-b25a-2c92542f647b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3189fd35-f0e0-4bb1-9169-5db2f5f4073a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55445e5a-d830-4899-bdbc-6d1831787389",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "beda60db-2417-4d78-afc2-eee6606252a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "caf2b33a-b74e-426f-a304-4e79ad3c4048",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d3f69e2-7aea-4874-bccd-0ed8ee6f45b4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97162472-a581-43c3-94dc-22c9d131695b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ad83ebc3-8e04-4dce-b4bc-e7af69eb244b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bef84833-e077-4014-91c6-01174c60d4ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e8ed444-e7e7-4e30-8525-ab80b19b1515"
            }
          }
        ]
      },
      {
        "id": "1ee4b734-df96-4dfc-be4e-7d197f5f4812",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "53c6bcc5-1b26-4323-82b4-3cd2bb50bf60",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ec43369-f6ca-4b07-8edc-bfe8c9a73b7a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4aec1549-8110-41bc-a4b2-f40e600c6ff9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e471946-0c8d-4b13-b5b7-f386707442e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28b97380-2f7a-4fe4-8581-a29af2743a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cadcd9-fcdc-4dc0-919c-a1dba49addce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4aec268-8d99-4ff2-81e1-fd27a7605f85"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b61b4e6-b648-47df-b772-7211b5e09d3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "015eb162-c75f-49df-b27d-8466ccefd9ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47964a72-be26-4f45-928f-131276d1b60e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ebc2e60-75ee-4fae-9722-283911ff2439"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c7db2a3-d74d-4f85-a265-b838ed87d958",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9d0c1e4-6288-4e70-b0c7-75a4bb615a19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc7bbefd-df71-45b9-adcb-113ca70f35cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80e9aff4-0942-4f75-8ee9-1c1e3234b3db"
            }
          }
        ]
      },
      {
        "id": "89bdd586-563c-48f1-8ec6-2a7e64a5d9d6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9002b2ab-e027-4c07-8cd1-f8ee6f21aa79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4ac892b-0b0d-4824-97a2-52f2778d2337",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11e3facc-a99b-4ebe-a22c-cedceef10d2d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68bdaca-ba6d-4e4f-9c89-b3bba8ec787f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41f8aa2c-4480-402f-8e26-7b2d428ddd0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fb7908-b20a-4421-b8fa-b7486e073fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f712db9-5329-4811-b3f6-70524947f53c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecb515dd-43cb-4d6b-8ff0-b847fc93b2e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7148a67f-7ed7-48e3-8aec-f648b341e0dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81b161de-b0d8-4e00-b461-1a50a371acf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5016a28d-4b7c-4ac3-84e6-c8fcad284769"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38a90f10-8619-4ed1-a3dc-aa6d8afe814e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "24b84e46-38d6-45e1-93a6-98f855d4ae94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15c7f20e-744f-4869-a048-36c9e1b8f600",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b30ca749-850d-4b79-ae54-eb25a3eb2dfa"
            }
          }
        ]
      },
      {
        "id": "3ead010c-641e-4636-b2c6-2e75ff71eddf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "feed3164-d257-49e3-87a9-d8ea41d669bf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf762147-b5d2-4529-b77e-8bc1ea2d9a17",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2e34a0f0-2a92-460e-abb8-933af6daa531",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6cbb622-2607-4271-b6cb-bc32880e9dfb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3babb1d-c46d-45da-9f80-179179def9a7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 105.64084507042253,
      "responseMin": 14,
      "responseMax": 2102,
      "responseSd": 261.16652832010976,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694219491772,
      "completed": 1694219533783
    },
    "executions": [
      {
        "id": "78b16153-5aba-47f5-afb0-5cc3babe3acf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3e08bf64-10a7-42b8-a40b-5a9685bc9bb7",
          "httpRequestId": "a3e6c489-e947-4a24-883a-08c461fa2208"
        },
        "item": {
          "id": "78b16153-5aba-47f5-afb0-5cc3babe3acf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b6532edc-32bc-4422-a6c5-b06ba4530437",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "4d9fc081-13d6-40e0-a63a-acd0c33789d8",
        "cursor": {
          "ref": "589abc44-481a-42a6-a41f-8c0f5b4f5108",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6f2f5944-4f5e-4c44-b4b5-87e7b7ccc299"
        },
        "item": {
          "id": "4d9fc081-13d6-40e0-a63a-acd0c33789d8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "18739c89-cec0-4d25-a97b-a8f35d456df2",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "c6c4818b-0c69-42ef-b0c4-c77b3f5de0c1",
        "cursor": {
          "ref": "ca29fe77-cf27-49d8-a8ba-6162942d5fd9",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4d2f6388-f042-47d8-ac77-9f3e8a16bd3f"
        },
        "item": {
          "id": "c6c4818b-0c69-42ef-b0c4-c77b3f5de0c1",
          "name": "did_json"
        },
        "response": {
          "id": "3c470847-6858-4286-8cdf-37abb980cb8a",
          "status": "OK",
          "code": 200,
          "responseTime": 427,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bab6c9e-fdbd-43ee-ba79-df72514be781",
        "cursor": {
          "ref": "c980c6e2-e19e-4d40-a3f0-a914a8079372",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "874c2736-180b-4574-86d0-bf1431e36e20"
        },
        "item": {
          "id": "8bab6c9e-fdbd-43ee-ba79-df72514be781",
          "name": "did:invalid"
        },
        "response": {
          "id": "8801cf9a-9cfa-4461-9c4e-9669f17eeac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bab6c9e-fdbd-43ee-ba79-df72514be781",
        "cursor": {
          "ref": "c980c6e2-e19e-4d40-a3f0-a914a8079372",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "874c2736-180b-4574-86d0-bf1431e36e20"
        },
        "item": {
          "id": "8bab6c9e-fdbd-43ee-ba79-df72514be781",
          "name": "did:invalid"
        },
        "response": {
          "id": "8801cf9a-9cfa-4461-9c4e-9669f17eeac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b949f499-6589-4333-a959-a38d21f685b3",
        "cursor": {
          "ref": "df60261e-b5f7-4efd-beef-4b096ae0b46d",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c2cdade6-d2be-40b2-8ba2-bf2db70db548"
        },
        "item": {
          "id": "b949f499-6589-4333-a959-a38d21f685b3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7e2e7f6f-9327-49cf-ae1e-40d9d6a26653",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fc84bb-14de-426f-a62d-bb3fe348d268",
        "cursor": {
          "ref": "64dd07b5-b9d7-4253-83b0-762cd7785c66",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6c95f78c-caa1-4863-a988-2cfbd7c4ad8c"
        },
        "item": {
          "id": "55fc84bb-14de-426f-a62d-bb3fe348d268",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3c578757-1c45-45d4-8072-949e924c434f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53d019c-fc47-415a-90d8-e517f89cf227",
        "cursor": {
          "ref": "89deff91-1e94-49a7-a27e-41bb668f1588",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "674872bb-43e1-4b5e-b64c-892e91570ae1"
        },
        "item": {
          "id": "f53d019c-fc47-415a-90d8-e517f89cf227",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c743cb50-c08d-48ab-9678-6b8f9b1ec2f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fc8057-1e19-4e0e-9272-216ffa6ea0f5",
        "cursor": {
          "ref": "712ffaf9-9831-4269-8467-dd52e949ccda",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e3e83c98-e057-456e-a154-f9dc71d112b2"
        },
        "item": {
          "id": "f4fc8057-1e19-4e0e-9272-216ffa6ea0f5",
          "name": "identifiers"
        },
        "response": {
          "id": "9b53fe8b-a492-479d-9c85-b241ae7cb952",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5931cecb-9c2a-49d8-945f-f22b767bb7be",
        "cursor": {
          "ref": "9124cec7-3df3-4d1a-9407-c7b308414c03",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2d4dcd74-d957-4fd9-a2ed-cb18f72e2e06"
        },
        "item": {
          "id": "5931cecb-9c2a-49d8-945f-f22b767bb7be",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d6713214-b4a1-4249-936e-fe4da164ec88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c274e293-df1a-486b-b798-11b1acb7dddf",
        "cursor": {
          "ref": "34671c14-e1bb-46fb-ad51-5893b45b2f95",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "826d0ef9-c485-468a-aac8-47635b323bbe"
        },
        "item": {
          "id": "c274e293-df1a-486b-b798-11b1acb7dddf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2ddacd03-cbb2-4615-b90d-a024cd90b07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52375e6-928c-4342-858f-7dddb354c3c6",
        "cursor": {
          "ref": "1d8e440a-f451-4c0b-a734-6e288a93563e",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "be56657a-90f3-45b4-90d5-82a7f6605b82"
        },
        "item": {
          "id": "a52375e6-928c-4342-858f-7dddb354c3c6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "df0edac8-c34f-49fd-b41e-ad65f8d18717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4ba4d2-829e-48a2-994d-86dfc57ef1d7",
        "cursor": {
          "ref": "5598b07a-4e5e-479f-bfa1-b78ccb6b5a7b",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5f340c2d-1a7a-491e-ade0-20fc0accc4be"
        },
        "item": {
          "id": "8e4ba4d2-829e-48a2-994d-86dfc57ef1d7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "13a8ae88-9be3-4084-8a93-2125b4ca61cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d14520-5b35-49fe-b358-861d42f84b88",
        "cursor": {
          "ref": "48bbeebb-f164-4de7-9569-1a5d286335f9",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6b3a661c-dff1-4a33-83b0-16241a753109"
        },
        "item": {
          "id": "e4d14520-5b35-49fe-b358-861d42f84b88",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d225f35e-e8bf-4fde-a328-27b6fc6f5a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e32018-5694-412b-8338-4fe4400b3680",
        "cursor": {
          "ref": "dcf75470-2410-4aea-bc14-4fa8a17e4f1e",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "eace4478-3dd6-466c-b7be-25979c578c09"
        },
        "item": {
          "id": "07e32018-5694-412b-8338-4fe4400b3680",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "879f91bd-16ef-4dde-ad85-f0f32dff248b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfaa507-b1fe-49b0-8d2b-a70ca27de9b5",
        "cursor": {
          "ref": "db0a51dd-0535-4919-862e-4b9dc7d09ad3",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fda13af7-3c07-44c6-a30f-582c30262e9a"
        },
        "item": {
          "id": "5cfaa507-b1fe-49b0-8d2b-a70ca27de9b5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6c4b741b-6b3a-4547-9fb6-d0d1420afad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3c9cf8-bc42-461a-8bcb-9ae7db296d6b",
        "cursor": {
          "ref": "8da45a0a-83ff-4195-a543-1ce6fd1c570f",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dfcb250b-8c69-45f1-b524-37de01925c2e"
        },
        "item": {
          "id": "9a3c9cf8-bc42-461a-8bcb-9ae7db296d6b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8e28a706-6fe5-42f3-88e3-18c492973bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bd6a10-41fa-474e-b45a-cb5be0c3a977",
        "cursor": {
          "ref": "f480813a-259c-46c5-87f2-0de4f8914519",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bcbe4f36-7abe-4180-8cd5-173e837d839c"
        },
        "item": {
          "id": "38bd6a10-41fa-474e-b45a-cb5be0c3a977",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "61287d00-f3fa-456f-aae9-6a4f3d6291c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6391b45-44a6-4778-92cb-355823a2595b",
        "cursor": {
          "ref": "f433d0a6-215c-4e07-9d00-d7fda8621ebe",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "19c16104-2453-464f-9327-07d02b5503f1"
        },
        "item": {
          "id": "c6391b45-44a6-4778-92cb-355823a2595b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0913b274-5620-40e4-b358-1f50e865f6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c124827-5743-4c6b-b6c1-f8ce02669d48",
        "cursor": {
          "ref": "0b22ecd8-af97-4a62-843c-453246318cfa",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "27c0601e-41f8-4c1c-9fdc-e2266117b5f2"
        },
        "item": {
          "id": "1c124827-5743-4c6b-b6c1-f8ce02669d48",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e89df271-49f3-4dd1-9e2e-1f4a1348fdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0862a92-93e5-4177-aeed-84ebddea9ff5",
        "cursor": {
          "ref": "25a83b5a-8ebf-4495-bfac-c69c3b094796",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "afd93705-3b83-4585-b535-f67f67f16586"
        },
        "item": {
          "id": "b0862a92-93e5-4177-aeed-84ebddea9ff5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "10c9e2e4-6f50-4a2c-b31a-5d34275c5ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae85cc9-af50-44eb-8904-71da5c92c6ea",
        "cursor": {
          "ref": "158a959b-065a-42d3-ad89-56ff95b2f85f",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ee358900-b9bc-43c7-9538-b585fc1e8b4d"
        },
        "item": {
          "id": "8ae85cc9-af50-44eb-8904-71da5c92c6ea",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f938235c-f106-44a9-98b0-f49fe3e4cc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51618771-9677-4dc2-9587-dec8fea52a7f",
        "cursor": {
          "ref": "7257fa42-d6da-4af4-b9cd-24531c4799c6",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a31a6271-fdbf-43f3-b6e3-a7973d89cea7"
        },
        "item": {
          "id": "51618771-9677-4dc2-9587-dec8fea52a7f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "33260422-7fa4-49ff-ae22-aac1db79c7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5019c745-cd5f-4691-8e0f-60c5fc81f653",
        "cursor": {
          "ref": "58475b5f-ad22-4d73-90df-cb8492578207",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f210ea9f-5958-4ac7-a8f6-895ab5234a5e"
        },
        "item": {
          "id": "5019c745-cd5f-4691-8e0f-60c5fc81f653",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "aeee6d5b-3cc0-471c-a8b4-3ce4088dd07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5691bb97-bc1f-425a-bec1-675d768fac7f",
        "cursor": {
          "ref": "a464dad5-7c90-4c93-8bfa-f5cbd1022a7b",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a6f41bdf-abc3-48b5-ab1a-66de39f04269"
        },
        "item": {
          "id": "5691bb97-bc1f-425a-bec1-675d768fac7f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "29514e5c-05de-4801-935c-4a461b754158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07b195d-2924-4560-acf2-4dcc7465503f",
        "cursor": {
          "ref": "27f06fdf-1331-4be3-b00a-736bb0c8a418",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ba186f62-5f46-45ec-b173-cd0611d4934e"
        },
        "item": {
          "id": "c07b195d-2924-4560-acf2-4dcc7465503f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3ecb7eeb-8061-4664-a15d-99b880fc3661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f12dcb9-0e22-4e6b-bd51-c7ef7be3bfac",
        "cursor": {
          "ref": "009ea43e-8de9-46d8-b6a1-5393565a710e",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aa8a3120-ad9d-4dc3-af32-15824adc4586"
        },
        "item": {
          "id": "1f12dcb9-0e22-4e6b-bd51-c7ef7be3bfac",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "36e4d382-baec-4cf0-a79a-dbe77061dde2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5141d2-4604-4a0f-8a0e-485cc80a6803",
        "cursor": {
          "ref": "34d037bf-7612-4c59-a80c-727bdac49c6c",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3c493a86-d013-48fb-b9c0-31bbd8418515"
        },
        "item": {
          "id": "2e5141d2-4604-4a0f-8a0e-485cc80a6803",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "87bd1d7f-462e-481c-9e5e-02aa5d541660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ae1269-b5c9-432c-9bb0-ec172338e3fb",
        "cursor": {
          "ref": "4345b361-89f2-42f7-b772-a4f08e85790f",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ed34af6f-4a60-4146-899f-b81a801f329f"
        },
        "item": {
          "id": "e0ae1269-b5c9-432c-9bb0-ec172338e3fb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bbf429af-bd56-4142-98e1-ee5fa5f38ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b9c8ed-60e4-4c97-baaa-582b17b19308",
        "cursor": {
          "ref": "a4c488e4-8620-4e7e-9e28-743efeeb02e8",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9abe8ef4-3171-4fc6-8106-2369ee505c36"
        },
        "item": {
          "id": "38b9c8ed-60e4-4c97-baaa-582b17b19308",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bdda60b8-0444-4d13-a805-d37b999c4851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cbb506-d125-4a05-b3cd-2233b7c65306",
        "cursor": {
          "ref": "77f84bae-dada-4098-98af-cf02d2607ee5",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b3cb3799-85a8-4944-a257-6e7ca02050f3"
        },
        "item": {
          "id": "a9cbb506-d125-4a05-b3cd-2233b7c65306",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f5bae023-b59d-4aac-b5fe-3c51bff6613d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456f9832-0115-4363-8a7b-5df1fed8dffd",
        "cursor": {
          "ref": "3d1be5be-3724-45c4-adb0-ba18a5dc1e14",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a5655d32-cfd0-47d3-931e-1c7a3677dfe2"
        },
        "item": {
          "id": "456f9832-0115-4363-8a7b-5df1fed8dffd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dc6a7d56-7b53-4aec-a7ec-4a5613157296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176a3309-b59b-4b05-9a90-d16c8d12bdff",
        "cursor": {
          "ref": "ea323aef-1baa-451f-9e0a-7676238f0d61",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "79e006c7-7df7-4254-9c3f-5665adabcddb"
        },
        "item": {
          "id": "176a3309-b59b-4b05-9a90-d16c8d12bdff",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "649785fa-2d40-4e6b-91f7-09597c8898a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f94cab-4755-4e06-9487-4b1a37e59b43",
        "cursor": {
          "ref": "c8a77d51-a8bf-4610-89f6-ce657bffbfa5",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d2f5e857-22e1-4098-8188-e45ab330ea4c"
        },
        "item": {
          "id": "12f94cab-4755-4e06-9487-4b1a37e59b43",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2140a23f-0516-4b7a-9b54-cd7f9b81533e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cadd336-9567-42fa-86fd-39c986d6d4f5",
        "cursor": {
          "ref": "e28d24f1-8052-4bd3-842f-6f3d4ba26436",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "248dfdb6-65fd-46eb-ae4d-05b33038066e"
        },
        "item": {
          "id": "3cadd336-9567-42fa-86fd-39c986d6d4f5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "91ae9832-47cc-44fa-8847-12aa3004b474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa87134-3656-40d3-a3e6-b40bf4266d59",
        "cursor": {
          "ref": "286919ec-13dc-4f43-be56-f7df88222c59",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "03962fe0-4d90-45ed-9d24-c95acd93f284"
        },
        "item": {
          "id": "0fa87134-3656-40d3-a3e6-b40bf4266d59",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "837a9dcb-dd7a-414d-9ae2-96ef374b31e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9b3b05-095d-4dde-802f-2155e48e2ef6",
        "cursor": {
          "ref": "3180794e-ea59-42c9-81c8-a6a667568d8f",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2488780a-8024-425f-b0f7-e5b049438f05"
        },
        "item": {
          "id": "7d9b3b05-095d-4dde-802f-2155e48e2ef6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "22df9b2e-e6c8-42d7-a686-9bd9b0eb0f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c4252f-1cee-4186-8562-aabfc79a193e",
        "cursor": {
          "ref": "058123b2-77af-4764-844c-fd69d8677a7f",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ccfb0329-2816-466e-9d96-1646025a21d1"
        },
        "item": {
          "id": "77c4252f-1cee-4186-8562-aabfc79a193e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "778180ac-5380-43a7-a695-80758c78dc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b19d9ad-bf5e-46fe-8824-1d98fbac97e3",
        "cursor": {
          "ref": "36891bae-c941-4567-9013-6bd4a4219ec9",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ed58b345-8315-40c8-8a4a-08f4f9c924cc"
        },
        "item": {
          "id": "3b19d9ad-bf5e-46fe-8824-1d98fbac97e3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dd852ae8-02d9-4e3f-8ef4-1d7acb79cfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae344498-6f37-4455-9376-e3651848f11c",
        "cursor": {
          "ref": "57c56978-04c8-46fa-8a71-646031977c33",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e44d2022-2c20-40c5-b960-0357764f05f9"
        },
        "item": {
          "id": "ae344498-6f37-4455-9376-e3651848f11c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f4490258-5ebc-45b2-903a-bb821c870240",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "bb6af285-8076-4860-ab5f-451ab0052b4e",
        "cursor": {
          "ref": "fd8b1c15-7cbc-49b3-a489-4981bcc4995b",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "16f20250-7513-44a7-b8e1-975c136dfd27"
        },
        "item": {
          "id": "bb6af285-8076-4860-ab5f-451ab0052b4e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c537808b-0296-4816-9df3-0109ff397671",
          "status": "Created",
          "code": 201,
          "responseTime": 2102,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b384e072-e591-48b5-89d3-dfaefdd1019f",
        "cursor": {
          "ref": "2e9a4f9f-0aed-46c2-8daa-e98bfe4e0f82",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "25a50cc0-843f-439d-aad9-b636e48f44b5"
        },
        "item": {
          "id": "b384e072-e591-48b5-89d3-dfaefdd1019f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c849814e-8f56-45ee-a229-e9aabaf46424",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8e9e6b40-0ca3-486b-81aa-febf3869bd36",
        "cursor": {
          "ref": "09adf17f-22f6-4541-948d-dd928c5d1bb8",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0768f493-093c-4427-ae34-ba234444c778"
        },
        "item": {
          "id": "8e9e6b40-0ca3-486b-81aa-febf3869bd36",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8b95ba0d-4a14-406a-ad2a-5f943201bfda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c24d7f-54ac-4511-af3e-7b723689a232",
        "cursor": {
          "ref": "e15e4c70-8257-4f6b-9cc4-62fcf6d14769",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ff8ba275-197d-44dd-baaf-d35bafb6614e"
        },
        "item": {
          "id": "a5c24d7f-54ac-4511-af3e-7b723689a232",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6a225a35-3f4f-4a2a-926a-d3474d7f36ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "fe65218f-f29c-4900-bd4b-d25397d73138",
        "cursor": {
          "ref": "6eb5dbe2-370a-4c84-acf6-ffd968165724",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d13631c1-b4af-49fa-a616-6a9bba2851e2"
        },
        "item": {
          "id": "fe65218f-f29c-4900-bd4b-d25397d73138",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0e6b055f-3c8e-4ffb-9e74-40e64239bb1c",
          "status": "Created",
          "code": 201,
          "responseTime": 1553,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8757cef7-b554-43a9-8eec-d4f838ebaedc",
        "cursor": {
          "ref": "938bf779-ed1b-42c7-a080-a4712505d9cb",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e05cb1b1-8379-425e-a944-9d8c97afae27"
        },
        "item": {
          "id": "8757cef7-b554-43a9-8eec-d4f838ebaedc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d7ff2d8a-9f18-431f-a267-c3f3899e4f2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e63f4be7-1bec-46d7-a93a-34229e6f03ac",
        "cursor": {
          "ref": "3371632f-e3ea-4c1e-a993-0459e1bbd9c4",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "38d95327-c447-40ee-a828-e286345e07e0"
        },
        "item": {
          "id": "e63f4be7-1bec-46d7-a93a-34229e6f03ac",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "80eeca2d-edd4-4710-b6fb-c77becc67b33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 780,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a59b3897-09e1-4551-9803-af1dee567e7a",
        "cursor": {
          "ref": "9a78a76a-3ae5-4dfd-8058-792ed6b66486",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9dd4c068-c1cb-4e34-ad08-07b556bee3cb"
        },
        "item": {
          "id": "a59b3897-09e1-4551-9803-af1dee567e7a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b8cc58e4-7017-4134-a033-8131b81d9a0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1bf02aa1-7b47-41de-bcb9-18e379c9a4c5",
        "cursor": {
          "ref": "bfecd851-f5b1-4bab-9886-e160689678ca",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "dab9cf1e-6958-4a3b-8522-f1eeb02aad54"
        },
        "item": {
          "id": "1bf02aa1-7b47-41de-bcb9-18e379c9a4c5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3b754ce2-8be8-4e4d-9b6a-b036dd969e18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "56817f59-c28b-4ef7-80e2-f9ef10593863",
        "cursor": {
          "ref": "8b195136-497c-48bb-b944-5b431bb4572f",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "01b7dc38-ed96-4269-912f-0c393bbe912c"
        },
        "item": {
          "id": "56817f59-c28b-4ef7-80e2-f9ef10593863",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ab90fc0a-c448-440a-a6f0-e991a753fd66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ba75f776-9df1-4584-8cda-4184ffacb35e",
        "cursor": {
          "ref": "dd511b71-f38a-432f-bf3e-5757f5a62415",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "57c7f09b-0e5a-4ece-a968-f901903dd37f"
        },
        "item": {
          "id": "ba75f776-9df1-4584-8cda-4184ffacb35e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e324c5cc-921a-4c66-b741-b4352d5a6f88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5b9c552d-347e-413c-91de-0be3185226e4",
        "cursor": {
          "ref": "2f85378f-b235-4646-89e0-0a9f306cb23a",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "99c69365-df4b-40ff-8033-e440bded74fa"
        },
        "item": {
          "id": "5b9c552d-347e-413c-91de-0be3185226e4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cc3fe280-016f-4a45-97ca-84de8768dd5c",
          "status": "Created",
          "code": 201,
          "responseTime": 1038,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "720dd6c8-09a7-49ea-8394-047ad3bf619f",
        "cursor": {
          "ref": "3ab5818b-b940-4e8d-9eee-a3a10338dd76",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8914595a-a9dd-45d4-b2a3-35854db95e71"
        },
        "item": {
          "id": "720dd6c8-09a7-49ea-8394-047ad3bf619f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "dcc8d004-f1f9-415f-84b8-0a1893167600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17584e0-20f5-491b-8b6a-bb2a83146db7",
        "cursor": {
          "ref": "c7a08018-a878-4420-a652-dba683ea76de",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "61ba825f-72a6-49ce-8136-89002d9f1b4d"
        },
        "item": {
          "id": "b17584e0-20f5-491b-8b6a-bb2a83146db7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "438af589-6364-43ff-8c43-a45c44b967ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cf0312-40ff-4340-b110-9163af81eb57",
        "cursor": {
          "ref": "a98d5e37-f723-4e45-8e04-2f76fbaa447c",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d4e4b180-4282-4197-901c-06e46363831f"
        },
        "item": {
          "id": "c4cf0312-40ff-4340-b110-9163af81eb57",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "db335a84-3e71-40ea-93cf-fb420d3e7661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30154272-04cd-4bd1-a7b5-f332e49eb47a",
        "cursor": {
          "ref": "230eef0f-fdae-4649-a124-1fc8dddf7fbd",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1c3579f5-c872-4ef3-9340-dcab3e8c590a"
        },
        "item": {
          "id": "30154272-04cd-4bd1-a7b5-f332e49eb47a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "60ddcb9c-10e5-48af-baed-e540aa165e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5539f83c-a114-4f9e-a8ab-b95416012000",
        "cursor": {
          "ref": "2a8ecf05-fb73-4e2c-bb34-cf7a39b3f0f7",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "68e0cc2e-6d7c-48a7-b98b-ac58ce63a576"
        },
        "item": {
          "id": "5539f83c-a114-4f9e-a8ab-b95416012000",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "293a7612-5d51-4549-9bac-b9c8a8c20b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487fb197-ea62-4244-b174-edf5692accf1",
        "cursor": {
          "ref": "ec9fe8a1-63b0-4354-8f7c-09afc69576a6",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "99684058-0da7-4930-ada1-d2e811703141"
        },
        "item": {
          "id": "487fb197-ea62-4244-b174-edf5692accf1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b2b0ab2b-c85f-4e87-a1fe-fd1b8583e0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967a2552-4b14-498a-aed0-11eb181b06ad",
        "cursor": {
          "ref": "deca78f3-8cc1-471d-b429-24f791a53cac",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4aef2608-c3e8-4d26-862c-cae597390183"
        },
        "item": {
          "id": "967a2552-4b14-498a-aed0-11eb181b06ad",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "57798d43-3e1c-4790-9907-3752c9cdfbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a3de44-892a-4c23-b278-6cced5c028a2",
        "cursor": {
          "ref": "d460d9b7-64bd-4e9b-846c-460e585c8f65",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "dd6eba42-64fb-4106-94d5-542f6447b43f"
        },
        "item": {
          "id": "53a3de44-892a-4c23-b278-6cced5c028a2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c862f3d1-4e5e-49fb-9c98-817bf97e1f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a46ce0-8a01-4589-9aab-ab354550df7e",
        "cursor": {
          "ref": "1b616a0f-c2ad-49ef-8656-f688b09766ff",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "59bbf308-55f0-422e-98c6-6dc80c8d950f"
        },
        "item": {
          "id": "15a46ce0-8a01-4589-9aab-ab354550df7e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cb5e2442-6c08-4157-bdbd-7458b89cfacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5230a00-3c8c-4624-9d77-e83c3e5d1335",
        "cursor": {
          "ref": "2ecabcd1-e62a-4894-a7c9-3d4f40dfb19b",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5fbddc7a-9e6c-40f6-9da5-c95e941591f1"
        },
        "item": {
          "id": "e5230a00-3c8c-4624-9d77-e83c3e5d1335",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2b54eb38-3013-4769-857c-890268505071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d73d15-5a01-46e3-9934-77b1af9f3ece",
        "cursor": {
          "ref": "2c8b75e4-2c42-4f04-b71c-fee190dbb2f4",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0adb5ef4-135c-4ffc-a74e-6e12fc824b36"
        },
        "item": {
          "id": "51d73d15-5a01-46e3-9934-77b1af9f3ece",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "76838c2e-d9fd-49d3-82de-a250101761c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b8b4e2-b77b-4e4f-beee-57cfa8b51fd8",
        "cursor": {
          "ref": "7fa9e333-88f7-44fa-91d9-c1ea30310d98",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "bc12ca84-4142-4d57-b48a-ca9b0a079dfa"
        },
        "item": {
          "id": "21b8b4e2-b77b-4e4f-beee-57cfa8b51fd8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bfbad3a7-7d96-4143-b6a2-734aec14fdf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee096b2-29a6-4497-a5fa-080b3d512fb9",
        "cursor": {
          "ref": "b24a4b36-8d7f-4b5a-a2c2-b43ec0563b90",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f76969d4-43e2-476e-bfa9-42d34f0c6d73"
        },
        "item": {
          "id": "6ee096b2-29a6-4497-a5fa-080b3d512fb9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f8205008-7d2f-45bb-8495-9e45de979c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4183bf2-64fc-4aca-8743-1d68555cbffd",
        "cursor": {
          "ref": "d95f513e-5e7c-4cef-8fee-d23cf4c01cd0",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d3bb3835-7ba4-4ecf-8da5-ef7dbe714e66"
        },
        "item": {
          "id": "e4183bf2-64fc-4aca-8743-1d68555cbffd",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "eab65e45-2525-4de6-9b3c-6bc088d6cc47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 738,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "010c32a3-4511-44c6-87c0-65e2c3fa2a7e",
        "cursor": {
          "ref": "054870f7-788e-4254-b9bc-63bace76a06d",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "65b20cbc-2f36-4d84-a85c-6b6e8c6542df"
        },
        "item": {
          "id": "010c32a3-4511-44c6-87c0-65e2c3fa2a7e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3042cbfb-54c6-4f90-bba3-552ee1bd5923",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 736,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "225fdbab-4219-4267-ab0f-be704d590fc7",
        "cursor": {
          "ref": "9612def6-7f1e-49ef-b78e-4375d513ac80",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "903774c9-d545-4920-bec6-677acbe4edfb"
        },
        "item": {
          "id": "225fdbab-4219-4267-ab0f-be704d590fc7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "78dda4b8-b7fc-469a-a65b-dc0442c30670",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0f5c73bf-3f9f-4ac9-977f-9ae5ffd8efe7",
        "cursor": {
          "ref": "886d756b-aec7-45c8-9ea2-13180fd06ef2",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3de79d76-2a4a-4578-af50-fe47a752b7fd"
        },
        "item": {
          "id": "0f5c73bf-3f9f-4ac9-977f-9ae5ffd8efe7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "62f70aa0-8c70-4346-96a5-b6f9d3026d45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 754,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3c2e38fa-0624-44d5-8443-6a380c9feb01",
        "cursor": {
          "ref": "83739f99-9c6d-4c6e-bded-3f98132a0f64",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7a3370df-5684-4c65-8bfd-a7c8d55707e9"
        },
        "item": {
          "id": "3c2e38fa-0624-44d5-8443-6a380c9feb01",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1e6fcf74-f9f8-4614-9691-84d461c7b747",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c8e5c800-220e-4fde-b431-7d302ebfe7d7",
        "cursor": {
          "ref": "ec750884-18a8-4969-b029-80bcad7759b4",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "535a186c-d2c8-4210-bc51-90c252dc6fd1"
        },
        "item": {
          "id": "c8e5c800-220e-4fde-b431-7d302ebfe7d7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "907ce642-1a5d-4125-9570-c9c45f29c002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003747fb-fd7f-443e-b77e-94ce08993f35",
        "cursor": {
          "ref": "87bebbf7-86c7-4fe1-955b-4afe18f1e02e",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5cf76e8f-e27c-45ba-a1e6-f63e5511c730"
        },
        "item": {
          "id": "003747fb-fd7f-443e-b77e-94ce08993f35",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "131dd0d3-908a-40c9-902b-f52ec7242cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a449d6-b1bc-4455-8e74-a616daa650cd",
        "cursor": {
          "ref": "f2760de2-12e8-4030-9460-ee80198abb30",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9d0c7761-aeea-43c3-bda4-56eb2663b318"
        },
        "item": {
          "id": "d4a449d6-b1bc-4455-8e74-a616daa650cd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3c08fd38-8e0f-4f8f-8dd7-fe5ef54bf16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afdd02e8-562a-4e9a-9fec-95c5446934b3",
        "cursor": {
          "ref": "9c9dd788-7af6-4895-8e5e-06814039d8b9",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e7878784-cfe1-4830-b3d1-18c85510d91d"
        },
        "item": {
          "id": "afdd02e8-562a-4e9a-9fec-95c5446934b3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f9efe18a-76db-4ccd-aae5-cb75ea929e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aba4d7-76e5-4500-a1e6-26fb43701723",
        "cursor": {
          "ref": "e2ea4be2-abaa-47da-a2b1-5c4745c6f017",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7fa4ddc6-1496-4c77-88db-6fe2f74fb057"
        },
        "item": {
          "id": "b3aba4d7-76e5-4500-a1e6-26fb43701723",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "06c01bd6-b596-4a94-aaa9-416ef46073e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cbd0397-3ed6-4a09-8747-be73b6c7b4ba",
        "cursor": {
          "ref": "bf825a97-5604-4a7d-9158-b8bbd9bb8763",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5bac16a4-c9f7-472e-ae6a-73fc9caf8299"
        },
        "item": {
          "id": "0cbd0397-3ed6-4a09-8747-be73b6c7b4ba",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c197a98a-687a-4639-ac49-49ec94d0628b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943fb461-14f8-4343-b2db-2e0a6c35b14f",
        "cursor": {
          "ref": "639ed835-cd79-4dc9-9700-478344a6864d",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f59873d4-f8ed-4bf6-943e-1d2c63f96f99"
        },
        "item": {
          "id": "943fb461-14f8-4343-b2db-2e0a6c35b14f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f6d9358c-74b6-47c4-8cbb-32a0ff31ad9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c1c9ee-8155-4016-a326-4c026273db75",
        "cursor": {
          "ref": "f7d18ade-5a49-4e3c-9d70-80ed131698ab",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2bc06c64-894b-4d63-bdb7-9ebf3a98a7a7"
        },
        "item": {
          "id": "b0c1c9ee-8155-4016-a326-4c026273db75",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "88d28196-a807-477a-95c2-8a6a58c44aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b225b5c7-dc7b-4c40-847a-b5c1252fecdb",
        "cursor": {
          "ref": "43e14927-b92c-4430-8cb6-9f7145fb5e7b",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "74a7b72c-e56c-48b3-9308-0a867e77c60c"
        },
        "item": {
          "id": "b225b5c7-dc7b-4c40-847a-b5c1252fecdb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e6f012fd-3a9d-44b8-9ed5-9b39e27ccb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd51b9d8-3949-458a-a180-be77a60d1f35",
        "cursor": {
          "ref": "f2530600-dc4d-4d40-bfc5-c74466f21196",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "939b13d6-6096-43b5-9a90-b68770096c6e"
        },
        "item": {
          "id": "fd51b9d8-3949-458a-a180-be77a60d1f35",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1ca3f14e-bc64-4ad5-87ec-c1b0550395d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f7aa5f-cb0f-4405-b8e7-7183b91042f2",
        "cursor": {
          "ref": "8af7c6b1-4ac8-42da-95b2-3e582f307f5a",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "827d8458-2a9f-4b99-8c1b-c8f0fe4bdd1c"
        },
        "item": {
          "id": "c3f7aa5f-cb0f-4405-b8e7-7183b91042f2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6627f59c-797a-4c06-b62a-d26df6da939c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15db25a3-3722-47ae-9873-e3f29e6034a4",
        "cursor": {
          "ref": "ee5a0844-ac21-4daa-8181-32978171760f",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f7c9b92a-83fa-49d6-8030-9284b0c9807b"
        },
        "item": {
          "id": "15db25a3-3722-47ae-9873-e3f29e6034a4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8083b303-2350-496a-86a5-34ec3f5e1ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e37559-b32e-4374-96ac-bcf9b0ab1b43",
        "cursor": {
          "ref": "c37be6d4-f527-47e9-906c-a0c513198bff",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5f33b953-a82f-493c-859b-bc7eb998cc14"
        },
        "item": {
          "id": "b6e37559-b32e-4374-96ac-bcf9b0ab1b43",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "db43985b-7ff0-43e0-bbb1-51311b11b89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb166089-b81a-4101-9140-a0dae30e68ef",
        "cursor": {
          "ref": "0652fa86-f955-4b87-a5f4-83e730abeb12",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9b7cb8d9-fb64-42c3-8649-d1258d2c5db5"
        },
        "item": {
          "id": "bb166089-b81a-4101-9140-a0dae30e68ef",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "66454506-cc97-4754-bd8e-3234ba526d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f384e2-cb2f-44c8-b7e8-493ca5ffdac9",
        "cursor": {
          "ref": "cd4a9ce4-7a1d-4f47-b984-015b06e25fb2",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "17b5c679-4f90-46bf-89a7-2d8a5c3d2acc"
        },
        "item": {
          "id": "e4f384e2-cb2f-44c8-b7e8-493ca5ffdac9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3424bac2-a6a8-4b58-a3b7-80a94ff4590e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132c04e0-495f-49e9-b31d-1f82906d7d59",
        "cursor": {
          "ref": "36d6799b-e000-43cb-9c31-d5c9b263e70d",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4de2161c-b56e-4022-ad1f-be74c2cdaa44"
        },
        "item": {
          "id": "132c04e0-495f-49e9-b31d-1f82906d7d59",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e319cf35-7c06-47b5-9e6d-fdb765530995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ca1997-b92d-4c24-a906-e293a7f0421b",
        "cursor": {
          "ref": "81314b6c-275c-41e1-9bed-ab98df689b1b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f1d5d603-7a2e-4165-9e07-ef3ef02bfb78"
        },
        "item": {
          "id": "94ca1997-b92d-4c24-a906-e293a7f0421b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f7e09f65-14ad-4a4f-899f-5391376dc867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36741b44-7b3b-4d4f-a8a0-f2e06e499da5",
        "cursor": {
          "ref": "a4c2bb93-ace1-4476-8de2-d7b2c2e443f6",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ddc27f03-c758-41f8-a08f-8e321011c423"
        },
        "item": {
          "id": "36741b44-7b3b-4d4f-a8a0-f2e06e499da5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "268376af-23f1-4ec9-b5ad-4ce1fc5d9666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661e97b2-27ac-4693-a0dd-d6a9cd2f92ea",
        "cursor": {
          "ref": "e89c05e4-329a-40a7-b59f-2f1140e59a38",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "747dcd5f-a910-402a-bdc0-962dddd68969"
        },
        "item": {
          "id": "661e97b2-27ac-4693-a0dd-d6a9cd2f92ea",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "41ab09f7-6a8e-484e-ae5f-a386d6454859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af8c2f1-35d7-442b-bf22-02797c9a3388",
        "cursor": {
          "ref": "e3a4ecc8-09bf-419f-a50e-bf1387364fee",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4d1acaef-5db7-4580-9338-d2d57f901b84"
        },
        "item": {
          "id": "2af8c2f1-35d7-442b-bf22-02797c9a3388",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a72fbb4a-efa9-4ffc-a92f-d3b5d0be93ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470fc3f5-9cbb-4c4a-ae2d-bb03741daf2a",
        "cursor": {
          "ref": "dc07884f-c995-4d03-8218-ce9d6f9be99e",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ab56c64e-73b0-4066-bc1b-e1fc98561ede"
        },
        "item": {
          "id": "470fc3f5-9cbb-4c4a-ae2d-bb03741daf2a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d58cd351-c478-42b4-bdbb-d471d169028e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b200cbfc-f494-4e2f-ba6d-52f3bd695465",
        "cursor": {
          "ref": "7d1d8f7a-3ac6-4b35-a740-42e689a437c4",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0b8f65c5-f8de-4de4-9ead-c01118e0e4aa"
        },
        "item": {
          "id": "b200cbfc-f494-4e2f-ba6d-52f3bd695465",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a5a10fe9-e38e-47aa-a749-3581ac893ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36a84ad-4062-41a6-9d2d-832b569bd800",
        "cursor": {
          "ref": "5ff848f7-7eb3-4d0f-819b-f833b0960285",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d9a2c69b-6a2c-4074-a4a5-e35dd7ca67ce"
        },
        "item": {
          "id": "d36a84ad-4062-41a6-9d2d-832b569bd800",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6ce2d923-2fb7-4236-b775-cde0830e1e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d7e665-a497-405a-a3fe-db9f8950f3f2",
        "cursor": {
          "ref": "b1062300-d082-4b1d-8acb-012ab7265944",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "99816f59-0c21-46ae-9517-367723b30c91"
        },
        "item": {
          "id": "04d7e665-a497-405a-a3fe-db9f8950f3f2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "11b2f899-e1ae-4dc5-949d-914930614868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa18da4c-f39e-42f5-814e-624bc92d8d48",
        "cursor": {
          "ref": "06421eee-5989-4f27-8180-3f598e14e834",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f3d8dee6-bbee-410a-a803-6aa41e27cf14"
        },
        "item": {
          "id": "aa18da4c-f39e-42f5-814e-624bc92d8d48",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "243e9514-7993-48c2-a035-8e4cd7f8f811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca3f56c-25a4-4428-bea9-ced50ed4f380",
        "cursor": {
          "ref": "2c8a9523-dd71-4ad3-a4f1-626ca6a8e20d",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "61a5a879-a962-4aea-84af-f82817ea4f77"
        },
        "item": {
          "id": "6ca3f56c-25a4-4428-bea9-ced50ed4f380",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8b9739a6-a04f-4cb5-82dc-d07e17c70c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7054b5e-fb64-4cc0-8bfa-f9e406d810c5",
        "cursor": {
          "ref": "c43abffd-eb83-4923-81d9-3530ffe028cc",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "111ee0b2-df37-47b9-b2ad-372fc631c70c"
        },
        "item": {
          "id": "f7054b5e-fb64-4cc0-8bfa-f9e406d810c5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "46ad0d8a-590c-4eaf-8836-04d85e7b644c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d569f8-f0c8-4619-9c75-2e99f66c6414",
        "cursor": {
          "ref": "4992c6d4-7bbd-4a7d-86db-c829d6ee2159",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "862c6c2c-60a4-4430-90b5-356cf89168e5"
        },
        "item": {
          "id": "88d569f8-f0c8-4619-9c75-2e99f66c6414",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0be7c825-9c0d-4579-adbd-274d0f1b4b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fb1546-1ba2-44d4-a570-90461d89b1cb",
        "cursor": {
          "ref": "628d23dc-e571-4bf6-a7a7-f8dc5e86e7bf",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8f8d7a4c-bf17-429d-a0db-5b8e8ec9c438"
        },
        "item": {
          "id": "96fb1546-1ba2-44d4-a570-90461d89b1cb",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e67b49fe-de2f-4eaf-86a8-ff9327453026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a13e1f8-fc90-41f4-a310-ec800a598043",
        "cursor": {
          "ref": "e48f40e7-3cff-497e-8f22-474f4130b410",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0a735a24-9b7a-4089-bac3-6d49829f783b"
        },
        "item": {
          "id": "7a13e1f8-fc90-41f4-a310-ec800a598043",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "de66026f-9143-4174-a90f-5bc56eeae22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee15fac5-dd2d-4c38-9c17-f6ffb3d11272",
        "cursor": {
          "ref": "d0fed628-10f3-491d-99e9-4aee39c5b207",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "813acf31-ff52-4a28-b009-99fb65fb4c3c"
        },
        "item": {
          "id": "ee15fac5-dd2d-4c38-9c17-f6ffb3d11272",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3590364e-cbdf-4a05-9985-2660eb6cf231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136aa10c-4ff1-48be-81cf-6d2e114ca34b",
        "cursor": {
          "ref": "d7466fbc-f2cb-4081-a23f-75de165c7de4",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c585ac9b-c10b-4df2-9935-4dc178dfd847"
        },
        "item": {
          "id": "136aa10c-4ff1-48be-81cf-6d2e114ca34b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "953903d2-2fcd-474d-a87c-7b30587562a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7e6715-01af-4a8c-84cd-edb3b4603baf",
        "cursor": {
          "ref": "ff1a7dcc-8151-4b4b-b120-fa1b8a3e77d8",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6cfa03a2-a502-4c03-bd02-f430250b99e8"
        },
        "item": {
          "id": "1e7e6715-01af-4a8c-84cd-edb3b4603baf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8dee5dd0-2dc4-4dc1-81fc-9286953f12e5",
          "status": "Created",
          "code": 201,
          "responseTime": 1115,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ebf16d-8c86-4794-bcaa-57f195d83c1a",
        "cursor": {
          "ref": "34600fa1-3068-49a5-95e9-72ac75ffeb21",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6eda1fed-7fc5-490c-954a-bed734e7d7aa"
        },
        "item": {
          "id": "59ebf16d-8c86-4794-bcaa-57f195d83c1a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e8bebf74-792f-4f6c-b3fe-1d155f3a1fd3",
          "status": "Created",
          "code": 201,
          "responseTime": 1441,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a3dcb9-0b9e-4918-a870-cf86cecb29ef",
        "cursor": {
          "ref": "26e9b8d3-3e9a-4115-9e96-37d4aa5c57a4",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "98fb9ce4-4004-4836-a44e-e9ed6f6f5c13"
        },
        "item": {
          "id": "e5a3dcb9-0b9e-4918-a870-cf86cecb29ef",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d879d132-2cae-4aa7-bbec-9d03ee86ed0f",
          "status": "Created",
          "code": 201,
          "responseTime": 1014,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebabbae-a2f1-46db-852f-c12de7a90ada",
        "cursor": {
          "ref": "9414248d-1dc8-45e7-bbe1-5ce703c26252",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fc8caafb-b4b1-4861-8b73-0d9cce821c6c"
        },
        "item": {
          "id": "eebabbae-a2f1-46db-852f-c12de7a90ada",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7388b293-1679-4e94-97fc-d3564f7f9f2a",
          "status": "Created",
          "code": 201,
          "responseTime": 1010,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e2b5a8-c0be-4499-812d-deab8540cc7f",
        "cursor": {
          "ref": "efed245a-99b3-4d75-a517-1ee6e0de990f",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "59ac8598-7181-4a42-804c-7ab455178672"
        },
        "item": {
          "id": "c9e2b5a8-c0be-4499-812d-deab8540cc7f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c9d15592-be2a-48b2-bee8-2def5f9b6fe1",
          "status": "Created",
          "code": 201,
          "responseTime": 986,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e445274-eaf1-4205-819d-f4d4eef519ca",
        "cursor": {
          "ref": "0b9e871d-eeb0-41cc-9c06-a743ab77528c",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "494e862c-8f10-4175-ba3e-9ab0fad16fd7"
        },
        "item": {
          "id": "8e445274-eaf1-4205-819d-f4d4eef519ca",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "17ad9a16-c0b0-4125-8552-5e647249184b",
          "status": "Created",
          "code": 201,
          "responseTime": 1025,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcd321e-fd1d-43d9-a3c4-0afe776a7f17",
        "cursor": {
          "ref": "c8e6064c-3514-430f-b4c5-2676110f4d14",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d4db447a-0de1-44dd-b51a-c2c4f0c4b378"
        },
        "item": {
          "id": "ffcd321e-fd1d-43d9-a3c4-0afe776a7f17",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b9037c23-fecf-40f8-afe3-cae40eb8ab6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fda283d-a089-4676-825f-e649072c42b1",
        "cursor": {
          "ref": "be7f978f-f74e-48bb-b076-bf91b62a408b",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6489f5c5-acd8-444f-bd41-e5e8077aaa7f"
        },
        "item": {
          "id": "1fda283d-a089-4676-825f-e649072c42b1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a5594905-46f0-411b-a4fc-0a2a70d425cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94318be8-a638-4c10-8b70-7efac8cbfc4f",
        "cursor": {
          "ref": "f2819efc-630d-4f75-9b27-7e3d78d1ef18",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f4bbe888-0756-4fed-9c25-ee5dce2ccf2d"
        },
        "item": {
          "id": "94318be8-a638-4c10-8b70-7efac8cbfc4f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4ff9d9b1-019e-4e59-a65c-e8313b89c3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3989ef-0976-4684-ba7c-612148a375e0",
        "cursor": {
          "ref": "73c00916-0dab-4e6a-a276-b01914801b03",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "82b13b44-b3b5-4369-925f-cc60b0f40759"
        },
        "item": {
          "id": "7d3989ef-0976-4684-ba7c-612148a375e0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3e9ad5a1-fa85-4035-83e4-84cd94bc2497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52885cb6-90a1-4b93-9e80-dda5390f1351",
        "cursor": {
          "ref": "33659348-462e-43b8-b420-c66ba56b2610",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "194f65e6-a987-421f-82e4-742245ccfe95"
        },
        "item": {
          "id": "52885cb6-90a1-4b93-9e80-dda5390f1351",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "92e43d74-0dda-4cf8-b346-9dfb4929bf50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e525806-1843-4e5e-995f-bd640db0f6d5",
        "cursor": {
          "ref": "78118e66-4f4c-42c7-b1f5-37b3da9dbe6f",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6a46b9db-a02d-42ca-ae68-85111e266ff1"
        },
        "item": {
          "id": "4e525806-1843-4e5e-995f-bd640db0f6d5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "513de436-cfe8-4d36-8584-1e8b9100d390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2248bf1-30e9-41ad-b0c7-502549f5a93b",
        "cursor": {
          "ref": "c4296ffd-b9a9-4caf-9522-0215bbcf4cbd",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9822d343-9389-47be-9c82-5a5521387862"
        },
        "item": {
          "id": "b2248bf1-30e9-41ad-b0c7-502549f5a93b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c625c4e7-b21f-4cac-84eb-185497841d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf5d333-2475-444b-8111-21131b11add8",
        "cursor": {
          "ref": "52e86c60-f5a7-47dd-9b99-bcd31ab4b620",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "036b9a96-1f99-41d1-bf2b-c92baaeb41b7"
        },
        "item": {
          "id": "8cf5d333-2475-444b-8111-21131b11add8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bb3514b0-8669-46c0-b466-321543ec39b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa01488f-94e4-4030-9d9a-f014e01fc723",
        "cursor": {
          "ref": "59fbc614-28a4-460c-8a03-d624cf81e0ab",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9cb4645a-1b6c-4fc6-bc05-29ba330fcaad"
        },
        "item": {
          "id": "fa01488f-94e4-4030-9d9a-f014e01fc723",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ec990cfe-5fe2-4671-b3a3-3e5313f4ed6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cbdfbf-0ae2-4e9e-be49-51677488f351",
        "cursor": {
          "ref": "add025cb-269f-4197-85c7-c7fc5fe1a325",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4b988a1f-fa3e-4e42-83e6-02be623c7ad0"
        },
        "item": {
          "id": "01cbdfbf-0ae2-4e9e-be49-51677488f351",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "994f8f32-2716-4991-b4da-be6c18a809b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68d6125-0ea1-4036-8153-6d9e7bf2f3b0",
        "cursor": {
          "ref": "75ccb6b2-4424-405d-95f2-cdcf70ddba77",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6b17ed11-1e6b-4e80-8365-4ac9dd47e79e"
        },
        "item": {
          "id": "e68d6125-0ea1-4036-8153-6d9e7bf2f3b0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "006b103e-7e60-492b-9111-6ffd91195c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb371d9-dca0-4c2d-a140-613d9e055e65",
        "cursor": {
          "ref": "510a84d9-77f6-4962-9479-2dd6fcaf4fd1",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2170dc34-508d-4c49-bf0e-b93fd5e241dc"
        },
        "item": {
          "id": "3fb371d9-dca0-4c2d-a140-613d9e055e65",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ea3b7d3b-9f60-41a7-a683-53802c0ac034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17a8d01-8230-41c7-97d7-83fc04dc09ed",
        "cursor": {
          "ref": "846dac4e-f64a-4c54-9da3-5c493bb662a4",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "22d28dda-e5eb-495d-86c4-8ba6d6a99d3a"
        },
        "item": {
          "id": "d17a8d01-8230-41c7-97d7-83fc04dc09ed",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "228859fc-e321-458a-a267-d4dd875f980f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd965dcd-4432-49b0-b5d6-9fe66e99e26d",
        "cursor": {
          "ref": "b13b870f-8f5f-40ef-997c-c20386909d08",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2a3f0a74-7f9c-4a23-932a-86bb4cf853dc"
        },
        "item": {
          "id": "bd965dcd-4432-49b0-b5d6-9fe66e99e26d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d4389cdf-f863-44bd-b168-853d8e4ca1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbce447-31c0-4b79-9ccf-c5829110e72f",
        "cursor": {
          "ref": "dc0b919b-9d88-47f4-b193-b422f13dc4e9",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dc229746-414a-45fb-9e87-6edebf49468a"
        },
        "item": {
          "id": "bfbce447-31c0-4b79-9ccf-c5829110e72f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bafad387-030c-4305-b6e2-9c271fd50ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1475d0a-9b6a-4aa5-922a-0d692fd8a553",
        "cursor": {
          "ref": "ee7d8641-fc2e-4aad-bb5f-b6f3fbbc2f52",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "63b6b125-90af-4830-bbbf-900dd2a2a53d"
        },
        "item": {
          "id": "c1475d0a-9b6a-4aa5-922a-0d692fd8a553",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8d747f88-0f9d-49f3-9a2a-7ceecfca4892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884be20f-8767-44fb-9bed-ae6b296630bf",
        "cursor": {
          "ref": "1df71a2b-0385-4cd3-a3c5-4b08548c5a89",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5881c42f-f184-4925-a6b8-f1cb203df299"
        },
        "item": {
          "id": "884be20f-8767-44fb-9bed-ae6b296630bf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "606151ff-2130-4317-b29c-3557cab52973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b6ff45-d4c8-4127-8a5b-94e972b001a1",
        "cursor": {
          "ref": "bbacc57e-9795-4107-b0b1-c050a307ab16",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6d29be6c-d04e-4567-9275-71a43dd570a0"
        },
        "item": {
          "id": "05b6ff45-d4c8-4127-8a5b-94e972b001a1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3cb21600-8986-41d8-be40-e1cc744b9f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249f9809-79fa-430d-a1bf-ee2e8990e7c7",
        "cursor": {
          "ref": "764ee96d-668b-4f28-a0ef-506f24d13a9f",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "eec25125-d7ee-424d-bfd7-43af0fb8d531"
        },
        "item": {
          "id": "249f9809-79fa-430d-a1bf-ee2e8990e7c7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6ebf2467-3e77-4b18-a68f-c514ee2751ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7119ff55-0d2e-4a7a-9247-eaa2a72f6605",
        "cursor": {
          "ref": "0685b9c7-97ce-4e4e-9ccf-ca399bf270d2",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "aa3a772e-116c-4b6e-95cc-7ea785753726"
        },
        "item": {
          "id": "7119ff55-0d2e-4a7a-9247-eaa2a72f6605",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "57fd0e1e-05ec-477d-93d7-bb6c1802501c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d800b4d6-1ce8-47c5-9582-b5e992d49393",
        "cursor": {
          "ref": "05df99c7-f05d-4488-bf2e-1e49b611db77",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dcea0bae-392b-436f-8c47-35334cccfb0a"
        },
        "item": {
          "id": "d800b4d6-1ce8-47c5-9582-b5e992d49393",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7dd7c141-0068-4d4b-90b0-b364444a69d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5803304-5669-4152-9936-f84cb4a668ce",
        "cursor": {
          "ref": "7f8edfc0-ae86-4306-9b3c-44e1da155186",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6bb0ed8b-d335-44df-aa16-5c9feeb11d30"
        },
        "item": {
          "id": "a5803304-5669-4152-9936-f84cb4a668ce",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f418356e-8886-46eb-ab8e-a30e1a549809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3bfce0-3058-4631-b077-ad843640b828",
        "cursor": {
          "ref": "d4765dae-66fd-4cd8-b3aa-b630c307cd0d",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c3a56d3f-8119-430c-bcc8-cc7728745ac7"
        },
        "item": {
          "id": "5a3bfce0-3058-4631-b077-ad843640b828",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fc2188ee-7c2c-45c8-af8a-7c77547431e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6d42d4-9c59-4e2b-ba05-40b9eadd0cec",
        "cursor": {
          "ref": "0ddea015-a10c-4521-9884-4250aad234fc",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "665075c2-2676-4fe3-8abe-8e5e4e5da0d1"
        },
        "item": {
          "id": "7d6d42d4-9c59-4e2b-ba05-40b9eadd0cec",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2ee94ee6-e8eb-4fd6-9055-b24fb47bf338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1e690d-a541-44ed-98e8-cc325487d864",
        "cursor": {
          "ref": "b4c91667-98e1-4f38-b617-dbb9c395952f",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "600c60a6-d4d6-40cb-9e57-42bf2add12f6"
        },
        "item": {
          "id": "7a1e690d-a541-44ed-98e8-cc325487d864",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e17fbbc9-3ac6-4c1d-927d-b04ae7c61784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a0167e-deb1-4515-bd56-ae0012ec79c5",
        "cursor": {
          "ref": "a6dec812-fb2d-403a-982f-cea380235cde",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a1e5f59c-50d6-4184-96d5-594e4cc68005"
        },
        "item": {
          "id": "e3a0167e-deb1-4515-bd56-ae0012ec79c5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3c674357-a271-49a9-9fbd-eb8b08ad40b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb7ce7e-fc20-494a-b6bf-9646eda205b5",
        "cursor": {
          "ref": "d31e6447-13ff-4df0-a19c-b816d2d6ef0a",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f0cb52f0-244b-4489-9e3e-1a1d1bc8efb7"
        },
        "item": {
          "id": "5cb7ce7e-fc20-494a-b6bf-9646eda205b5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "492edd2c-fdb9-4f3e-ae5f-bbd8477cd2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e66fa0c-1ee2-4f2f-a177-b19a1da9d8b9",
        "cursor": {
          "ref": "d5fb77df-2e8c-4e2e-86ef-eba8bfd72862",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0f8105ab-1e48-4a0a-a5d4-3d968b663335"
        },
        "item": {
          "id": "0e66fa0c-1ee2-4f2f-a177-b19a1da9d8b9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7500d4c7-5011-4ac5-b8b7-49e6148cd67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff477cb5-e354-46de-896c-ab90d2656ed6",
        "cursor": {
          "ref": "f8875b98-d5b8-4d60-a973-547e47e3ba6d",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c24f96f1-b90b-4f11-aab7-bdfe4d24495b"
        },
        "item": {
          "id": "ff477cb5-e354-46de-896c-ab90d2656ed6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "29fc8fef-46a6-4eb5-bb24-f134de0d6d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cede3509-ee2d-48eb-835e-644497ed0dce",
        "cursor": {
          "ref": "6e74e764-5b0f-4f03-b3c0-9779e33a0639",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9afbcf57-1e46-4aaa-bcce-9df55fa500fb"
        },
        "item": {
          "id": "cede3509-ee2d-48eb-835e-644497ed0dce",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c28d6631-0d0c-48c5-b590-dd3c4cd07a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceddb373-7df5-43b3-8db8-71205d745b41",
        "cursor": {
          "ref": "39a2efd9-9a08-4966-9635-f1eb4adc0f0d",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "91fdbac0-134b-47ff-a4ac-1739f3fb11b0"
        },
        "item": {
          "id": "ceddb373-7df5-43b3-8db8-71205d745b41",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2ac57676-af23-49aa-b571-be5c7cd00f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c233fe8-1a76-4477-ac29-7924c3130d82",
        "cursor": {
          "ref": "fcfbf75e-8a91-40c4-afdc-8e3f9f16f828",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5d7cf55c-5d9b-4990-ba8b-bf25f9cc53d1"
        },
        "item": {
          "id": "6c233fe8-1a76-4477-ac29-7924c3130d82",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "80c28efe-2dc8-43b3-80d3-37cc3f8cc56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66bdf30-9a07-48f5-af77-cf90d50219db",
        "cursor": {
          "ref": "70d8321b-3cb1-465b-b286-3aea338a7e9e",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1664b6c2-5382-4e16-894b-36237d8a7781"
        },
        "item": {
          "id": "a66bdf30-9a07-48f5-af77-cf90d50219db",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cfd5ef28-7553-4d34-b8e7-7cad9d2fac07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "533af4ff-312b-494a-8a29-882876a412d4",
        "cursor": {
          "ref": "84c2aca3-91b1-4263-86ee-a08837b8783a",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1a57991e-8652-451e-81d5-b6b3967eb128"
        },
        "item": {
          "id": "533af4ff-312b-494a-8a29-882876a412d4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "aa14e417-c3c1-43d8-8f85-c4e398e5c919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaad57b2-6eb4-46fc-a4bc-e1d877332de0",
        "cursor": {
          "ref": "14cdb17f-fbe0-4676-94e5-ee9387762ead",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "65a8072c-6274-4361-830c-fe3742ada5ba"
        },
        "item": {
          "id": "aaad57b2-6eb4-46fc-a4bc-e1d877332de0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "92d5669f-3351-4217-9d2d-0773d0405937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7691244b-3e12-434a-abbe-52bf0ca1e151",
        "cursor": {
          "ref": "fffb7c31-b63f-4866-b8a6-cac586bc4aa6",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1c3ab31a-1756-48e1-adda-f574dcfc6df5"
        },
        "item": {
          "id": "7691244b-3e12-434a-abbe-52bf0ca1e151",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2bdde6c2-3ed2-4241-bdbf-03988a79c5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b50768-f8fe-4b89-b5bc-034ff8bfdedd",
        "cursor": {
          "ref": "41da21bb-93b6-4922-854a-1f3937594417",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e2568ea5-cfe0-4238-99ef-4dc857f73892"
        },
        "item": {
          "id": "27b50768-f8fe-4b89-b5bc-034ff8bfdedd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ca44b714-f3fa-44d6-be08-e21a5e929fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1538dfbd-c8b8-4fe9-99aa-98f407e4def8",
        "cursor": {
          "ref": "34eee414-d9ce-46e0-8df7-b4b6f6c1fef9",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c6f252ac-f685-400f-9dbe-1980ffc6a9c3"
        },
        "item": {
          "id": "1538dfbd-c8b8-4fe9-99aa-98f407e4def8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9bc7fd5b-9f0d-43a6-871d-23920bab75ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7955d1e9-74fe-4288-96a2-ca36917db094",
        "cursor": {
          "ref": "05162f60-a258-4582-8089-3823cb0a744f",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3dec65de-4575-4d7b-a853-49d78f810651"
        },
        "item": {
          "id": "7955d1e9-74fe-4288-96a2-ca36917db094",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fe60f220-0f3b-4f73-9cf0-80b4cb84cefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc86c3d-9105-4e70-aa1c-107d075f3b9f",
        "cursor": {
          "ref": "1cf355b0-85c4-44d5-9364-96531e64dcfe",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5967c83b-a6db-4e5c-a753-e46ef6c4b747"
        },
        "item": {
          "id": "7cc86c3d-9105-4e70-aa1c-107d075f3b9f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "08b57c41-8dce-43d7-8c33-8fe71d32f95c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b36257c-de9c-4d4b-ad56-bb701141e091",
        "cursor": {
          "ref": "f3243abf-2674-401c-ab05-ecad279e90b2",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8562c334-9c1a-491b-a60a-e28d69778850"
        },
        "item": {
          "id": "2b36257c-de9c-4d4b-ad56-bb701141e091",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0a4df90a-b5b8-4e75-8d9c-abd80ff36c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0027034-a3ec-4953-8907-a2694af2875f",
        "cursor": {
          "ref": "d31fe8e7-b940-463a-9f12-c75d058b49c4",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "04a22225-5f5b-47d9-9c89-ee1233b49a20"
        },
        "item": {
          "id": "b0027034-a3ec-4953-8907-a2694af2875f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ff437945-585b-4dbe-a960-5085e76806ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22af1cb-ac15-4b16-9015-a80ed433776e",
        "cursor": {
          "ref": "798b3254-f9df-4aed-9925-4c770d3bc07a",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "13591564-4fbd-482a-92e1-180eab628e18"
        },
        "item": {
          "id": "d22af1cb-ac15-4b16-9015-a80ed433776e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4fc408c4-6379-44fc-9f27-4245d56d95fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0ef95d-de86-42c2-9962-cbba5ad6afb1",
        "cursor": {
          "ref": "eacddd02-3f4c-4e9b-a35c-3a961609d86a",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "60e984de-c874-45a6-903f-4c74f16b2dec"
        },
        "item": {
          "id": "8c0ef95d-de86-42c2-9962-cbba5ad6afb1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0f868cfe-23d0-495d-8d79-7b0f6308e6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb1fc84-de7b-4afc-9c90-bb24ca49b24d",
        "cursor": {
          "ref": "481b3671-84fc-4471-a9e6-63a071b4090e",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bc87d208-912f-45ad-9019-372f18da2270"
        },
        "item": {
          "id": "ebb1fc84-de7b-4afc-9c90-bb24ca49b24d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d3fe4711-577b-49eb-92ca-6d29a77013be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d6f63d-bb8f-4265-9161-8957be45c66f",
        "cursor": {
          "ref": "a6963c0b-8ba3-4d43-b6ca-e1fea7a9c452",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1adbfdd3-f93b-43e7-a4e5-34b1925bdf53"
        },
        "item": {
          "id": "e5d6f63d-bb8f-4265-9161-8957be45c66f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0f6b275d-c08a-4736-af14-bb422849e2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8d01a4-099a-4cca-a3ac-d24a328c791e",
        "cursor": {
          "ref": "c9339c53-e0ec-4bde-9210-457a1686b3e4",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "95afa904-9013-42fd-9df8-ddd8b8143e0f"
        },
        "item": {
          "id": "ae8d01a4-099a-4cca-a3ac-d24a328c791e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "08cfa261-23ee-480d-a4c5-d3f7a0a3594d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a70bae-b620-4be3-82f7-e4e9d7284833",
        "cursor": {
          "ref": "8b9a0d58-c181-4c23-b12c-c7d6b2e1a527",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "aa845cbf-3ddc-4f8a-80e3-a71143260ceb"
        },
        "item": {
          "id": "66a70bae-b620-4be3-82f7-e4e9d7284833",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f80a1015-5c33-4957-829f-a4d7f1dcfb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d968d6cc-865b-4258-964c-8e3cdae9c7e9",
        "cursor": {
          "ref": "35149672-c97a-4f94-ac35-f61a529161f4",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7b0ca5e8-72f0-4e5c-830e-e0fd2f860aa0"
        },
        "item": {
          "id": "d968d6cc-865b-4258-964c-8e3cdae9c7e9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "80e40322-a760-4994-a5fa-c08040782d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad6bc9b-2a4d-4a6e-88b3-61a2f8edeaf5",
        "cursor": {
          "ref": "ee04fd47-4063-444e-a045-fa37a9e3096d",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "096de648-43a3-46cf-a518-d4b293d3209e"
        },
        "item": {
          "id": "5ad6bc9b-2a4d-4a6e-88b3-61a2f8edeaf5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7eac714a-6b0e-40c4-9cd7-1849b75b048e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5dc291-a20e-4e64-a560-259285483b81",
        "cursor": {
          "ref": "20fc78c8-f2b2-49d6-8915-94c331770bc2",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6c7d9737-bb67-4894-8a80-8d9e6b993472"
        },
        "item": {
          "id": "6a5dc291-a20e-4e64-a560-259285483b81",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ce7d0906-4bc4-47d5-acec-9b863a26e7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2417daf8-8080-40d8-b5b7-ab9ddb4112ba",
        "cursor": {
          "ref": "80af743d-8dec-459e-9a9e-23372d441b0e",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5879f1e7-ea5e-4dde-a064-22f47fc4bdfc"
        },
        "item": {
          "id": "2417daf8-8080-40d8-b5b7-ab9ddb4112ba",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9ef3c571-2f39-4762-b895-5cc5ec116942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb0ddd2-5079-43f5-b1d9-9fb7585d8ddc",
        "cursor": {
          "ref": "9a086f40-7a01-4739-b90e-e9da7f565122",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "366e0d11-a20f-448b-b7d9-e4cd59c85417"
        },
        "item": {
          "id": "8bb0ddd2-5079-43f5-b1d9-9fb7585d8ddc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0c8ae7c3-9257-4f6c-8b76-9199f003a8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d4483c-a120-41b3-a555-dabe0fead31d",
        "cursor": {
          "ref": "01843f14-4ead-41bc-9cd3-8e54b48df3f6",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e6b1f3e4-b9db-48b5-950d-e14ccd977d88"
        },
        "item": {
          "id": "e1d4483c-a120-41b3-a555-dabe0fead31d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8fcd40ac-e92d-4e52-bbd4-2dd8d34296ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76c88f1-1c84-4686-afa0-989d57b1e961",
        "cursor": {
          "ref": "b59447fd-43de-47b2-8f96-d08fc427a8c1",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "76f55fbf-827a-4f5c-a498-2bf9d49b329b"
        },
        "item": {
          "id": "f76c88f1-1c84-4686-afa0-989d57b1e961",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ee7a5cc7-cd38-49e3-88e9-f2ad1fdb3c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a2511a-3542-416a-a2fb-65ed2a0138ba",
        "cursor": {
          "ref": "4061ad84-11f9-4836-9a63-bdc1c79b0ecd",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7a2647d8-d0ee-40dd-8373-8855f69ae57a"
        },
        "item": {
          "id": "57a2511a-3542-416a-a2fb-65ed2a0138ba",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a970ccb7-ca85-4b3a-a158-726f4c5237d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f07d671-2f5d-4a54-8ce7-1513cb9d7231",
        "cursor": {
          "ref": "3b288ffd-1220-4eab-8e1f-d7cbb0788e71",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "24b7b4af-485a-4d2e-b5cd-99fba01667c0"
        },
        "item": {
          "id": "2f07d671-2f5d-4a54-8ce7-1513cb9d7231",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9c59f7c9-6878-491b-a41f-d7b48b3258e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb38e032-2533-4850-a185-ad5e5c3fe5ef",
        "cursor": {
          "ref": "78ac2152-5702-48a3-9ec0-ccbf39b8d245",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "673db240-d004-4f96-850a-94642775f877"
        },
        "item": {
          "id": "cb38e032-2533-4850-a185-ad5e5c3fe5ef",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3c7f23a1-927d-4059-b385-99280fd9e076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d232083-071d-4222-b413-713452fae651",
        "cursor": {
          "ref": "9fb4acf2-43d8-405c-a59e-5bec9ff12675",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "068b4fb0-7f3f-4cb1-8216-5da54a6ec37c"
        },
        "item": {
          "id": "1d232083-071d-4222-b413-713452fae651",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "eb0e86fd-31f0-4644-9592-b466832139ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b4a853-b301-48ba-8ea1-5eaea983ba8b",
        "cursor": {
          "ref": "4366b995-ec80-4fe6-893d-bbb4ed110c9b",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "db3073be-e347-4993-9017-99a65ad5cb4d"
        },
        "item": {
          "id": "b3b4a853-b301-48ba-8ea1-5eaea983ba8b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5736c8f7-545d-4dc3-a903-148a443b3d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd406064-aa12-49bc-850d-54e587ee870b",
        "cursor": {
          "ref": "e8f58d27-e323-4e8e-a347-2bb2ffe23abc",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b2016410-42bc-4435-a6eb-46dc9bc8a6cd"
        },
        "item": {
          "id": "cd406064-aa12-49bc-850d-54e587ee870b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "54caadec-d07c-470e-a1be-8293b320c34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d544064-ef2e-4528-bf95-a474a5c39cd8",
        "cursor": {
          "ref": "1d304120-eb38-4e93-90c8-0507dbc3a4dc",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "07788692-06d1-4e24-877c-f14dea0d7d6a"
        },
        "item": {
          "id": "0d544064-ef2e-4528-bf95-a474a5c39cd8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "eb498290-a941-40bc-a708-5f603c8041b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5fa2af-e0f0-4205-9d40-2b8194f90396",
        "cursor": {
          "ref": "dfe700f7-d4ae-4bb4-a9ea-1ba495d03b36",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b0d77646-579b-4d00-ad14-6b85dbe434b7"
        },
        "item": {
          "id": "1e5fa2af-e0f0-4205-9d40-2b8194f90396",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8017c5e2-c19f-4f6f-84a9-bf03be8724b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55e2f90-4f01-4895-9ade-c3315167c96d",
        "cursor": {
          "ref": "5ae8d720-2d5a-4a54-8074-0201d8d0e85f",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c371858d-0576-43db-87a7-19a368a363b1"
        },
        "item": {
          "id": "d55e2f90-4f01-4895-9ade-c3315167c96d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4bf33d16-0914-4192-8c58-cfa9d2a75fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904071fa-ef15-488e-bde5-514821e641ab",
        "cursor": {
          "ref": "1db6a5ef-42be-41ec-ad9e-1b24ac4fb746",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "00be0175-2140-47df-941c-128f17918c8e"
        },
        "item": {
          "id": "904071fa-ef15-488e-bde5-514821e641ab",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "09cf50f4-c0f1-4028-af5c-721bf417bb2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3227e6a1-fb5b-45c3-b510-efa028794651",
        "cursor": {
          "ref": "e7e227ce-d80a-45bc-9a96-8c73d94b9fdb",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "77a304b2-751b-4a94-9765-00dbb16bf4fa"
        },
        "item": {
          "id": "3227e6a1-fb5b-45c3-b510-efa028794651",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9a92dbfa-1ab3-4553-aac4-5b2450c5631f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39807cf-33e0-41d5-831f-3947197702e4",
        "cursor": {
          "ref": "01a7926f-fae6-46db-9ab9-5a57f3ca580c",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bce8d0df-ba31-49a3-bd05-e843e93eb35a"
        },
        "item": {
          "id": "f39807cf-33e0-41d5-831f-3947197702e4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "803856a8-8bec-47ee-bd11-6ea764220da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7a6f56-000b-458c-8a7f-74750bc3de54",
        "cursor": {
          "ref": "edbb0527-180d-4af2-8d3a-170a3ca0e3b6",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "108e3be5-4e85-4a69-b3eb-c7a6ac5383d7"
        },
        "item": {
          "id": "ed7a6f56-000b-458c-8a7f-74750bc3de54",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "bfaa878f-c8ce-408f-ac0d-b820adda90e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb75c453-fc8f-455c-ba5d-bcea005ad078",
        "cursor": {
          "ref": "4f0d371a-48bf-4128-88a8-65ce2d8f5100",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "63138415-c5b7-4082-a4be-f8013a3792a0"
        },
        "item": {
          "id": "eb75c453-fc8f-455c-ba5d-bcea005ad078",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "762c84d7-7347-4b26-bf59-85dd7d5b4bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ec63a2-14c4-4d03-97dd-2611dff6f411",
        "cursor": {
          "ref": "ab68a756-0b12-4742-8e01-e2935fe8e3f0",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f1359131-d679-420a-8a81-562e33f4dad8"
        },
        "item": {
          "id": "84ec63a2-14c4-4d03-97dd-2611dff6f411",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "898f4496-3367-4f9d-be5c-f2866ce6392c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6747e20a-50a2-4870-9855-febe4c074823",
        "cursor": {
          "ref": "ae573c69-e24f-4877-8acd-3067545e3336",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "11d5e98a-8b9d-409a-8538-75067107b36b"
        },
        "item": {
          "id": "6747e20a-50a2-4870-9855-febe4c074823",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "00df014e-1079-4f62-bd94-bb6359ed5e6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7187cb-0821-4990-a0ed-4599bcb18de8",
        "cursor": {
          "ref": "8ebc7028-9e7d-4d59-9cae-50400fef07c3",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0976b762-4000-4fc0-870d-817f28d576f5"
        },
        "item": {
          "id": "4b7187cb-0821-4990-a0ed-4599bcb18de8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ae0d5a40-5c10-4d0c-baf0-9723af9f610d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae243018-e18a-4629-a154-21772f9532ab",
        "cursor": {
          "ref": "83660ca5-592c-4ed5-b774-7a895f2389ff",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "987fa5d3-e604-43a0-91d4-eb762ecc7e1f"
        },
        "item": {
          "id": "ae243018-e18a-4629-a154-21772f9532ab",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4a1a9962-7789-4bf6-88cd-6ab37c010f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf04db9-a4d7-48e7-88f0-cec750874c61",
        "cursor": {
          "ref": "199cefec-fafe-4c28-af1a-25117d15f12e",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1e5c5fce-7eec-47e0-9bb7-e86a38bc697e"
        },
        "item": {
          "id": "bdf04db9-a4d7-48e7-88f0-cec750874c61",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c8d13e5d-bb39-486e-9849-7e287e8643f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f816715-d53c-4627-ba2b-550cba4cc154",
        "cursor": {
          "ref": "af94bfbe-0e54-427c-82de-1f25f5db8deb",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f621b38f-4b02-49fe-bb27-12b4a1365d8c"
        },
        "item": {
          "id": "8f816715-d53c-4627-ba2b-550cba4cc154",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1612039e-2a27-4c25-a395-ca4c191423a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3780b054-f290-4ff2-b1a2-8ea279de7dcb",
        "cursor": {
          "ref": "354c3f9e-819c-49fb-b933-207bc1f6f30b",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "320bc0d8-24a9-47ad-a5ff-ddae9428d5de"
        },
        "item": {
          "id": "3780b054-f290-4ff2-b1a2-8ea279de7dcb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2a5bffd0-cab2-41b3-af62-68faf601c9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d64048-7269-453d-9127-5bf39632e320",
        "cursor": {
          "ref": "14459705-2a3e-4e57-bfaa-c7475dcf7e6b",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "16b54aa7-ea87-441c-8cca-394d55eff8a8"
        },
        "item": {
          "id": "90d64048-7269-453d-9127-5bf39632e320",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "38eee421-a490-410b-981e-2f228ea1075b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6cfd8d1e-429d-4444-b6f3-a6bfaad1f0c2",
        "cursor": {
          "ref": "f9fba00b-aa8c-420a-87bb-cbcba55fdacd",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c52e3e7c-ecd8-41f4-a0f9-1e306ad4403e"
        },
        "item": {
          "id": "6cfd8d1e-429d-4444-b6f3-a6bfaad1f0c2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ba07482f-0f7f-4ec0-a36f-ff2f16a19c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0071cd4f-8405-40fc-9c1a-ab18793fb025",
        "cursor": {
          "ref": "bf170e31-c0c9-4b19-9c15-076cccc66c5f",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a87dd52c-269f-4dc5-b323-81cfb0e349ee"
        },
        "item": {
          "id": "0071cd4f-8405-40fc-9c1a-ab18793fb025",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a77ad541-a957-4a3d-b53f-03aea7f97107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeec178c-5deb-4d22-95cf-980b0af97a0b",
        "cursor": {
          "ref": "ca3489ae-db77-43c8-bc81-3ca9baf42ed8",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "695a0dcc-e13b-4d63-b586-5b3afd8aa8e0"
        },
        "item": {
          "id": "aeec178c-5deb-4d22-95cf-980b0af97a0b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fca9a25c-286a-4d42-a276-61b4932f6dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd162ad4-3b5e-4568-b59c-9cebbdb4beda",
        "cursor": {
          "ref": "82c0581e-1ee7-469c-85ff-334d3f2e955c",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "094805f3-f13d-4e80-90e1-8098bae7a53b"
        },
        "item": {
          "id": "cd162ad4-3b5e-4568-b59c-9cebbdb4beda",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "260820fd-6ba5-4a69-814a-05398bebe4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd73796-07b3-49b1-912f-6305e1ca78cf",
        "cursor": {
          "ref": "5cf87a76-b016-497e-aede-3b27e51700a9",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "44ef7aa3-e5f1-49b4-9c8c-85b31dee5c3e"
        },
        "item": {
          "id": "5dd73796-07b3-49b1-912f-6305e1ca78cf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f8ab311c-28e9-4899-8b30-8b8cc2ef2e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860ca3fb-e121-4317-af82-601f9206fade",
        "cursor": {
          "ref": "4a1c9425-9c81-4657-81f1-80584116ad6d",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e01b6f67-097a-4cce-a95f-0179565eeed7"
        },
        "item": {
          "id": "860ca3fb-e121-4317-af82-601f9206fade",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ecadc6b9-14b4-4ca0-b57f-c9b18e0364fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b4f892-9a26-44ab-9352-e7888e50bed7",
        "cursor": {
          "ref": "59f7106c-69dd-47d6-8b7e-a24b4829a4ba",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3fc5e602-1161-4ed1-9842-73e3a7174422"
        },
        "item": {
          "id": "08b4f892-9a26-44ab-9352-e7888e50bed7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "01abeedd-3aef-46bb-997c-6c437d1602cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96449f1-a6dd-413b-a5e2-73e77f4c84f4",
        "cursor": {
          "ref": "d1e8fb85-2e85-4476-a294-6b4843209c59",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "450e1aa1-813f-494c-9ea8-f9dc3db33384"
        },
        "item": {
          "id": "c96449f1-a6dd-413b-a5e2-73e77f4c84f4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ef7e3383-1913-4755-b8e3-e68b187dc64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5767e9a-2433-454d-b5f4-456d613f65d9",
        "cursor": {
          "ref": "0950535a-bdf5-4a2b-95be-696e89805d7c",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c541decc-b93d-4d5c-ac95-2199b9080b31"
        },
        "item": {
          "id": "c5767e9a-2433-454d-b5f4-456d613f65d9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9278c7d2-1717-45ed-b9f1-95f142cf9077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527d42d8-8c99-4faa-98f8-be555bfd8d24",
        "cursor": {
          "ref": "474060e0-d851-4b80-a618-c7198b962229",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "64d76305-c8fe-4ba5-88e2-01b169d42377"
        },
        "item": {
          "id": "527d42d8-8c99-4faa-98f8-be555bfd8d24",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6f207363-152c-4b76-a363-f52997b776bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3d2286-7d07-4c45-96a8-b8db058c14d4",
        "cursor": {
          "ref": "e6ab3267-df69-4d70-b14b-166455d0f1ca",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "aace5ba3-8d97-4315-b89a-7ff215e27441"
        },
        "item": {
          "id": "0f3d2286-7d07-4c45-96a8-b8db058c14d4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2e6e329c-7adc-4691-9334-46d4f875a55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98df9794-3f96-4a50-bac3-53e5fe6d6145",
        "cursor": {
          "ref": "4a121ab2-2e53-4f56-b54b-7c1e21a89abe",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "98d3eeb6-474c-41b7-9fb4-0f47b6d45b99"
        },
        "item": {
          "id": "98df9794-3f96-4a50-bac3-53e5fe6d6145",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c58ba969-06bd-4ac1-bb0a-735247cbd032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24b28a0-c1b1-496c-a3de-1c25f1c1a0a0",
        "cursor": {
          "ref": "8eadb3ff-4e55-4bba-83d9-b69a9d93f000",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "899a46a8-80fc-4b2c-a776-ec14f150a9d5"
        },
        "item": {
          "id": "d24b28a0-c1b1-496c-a3de-1c25f1c1a0a0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1617a0e1-66f3-48ae-b60a-d76931d3a0fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57e450a-5f53-4484-abf8-8e4b44e504e9",
        "cursor": {
          "ref": "5b00d8db-6db4-4156-9c05-00a739a5af1e",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f48bd26d-3a81-4f0c-9bce-679a6522dcba"
        },
        "item": {
          "id": "a57e450a-5f53-4484-abf8-8e4b44e504e9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0b67e79c-aee4-45b5-b50f-bf90d50e1dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b582563-1efa-4f15-83ae-bb00253d41f7",
        "cursor": {
          "ref": "27982572-5a2a-49b4-bdec-c1107a11d582",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "74c381f4-206a-4ab3-9d0c-c4c0622ff033"
        },
        "item": {
          "id": "2b582563-1efa-4f15-83ae-bb00253d41f7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "38f7e992-d866-414b-a0ab-708c70540310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4619858-7726-444a-a5cb-f27677fe77a8",
        "cursor": {
          "ref": "8af99036-7b9f-40fc-a46b-9a7f913f28a7",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0c968628-0058-4552-a9a9-c1c12af4e829"
        },
        "item": {
          "id": "b4619858-7726-444a-a5cb-f27677fe77a8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "519dad81-c544-46f8-832a-f8516dbc9b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315e5e3a-7cc2-41ec-a190-0a914843b99f",
        "cursor": {
          "ref": "a5d89d39-ef27-4d37-9480-41a118d7e12e",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f0cb4573-4f5d-4c91-a3f5-c783b373e1ca"
        },
        "item": {
          "id": "315e5e3a-7cc2-41ec-a190-0a914843b99f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "026bbb5a-3672-496f-8c24-2768e73e70b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeba3e89-4bf9-4fba-b617-77bd86f612c4",
        "cursor": {
          "ref": "df8832c6-970e-4738-9f36-4d48500acb43",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "64d1a0f8-2315-48ef-a35c-b966a9463c25"
        },
        "item": {
          "id": "eeba3e89-4bf9-4fba-b617-77bd86f612c4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "dc56d23f-303b-481a-992c-e288c61689bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d671e45a-3019-43d7-841e-fef4cd66908d",
        "cursor": {
          "ref": "5b783ee7-b782-461a-a7fe-9ca83bbe36bd",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c1be2d50-1209-4eae-b41a-e6f10f831e3b"
        },
        "item": {
          "id": "d671e45a-3019-43d7-841e-fef4cd66908d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8ded7ca8-0804-4628-95a7-4fe0fde64e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1dd8f1-1366-4f3b-b7fe-bf9e8ef6391b",
        "cursor": {
          "ref": "2c7dc4b4-1c7e-4755-82ce-d7893b02f836",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "dfdcf457-564b-4c99-8b66-4745197c2d4f"
        },
        "item": {
          "id": "5f1dd8f1-1366-4f3b-b7fe-bf9e8ef6391b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c078fb6c-cf0c-42c6-8d93-0e7afb9f4824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e0f721-c062-4dd6-941c-4cc85e8e1d9c",
        "cursor": {
          "ref": "58a7eac4-aa83-428f-bc34-961b4475247a",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "de591b58-eadc-402a-8b70-e64423b8a740"
        },
        "item": {
          "id": "99e0f721-c062-4dd6-941c-4cc85e8e1d9c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "14bc8b85-d7b1-4c19-aa33-bc30b917e0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577ddeb0-14d0-48c7-b52d-9d174e68185b",
        "cursor": {
          "ref": "54e0b089-1f28-4ee9-9fbe-0c012b324d24",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "814041d4-6fe1-416e-b89d-b9ad04d14a59"
        },
        "item": {
          "id": "577ddeb0-14d0-48c7-b52d-9d174e68185b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1851e602-872b-4c74-a579-da95923c4376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e01f618-2fc5-4f38-881a-5f5401aed442",
        "cursor": {
          "ref": "d8d16889-bca6-4a0d-8601-31f02920d29f",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "25f1886d-0f98-4afc-ae08-e88f59985596"
        },
        "item": {
          "id": "2e01f618-2fc5-4f38-881a-5f5401aed442",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9b49be0f-17cc-41f9-8833-babd3018fbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b99872b-be97-4afd-97b8-30784e7b19cf",
        "cursor": {
          "ref": "e0cc3f36-95db-49b2-a552-efdb527b70be",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "84b5dcf1-71d1-4ddb-bd90-da8f0dfdbaa6"
        },
        "item": {
          "id": "2b99872b-be97-4afd-97b8-30784e7b19cf",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0baf77d4-3b95-431b-b772-7dd7c680f8bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c0eb24-3024-4359-b428-a4980c8c8269",
        "cursor": {
          "ref": "e7b89cf0-1bc7-452f-ac85-725bce961ad5",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a68cdce8-58d9-47f0-b3dc-05d5509753f5"
        },
        "item": {
          "id": "a1c0eb24-3024-4359-b428-a4980c8c8269",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "07fc3ed3-e8f1-4f83-a876-3f6dcf677827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114ed647-e871-4134-9c6d-488932b2611e",
        "cursor": {
          "ref": "7183fb17-b9bb-4c34-ad22-958d370b5eae",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5899b5e1-fd1c-4ce7-9314-c97c38bd2d58"
        },
        "item": {
          "id": "114ed647-e871-4134-9c6d-488932b2611e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c67ad050-f8b6-49f4-bb5e-7a464eb25b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89840058-9365-4984-a568-3fdb20322836",
        "cursor": {
          "ref": "653d8b0b-ddf1-4b0f-81ae-fb86e3a2e342",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "347c4c44-7e0e-4590-9950-9b33b1d061f6"
        },
        "item": {
          "id": "89840058-9365-4984-a568-3fdb20322836",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "23e2ff2f-b40c-49b7-acac-af05a7448a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f629e9be-0996-4879-bbef-54cc5b4cd460",
        "cursor": {
          "ref": "3924a257-3895-4e5b-a1c8-e2c1034986f0",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "73ec2b66-8cca-4310-bd9d-53c88b60b012"
        },
        "item": {
          "id": "f629e9be-0996-4879-bbef-54cc5b4cd460",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d0b2dfb7-266e-4f78-817c-b79703e9d636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ea03a9-d48a-4904-818e-462dcc97c478",
        "cursor": {
          "ref": "078643f4-a103-4af3-9340-39722986abcf",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "23975aee-1edf-4ea8-94c9-dadd2fae7d58"
        },
        "item": {
          "id": "04ea03a9-d48a-4904-818e-462dcc97c478",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6fdc7cfb-249e-4397-b65c-a5fe2c6e5e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc25e02-0a1a-4490-9807-8f56a23fda22",
        "cursor": {
          "ref": "ca9d2111-b431-4001-80c3-e643bf401f4c",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7abb3ab8-72df-465e-90fd-386a3d7a7b20"
        },
        "item": {
          "id": "3bc25e02-0a1a-4490-9807-8f56a23fda22",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1c670a3c-576d-48b4-9d88-cb457d9a77b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e348250e-981b-4649-b27f-4a7ce79beed4",
        "cursor": {
          "ref": "1e904596-061a-4282-9618-3afcfdfb5a5a",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "48472837-9ca9-4e98-9e28-266ab0b00e78"
        },
        "item": {
          "id": "e348250e-981b-4649-b27f-4a7ce79beed4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "16fd9d4f-1a29-487d-b2c9-7c055276fc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "fde827ba-c1d5-40f7-a0b7-44c209608ddc",
        "cursor": {
          "ref": "e6f6aca2-6174-4a91-adda-322b8e66fd39",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8bc1d760-2c0a-4c6e-8c44-444405250710"
        },
        "item": {
          "id": "fde827ba-c1d5-40f7-a0b7-44c209608ddc",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "59669e79-2490-4d50-9472-028390478114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "7a0e6872-c919-4e33-a7a5-b7aaae57df26",
        "cursor": {
          "ref": "a3f94499-7809-483d-91f7-0ff9cb388bc8",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "88e1b398-0eea-46d4-b1cd-771082cbc636"
        },
        "item": {
          "id": "7a0e6872-c919-4e33-a7a5-b7aaae57df26",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a4da7a67-941a-4710-a433-a47fe1506d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed78fd2d-3424-4b75-a0e7-0b782b6b5f04",
        "cursor": {
          "ref": "468e48df-aa9a-4613-a2d5-0614f622d2ec",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "62c494a3-0bfa-48c2-b811-f2ea9ccfba79"
        },
        "item": {
          "id": "ed78fd2d-3424-4b75-a0e7-0b782b6b5f04",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0137b9c4-f6a6-45a7-9d65-142708d022c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "f7d3427e-3856-491a-b166-6040ae5b35c1",
        "cursor": {
          "ref": "2f778f20-65ee-43a5-9aa7-1afc23ccaf54",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "27d80ddc-058b-458a-a386-0d6127eafc05"
        },
        "item": {
          "id": "f7d3427e-3856-491a-b166-6040ae5b35c1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ad7aadfd-5bc2-447d-9040-c2644c9846b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 851,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "91b4f0b1-e200-40e2-a41b-8ec228fb700a",
        "cursor": {
          "ref": "c528cc6f-cb92-417f-8326-718436d4ff7d",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8197146d-1ddd-4532-92ce-8247bf62f97d"
        },
        "item": {
          "id": "91b4f0b1-e200-40e2-a41b-8ec228fb700a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "34225fc5-62a9-4d9a-9200-24068bac6c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "c8cad75d-ecad-44b3-b1cf-f2492aef8229",
        "cursor": {
          "ref": "44574299-2b86-49bb-8929-535701292dbd",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "49a2e392-3032-423a-9890-cbd29121f1f2"
        },
        "item": {
          "id": "c8cad75d-ecad-44b3-b1cf-f2492aef8229",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "28c71b30-386c-4b74-886d-30d68d66b1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "55bc662b-41eb-44e7-9fa6-0c35bdc12bdf",
        "cursor": {
          "ref": "06bc3326-027f-4574-9cb9-d20d42e5f829",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9eb23bcf-4e74-45ef-85b8-aa232b3fb5f4"
        },
        "item": {
          "id": "55bc662b-41eb-44e7-9fa6-0c35bdc12bdf",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1d52ac25-02af-4883-af94-6a7c1021e97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f2d6a081-8962-4aef-938d-6b105d102cdc",
        "cursor": {
          "ref": "aa58d3a4-3eac-4aa1-9724-4de743a631de",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e4b3874c-e0b2-4d5f-9b65-f11e1518116b"
        },
        "item": {
          "id": "f2d6a081-8962-4aef-938d-6b105d102cdc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fe9870a6-25e0-41f1-8707-8698f1ec606d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0b8bf3ac-8461-40ae-9033-7d645cd9dc49",
        "cursor": {
          "ref": "6598935d-c932-490c-be33-3243d8d8e644",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b93a6630-128c-41be-842c-5b759bc593fd"
        },
        "item": {
          "id": "0b8bf3ac-8461-40ae-9033-7d645cd9dc49",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "608d4067-d760-4687-8a77-8888b179ad69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0663cb-8edf-405b-a6b5-060083321d61",
        "cursor": {
          "ref": "4b4cb95d-9135-413b-affe-19f0ad939f97",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "249b00dc-f360-4280-b384-4e4e8d2a4d06"
        },
        "item": {
          "id": "4b0663cb-8edf-405b-a6b5-060083321d61",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "364eb380-be26-4a51-a3e4-c003406951a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abcd5ff-1c4a-4a58-bd10-d08f636de18e",
        "cursor": {
          "ref": "f5e524e3-6aef-4220-9b60-3986cef9ee7b",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ae046d4e-e90f-4562-9d9c-f4a45f1eb35d"
        },
        "item": {
          "id": "5abcd5ff-1c4a-4a58-bd10-d08f636de18e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "499fc69c-2de6-4229-9c7e-e568c16f43ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c0260c-6750-4876-8e7b-ab4ccb55c545",
        "cursor": {
          "ref": "7bbf16c3-e133-4902-811e-7bd51cefc8e0",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f69f5441-eef5-43c5-a7d0-c1b47943ecc6"
        },
        "item": {
          "id": "89c0260c-6750-4876-8e7b-ab4ccb55c545",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5ccfad86-7efb-4342-9d5c-4e9e252e4f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8051d454-51f6-4266-a0d2-864cf47b689a",
        "cursor": {
          "ref": "5f2929a8-0ba9-442a-bb7a-3cd073c673ed",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8ca95f33-321b-4b18-b924-7847ab284bf5"
        },
        "item": {
          "id": "8051d454-51f6-4266-a0d2-864cf47b689a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "533b60cb-bd20-43f1-bf25-c55209c7de0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50f5dda-0113-4be1-8531-f707b842003b",
        "cursor": {
          "ref": "c1f56a76-7ce2-435e-8e9c-52089116c820",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d0a1f9ca-e1b0-42ce-981d-fd10216a1151"
        },
        "item": {
          "id": "e50f5dda-0113-4be1-8531-f707b842003b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6d4052b8-92e5-4b26-876a-0618a16295d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f90ac49-52f5-455c-8c66-cd4a3e1fe69c",
        "cursor": {
          "ref": "2f1b8dca-41d5-46c9-b43b-dd629a60b2a4",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b18951ee-ff5d-48e4-ab47-bd8062e4da5c"
        },
        "item": {
          "id": "0f90ac49-52f5-455c-8c66-cd4a3e1fe69c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2ef879e9-1186-47c7-bc5c-248462bda52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6dc401-7556-48c7-a329-a11b19e4ed18",
        "cursor": {
          "ref": "a9e44bf4-1c89-409c-937b-feb41fff9907",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f0329e73-55bf-4da4-ab7b-8109348439a4"
        },
        "item": {
          "id": "3e6dc401-7556-48c7-a329-a11b19e4ed18",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "483be494-a234-4403-8c1e-96ec8d1fe3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1035f5-f964-4dfc-82f8-d5418d6db959",
        "cursor": {
          "ref": "072a068c-089f-4d90-aaad-085e07dd5d6c",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7c2fe09c-d0b3-4c89-b4b3-084c6f41a633"
        },
        "item": {
          "id": "2a1035f5-f964-4dfc-82f8-d5418d6db959",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "493405cf-a51c-44ef-b4de-b1977fadd1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb60af5d-f7b3-4a02-95c0-4ea1c11173dc",
        "cursor": {
          "ref": "21667930-0fe0-4f32-946f-5a16906191a8",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "14391555-ea9c-4a8c-a4bd-16f108a261e8"
        },
        "item": {
          "id": "bb60af5d-f7b3-4a02-95c0-4ea1c11173dc",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "545d30ae-534b-44ed-be9f-10d34c800ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb13d43-4025-4e6c-925f-dfd82c39825b",
        "cursor": {
          "ref": "16cfd988-c30e-45eb-97f2-7c375ae0f14e",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9a087e39-71e0-4242-9cdd-b131a45e90a8"
        },
        "item": {
          "id": "3bb13d43-4025-4e6c-925f-dfd82c39825b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c12a094e-9902-435e-914f-248ba7a3b574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575b5867-2005-4fc5-808c-cd14d4785067",
        "cursor": {
          "ref": "6544dcfe-a317-47c5-b749-8a6842dbf034",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3ebdf35c-7b2d-45ab-8545-db693cac8c6a"
        },
        "item": {
          "id": "575b5867-2005-4fc5-808c-cd14d4785067",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d04c23ce-674d-483d-ad62-d3144408e094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419d0615-a2e6-40e0-8452-c7f5f3e64e0c",
        "cursor": {
          "ref": "c1fc2526-f7c4-483b-aea4-916d5bafc378",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f0e48ec1-d4b5-4f4c-a673-61ae0263a60e"
        },
        "item": {
          "id": "419d0615-a2e6-40e0-8452-c7f5f3e64e0c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dd51f875-c24f-421b-854d-c11ed59101a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b89dee-a63e-4303-9725-464218caccbc",
        "cursor": {
          "ref": "448af559-3206-49b0-a08b-06b5a9f4eac5",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ca43e21a-fe4d-479b-904f-b2c3699a66a8"
        },
        "item": {
          "id": "c6b89dee-a63e-4303-9725-464218caccbc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2059b1a4-6fb8-491c-b8f9-d92add77b338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1152,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "6d3c0d73-916d-4a29-8701-5086493da068",
        "cursor": {
          "ref": "0b5d67b2-27d5-4c7b-9bff-bfcc969aa0da",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b4a1d790-46e5-4f69-bc8e-fc889a5a9081"
        },
        "item": {
          "id": "6d3c0d73-916d-4a29-8701-5086493da068",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "27ac1d86-2dab-489c-b91f-791ca605ed4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 737,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "de2c4b0e-49d4-41c1-bf87-a20772395c01",
        "cursor": {
          "ref": "87363117-d800-41c5-931d-a165fea5476e",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b45d1f35-fb72-4aec-bca3-1d0fb6330c20"
        },
        "item": {
          "id": "de2c4b0e-49d4-41c1-bf87-a20772395c01",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "85109a59-03e8-4104-8c16-836d4f99ed71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b30b50bc-dd79-43f9-88dc-c5951ed5069d",
        "cursor": {
          "ref": "a9f5cc02-2bf6-4844-82a3-b47d0c12cb1a",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3acc1a5c-249c-4206-a551-0ec92c37fd57"
        },
        "item": {
          "id": "b30b50bc-dd79-43f9-88dc-c5951ed5069d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "14a8fca8-ff04-4810-bcd2-94929620dc1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 788,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2f30cdb4-cbff-4f7b-96d5-280da55e18e2",
        "cursor": {
          "ref": "39d2b74b-9b4d-48d3-847c-c434286bf2df",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "30bc96ee-4a3a-464c-ab58-758b3394b527"
        },
        "item": {
          "id": "2f30cdb4-cbff-4f7b-96d5-280da55e18e2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e9274081-eab4-4f33-8abb-35a6848756e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "82a57dde-0eca-4d1d-82cf-27f287233c9b",
        "cursor": {
          "ref": "20ab5fa6-5745-48f2-b2a2-b41b41780336",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "220fe1ee-fa44-49b7-b077-8acd6f45368b"
        },
        "item": {
          "id": "82a57dde-0eca-4d1d-82cf-27f287233c9b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bee9287a-24ea-46db-9325-d40824f2b8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4ebf3c-6088-499f-95c4-5f8c1e65d5fa",
        "cursor": {
          "ref": "ff3ef107-9a4a-4bc0-ae7a-6e18aca9a160",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6dc87815-f3f6-401e-9447-b43a86b31861"
        },
        "item": {
          "id": "da4ebf3c-6088-499f-95c4-5f8c1e65d5fa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ee9846b9-46ae-4d75-bf38-09aa04d58d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17633fcd-d1c8-4b10-8d7e-b9b9b5801c72",
        "cursor": {
          "ref": "8fc07d52-dbda-496b-a161-4f138eda34b7",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "18a948b5-cef9-40e9-b358-b8b0e85f90d9"
        },
        "item": {
          "id": "17633fcd-d1c8-4b10-8d7e-b9b9b5801c72",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c6e38ee8-49e8-4945-ae53-00e6a1259b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41421c6-bfdd-4bb5-be2a-891266fd7b2a",
        "cursor": {
          "ref": "6c197c44-f62a-45e4-84e0-1ea2272ce3b5",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "90d64ce8-c055-4e6c-b113-1d27fdf636df"
        },
        "item": {
          "id": "f41421c6-bfdd-4bb5-be2a-891266fd7b2a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ccb490cb-0542-4f1a-aabd-504d51548ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93678d8f-d90f-4bac-afa8-f012d6b08bd6",
        "cursor": {
          "ref": "55bf9a97-7363-4209-95a0-b46d3f83d21e",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "accdea2a-4383-4527-9309-02cb591b03fa"
        },
        "item": {
          "id": "93678d8f-d90f-4bac-afa8-f012d6b08bd6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "425563b0-549d-49a7-b72e-9f5f57dd6d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c499fd-b29f-4fa1-97ab-d8f38c81fa8f",
        "cursor": {
          "ref": "fcde5770-e51b-4fdd-870d-9a505f67c530",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1b1c0285-f8a7-4535-a51a-e6ba90669d60"
        },
        "item": {
          "id": "18c499fd-b29f-4fa1-97ab-d8f38c81fa8f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5dad6090-7f7e-4114-9a68-42fd34161894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156f754a-c416-421a-bf96-10f613a58cdb",
        "cursor": {
          "ref": "d2d933d7-1f7e-40e2-8006-49ac226c8db9",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "aa54c731-1e80-482b-b1d1-ec870b9a4cb5"
        },
        "item": {
          "id": "156f754a-c416-421a-bf96-10f613a58cdb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "75c84458-3607-4023-b8d6-95e32a2baa8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139688d1-7207-46d8-89b4-b58214f7980f",
        "cursor": {
          "ref": "a09150a7-47c1-44c9-b415-7a9b2a4582ab",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1cb25c77-9111-49d2-8274-1bba4aeb842b"
        },
        "item": {
          "id": "139688d1-7207-46d8-89b4-b58214f7980f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5fd99ada-0dc0-4bbc-8a51-ab477d10e463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cbc01e-9153-45aa-b7ee-200170d15f2d",
        "cursor": {
          "ref": "740f99fa-39d7-4841-a3f8-f1b2c4abe516",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e2a6787f-67c8-424f-88c7-00e69834f30e"
        },
        "item": {
          "id": "51cbc01e-9153-45aa-b7ee-200170d15f2d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "96722a30-0ad5-4db0-b196-6b50e4df25aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad570434-af7a-41da-945a-ea5fb4b865f1",
        "cursor": {
          "ref": "ddcac89a-7559-4157-b660-d49f41a0beab",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d21bb2e7-42fd-4f2d-800f-3a7231215d80"
        },
        "item": {
          "id": "ad570434-af7a-41da-945a-ea5fb4b865f1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "da5eee9e-6757-4da4-9606-4a029279b200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3832c3-b822-47ad-819c-3e59df4193e9",
        "cursor": {
          "ref": "21563345-7206-4657-8f52-1056a88146a4",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c0c1aa42-ec88-4d07-9086-43eafcc69e4f"
        },
        "item": {
          "id": "ef3832c3-b822-47ad-819c-3e59df4193e9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0a590837-08c7-42c4-8c8d-5744de5b97cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1be9d67-764e-4b24-abeb-1e717079cf41",
        "cursor": {
          "ref": "0853c99f-a9af-4c79-98e7-2927db741e49",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2010fa26-8db1-464b-8c0c-050b947166f5"
        },
        "item": {
          "id": "b1be9d67-764e-4b24-abeb-1e717079cf41",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f33f4d72-f940-45d4-ae68-f24a79e59787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a634fa9-0e1a-419b-96e2-fc810e2123b9",
        "cursor": {
          "ref": "03175c4e-c499-4d69-b027-ca260c17e34b",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "88f645ca-853f-4d35-91db-e21984030dcc"
        },
        "item": {
          "id": "8a634fa9-0e1a-419b-96e2-fc810e2123b9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "84aa6837-0fb8-41a1-9638-00d4d8fca018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a661c88-7f8b-46a9-b287-5f8bd8b0f048",
        "cursor": {
          "ref": "0dc62cc8-7adb-45f3-83a3-5a9e4894ea81",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4be0de12-d8dc-4a0d-accf-a830fc705a58"
        },
        "item": {
          "id": "6a661c88-7f8b-46a9-b287-5f8bd8b0f048",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "22a42e23-e1b7-49af-af6a-145eceeb8c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d41b8d3-18b3-4e0f-aed9-d66c1d11ec72",
        "cursor": {
          "ref": "904659f2-9763-460c-b52a-e1f35dfafbd4",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8eeed1df-7d83-4a94-9127-e086a9799b1f"
        },
        "item": {
          "id": "8d41b8d3-18b3-4e0f-aed9-d66c1d11ec72",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7da04f1f-9de2-4c08-ab1e-baee30991ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60513bc8-afe1-48b6-a1b0-7b7cf14c527b",
        "cursor": {
          "ref": "3bb5fb20-935c-4b2f-b85f-f4154387287a",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "193fd977-2321-40ae-ba70-bc200ae98d07"
        },
        "item": {
          "id": "60513bc8-afe1-48b6-a1b0-7b7cf14c527b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "47ecdfd3-765e-41fa-b518-f09f6836d7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0342de95-d2d9-41d9-a8ce-555b1307d94e",
        "cursor": {
          "ref": "60a12133-d943-442e-b92b-64f9a17e8e79",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "77da43fc-8af0-425c-9be7-97b3e3b6786b"
        },
        "item": {
          "id": "0342de95-d2d9-41d9-a8ce-555b1307d94e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "291c0ef6-7d21-40d4-b1db-6f491cb14198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe253dbf-9a1d-4c58-8d31-50091c195029",
        "cursor": {
          "ref": "c67f14e6-4dc7-4bd1-9f93-15442fc0dec9",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "30e3fcf1-1ccf-4665-9075-3b4da2a23933"
        },
        "item": {
          "id": "fe253dbf-9a1d-4c58-8d31-50091c195029",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c133368c-e54b-480c-824a-7f19d98b6963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fe8ba4-6a30-45d5-8d80-5c75f751a8df",
        "cursor": {
          "ref": "1053c448-98ab-4d51-814a-646039ee6b3d",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ce523a7e-d02f-46a8-93d1-b4b226128854"
        },
        "item": {
          "id": "89fe8ba4-6a30-45d5-8d80-5c75f751a8df",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6ec794e3-fd9e-4c50-a2fa-3158386279e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b004a622-3bc7-49e9-bd45-4278f433edb0",
        "cursor": {
          "ref": "555b78a7-f612-4717-b040-2656bc1c0cfe",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "489f7521-98b5-45ec-ba53-b5cf41165032"
        },
        "item": {
          "id": "b004a622-3bc7-49e9-bd45-4278f433edb0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c47be1d3-7e53-4db1-bb35-99bdfda40206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915fae62-d5a2-413e-b1f9-8ed1fe63587e",
        "cursor": {
          "ref": "ac6cbb27-298e-4db3-a93f-7785e8a90bb1",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d8459214-eb11-4ebc-8d7d-1de888c95789"
        },
        "item": {
          "id": "915fae62-d5a2-413e-b1f9-8ed1fe63587e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d0edce16-5cb7-4b45-ab66-8df3b6e1adf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd28c252-95b2-4e8f-aa22-23b50785da25",
        "cursor": {
          "ref": "0a7195e1-63d9-4ac0-bf9e-58ac5a95f10e",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "bb82f201-cd98-435b-a622-aeeae52813e3"
        },
        "item": {
          "id": "cd28c252-95b2-4e8f-aa22-23b50785da25",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "54163153-59eb-4221-9b7d-5918fd7715ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5695be7-f182-4d16-9648-b1a90b513127",
        "cursor": {
          "ref": "3eea3f7f-7375-4891-88cc-e72cbabe8483",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9f3750b0-16c5-43ab-b020-c3d35ca5383e"
        },
        "item": {
          "id": "c5695be7-f182-4d16-9648-b1a90b513127",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a3d386f3-09b0-4cc1-9b7c-482024e8c356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16adfab6-880a-4227-94d8-767bdc390c0d",
        "cursor": {
          "ref": "3c2987b9-2f31-40c4-8dd9-b9f01e4ed987",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8accb315-d53e-4303-b310-72d3ecc9701c"
        },
        "item": {
          "id": "16adfab6-880a-4227-94d8-767bdc390c0d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1094e0bd-84de-482c-918f-8bccc7d4050d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16de8df9-4fa3-46a4-8738-4ab4370c6ebf",
        "cursor": {
          "ref": "32914610-adc9-49af-8b3d-241f52ae58ad",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f870081d-773b-454e-a531-a3148daeb479"
        },
        "item": {
          "id": "16de8df9-4fa3-46a4-8738-4ab4370c6ebf",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fe22e3e2-7bc4-45ce-b490-5fbdf402784d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a65022e-8019-4efc-ba07-c482c6e01488",
        "cursor": {
          "ref": "2b9789d3-add2-4e53-aa33-fa1c8e9a1118",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "117786cf-f4d1-4cec-b3d9-b42bca19595b"
        },
        "item": {
          "id": "8a65022e-8019-4efc-ba07-c482c6e01488",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "30eae060-361e-4d39-a79b-c88f064c591c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355a1c46-aab7-46b7-82f9-c5457e773f4d",
        "cursor": {
          "ref": "47ec0dd7-c467-46fb-bd92-61fb648c7910",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e265972e-bb42-42dd-a167-28d1699057b7"
        },
        "item": {
          "id": "355a1c46-aab7-46b7-82f9-c5457e773f4d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2dee47c3-42d4-4f3e-8492-ff87bec65760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d7d47c-73ce-4087-b5e9-09cf95c62ef6",
        "cursor": {
          "ref": "e8b43ae6-da9b-4fda-bd43-9b1f6e03560d",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ffed1e9c-022e-4f64-9ebc-c12c5b81cb69"
        },
        "item": {
          "id": "30d7d47c-73ce-4087-b5e9-09cf95c62ef6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "eea68241-f3e9-40b3-b64a-3e4b8e6b86ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dd3f83-acff-4bd2-a10c-97d862ffc0bc",
        "cursor": {
          "ref": "5a40c96a-359b-4bf1-b15c-a6e174a065bc",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ccaa7ad2-9231-4d14-9dbe-1c982338136d"
        },
        "item": {
          "id": "44dd3f83-acff-4bd2-a10c-97d862ffc0bc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0e9174b0-cae1-497a-8216-c4a06a9ada33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05de191-b80c-44f6-8f69-de2423a448cd",
        "cursor": {
          "ref": "e1b89eeb-32bc-49ba-97f4-6b0da6cd3eb3",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e99ca842-2df8-4ade-8aad-694a544ef314"
        },
        "item": {
          "id": "f05de191-b80c-44f6-8f69-de2423a448cd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d932bd82-5e8b-4d61-a5b9-3917cdfb3ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b6c05d-03ac-4ce2-a9f7-b7c7b8fb6027",
        "cursor": {
          "ref": "f344b170-c96b-4478-b912-70ec27553bca",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6ab088a1-1ecc-444d-a7fb-192816518a20"
        },
        "item": {
          "id": "51b6c05d-03ac-4ce2-a9f7-b7c7b8fb6027",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "df0bc46a-85d1-42d4-83b4-37ada19b1240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b80055-b51c-47a5-8d4d-fce7aebd1ea6",
        "cursor": {
          "ref": "327ee6ce-90db-4b69-8450-4544146190fe",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5ac28d53-ff26-4e0f-b7b1-90ebb51e023b"
        },
        "item": {
          "id": "b9b80055-b51c-47a5-8d4d-fce7aebd1ea6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "81bf0a6d-1bed-4f4a-bed8-a10ff87a50da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996c94a7-8510-424e-9f4e-970d4230e0f3",
        "cursor": {
          "ref": "4c179fbf-cc53-4969-a474-d5c345305eed",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "00c5635d-051b-4e61-a9d1-1b868af0c97d"
        },
        "item": {
          "id": "996c94a7-8510-424e-9f4e-970d4230e0f3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "19ec53e5-f80a-4277-87b7-d3afdc097fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ab87f5-8880-4d40-b838-8a321cb7db66",
        "cursor": {
          "ref": "d534f8de-b4a4-43aa-9894-7303d051bf1b",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e8728d44-5468-405f-b289-467dfa8ef5b4"
        },
        "item": {
          "id": "29ab87f5-8880-4d40-b838-8a321cb7db66",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "16e25421-0e74-4d05-a657-2da4e62aff2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b18870-3dde-4de4-b607-fb223e0d9f43",
        "cursor": {
          "ref": "d2543c6b-6787-4e9f-97e5-97b5e1ccc898",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ebe74b4a-62f8-495d-adab-0488d93a5f2b"
        },
        "item": {
          "id": "e8b18870-3dde-4de4-b607-fb223e0d9f43",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "51a6cfc5-9d80-42fd-8187-0de0cdb4dd26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b88b73-9777-4b61-a688-bb3df9b9896d",
        "cursor": {
          "ref": "da844094-4d00-489a-8ee0-9405c08bc0ff",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "091a420d-426b-411f-a5fa-9389791ea2b5"
        },
        "item": {
          "id": "49b88b73-9777-4b61-a688-bb3df9b9896d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2d523cfe-33bc-44f6-9825-1f6cd1aed609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d475e2be-c7ea-49e8-baf3-f83234253888",
        "cursor": {
          "ref": "16df8064-43dd-494c-90f5-8a794566ac1b",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2c765c4e-8b69-454f-9299-3ed2e1de5151"
        },
        "item": {
          "id": "d475e2be-c7ea-49e8-baf3-f83234253888",
          "name": "credentials_verify"
        },
        "response": {
          "id": "142d3e24-ceb0-43d4-8efd-8872eaff1772",
          "status": "OK",
          "code": 200,
          "responseTime": 737,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35311da-5221-4205-9182-664d4bb8075c",
        "cursor": {
          "ref": "311a8541-8a28-4df1-9090-87a8a92055f7",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "36bc9311-6a36-4845-bf62-60b402b0d175"
        },
        "item": {
          "id": "c35311da-5221-4205-9182-664d4bb8075c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d0f7cfd3-a19e-4846-b3f8-7bfd95f5d02b",
          "status": "OK",
          "code": 200,
          "responseTime": 772,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "75247b60-30fd-454b-93b1-4c30ca2b79ff",
        "cursor": {
          "ref": "0224153c-c0df-4ca7-b8bd-c41f88797d18",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c4627ac0-3296-4f85-b209-2160f0a5798a"
        },
        "item": {
          "id": "75247b60-30fd-454b-93b1-4c30ca2b79ff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6e04c89-89c4-47ec-8a0b-ea25fd98fdfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75247b60-30fd-454b-93b1-4c30ca2b79ff",
        "cursor": {
          "ref": "0224153c-c0df-4ca7-b8bd-c41f88797d18",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c4627ac0-3296-4f85-b209-2160f0a5798a"
        },
        "item": {
          "id": "75247b60-30fd-454b-93b1-4c30ca2b79ff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6e04c89-89c4-47ec-8a0b-ea25fd98fdfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aec1549-8110-41bc-a4b2-f40e600c6ff9",
        "cursor": {
          "ref": "c85fe41e-8185-411e-8846-9a13a804a8f7",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0c9876f1-0e3a-47b4-b818-2a245edf84ff"
        },
        "item": {
          "id": "4aec1549-8110-41bc-a4b2-f40e600c6ff9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8a97be32-f6bf-4c4e-afdb-b07966e98d06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e3facc-a99b-4ebe-a22c-cedceef10d2d",
        "cursor": {
          "ref": "9e7ad84a-47ff-486b-b77e-5fcdcdc64346",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "51978eae-e054-4a5d-a9be-355acff31094"
        },
        "item": {
          "id": "11e3facc-a99b-4ebe-a22c-cedceef10d2d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6dbee896-099a-40bf-bedd-b806ff8fa465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}